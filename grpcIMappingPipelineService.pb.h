// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMappingPipelineService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIMappingPipelineService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIMappingPipelineService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIMappingPipelineService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIMappingPipelineService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMappingPipelineService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(int index);
namespace grpcIMappingPipeline {
class getDataForVisualizationRequest;
struct getDataForVisualizationRequestDefaultTypeInternal;
extern getDataForVisualizationRequestDefaultTypeInternal _getDataForVisualizationRequest_default_instance_;
class getDataForVisualizationResponse;
struct getDataForVisualizationResponseDefaultTypeInternal;
extern getDataForVisualizationResponseDefaultTypeInternal _getDataForVisualizationResponse_default_instance_;
class initRequest;
struct initRequestDefaultTypeInternal;
extern initRequestDefaultTypeInternal _initRequest_default_instance_;
class initResponse;
struct initResponseDefaultTypeInternal;
extern initResponseDefaultTypeInternal _initResponse_default_instance_;
class mappingProcessRequest_grpc0Request;
struct mappingProcessRequest_grpc0RequestDefaultTypeInternal;
extern mappingProcessRequest_grpc0RequestDefaultTypeInternal _mappingProcessRequest_grpc0Request_default_instance_;
class mappingProcessRequest_grpc0Response;
struct mappingProcessRequest_grpc0ResponseDefaultTypeInternal;
extern mappingProcessRequest_grpc0ResponseDefaultTypeInternal _mappingProcessRequest_grpc0Response_default_instance_;
class mappingProcessRequest_grpc1Request;
struct mappingProcessRequest_grpc1RequestDefaultTypeInternal;
extern mappingProcessRequest_grpc1RequestDefaultTypeInternal _mappingProcessRequest_grpc1Request_default_instance_;
class mappingProcessRequest_grpc1Response;
struct mappingProcessRequest_grpc1ResponseDefaultTypeInternal;
extern mappingProcessRequest_grpc1ResponseDefaultTypeInternal _mappingProcessRequest_grpc1Response_default_instance_;
class mappingProcessRequest_grpc2Request;
struct mappingProcessRequest_grpc2RequestDefaultTypeInternal;
extern mappingProcessRequest_grpc2RequestDefaultTypeInternal _mappingProcessRequest_grpc2Request_default_instance_;
class mappingProcessRequest_grpc2Response;
struct mappingProcessRequest_grpc2ResponseDefaultTypeInternal;
extern mappingProcessRequest_grpc2ResponseDefaultTypeInternal _mappingProcessRequest_grpc2Response_default_instance_;
class setCameraParametersRequest;
struct setCameraParametersRequestDefaultTypeInternal;
extern setCameraParametersRequestDefaultTypeInternal _setCameraParametersRequest_default_instance_;
class setCameraParametersResponse;
struct setCameraParametersResponseDefaultTypeInternal;
extern setCameraParametersResponseDefaultTypeInternal _setCameraParametersResponse_default_instance_;
class setRectificationParametersRequest;
struct setRectificationParametersRequestDefaultTypeInternal;
extern setRectificationParametersRequestDefaultTypeInternal _setRectificationParametersRequest_default_instance_;
class setRectificationParametersResponse;
struct setRectificationParametersResponseDefaultTypeInternal;
extern setRectificationParametersResponseDefaultTypeInternal _setRectificationParametersResponse_default_instance_;
class startRequest;
struct startRequestDefaultTypeInternal;
extern startRequestDefaultTypeInternal _startRequest_default_instance_;
class startResponse;
struct startResponseDefaultTypeInternal;
extern startResponseDefaultTypeInternal _startResponse_default_instance_;
class stopRequest;
struct stopRequestDefaultTypeInternal;
extern stopRequestDefaultTypeInternal _stopRequest_default_instance_;
class stopResponse;
struct stopResponseDefaultTypeInternal;
extern stopResponseDefaultTypeInternal _stopResponse_default_instance_;
}  // namespace grpcIMappingPipeline
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIMappingPipeline::getDataForVisualizationRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::getDataForVisualizationRequest>(Arena*);
template<> ::grpcIMappingPipeline::getDataForVisualizationResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::getDataForVisualizationResponse>(Arena*);
template<> ::grpcIMappingPipeline::initRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::initRequest>(Arena*);
template<> ::grpcIMappingPipeline::initResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::initResponse>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc0Request>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc0Response>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc1Request>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc1Response>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc2Request>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc2Response>(Arena*);
template<> ::grpcIMappingPipeline::setCameraParametersRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::setCameraParametersRequest>(Arena*);
template<> ::grpcIMappingPipeline::setCameraParametersResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::setCameraParametersResponse>(Arena*);
template<> ::grpcIMappingPipeline::setRectificationParametersRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::setRectificationParametersRequest>(Arena*);
template<> ::grpcIMappingPipeline::setRectificationParametersResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::setRectificationParametersResponse>(Arena*);
template<> ::grpcIMappingPipeline::startRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::startRequest>(Arena*);
template<> ::grpcIMappingPipeline::startResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::startResponse>(Arena*);
template<> ::grpcIMappingPipeline::stopRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::stopRequest>(Arena*);
template<> ::grpcIMappingPipeline::stopResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::stopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIMappingPipeline {

// ===================================================================

class initRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.initRequest) */ {
 public:
  inline initRequest() : initRequest(nullptr) {}
  virtual ~initRequest();
  explicit constexpr initRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  initRequest(const initRequest& from);
  initRequest(initRequest&& from) noexcept
    : initRequest() {
    *this = ::std::move(from);
  }

  inline initRequest& operator=(const initRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline initRequest& operator=(initRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const initRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const initRequest* internal_default_instance() {
    return reinterpret_cast<const initRequest*>(
               &_initRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(initRequest& a, initRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(initRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(initRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline initRequest* New() const final {
    return CreateMaybeMessage<initRequest>(nullptr);
  }

  initRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<initRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const initRequest& from);
  void MergeFrom(const initRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(initRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.initRequest";
  }
  protected:
  explicit initRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.initRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class initResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.initResponse) */ {
 public:
  inline initResponse() : initResponse(nullptr) {}
  virtual ~initResponse();
  explicit constexpr initResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  initResponse(const initResponse& from);
  initResponse(initResponse&& from) noexcept
    : initResponse() {
    *this = ::std::move(from);
  }

  inline initResponse& operator=(const initResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline initResponse& operator=(initResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const initResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const initResponse* internal_default_instance() {
    return reinterpret_cast<const initResponse*>(
               &_initResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(initResponse& a, initResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(initResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(initResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline initResponse* New() const final {
    return CreateMaybeMessage<initResponse>(nullptr);
  }

  initResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<initResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const initResponse& from);
  void MergeFrom(const initResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(initResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.initResponse";
  }
  protected:
  explicit initResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.initResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class startRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.startRequest) */ {
 public:
  inline startRequest() : startRequest(nullptr) {}
  virtual ~startRequest();
  explicit constexpr startRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startRequest(const startRequest& from);
  startRequest(startRequest&& from) noexcept
    : startRequest() {
    *this = ::std::move(from);
  }

  inline startRequest& operator=(const startRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline startRequest& operator=(startRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const startRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const startRequest* internal_default_instance() {
    return reinterpret_cast<const startRequest*>(
               &_startRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(startRequest& a, startRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(startRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline startRequest* New() const final {
    return CreateMaybeMessage<startRequest>(nullptr);
  }

  startRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<startRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const startRequest& from);
  void MergeFrom(const startRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.startRequest";
  }
  protected:
  explicit startRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.startRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class startResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.startResponse) */ {
 public:
  inline startResponse() : startResponse(nullptr) {}
  virtual ~startResponse();
  explicit constexpr startResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startResponse(const startResponse& from);
  startResponse(startResponse&& from) noexcept
    : startResponse() {
    *this = ::std::move(from);
  }

  inline startResponse& operator=(const startResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline startResponse& operator=(startResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const startResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const startResponse* internal_default_instance() {
    return reinterpret_cast<const startResponse*>(
               &_startResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(startResponse& a, startResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(startResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline startResponse* New() const final {
    return CreateMaybeMessage<startResponse>(nullptr);
  }

  startResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<startResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const startResponse& from);
  void MergeFrom(const startResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.startResponse";
  }
  protected:
  explicit startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.startResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class stopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.stopRequest) */ {
 public:
  inline stopRequest() : stopRequest(nullptr) {}
  virtual ~stopRequest();
  explicit constexpr stopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopRequest(const stopRequest& from);
  stopRequest(stopRequest&& from) noexcept
    : stopRequest() {
    *this = ::std::move(from);
  }

  inline stopRequest& operator=(const stopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopRequest& operator=(stopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const stopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopRequest* internal_default_instance() {
    return reinterpret_cast<const stopRequest*>(
               &_stopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(stopRequest& a, stopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(stopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stopRequest* New() const final {
    return CreateMaybeMessage<stopRequest>(nullptr);
  }

  stopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const stopRequest& from);
  void MergeFrom(const stopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.stopRequest";
  }
  protected:
  explicit stopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.stopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class stopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.stopResponse) */ {
 public:
  inline stopResponse() : stopResponse(nullptr) {}
  virtual ~stopResponse();
  explicit constexpr stopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopResponse(const stopResponse& from);
  stopResponse(stopResponse&& from) noexcept
    : stopResponse() {
    *this = ::std::move(from);
  }

  inline stopResponse& operator=(const stopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopResponse& operator=(stopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const stopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopResponse* internal_default_instance() {
    return reinterpret_cast<const stopResponse*>(
               &_stopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(stopResponse& a, stopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(stopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stopResponse* New() const final {
    return CreateMaybeMessage<stopResponse>(nullptr);
  }

  stopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const stopResponse& from);
  void MergeFrom(const stopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.stopResponse";
  }
  protected:
  explicit stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.stopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.setCameraParametersRequest) */ {
 public:
  inline setCameraParametersRequest() : setCameraParametersRequest(nullptr) {}
  virtual ~setCameraParametersRequest();
  explicit constexpr setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParametersRequest(const setCameraParametersRequest& from);
  setCameraParametersRequest(setCameraParametersRequest&& from) noexcept
    : setCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline setCameraParametersRequest& operator=(const setCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParametersRequest& operator=(setCameraParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setCameraParametersRequest*>(
               &_setCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(setCameraParametersRequest& a, setCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setCameraParametersRequest* New() const final {
    return CreateMaybeMessage<setCameraParametersRequest>(nullptr);
  }

  setCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setCameraParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setCameraParametersRequest& from);
  void MergeFrom(const setCameraParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.setCameraParametersRequest";
  }
  protected:
  explicit setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParamsFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes cameraParams = 2;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  void set_cameraparams(const std::string& value);
  void set_cameraparams(std::string&& value);
  void set_cameraparams(const char* value);
  void set_cameraparams(const void* value, size_t size);
  std::string* mutable_cameraparams();
  std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.setCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.setCameraParametersResponse) */ {
 public:
  inline setCameraParametersResponse() : setCameraParametersResponse(nullptr) {}
  virtual ~setCameraParametersResponse();
  explicit constexpr setCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParametersResponse(const setCameraParametersResponse& from);
  setCameraParametersResponse(setCameraParametersResponse&& from) noexcept
    : setCameraParametersResponse() {
    *this = ::std::move(from);
  }

  inline setCameraParametersResponse& operator=(const setCameraParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParametersResponse& operator=(setCameraParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setCameraParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setCameraParametersResponse*>(
               &_setCameraParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(setCameraParametersResponse& a, setCameraParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setCameraParametersResponse* New() const final {
    return CreateMaybeMessage<setCameraParametersResponse>(nullptr);
  }

  setCameraParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setCameraParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setCameraParametersResponse& from);
  void MergeFrom(const setCameraParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.setCameraParametersResponse";
  }
  protected:
  explicit setCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.setCameraParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class setRectificationParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.setRectificationParametersRequest) */ {
 public:
  inline setRectificationParametersRequest() : setRectificationParametersRequest(nullptr) {}
  virtual ~setRectificationParametersRequest();
  explicit constexpr setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setRectificationParametersRequest(const setRectificationParametersRequest& from);
  setRectificationParametersRequest(setRectificationParametersRequest&& from) noexcept
    : setRectificationParametersRequest() {
    *this = ::std::move(from);
  }

  inline setRectificationParametersRequest& operator=(const setRectificationParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setRectificationParametersRequest& operator=(setRectificationParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setRectificationParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setRectificationParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setRectificationParametersRequest*>(
               &_setRectificationParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(setRectificationParametersRequest& a, setRectificationParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setRectificationParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setRectificationParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setRectificationParametersRequest* New() const final {
    return CreateMaybeMessage<setRectificationParametersRequest>(nullptr);
  }

  setRectificationParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setRectificationParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setRectificationParametersRequest& from);
  void MergeFrom(const setRectificationParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setRectificationParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.setRectificationParametersRequest";
  }
  protected:
  explicit setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectCam1FieldNumber = 2,
    kRectCam2FieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes rectCam1 = 2;
  void clear_rectcam1();
  const std::string& rectcam1() const;
  void set_rectcam1(const std::string& value);
  void set_rectcam1(std::string&& value);
  void set_rectcam1(const char* value);
  void set_rectcam1(const void* value, size_t size);
  std::string* mutable_rectcam1();
  std::string* release_rectcam1();
  void set_allocated_rectcam1(std::string* rectcam1);
  private:
  const std::string& _internal_rectcam1() const;
  void _internal_set_rectcam1(const std::string& value);
  std::string* _internal_mutable_rectcam1();
  public:

  // bytes rectCam2 = 3;
  void clear_rectcam2();
  const std::string& rectcam2() const;
  void set_rectcam2(const std::string& value);
  void set_rectcam2(std::string&& value);
  void set_rectcam2(const char* value);
  void set_rectcam2(const void* value, size_t size);
  std::string* mutable_rectcam2();
  std::string* release_rectcam2();
  void set_allocated_rectcam2(std::string* rectcam2);
  private:
  const std::string& _internal_rectcam2() const;
  void _internal_set_rectcam2(const std::string& value);
  std::string* _internal_mutable_rectcam2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.setRectificationParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectcam1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectcam2_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class setRectificationParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.setRectificationParametersResponse) */ {
 public:
  inline setRectificationParametersResponse() : setRectificationParametersResponse(nullptr) {}
  virtual ~setRectificationParametersResponse();
  explicit constexpr setRectificationParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setRectificationParametersResponse(const setRectificationParametersResponse& from);
  setRectificationParametersResponse(setRectificationParametersResponse&& from) noexcept
    : setRectificationParametersResponse() {
    *this = ::std::move(from);
  }

  inline setRectificationParametersResponse& operator=(const setRectificationParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setRectificationParametersResponse& operator=(setRectificationParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setRectificationParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setRectificationParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setRectificationParametersResponse*>(
               &_setRectificationParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(setRectificationParametersResponse& a, setRectificationParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setRectificationParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setRectificationParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setRectificationParametersResponse* New() const final {
    return CreateMaybeMessage<setRectificationParametersResponse>(nullptr);
  }

  setRectificationParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setRectificationParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setRectificationParametersResponse& from);
  void MergeFrom(const setRectificationParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setRectificationParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.setRectificationParametersResponse";
  }
  protected:
  explicit setRectificationParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.setRectificationParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc0Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc0Request) */ {
 public:
  inline mappingProcessRequest_grpc0Request() : mappingProcessRequest_grpc0Request(nullptr) {}
  virtual ~mappingProcessRequest_grpc0Request();
  explicit constexpr mappingProcessRequest_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc0Request(const mappingProcessRequest_grpc0Request& from);
  mappingProcessRequest_grpc0Request(mappingProcessRequest_grpc0Request&& from) noexcept
    : mappingProcessRequest_grpc0Request() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc0Request& operator=(const mappingProcessRequest_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc0Request& operator=(mappingProcessRequest_grpc0Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mappingProcessRequest_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc0Request*>(
               &_mappingProcessRequest_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(mappingProcessRequest_grpc0Request& a, mappingProcessRequest_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc0Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mappingProcessRequest_grpc0Request* New() const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc0Request>(nullptr);
  }

  mappingProcessRequest_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc0Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mappingProcessRequest_grpc0Request& from);
  void MergeFrom(const mappingProcessRequest_grpc0Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc0Request";
  }
  protected:
  explicit mappingProcessRequest_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kPosesFieldNumber = 3,
    kTransformFieldNumber = 4,
    kUpdatedTransformFieldNumber = 5,
    kStatusFieldNumber = 6,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes images = 2;
  void clear_images();
  const std::string& images() const;
  void set_images(const std::string& value);
  void set_images(std::string&& value);
  void set_images(const char* value);
  void set_images(const void* value, size_t size);
  std::string* mutable_images();
  std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes poses = 3;
  void clear_poses();
  const std::string& poses() const;
  void set_poses(const std::string& value);
  void set_poses(std::string&& value);
  void set_poses(const char* value);
  void set_poses(const void* value, size_t size);
  std::string* mutable_poses();
  std::string* release_poses();
  void set_allocated_poses(std::string* poses);
  private:
  const std::string& _internal_poses() const;
  void _internal_set_poses(const std::string& value);
  std::string* _internal_mutable_poses();
  public:

  // bytes transform = 4;
  void clear_transform();
  const std::string& transform() const;
  void set_transform(const std::string& value);
  void set_transform(std::string&& value);
  void set_transform(const char* value);
  void set_transform(const void* value, size_t size);
  std::string* mutable_transform();
  std::string* release_transform();
  void set_allocated_transform(std::string* transform);
  private:
  const std::string& _internal_transform() const;
  void _internal_set_transform(const std::string& value);
  std::string* _internal_mutable_transform();
  public:

  // bytes updatedTransform = 5;
  void clear_updatedtransform();
  const std::string& updatedtransform() const;
  void set_updatedtransform(const std::string& value);
  void set_updatedtransform(std::string&& value);
  void set_updatedtransform(const char* value);
  void set_updatedtransform(const void* value, size_t size);
  std::string* mutable_updatedtransform();
  std::string* release_updatedtransform();
  void set_allocated_updatedtransform(std::string* updatedtransform);
  private:
  const std::string& _internal_updatedtransform() const;
  void _internal_set_updatedtransform(const std::string& value);
  std::string* _internal_mutable_updatedtransform();
  public:

  // bytes status = 6;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedtransform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc0Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc0Response) */ {
 public:
  inline mappingProcessRequest_grpc0Response() : mappingProcessRequest_grpc0Response(nullptr) {}
  virtual ~mappingProcessRequest_grpc0Response();
  explicit constexpr mappingProcessRequest_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc0Response(const mappingProcessRequest_grpc0Response& from);
  mappingProcessRequest_grpc0Response(mappingProcessRequest_grpc0Response&& from) noexcept
    : mappingProcessRequest_grpc0Response() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc0Response& operator=(const mappingProcessRequest_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc0Response& operator=(mappingProcessRequest_grpc0Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mappingProcessRequest_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc0Response*>(
               &_mappingProcessRequest_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(mappingProcessRequest_grpc0Response& a, mappingProcessRequest_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc0Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mappingProcessRequest_grpc0Response* New() const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc0Response>(nullptr);
  }

  mappingProcessRequest_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc0Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mappingProcessRequest_grpc0Response& from);
  void MergeFrom(const mappingProcessRequest_grpc0Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc0Response";
  }
  protected:
  explicit mappingProcessRequest_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedTransformFieldNumber = 1,
    kStatusFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes updatedTransform = 1;
  void clear_updatedtransform();
  const std::string& updatedtransform() const;
  void set_updatedtransform(const std::string& value);
  void set_updatedtransform(std::string&& value);
  void set_updatedtransform(const char* value);
  void set_updatedtransform(const void* value, size_t size);
  std::string* mutable_updatedtransform();
  std::string* release_updatedtransform();
  void set_allocated_updatedtransform(std::string* updatedtransform);
  private:
  const std::string& _internal_updatedtransform() const;
  void _internal_set_updatedtransform(const std::string& value);
  std::string* _internal_mutable_updatedtransform();
  public:

  // bytes status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedtransform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc1Request) */ {
 public:
  inline mappingProcessRequest_grpc1Request() : mappingProcessRequest_grpc1Request(nullptr) {}
  virtual ~mappingProcessRequest_grpc1Request();
  explicit constexpr mappingProcessRequest_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc1Request(const mappingProcessRequest_grpc1Request& from);
  mappingProcessRequest_grpc1Request(mappingProcessRequest_grpc1Request&& from) noexcept
    : mappingProcessRequest_grpc1Request() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc1Request& operator=(const mappingProcessRequest_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc1Request& operator=(mappingProcessRequest_grpc1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mappingProcessRequest_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc1Request*>(
               &_mappingProcessRequest_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(mappingProcessRequest_grpc1Request& a, mappingProcessRequest_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mappingProcessRequest_grpc1Request* New() const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc1Request>(nullptr);
  }

  mappingProcessRequest_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mappingProcessRequest_grpc1Request& from);
  void MergeFrom(const mappingProcessRequest_grpc1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc1Request";
  }
  protected:
  explicit mappingProcessRequest_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kPosesFieldNumber = 3,
    kStatusFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes images = 2;
  void clear_images();
  const std::string& images() const;
  void set_images(const std::string& value);
  void set_images(std::string&& value);
  void set_images(const char* value);
  void set_images(const void* value, size_t size);
  std::string* mutable_images();
  std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes poses = 3;
  void clear_poses();
  const std::string& poses() const;
  void set_poses(const std::string& value);
  void set_poses(std::string&& value);
  void set_poses(const char* value);
  void set_poses(const void* value, size_t size);
  std::string* mutable_poses();
  std::string* release_poses();
  void set_allocated_poses(std::string* poses);
  private:
  const std::string& _internal_poses() const;
  void _internal_set_poses(const std::string& value);
  std::string* _internal_mutable_poses();
  public:

  // bytes status = 4;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc1Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc1Response) */ {
 public:
  inline mappingProcessRequest_grpc1Response() : mappingProcessRequest_grpc1Response(nullptr) {}
  virtual ~mappingProcessRequest_grpc1Response();
  explicit constexpr mappingProcessRequest_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc1Response(const mappingProcessRequest_grpc1Response& from);
  mappingProcessRequest_grpc1Response(mappingProcessRequest_grpc1Response&& from) noexcept
    : mappingProcessRequest_grpc1Response() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc1Response& operator=(const mappingProcessRequest_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc1Response& operator=(mappingProcessRequest_grpc1Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mappingProcessRequest_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc1Response*>(
               &_mappingProcessRequest_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(mappingProcessRequest_grpc1Response& a, mappingProcessRequest_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc1Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mappingProcessRequest_grpc1Response* New() const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc1Response>(nullptr);
  }

  mappingProcessRequest_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc1Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mappingProcessRequest_grpc1Response& from);
  void MergeFrom(const mappingProcessRequest_grpc1Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc1Response";
  }
  protected:
  explicit mappingProcessRequest_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc2Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc2Request) */ {
 public:
  inline mappingProcessRequest_grpc2Request() : mappingProcessRequest_grpc2Request(nullptr) {}
  virtual ~mappingProcessRequest_grpc2Request();
  explicit constexpr mappingProcessRequest_grpc2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc2Request(const mappingProcessRequest_grpc2Request& from);
  mappingProcessRequest_grpc2Request(mappingProcessRequest_grpc2Request&& from) noexcept
    : mappingProcessRequest_grpc2Request() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc2Request& operator=(const mappingProcessRequest_grpc2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc2Request& operator=(mappingProcessRequest_grpc2Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mappingProcessRequest_grpc2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc2Request* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc2Request*>(
               &_mappingProcessRequest_grpc2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(mappingProcessRequest_grpc2Request& a, mappingProcessRequest_grpc2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc2Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mappingProcessRequest_grpc2Request* New() const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc2Request>(nullptr);
  }

  mappingProcessRequest_grpc2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc2Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mappingProcessRequest_grpc2Request& from);
  void MergeFrom(const mappingProcessRequest_grpc2Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc2Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc2Request";
  }
  protected:
  explicit mappingProcessRequest_grpc2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kPosesFieldNumber = 3,
    kUpdatedTransformFieldNumber = 4,
    kStatusFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes images = 2;
  void clear_images();
  const std::string& images() const;
  void set_images(const std::string& value);
  void set_images(std::string&& value);
  void set_images(const char* value);
  void set_images(const void* value, size_t size);
  std::string* mutable_images();
  std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes poses = 3;
  void clear_poses();
  const std::string& poses() const;
  void set_poses(const std::string& value);
  void set_poses(std::string&& value);
  void set_poses(const char* value);
  void set_poses(const void* value, size_t size);
  std::string* mutable_poses();
  std::string* release_poses();
  void set_allocated_poses(std::string* poses);
  private:
  const std::string& _internal_poses() const;
  void _internal_set_poses(const std::string& value);
  std::string* _internal_mutable_poses();
  public:

  // bytes updatedTransform = 4;
  void clear_updatedtransform();
  const std::string& updatedtransform() const;
  void set_updatedtransform(const std::string& value);
  void set_updatedtransform(std::string&& value);
  void set_updatedtransform(const char* value);
  void set_updatedtransform(const void* value, size_t size);
  std::string* mutable_updatedtransform();
  std::string* release_updatedtransform();
  void set_allocated_updatedtransform(std::string* updatedtransform);
  private:
  const std::string& _internal_updatedtransform() const;
  void _internal_set_updatedtransform(const std::string& value);
  std::string* _internal_mutable_updatedtransform();
  public:

  // bytes status = 5;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedtransform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc2Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc2Response) */ {
 public:
  inline mappingProcessRequest_grpc2Response() : mappingProcessRequest_grpc2Response(nullptr) {}
  virtual ~mappingProcessRequest_grpc2Response();
  explicit constexpr mappingProcessRequest_grpc2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc2Response(const mappingProcessRequest_grpc2Response& from);
  mappingProcessRequest_grpc2Response(mappingProcessRequest_grpc2Response&& from) noexcept
    : mappingProcessRequest_grpc2Response() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc2Response& operator=(const mappingProcessRequest_grpc2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc2Response& operator=(mappingProcessRequest_grpc2Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mappingProcessRequest_grpc2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc2Response* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc2Response*>(
               &_mappingProcessRequest_grpc2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(mappingProcessRequest_grpc2Response& a, mappingProcessRequest_grpc2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc2Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mappingProcessRequest_grpc2Response* New() const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc2Response>(nullptr);
  }

  mappingProcessRequest_grpc2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc2Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mappingProcessRequest_grpc2Response& from);
  void MergeFrom(const mappingProcessRequest_grpc2Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc2Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc2Response";
  }
  protected:
  explicit mappingProcessRequest_grpc2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedTransformFieldNumber = 1,
    kStatusFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes updatedTransform = 1;
  void clear_updatedtransform();
  const std::string& updatedtransform() const;
  void set_updatedtransform(const std::string& value);
  void set_updatedtransform(std::string&& value);
  void set_updatedtransform(const char* value);
  void set_updatedtransform(const void* value, size_t size);
  std::string* mutable_updatedtransform();
  std::string* release_updatedtransform();
  void set_allocated_updatedtransform(std::string* updatedtransform);
  private:
  const std::string& _internal_updatedtransform() const;
  void _internal_set_updatedtransform(const std::string& value);
  std::string* _internal_mutable_updatedtransform();
  public:

  // bytes status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedtransform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class getDataForVisualizationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.getDataForVisualizationRequest) */ {
 public:
  inline getDataForVisualizationRequest() : getDataForVisualizationRequest(nullptr) {}
  virtual ~getDataForVisualizationRequest();
  explicit constexpr getDataForVisualizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDataForVisualizationRequest(const getDataForVisualizationRequest& from);
  getDataForVisualizationRequest(getDataForVisualizationRequest&& from) noexcept
    : getDataForVisualizationRequest() {
    *this = ::std::move(from);
  }

  inline getDataForVisualizationRequest& operator=(const getDataForVisualizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDataForVisualizationRequest& operator=(getDataForVisualizationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getDataForVisualizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDataForVisualizationRequest* internal_default_instance() {
    return reinterpret_cast<const getDataForVisualizationRequest*>(
               &_getDataForVisualizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(getDataForVisualizationRequest& a, getDataForVisualizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getDataForVisualizationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDataForVisualizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDataForVisualizationRequest* New() const final {
    return CreateMaybeMessage<getDataForVisualizationRequest>(nullptr);
  }

  getDataForVisualizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDataForVisualizationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getDataForVisualizationRequest& from);
  void MergeFrom(const getDataForVisualizationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDataForVisualizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.getDataForVisualizationRequest";
  }
  protected:
  explicit getDataForVisualizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputPointCloudsFieldNumber = 2,
    kKeyframePosesFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes outputPointClouds = 2;
  void clear_outputpointclouds();
  const std::string& outputpointclouds() const;
  void set_outputpointclouds(const std::string& value);
  void set_outputpointclouds(std::string&& value);
  void set_outputpointclouds(const char* value);
  void set_outputpointclouds(const void* value, size_t size);
  std::string* mutable_outputpointclouds();
  std::string* release_outputpointclouds();
  void set_allocated_outputpointclouds(std::string* outputpointclouds);
  private:
  const std::string& _internal_outputpointclouds() const;
  void _internal_set_outputpointclouds(const std::string& value);
  std::string* _internal_mutable_outputpointclouds();
  public:

  // bytes keyframePoses = 3;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  void set_keyframeposes(const std::string& value);
  void set_keyframeposes(std::string&& value);
  void set_keyframeposes(const char* value);
  void set_keyframeposes(const void* value, size_t size);
  std::string* mutable_keyframeposes();
  std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.getDataForVisualizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpointclouds_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class getDataForVisualizationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.getDataForVisualizationResponse) */ {
 public:
  inline getDataForVisualizationResponse() : getDataForVisualizationResponse(nullptr) {}
  virtual ~getDataForVisualizationResponse();
  explicit constexpr getDataForVisualizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDataForVisualizationResponse(const getDataForVisualizationResponse& from);
  getDataForVisualizationResponse(getDataForVisualizationResponse&& from) noexcept
    : getDataForVisualizationResponse() {
    *this = ::std::move(from);
  }

  inline getDataForVisualizationResponse& operator=(const getDataForVisualizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDataForVisualizationResponse& operator=(getDataForVisualizationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getDataForVisualizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDataForVisualizationResponse* internal_default_instance() {
    return reinterpret_cast<const getDataForVisualizationResponse*>(
               &_getDataForVisualizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(getDataForVisualizationResponse& a, getDataForVisualizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDataForVisualizationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDataForVisualizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDataForVisualizationResponse* New() const final {
    return CreateMaybeMessage<getDataForVisualizationResponse>(nullptr);
  }

  getDataForVisualizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDataForVisualizationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getDataForVisualizationResponse& from);
  void MergeFrom(const getDataForVisualizationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDataForVisualizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.getDataForVisualizationResponse";
  }
  protected:
  explicit getDataForVisualizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMappingPipelineService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputPointCloudsFieldNumber = 1,
    kKeyframePosesFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes outputPointClouds = 1;
  void clear_outputpointclouds();
  const std::string& outputpointclouds() const;
  void set_outputpointclouds(const std::string& value);
  void set_outputpointclouds(std::string&& value);
  void set_outputpointclouds(const char* value);
  void set_outputpointclouds(const void* value, size_t size);
  std::string* mutable_outputpointclouds();
  std::string* release_outputpointclouds();
  void set_allocated_outputpointclouds(std::string* outputpointclouds);
  private:
  const std::string& _internal_outputpointclouds() const;
  void _internal_set_outputpointclouds(const std::string& value);
  std::string* _internal_mutable_outputpointclouds();
  public:

  // bytes keyframePoses = 2;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  void set_keyframeposes(const std::string& value);
  void set_keyframeposes(std::string&& value);
  void set_keyframeposes(const char* value);
  void set_keyframeposes(const void* value, size_t size);
  std::string* mutable_keyframeposes();
  std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.getDataForVisualizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpointclouds_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// initRequest

// int32 grpcServerCompressionFormat = 1;
inline void initRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 initRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 initRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.initRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void initRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void initRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.initRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// initResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void initResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 initResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 initResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.initResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void initResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void initResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.initResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// startRequest

// int32 grpcServerCompressionFormat = 1;
inline void startRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.startRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void startRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void startRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.startRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// startResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void startResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.startResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void startResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void startResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.startResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stopRequest

// int32 grpcServerCompressionFormat = 1;
inline void stopRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.stopRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void stopRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void stopRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.stopRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// stopResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void stopResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.stopResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stopResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void stopResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.stopResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setCameraParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void setCameraParametersRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setCameraParametersRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setCameraParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setCameraParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setCameraParametersRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void setCameraParametersRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setCameraParametersRequest.grpcServerCompressionFormat)
}

// bytes cameraParams = 2;
inline void setCameraParametersRequest::clear_cameraparams() {
  cameraparams_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setCameraParametersRequest.cameraParams)
  return _internal_cameraparams();
}
inline void setCameraParametersRequest::set_cameraparams(const std::string& value) {
  _internal_set_cameraparams(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setCameraParametersRequest.cameraParams)
}
inline std::string* setCameraParametersRequest::mutable_cameraparams() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.setCameraParametersRequest.cameraParams)
  return _internal_mutable_cameraparams();
}
inline const std::string& setCameraParametersRequest::_internal_cameraparams() const {
  return cameraparams_.Get();
}
inline void setCameraParametersRequest::_internal_set_cameraparams(const std::string& value) {
  
  cameraparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setCameraParametersRequest::set_cameraparams(std::string&& value) {
  
  cameraparams_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.setCameraParametersRequest.cameraParams)
}
inline void setCameraParametersRequest::set_cameraparams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cameraparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.setCameraParametersRequest.cameraParams)
}
inline void setCameraParametersRequest::set_cameraparams(const void* value,
    size_t size) {
  
  cameraparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.setCameraParametersRequest.cameraParams)
}
inline std::string* setCameraParametersRequest::_internal_mutable_cameraparams() {
  
  return cameraparams_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setCameraParametersRequest::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.setCameraParametersRequest.cameraParams)
  return cameraparams_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setCameraParametersRequest::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  cameraparams_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cameraparams,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.setCameraParametersRequest.cameraParams)
}

// -------------------------------------------------------------------

// setCameraParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setCameraParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setCameraParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setCameraParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setCameraParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setCameraParametersResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setCameraParametersResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setCameraParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setRectificationParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void setRectificationParametersRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setRectificationParametersRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setRectificationParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setRectificationParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setRectificationParametersRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void setRectificationParametersRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setRectificationParametersRequest.grpcServerCompressionFormat)
}

// bytes rectCam1 = 2;
inline void setRectificationParametersRequest::clear_rectcam1() {
  rectcam1_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::rectcam1() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
  return _internal_rectcam1();
}
inline void setRectificationParametersRequest::set_rectcam1(const std::string& value) {
  _internal_set_rectcam1(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
}
inline std::string* setRectificationParametersRequest::mutable_rectcam1() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
  return _internal_mutable_rectcam1();
}
inline const std::string& setRectificationParametersRequest::_internal_rectcam1() const {
  return rectcam1_.Get();
}
inline void setRectificationParametersRequest::_internal_set_rectcam1(const std::string& value) {
  
  rectcam1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setRectificationParametersRequest::set_rectcam1(std::string&& value) {
  
  rectcam1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
}
inline void setRectificationParametersRequest::set_rectcam1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rectcam1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
}
inline void setRectificationParametersRequest::set_rectcam1(const void* value,
    size_t size) {
  
  rectcam1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
}
inline std::string* setRectificationParametersRequest::_internal_mutable_rectcam1() {
  
  return rectcam1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setRectificationParametersRequest::release_rectcam1() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
  return rectcam1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setRectificationParametersRequest::set_allocated_rectcam1(std::string* rectcam1) {
  if (rectcam1 != nullptr) {
    
  } else {
    
  }
  rectcam1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rectcam1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
}

// bytes rectCam2 = 3;
inline void setRectificationParametersRequest::clear_rectcam2() {
  rectcam2_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::rectcam2() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
  return _internal_rectcam2();
}
inline void setRectificationParametersRequest::set_rectcam2(const std::string& value) {
  _internal_set_rectcam2(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
}
inline std::string* setRectificationParametersRequest::mutable_rectcam2() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
  return _internal_mutable_rectcam2();
}
inline const std::string& setRectificationParametersRequest::_internal_rectcam2() const {
  return rectcam2_.Get();
}
inline void setRectificationParametersRequest::_internal_set_rectcam2(const std::string& value) {
  
  rectcam2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setRectificationParametersRequest::set_rectcam2(std::string&& value) {
  
  rectcam2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
}
inline void setRectificationParametersRequest::set_rectcam2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rectcam2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
}
inline void setRectificationParametersRequest::set_rectcam2(const void* value,
    size_t size) {
  
  rectcam2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
}
inline std::string* setRectificationParametersRequest::_internal_mutable_rectcam2() {
  
  return rectcam2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setRectificationParametersRequest::release_rectcam2() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
  return rectcam2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setRectificationParametersRequest::set_allocated_rectcam2(std::string* rectcam2) {
  if (rectcam2 != nullptr) {
    
  } else {
    
  }
  rectcam2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rectcam2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
}

// -------------------------------------------------------------------

// setRectificationParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setRectificationParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setRectificationParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setRectificationParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setRectificationParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setRectificationParametersResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setRectificationParametersResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setRectificationParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void mappingProcessRequest_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void mappingProcessRequest_grpc0Request::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.grpcServerCompressionFormat)
}

// bytes images = 2;
inline void mappingProcessRequest_grpc0Request::clear_images() {
  images_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Request::images() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
  return _internal_images();
}
inline void mappingProcessRequest_grpc0Request::set_images(const std::string& value) {
  _internal_set_images(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
}
inline std::string* mappingProcessRequest_grpc0Request::mutable_images() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
  return _internal_mutable_images();
}
inline const std::string& mappingProcessRequest_grpc0Request::_internal_images() const {
  return images_.Get();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_images(const std::string& value) {
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc0Request::set_images(std::string&& value) {
  
  images_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
}
inline void mappingProcessRequest_grpc0Request::set_images(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
}
inline void mappingProcessRequest_grpc0Request::set_images(const void* value,
    size_t size) {
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
}
inline std::string* mappingProcessRequest_grpc0Request::_internal_mutable_images() {
  
  return images_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc0Request::release_images() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
  return images_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc0Request::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  images_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), images,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
}

// bytes poses = 3;
inline void mappingProcessRequest_grpc0Request::clear_poses() {
  poses_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Request::poses() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
  return _internal_poses();
}
inline void mappingProcessRequest_grpc0Request::set_poses(const std::string& value) {
  _internal_set_poses(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
}
inline std::string* mappingProcessRequest_grpc0Request::mutable_poses() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
  return _internal_mutable_poses();
}
inline const std::string& mappingProcessRequest_grpc0Request::_internal_poses() const {
  return poses_.Get();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_poses(const std::string& value) {
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc0Request::set_poses(std::string&& value) {
  
  poses_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
}
inline void mappingProcessRequest_grpc0Request::set_poses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
}
inline void mappingProcessRequest_grpc0Request::set_poses(const void* value,
    size_t size) {
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
}
inline std::string* mappingProcessRequest_grpc0Request::_internal_mutable_poses() {
  
  return poses_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc0Request::release_poses() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
  return poses_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc0Request::set_allocated_poses(std::string* poses) {
  if (poses != nullptr) {
    
  } else {
    
  }
  poses_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poses,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
}

// bytes transform = 4;
inline void mappingProcessRequest_grpc0Request::clear_transform() {
  transform_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Request::transform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
  return _internal_transform();
}
inline void mappingProcessRequest_grpc0Request::set_transform(const std::string& value) {
  _internal_set_transform(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
}
inline std::string* mappingProcessRequest_grpc0Request::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
  return _internal_mutable_transform();
}
inline const std::string& mappingProcessRequest_grpc0Request::_internal_transform() const {
  return transform_.Get();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_transform(const std::string& value) {
  
  transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc0Request::set_transform(std::string&& value) {
  
  transform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
}
inline void mappingProcessRequest_grpc0Request::set_transform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
}
inline void mappingProcessRequest_grpc0Request::set_transform(const void* value,
    size_t size) {
  
  transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
}
inline std::string* mappingProcessRequest_grpc0Request::_internal_mutable_transform() {
  
  return transform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc0Request::release_transform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
  return transform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc0Request::set_allocated_transform(std::string* transform) {
  if (transform != nullptr) {
    
  } else {
    
  }
  transform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
}

// bytes updatedTransform = 5;
inline void mappingProcessRequest_grpc0Request::clear_updatedtransform() {
  updatedtransform_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Request::updatedtransform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
  return _internal_updatedtransform();
}
inline void mappingProcessRequest_grpc0Request::set_updatedtransform(const std::string& value) {
  _internal_set_updatedtransform(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc0Request::mutable_updatedtransform() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
  return _internal_mutable_updatedtransform();
}
inline const std::string& mappingProcessRequest_grpc0Request::_internal_updatedtransform() const {
  return updatedtransform_.Get();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_updatedtransform(const std::string& value) {
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc0Request::set_updatedtransform(std::string&& value) {
  
  updatedtransform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
}
inline void mappingProcessRequest_grpc0Request::set_updatedtransform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
}
inline void mappingProcessRequest_grpc0Request::set_updatedtransform(const void* value,
    size_t size) {
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc0Request::_internal_mutable_updatedtransform() {
  
  return updatedtransform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc0Request::release_updatedtransform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
  return updatedtransform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc0Request::set_allocated_updatedtransform(std::string* updatedtransform) {
  if (updatedtransform != nullptr) {
    
  } else {
    
  }
  updatedtransform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatedtransform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
}

// bytes status = 6;
inline void mappingProcessRequest_grpc0Request::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Request::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
  return _internal_status();
}
inline void mappingProcessRequest_grpc0Request::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
}
inline std::string* mappingProcessRequest_grpc0Request::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
  return _internal_mutable_status();
}
inline const std::string& mappingProcessRequest_grpc0Request::_internal_status() const {
  return status_.Get();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc0Request::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
}
inline void mappingProcessRequest_grpc0Request::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
}
inline void mappingProcessRequest_grpc0Request::set_status(const void* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
}
inline std::string* mappingProcessRequest_grpc0Request::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc0Request::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc0Request::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc0Response

// bytes updatedTransform = 1;
inline void mappingProcessRequest_grpc0Response::clear_updatedtransform() {
  updatedtransform_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Response::updatedtransform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
  return _internal_updatedtransform();
}
inline void mappingProcessRequest_grpc0Response::set_updatedtransform(const std::string& value) {
  _internal_set_updatedtransform(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc0Response::mutable_updatedtransform() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
  return _internal_mutable_updatedtransform();
}
inline const std::string& mappingProcessRequest_grpc0Response::_internal_updatedtransform() const {
  return updatedtransform_.Get();
}
inline void mappingProcessRequest_grpc0Response::_internal_set_updatedtransform(const std::string& value) {
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc0Response::set_updatedtransform(std::string&& value) {
  
  updatedtransform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
}
inline void mappingProcessRequest_grpc0Response::set_updatedtransform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
}
inline void mappingProcessRequest_grpc0Response::set_updatedtransform(const void* value,
    size_t size) {
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc0Response::_internal_mutable_updatedtransform() {
  
  return updatedtransform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc0Response::release_updatedtransform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
  return updatedtransform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc0Response::set_allocated_updatedtransform(std::string* updatedtransform) {
  if (updatedtransform != nullptr) {
    
  } else {
    
  }
  updatedtransform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatedtransform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
}

// bytes status = 2;
inline void mappingProcessRequest_grpc0Response::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Response::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
  return _internal_status();
}
inline void mappingProcessRequest_grpc0Response::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
}
inline std::string* mappingProcessRequest_grpc0Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
  return _internal_mutable_status();
}
inline const std::string& mappingProcessRequest_grpc0Response::_internal_status() const {
  return status_.Get();
}
inline void mappingProcessRequest_grpc0Response::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc0Response::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
}
inline void mappingProcessRequest_grpc0Response::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
}
inline void mappingProcessRequest_grpc0Response::set_status(const void* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
}
inline std::string* mappingProcessRequest_grpc0Response::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc0Response::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc0Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void mappingProcessRequest_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void mappingProcessRequest_grpc0Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void mappingProcessRequest_grpc0Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void mappingProcessRequest_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void mappingProcessRequest_grpc1Request::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void mappingProcessRequest_grpc1Request::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.grpcServerCompressionFormat)
}

// bytes images = 2;
inline void mappingProcessRequest_grpc1Request::clear_images() {
  images_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc1Request::images() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
  return _internal_images();
}
inline void mappingProcessRequest_grpc1Request::set_images(const std::string& value) {
  _internal_set_images(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
}
inline std::string* mappingProcessRequest_grpc1Request::mutable_images() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
  return _internal_mutable_images();
}
inline const std::string& mappingProcessRequest_grpc1Request::_internal_images() const {
  return images_.Get();
}
inline void mappingProcessRequest_grpc1Request::_internal_set_images(const std::string& value) {
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc1Request::set_images(std::string&& value) {
  
  images_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
}
inline void mappingProcessRequest_grpc1Request::set_images(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
}
inline void mappingProcessRequest_grpc1Request::set_images(const void* value,
    size_t size) {
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
}
inline std::string* mappingProcessRequest_grpc1Request::_internal_mutable_images() {
  
  return images_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc1Request::release_images() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
  return images_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc1Request::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  images_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), images,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
}

// bytes poses = 3;
inline void mappingProcessRequest_grpc1Request::clear_poses() {
  poses_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc1Request::poses() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
  return _internal_poses();
}
inline void mappingProcessRequest_grpc1Request::set_poses(const std::string& value) {
  _internal_set_poses(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
}
inline std::string* mappingProcessRequest_grpc1Request::mutable_poses() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
  return _internal_mutable_poses();
}
inline const std::string& mappingProcessRequest_grpc1Request::_internal_poses() const {
  return poses_.Get();
}
inline void mappingProcessRequest_grpc1Request::_internal_set_poses(const std::string& value) {
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc1Request::set_poses(std::string&& value) {
  
  poses_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
}
inline void mappingProcessRequest_grpc1Request::set_poses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
}
inline void mappingProcessRequest_grpc1Request::set_poses(const void* value,
    size_t size) {
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
}
inline std::string* mappingProcessRequest_grpc1Request::_internal_mutable_poses() {
  
  return poses_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc1Request::release_poses() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
  return poses_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc1Request::set_allocated_poses(std::string* poses) {
  if (poses != nullptr) {
    
  } else {
    
  }
  poses_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poses,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
}

// bytes status = 4;
inline void mappingProcessRequest_grpc1Request::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc1Request::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
  return _internal_status();
}
inline void mappingProcessRequest_grpc1Request::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
}
inline std::string* mappingProcessRequest_grpc1Request::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
  return _internal_mutable_status();
}
inline const std::string& mappingProcessRequest_grpc1Request::_internal_status() const {
  return status_.Get();
}
inline void mappingProcessRequest_grpc1Request::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc1Request::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
}
inline void mappingProcessRequest_grpc1Request::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
}
inline void mappingProcessRequest_grpc1Request::set_status(const void* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
}
inline std::string* mappingProcessRequest_grpc1Request::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc1Request::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc1Request::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc1Response

// bytes status = 1;
inline void mappingProcessRequest_grpc1Response::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc1Response::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
  return _internal_status();
}
inline void mappingProcessRequest_grpc1Response::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
}
inline std::string* mappingProcessRequest_grpc1Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
  return _internal_mutable_status();
}
inline const std::string& mappingProcessRequest_grpc1Response::_internal_status() const {
  return status_.Get();
}
inline void mappingProcessRequest_grpc1Response::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc1Response::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
}
inline void mappingProcessRequest_grpc1Response::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
}
inline void mappingProcessRequest_grpc1Response::set_status(const void* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
}
inline std::string* mappingProcessRequest_grpc1Response::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc1Response::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc1Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void mappingProcessRequest_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void mappingProcessRequest_grpc1Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void mappingProcessRequest_grpc1Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc2Request

// int32 grpcServerCompressionFormat = 1;
inline void mappingProcessRequest_grpc2Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc2Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc2Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void mappingProcessRequest_grpc2Request::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.grpcServerCompressionFormat)
}

// bytes images = 2;
inline void mappingProcessRequest_grpc2Request::clear_images() {
  images_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Request::images() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
  return _internal_images();
}
inline void mappingProcessRequest_grpc2Request::set_images(const std::string& value) {
  _internal_set_images(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
}
inline std::string* mappingProcessRequest_grpc2Request::mutable_images() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
  return _internal_mutable_images();
}
inline const std::string& mappingProcessRequest_grpc2Request::_internal_images() const {
  return images_.Get();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_images(const std::string& value) {
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc2Request::set_images(std::string&& value) {
  
  images_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
}
inline void mappingProcessRequest_grpc2Request::set_images(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
}
inline void mappingProcessRequest_grpc2Request::set_images(const void* value,
    size_t size) {
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
}
inline std::string* mappingProcessRequest_grpc2Request::_internal_mutable_images() {
  
  return images_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc2Request::release_images() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
  return images_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc2Request::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  images_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), images,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
}

// bytes poses = 3;
inline void mappingProcessRequest_grpc2Request::clear_poses() {
  poses_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Request::poses() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
  return _internal_poses();
}
inline void mappingProcessRequest_grpc2Request::set_poses(const std::string& value) {
  _internal_set_poses(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
}
inline std::string* mappingProcessRequest_grpc2Request::mutable_poses() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
  return _internal_mutable_poses();
}
inline const std::string& mappingProcessRequest_grpc2Request::_internal_poses() const {
  return poses_.Get();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_poses(const std::string& value) {
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc2Request::set_poses(std::string&& value) {
  
  poses_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
}
inline void mappingProcessRequest_grpc2Request::set_poses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
}
inline void mappingProcessRequest_grpc2Request::set_poses(const void* value,
    size_t size) {
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
}
inline std::string* mappingProcessRequest_grpc2Request::_internal_mutable_poses() {
  
  return poses_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc2Request::release_poses() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
  return poses_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc2Request::set_allocated_poses(std::string* poses) {
  if (poses != nullptr) {
    
  } else {
    
  }
  poses_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poses,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
}

// bytes updatedTransform = 4;
inline void mappingProcessRequest_grpc2Request::clear_updatedtransform() {
  updatedtransform_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Request::updatedtransform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
  return _internal_updatedtransform();
}
inline void mappingProcessRequest_grpc2Request::set_updatedtransform(const std::string& value) {
  _internal_set_updatedtransform(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc2Request::mutable_updatedtransform() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
  return _internal_mutable_updatedtransform();
}
inline const std::string& mappingProcessRequest_grpc2Request::_internal_updatedtransform() const {
  return updatedtransform_.Get();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_updatedtransform(const std::string& value) {
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc2Request::set_updatedtransform(std::string&& value) {
  
  updatedtransform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
}
inline void mappingProcessRequest_grpc2Request::set_updatedtransform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
}
inline void mappingProcessRequest_grpc2Request::set_updatedtransform(const void* value,
    size_t size) {
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc2Request::_internal_mutable_updatedtransform() {
  
  return updatedtransform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc2Request::release_updatedtransform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
  return updatedtransform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc2Request::set_allocated_updatedtransform(std::string* updatedtransform) {
  if (updatedtransform != nullptr) {
    
  } else {
    
  }
  updatedtransform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatedtransform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
}

// bytes status = 5;
inline void mappingProcessRequest_grpc2Request::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Request::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
  return _internal_status();
}
inline void mappingProcessRequest_grpc2Request::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
}
inline std::string* mappingProcessRequest_grpc2Request::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
  return _internal_mutable_status();
}
inline const std::string& mappingProcessRequest_grpc2Request::_internal_status() const {
  return status_.Get();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc2Request::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
}
inline void mappingProcessRequest_grpc2Request::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
}
inline void mappingProcessRequest_grpc2Request::set_status(const void* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
}
inline std::string* mappingProcessRequest_grpc2Request::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc2Request::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc2Request::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc2Response

// bytes updatedTransform = 1;
inline void mappingProcessRequest_grpc2Response::clear_updatedtransform() {
  updatedtransform_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Response::updatedtransform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
  return _internal_updatedtransform();
}
inline void mappingProcessRequest_grpc2Response::set_updatedtransform(const std::string& value) {
  _internal_set_updatedtransform(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc2Response::mutable_updatedtransform() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
  return _internal_mutable_updatedtransform();
}
inline const std::string& mappingProcessRequest_grpc2Response::_internal_updatedtransform() const {
  return updatedtransform_.Get();
}
inline void mappingProcessRequest_grpc2Response::_internal_set_updatedtransform(const std::string& value) {
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc2Response::set_updatedtransform(std::string&& value) {
  
  updatedtransform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
}
inline void mappingProcessRequest_grpc2Response::set_updatedtransform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
}
inline void mappingProcessRequest_grpc2Response::set_updatedtransform(const void* value,
    size_t size) {
  
  updatedtransform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc2Response::_internal_mutable_updatedtransform() {
  
  return updatedtransform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc2Response::release_updatedtransform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
  return updatedtransform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc2Response::set_allocated_updatedtransform(std::string* updatedtransform) {
  if (updatedtransform != nullptr) {
    
  } else {
    
  }
  updatedtransform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatedtransform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
}

// bytes status = 2;
inline void mappingProcessRequest_grpc2Response::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Response::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
  return _internal_status();
}
inline void mappingProcessRequest_grpc2Response::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
}
inline std::string* mappingProcessRequest_grpc2Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
  return _internal_mutable_status();
}
inline const std::string& mappingProcessRequest_grpc2Response::_internal_status() const {
  return status_.Get();
}
inline void mappingProcessRequest_grpc2Response::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mappingProcessRequest_grpc2Response::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
}
inline void mappingProcessRequest_grpc2Response::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
}
inline void mappingProcessRequest_grpc2Response::set_status(const void* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
}
inline std::string* mappingProcessRequest_grpc2Response::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mappingProcessRequest_grpc2Response::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mappingProcessRequest_grpc2Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void mappingProcessRequest_grpc2Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc2Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mappingProcessRequest_grpc2Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void mappingProcessRequest_grpc2Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void mappingProcessRequest_grpc2Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDataForVisualizationRequest

// int32 grpcServerCompressionFormat = 1;
inline void getDataForVisualizationRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDataForVisualizationRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDataForVisualizationRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getDataForVisualizationRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void getDataForVisualizationRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationRequest.grpcServerCompressionFormat)
}

// bytes outputPointClouds = 2;
inline void getDataForVisualizationRequest::clear_outputpointclouds() {
  outputpointclouds_.ClearToEmpty();
}
inline const std::string& getDataForVisualizationRequest::outputpointclouds() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
  return _internal_outputpointclouds();
}
inline void getDataForVisualizationRequest::set_outputpointclouds(const std::string& value) {
  _internal_set_outputpointclouds(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
}
inline std::string* getDataForVisualizationRequest::mutable_outputpointclouds() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
  return _internal_mutable_outputpointclouds();
}
inline const std::string& getDataForVisualizationRequest::_internal_outputpointclouds() const {
  return outputpointclouds_.Get();
}
inline void getDataForVisualizationRequest::_internal_set_outputpointclouds(const std::string& value) {
  
  outputpointclouds_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDataForVisualizationRequest::set_outputpointclouds(std::string&& value) {
  
  outputpointclouds_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
}
inline void getDataForVisualizationRequest::set_outputpointclouds(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outputpointclouds_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
}
inline void getDataForVisualizationRequest::set_outputpointclouds(const void* value,
    size_t size) {
  
  outputpointclouds_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
}
inline std::string* getDataForVisualizationRequest::_internal_mutable_outputpointclouds() {
  
  return outputpointclouds_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDataForVisualizationRequest::release_outputpointclouds() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
  return outputpointclouds_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDataForVisualizationRequest::set_allocated_outputpointclouds(std::string* outputpointclouds) {
  if (outputpointclouds != nullptr) {
    
  } else {
    
  }
  outputpointclouds_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputpointclouds,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
}

// bytes keyframePoses = 3;
inline void getDataForVisualizationRequest::clear_keyframeposes() {
  keyframeposes_.ClearToEmpty();
}
inline const std::string& getDataForVisualizationRequest::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
  return _internal_keyframeposes();
}
inline void getDataForVisualizationRequest::set_keyframeposes(const std::string& value) {
  _internal_set_keyframeposes(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
}
inline std::string* getDataForVisualizationRequest::mutable_keyframeposes() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
  return _internal_mutable_keyframeposes();
}
inline const std::string& getDataForVisualizationRequest::_internal_keyframeposes() const {
  return keyframeposes_.Get();
}
inline void getDataForVisualizationRequest::_internal_set_keyframeposes(const std::string& value) {
  
  keyframeposes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDataForVisualizationRequest::set_keyframeposes(std::string&& value) {
  
  keyframeposes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
}
inline void getDataForVisualizationRequest::set_keyframeposes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframeposes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
}
inline void getDataForVisualizationRequest::set_keyframeposes(const void* value,
    size_t size) {
  
  keyframeposes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
}
inline std::string* getDataForVisualizationRequest::_internal_mutable_keyframeposes() {
  
  return keyframeposes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDataForVisualizationRequest::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
  return keyframeposes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDataForVisualizationRequest::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  keyframeposes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframeposes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
}

// -------------------------------------------------------------------

// getDataForVisualizationResponse

// bytes outputPointClouds = 1;
inline void getDataForVisualizationResponse::clear_outputpointclouds() {
  outputpointclouds_.ClearToEmpty();
}
inline const std::string& getDataForVisualizationResponse::outputpointclouds() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
  return _internal_outputpointclouds();
}
inline void getDataForVisualizationResponse::set_outputpointclouds(const std::string& value) {
  _internal_set_outputpointclouds(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
}
inline std::string* getDataForVisualizationResponse::mutable_outputpointclouds() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
  return _internal_mutable_outputpointclouds();
}
inline const std::string& getDataForVisualizationResponse::_internal_outputpointclouds() const {
  return outputpointclouds_.Get();
}
inline void getDataForVisualizationResponse::_internal_set_outputpointclouds(const std::string& value) {
  
  outputpointclouds_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDataForVisualizationResponse::set_outputpointclouds(std::string&& value) {
  
  outputpointclouds_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
}
inline void getDataForVisualizationResponse::set_outputpointclouds(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outputpointclouds_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
}
inline void getDataForVisualizationResponse::set_outputpointclouds(const void* value,
    size_t size) {
  
  outputpointclouds_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
}
inline std::string* getDataForVisualizationResponse::_internal_mutable_outputpointclouds() {
  
  return outputpointclouds_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDataForVisualizationResponse::release_outputpointclouds() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
  return outputpointclouds_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDataForVisualizationResponse::set_allocated_outputpointclouds(std::string* outputpointclouds) {
  if (outputpointclouds != nullptr) {
    
  } else {
    
  }
  outputpointclouds_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputpointclouds,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
}

// bytes keyframePoses = 2;
inline void getDataForVisualizationResponse::clear_keyframeposes() {
  keyframeposes_.ClearToEmpty();
}
inline const std::string& getDataForVisualizationResponse::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
  return _internal_keyframeposes();
}
inline void getDataForVisualizationResponse::set_keyframeposes(const std::string& value) {
  _internal_set_keyframeposes(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
}
inline std::string* getDataForVisualizationResponse::mutable_keyframeposes() {
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
  return _internal_mutable_keyframeposes();
}
inline const std::string& getDataForVisualizationResponse::_internal_keyframeposes() const {
  return keyframeposes_.Get();
}
inline void getDataForVisualizationResponse::_internal_set_keyframeposes(const std::string& value) {
  
  keyframeposes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDataForVisualizationResponse::set_keyframeposes(std::string&& value) {
  
  keyframeposes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
}
inline void getDataForVisualizationResponse::set_keyframeposes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframeposes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
}
inline void getDataForVisualizationResponse::set_keyframeposes(const void* value,
    size_t size) {
  
  keyframeposes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
}
inline std::string* getDataForVisualizationResponse::_internal_mutable_keyframeposes() {
  
  return keyframeposes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDataForVisualizationResponse::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
  return keyframeposes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDataForVisualizationResponse::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  keyframeposes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframeposes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void getDataForVisualizationResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDataForVisualizationResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDataForVisualizationResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getDataForVisualizationResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getDataForVisualizationResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIMappingPipeline

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIMappingPipelineService_2eproto
