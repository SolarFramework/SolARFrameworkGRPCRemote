// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIFeatureWithDepthFromStereoService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIFeatureWithDepthFromStereoService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIFeatureWithDepthFromStereoService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIFeatureWithDepthFromStereoService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIFeatureWithDepthFromStereoService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIFeatureWithDepthFromStereoService_2eproto;
namespace grpcIFeatureWithDepthFromStereo {
class computeRequest;
struct computeRequestDefaultTypeInternal;
extern computeRequestDefaultTypeInternal _computeRequest_default_instance_;
class computeResponse;
struct computeResponseDefaultTypeInternal;
extern computeResponseDefaultTypeInternal _computeResponse_default_instance_;
class setRectificationParametersRequest;
struct setRectificationParametersRequestDefaultTypeInternal;
extern setRectificationParametersRequestDefaultTypeInternal _setRectificationParametersRequest_default_instance_;
}  // namespace grpcIFeatureWithDepthFromStereo
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIFeatureWithDepthFromStereo::computeRequest* Arena::CreateMaybeMessage<::grpcIFeatureWithDepthFromStereo::computeRequest>(Arena*);
template<> ::grpcIFeatureWithDepthFromStereo::computeResponse* Arena::CreateMaybeMessage<::grpcIFeatureWithDepthFromStereo::computeResponse>(Arena*);
template<> ::grpcIFeatureWithDepthFromStereo::setRectificationParametersRequest* Arena::CreateMaybeMessage<::grpcIFeatureWithDepthFromStereo::setRectificationParametersRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIFeatureWithDepthFromStereo {

// ===================================================================

class setRectificationParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest) */ {
 public:
  inline setRectificationParametersRequest() : setRectificationParametersRequest(nullptr) {}
  ~setRectificationParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setRectificationParametersRequest(const setRectificationParametersRequest& from);
  setRectificationParametersRequest(setRectificationParametersRequest&& from) noexcept
    : setRectificationParametersRequest() {
    *this = ::std::move(from);
  }

  inline setRectificationParametersRequest& operator=(const setRectificationParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setRectificationParametersRequest& operator=(setRectificationParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setRectificationParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setRectificationParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setRectificationParametersRequest*>(
               &_setRectificationParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setRectificationParametersRequest& a, setRectificationParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setRectificationParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setRectificationParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setRectificationParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setRectificationParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setRectificationParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setRectificationParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setRectificationParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest";
  }
  protected:
  explicit setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamParams1FieldNumber = 1,
    kCamParams2FieldNumber = 2,
    kRectParams1FieldNumber = 3,
    kRectParams2FieldNumber = 4,
  };
  // bytes camParams1 = 1;
  void clear_camparams1();
  const std::string& camparams1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams1();
  PROTOBUF_NODISCARD std::string* release_camparams1();
  void set_allocated_camparams1(std::string* camparams1);
  private:
  const std::string& _internal_camparams1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams1(const std::string& value);
  std::string* _internal_mutable_camparams1();
  public:

  // bytes camParams2 = 2;
  void clear_camparams2();
  const std::string& camparams2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams2();
  PROTOBUF_NODISCARD std::string* release_camparams2();
  void set_allocated_camparams2(std::string* camparams2);
  private:
  const std::string& _internal_camparams2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams2(const std::string& value);
  std::string* _internal_mutable_camparams2();
  public:

  // bytes rectParams1 = 3;
  void clear_rectparams1();
  const std::string& rectparams1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectparams1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectparams1();
  PROTOBUF_NODISCARD std::string* release_rectparams1();
  void set_allocated_rectparams1(std::string* rectparams1);
  private:
  const std::string& _internal_rectparams1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectparams1(const std::string& value);
  std::string* _internal_mutable_rectparams1();
  public:

  // bytes rectParams2 = 4;
  void clear_rectparams2();
  const std::string& rectparams2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectparams2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectparams2();
  PROTOBUF_NODISCARD std::string* release_rectparams2();
  void set_allocated_rectparams2(std::string* rectparams2);
  private:
  const std::string& _internal_rectparams2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectparams2(const std::string& value);
  std::string* _internal_mutable_rectparams2();
  public:

  // @@protoc_insertion_point(class_scope:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectparams1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectparams2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIFeatureWithDepthFromStereoService_2eproto;
};
// -------------------------------------------------------------------

class computeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFeatureWithDepthFromStereo.computeRequest) */ {
 public:
  inline computeRequest() : computeRequest(nullptr) {}
  ~computeRequest() override;
  explicit PROTOBUF_CONSTEXPR computeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  computeRequest(const computeRequest& from);
  computeRequest(computeRequest&& from) noexcept
    : computeRequest() {
    *this = ::std::move(from);
  }

  inline computeRequest& operator=(const computeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline computeRequest& operator=(computeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const computeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const computeRequest* internal_default_instance() {
    return reinterpret_cast<const computeRequest*>(
               &_computeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(computeRequest& a, computeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(computeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(computeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  computeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<computeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const computeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const computeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(computeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFeatureWithDepthFromStereo.computeRequest";
  }
  protected:
  explicit computeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImage1FieldNumber = 2,
    kImage2FieldNumber = 3,
    kFrame1FieldNumber = 4,
    kFrame2FieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image1 = 2;
  void clear_image1();
  const std::string& image1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image1();
  PROTOBUF_NODISCARD std::string* release_image1();
  void set_allocated_image1(std::string* image1);
  private:
  const std::string& _internal_image1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image1(const std::string& value);
  std::string* _internal_mutable_image1();
  public:

  // bytes image2 = 3;
  void clear_image2();
  const std::string& image2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image2();
  PROTOBUF_NODISCARD std::string* release_image2();
  void set_allocated_image2(std::string* image2);
  private:
  const std::string& _internal_image2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image2(const std::string& value);
  std::string* _internal_mutable_image2();
  public:

  // bytes frame1 = 4;
  void clear_frame1();
  const std::string& frame1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame1();
  PROTOBUF_NODISCARD std::string* release_frame1();
  void set_allocated_frame1(std::string* frame1);
  private:
  const std::string& _internal_frame1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame1(const std::string& value);
  std::string* _internal_mutable_frame1();
  public:

  // bytes frame2 = 5;
  void clear_frame2();
  const std::string& frame2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame2();
  PROTOBUF_NODISCARD std::string* release_frame2();
  void set_allocated_frame2(std::string* frame2);
  private:
  const std::string& _internal_frame2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame2(const std::string& value);
  std::string* _internal_mutable_frame2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFeatureWithDepthFromStereo.computeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame2_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIFeatureWithDepthFromStereoService_2eproto;
};
// -------------------------------------------------------------------

class computeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFeatureWithDepthFromStereo.computeResponse) */ {
 public:
  inline computeResponse() : computeResponse(nullptr) {}
  ~computeResponse() override;
  explicit PROTOBUF_CONSTEXPR computeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  computeResponse(const computeResponse& from);
  computeResponse(computeResponse&& from) noexcept
    : computeResponse() {
    *this = ::std::move(from);
  }

  inline computeResponse& operator=(const computeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline computeResponse& operator=(computeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const computeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const computeResponse* internal_default_instance() {
    return reinterpret_cast<const computeResponse*>(
               &_computeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(computeResponse& a, computeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(computeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(computeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  computeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<computeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const computeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const computeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(computeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFeatureWithDepthFromStereo.computeResponse";
  }
  protected:
  explicit computeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrame1FieldNumber = 1,
    kFrame2FieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes frame1 = 1;
  void clear_frame1();
  const std::string& frame1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame1();
  PROTOBUF_NODISCARD std::string* release_frame1();
  void set_allocated_frame1(std::string* frame1);
  private:
  const std::string& _internal_frame1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame1(const std::string& value);
  std::string* _internal_mutable_frame1();
  public:

  // bytes frame2 = 2;
  void clear_frame2();
  const std::string& frame2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame2();
  PROTOBUF_NODISCARD std::string* release_frame2();
  void set_allocated_frame2(std::string* frame2);
  private:
  const std::string& _internal_frame2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame2(const std::string& value);
  std::string* _internal_mutable_frame2();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFeatureWithDepthFromStereo.computeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame2_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIFeatureWithDepthFromStereoService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setRectificationParametersRequest

// bytes camParams1 = 1;
inline void setRectificationParametersRequest::clear_camparams1() {
  camparams1_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::camparams1() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.camParams1)
  return _internal_camparams1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_camparams1(ArgT0&& arg0, ArgT... args) {
 
 camparams1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.camParams1)
}
inline std::string* setRectificationParametersRequest::mutable_camparams1() {
  std::string* _s = _internal_mutable_camparams1();
  // @@protoc_insertion_point(field_mutable:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.camParams1)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_camparams1() const {
  return camparams1_.Get();
}
inline void setRectificationParametersRequest::_internal_set_camparams1(const std::string& value) {
  
  camparams1_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_camparams1() {
  
  return camparams1_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_camparams1() {
  // @@protoc_insertion_point(field_release:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.camParams1)
  return camparams1_.Release();
}
inline void setRectificationParametersRequest::set_allocated_camparams1(std::string* camparams1) {
  if (camparams1 != nullptr) {
    
  } else {
    
  }
  camparams1_.SetAllocated(camparams1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams1_.IsDefault()) {
    camparams1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.camParams1)
}

// bytes camParams2 = 2;
inline void setRectificationParametersRequest::clear_camparams2() {
  camparams2_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::camparams2() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.camParams2)
  return _internal_camparams2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_camparams2(ArgT0&& arg0, ArgT... args) {
 
 camparams2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.camParams2)
}
inline std::string* setRectificationParametersRequest::mutable_camparams2() {
  std::string* _s = _internal_mutable_camparams2();
  // @@protoc_insertion_point(field_mutable:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.camParams2)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_camparams2() const {
  return camparams2_.Get();
}
inline void setRectificationParametersRequest::_internal_set_camparams2(const std::string& value) {
  
  camparams2_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_camparams2() {
  
  return camparams2_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_camparams2() {
  // @@protoc_insertion_point(field_release:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.camParams2)
  return camparams2_.Release();
}
inline void setRectificationParametersRequest::set_allocated_camparams2(std::string* camparams2) {
  if (camparams2 != nullptr) {
    
  } else {
    
  }
  camparams2_.SetAllocated(camparams2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams2_.IsDefault()) {
    camparams2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.camParams2)
}

// bytes rectParams1 = 3;
inline void setRectificationParametersRequest::clear_rectparams1() {
  rectparams1_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::rectparams1() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.rectParams1)
  return _internal_rectparams1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_rectparams1(ArgT0&& arg0, ArgT... args) {
 
 rectparams1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.rectParams1)
}
inline std::string* setRectificationParametersRequest::mutable_rectparams1() {
  std::string* _s = _internal_mutable_rectparams1();
  // @@protoc_insertion_point(field_mutable:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.rectParams1)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_rectparams1() const {
  return rectparams1_.Get();
}
inline void setRectificationParametersRequest::_internal_set_rectparams1(const std::string& value) {
  
  rectparams1_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_rectparams1() {
  
  return rectparams1_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_rectparams1() {
  // @@protoc_insertion_point(field_release:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.rectParams1)
  return rectparams1_.Release();
}
inline void setRectificationParametersRequest::set_allocated_rectparams1(std::string* rectparams1) {
  if (rectparams1 != nullptr) {
    
  } else {
    
  }
  rectparams1_.SetAllocated(rectparams1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectparams1_.IsDefault()) {
    rectparams1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.rectParams1)
}

// bytes rectParams2 = 4;
inline void setRectificationParametersRequest::clear_rectparams2() {
  rectparams2_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::rectparams2() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.rectParams2)
  return _internal_rectparams2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_rectparams2(ArgT0&& arg0, ArgT... args) {
 
 rectparams2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.rectParams2)
}
inline std::string* setRectificationParametersRequest::mutable_rectparams2() {
  std::string* _s = _internal_mutable_rectparams2();
  // @@protoc_insertion_point(field_mutable:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.rectParams2)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_rectparams2() const {
  return rectparams2_.Get();
}
inline void setRectificationParametersRequest::_internal_set_rectparams2(const std::string& value) {
  
  rectparams2_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_rectparams2() {
  
  return rectparams2_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_rectparams2() {
  // @@protoc_insertion_point(field_release:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.rectParams2)
  return rectparams2_.Release();
}
inline void setRectificationParametersRequest::set_allocated_rectparams2(std::string* rectparams2) {
  if (rectparams2 != nullptr) {
    
  } else {
    
  }
  rectparams2_.SetAllocated(rectparams2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectparams2_.IsDefault()) {
    rectparams2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFeatureWithDepthFromStereo.setRectificationParametersRequest.rectParams2)
}

// -------------------------------------------------------------------

// computeRequest

// int32 grpcServerCompressionFormat = 1;
inline void computeRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t computeRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t computeRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.computeRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void computeRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void computeRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.computeRequest.grpcServerCompressionFormat)
}

// bytes image1 = 2;
inline void computeRequest::clear_image1() {
  image1_.ClearToEmpty();
}
inline const std::string& computeRequest::image1() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.computeRequest.image1)
  return _internal_image1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void computeRequest::set_image1(ArgT0&& arg0, ArgT... args) {
 
 image1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.computeRequest.image1)
}
inline std::string* computeRequest::mutable_image1() {
  std::string* _s = _internal_mutable_image1();
  // @@protoc_insertion_point(field_mutable:grpcIFeatureWithDepthFromStereo.computeRequest.image1)
  return _s;
}
inline const std::string& computeRequest::_internal_image1() const {
  return image1_.Get();
}
inline void computeRequest::_internal_set_image1(const std::string& value) {
  
  image1_.Set(value, GetArenaForAllocation());
}
inline std::string* computeRequest::_internal_mutable_image1() {
  
  return image1_.Mutable(GetArenaForAllocation());
}
inline std::string* computeRequest::release_image1() {
  // @@protoc_insertion_point(field_release:grpcIFeatureWithDepthFromStereo.computeRequest.image1)
  return image1_.Release();
}
inline void computeRequest::set_allocated_image1(std::string* image1) {
  if (image1 != nullptr) {
    
  } else {
    
  }
  image1_.SetAllocated(image1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image1_.IsDefault()) {
    image1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFeatureWithDepthFromStereo.computeRequest.image1)
}

// bytes image2 = 3;
inline void computeRequest::clear_image2() {
  image2_.ClearToEmpty();
}
inline const std::string& computeRequest::image2() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.computeRequest.image2)
  return _internal_image2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void computeRequest::set_image2(ArgT0&& arg0, ArgT... args) {
 
 image2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.computeRequest.image2)
}
inline std::string* computeRequest::mutable_image2() {
  std::string* _s = _internal_mutable_image2();
  // @@protoc_insertion_point(field_mutable:grpcIFeatureWithDepthFromStereo.computeRequest.image2)
  return _s;
}
inline const std::string& computeRequest::_internal_image2() const {
  return image2_.Get();
}
inline void computeRequest::_internal_set_image2(const std::string& value) {
  
  image2_.Set(value, GetArenaForAllocation());
}
inline std::string* computeRequest::_internal_mutable_image2() {
  
  return image2_.Mutable(GetArenaForAllocation());
}
inline std::string* computeRequest::release_image2() {
  // @@protoc_insertion_point(field_release:grpcIFeatureWithDepthFromStereo.computeRequest.image2)
  return image2_.Release();
}
inline void computeRequest::set_allocated_image2(std::string* image2) {
  if (image2 != nullptr) {
    
  } else {
    
  }
  image2_.SetAllocated(image2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image2_.IsDefault()) {
    image2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFeatureWithDepthFromStereo.computeRequest.image2)
}

// bytes frame1 = 4;
inline void computeRequest::clear_frame1() {
  frame1_.ClearToEmpty();
}
inline const std::string& computeRequest::frame1() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.computeRequest.frame1)
  return _internal_frame1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void computeRequest::set_frame1(ArgT0&& arg0, ArgT... args) {
 
 frame1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.computeRequest.frame1)
}
inline std::string* computeRequest::mutable_frame1() {
  std::string* _s = _internal_mutable_frame1();
  // @@protoc_insertion_point(field_mutable:grpcIFeatureWithDepthFromStereo.computeRequest.frame1)
  return _s;
}
inline const std::string& computeRequest::_internal_frame1() const {
  return frame1_.Get();
}
inline void computeRequest::_internal_set_frame1(const std::string& value) {
  
  frame1_.Set(value, GetArenaForAllocation());
}
inline std::string* computeRequest::_internal_mutable_frame1() {
  
  return frame1_.Mutable(GetArenaForAllocation());
}
inline std::string* computeRequest::release_frame1() {
  // @@protoc_insertion_point(field_release:grpcIFeatureWithDepthFromStereo.computeRequest.frame1)
  return frame1_.Release();
}
inline void computeRequest::set_allocated_frame1(std::string* frame1) {
  if (frame1 != nullptr) {
    
  } else {
    
  }
  frame1_.SetAllocated(frame1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame1_.IsDefault()) {
    frame1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFeatureWithDepthFromStereo.computeRequest.frame1)
}

// bytes frame2 = 5;
inline void computeRequest::clear_frame2() {
  frame2_.ClearToEmpty();
}
inline const std::string& computeRequest::frame2() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.computeRequest.frame2)
  return _internal_frame2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void computeRequest::set_frame2(ArgT0&& arg0, ArgT... args) {
 
 frame2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.computeRequest.frame2)
}
inline std::string* computeRequest::mutable_frame2() {
  std::string* _s = _internal_mutable_frame2();
  // @@protoc_insertion_point(field_mutable:grpcIFeatureWithDepthFromStereo.computeRequest.frame2)
  return _s;
}
inline const std::string& computeRequest::_internal_frame2() const {
  return frame2_.Get();
}
inline void computeRequest::_internal_set_frame2(const std::string& value) {
  
  frame2_.Set(value, GetArenaForAllocation());
}
inline std::string* computeRequest::_internal_mutable_frame2() {
  
  return frame2_.Mutable(GetArenaForAllocation());
}
inline std::string* computeRequest::release_frame2() {
  // @@protoc_insertion_point(field_release:grpcIFeatureWithDepthFromStereo.computeRequest.frame2)
  return frame2_.Release();
}
inline void computeRequest::set_allocated_frame2(std::string* frame2) {
  if (frame2 != nullptr) {
    
  } else {
    
  }
  frame2_.SetAllocated(frame2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame2_.IsDefault()) {
    frame2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFeatureWithDepthFromStereo.computeRequest.frame2)
}

// -------------------------------------------------------------------

// computeResponse

// bytes frame1 = 1;
inline void computeResponse::clear_frame1() {
  frame1_.ClearToEmpty();
}
inline const std::string& computeResponse::frame1() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.computeResponse.frame1)
  return _internal_frame1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void computeResponse::set_frame1(ArgT0&& arg0, ArgT... args) {
 
 frame1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.computeResponse.frame1)
}
inline std::string* computeResponse::mutable_frame1() {
  std::string* _s = _internal_mutable_frame1();
  // @@protoc_insertion_point(field_mutable:grpcIFeatureWithDepthFromStereo.computeResponse.frame1)
  return _s;
}
inline const std::string& computeResponse::_internal_frame1() const {
  return frame1_.Get();
}
inline void computeResponse::_internal_set_frame1(const std::string& value) {
  
  frame1_.Set(value, GetArenaForAllocation());
}
inline std::string* computeResponse::_internal_mutable_frame1() {
  
  return frame1_.Mutable(GetArenaForAllocation());
}
inline std::string* computeResponse::release_frame1() {
  // @@protoc_insertion_point(field_release:grpcIFeatureWithDepthFromStereo.computeResponse.frame1)
  return frame1_.Release();
}
inline void computeResponse::set_allocated_frame1(std::string* frame1) {
  if (frame1 != nullptr) {
    
  } else {
    
  }
  frame1_.SetAllocated(frame1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame1_.IsDefault()) {
    frame1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFeatureWithDepthFromStereo.computeResponse.frame1)
}

// bytes frame2 = 2;
inline void computeResponse::clear_frame2() {
  frame2_.ClearToEmpty();
}
inline const std::string& computeResponse::frame2() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.computeResponse.frame2)
  return _internal_frame2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void computeResponse::set_frame2(ArgT0&& arg0, ArgT... args) {
 
 frame2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.computeResponse.frame2)
}
inline std::string* computeResponse::mutable_frame2() {
  std::string* _s = _internal_mutable_frame2();
  // @@protoc_insertion_point(field_mutable:grpcIFeatureWithDepthFromStereo.computeResponse.frame2)
  return _s;
}
inline const std::string& computeResponse::_internal_frame2() const {
  return frame2_.Get();
}
inline void computeResponse::_internal_set_frame2(const std::string& value) {
  
  frame2_.Set(value, GetArenaForAllocation());
}
inline std::string* computeResponse::_internal_mutable_frame2() {
  
  return frame2_.Mutable(GetArenaForAllocation());
}
inline std::string* computeResponse::release_frame2() {
  // @@protoc_insertion_point(field_release:grpcIFeatureWithDepthFromStereo.computeResponse.frame2)
  return frame2_.Release();
}
inline void computeResponse::set_allocated_frame2(std::string* frame2) {
  if (frame2 != nullptr) {
    
  } else {
    
  }
  frame2_.SetAllocated(frame2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame2_.IsDefault()) {
    frame2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFeatureWithDepthFromStereo.computeResponse.frame2)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void computeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t computeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t computeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFeatureWithDepthFromStereo.computeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void computeResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void computeResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFeatureWithDepthFromStereo.computeResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIFeatureWithDepthFromStereo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIFeatureWithDepthFromStereoService_2eproto
