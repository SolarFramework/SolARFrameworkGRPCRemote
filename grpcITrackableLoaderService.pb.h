// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcITrackableLoaderService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcITrackableLoaderService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcITrackableLoaderService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcITrackableLoaderService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcITrackableLoaderService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcITrackableLoaderService_2eproto;
namespace grpcITrackableLoader {
class loadTrackableRequest;
struct loadTrackableRequestDefaultTypeInternal;
extern loadTrackableRequestDefaultTypeInternal _loadTrackableRequest_default_instance_;
class loadTrackableResponse;
struct loadTrackableResponseDefaultTypeInternal;
extern loadTrackableResponseDefaultTypeInternal _loadTrackableResponse_default_instance_;
}  // namespace grpcITrackableLoader
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcITrackableLoader::loadTrackableRequest* Arena::CreateMaybeMessage<::grpcITrackableLoader::loadTrackableRequest>(Arena*);
template<> ::grpcITrackableLoader::loadTrackableResponse* Arena::CreateMaybeMessage<::grpcITrackableLoader::loadTrackableResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcITrackableLoader {

// ===================================================================

class loadTrackableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITrackableLoader.loadTrackableRequest) */ {
 public:
  inline loadTrackableRequest() : loadTrackableRequest(nullptr) {}
  ~loadTrackableRequest() override;
  explicit constexpr loadTrackableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadTrackableRequest(const loadTrackableRequest& from);
  loadTrackableRequest(loadTrackableRequest&& from) noexcept
    : loadTrackableRequest() {
    *this = ::std::move(from);
  }

  inline loadTrackableRequest& operator=(const loadTrackableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadTrackableRequest& operator=(loadTrackableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loadTrackableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadTrackableRequest* internal_default_instance() {
    return reinterpret_cast<const loadTrackableRequest*>(
               &_loadTrackableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(loadTrackableRequest& a, loadTrackableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(loadTrackableRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadTrackableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadTrackableRequest* New() const final {
    return new loadTrackableRequest();
  }

  loadTrackableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadTrackableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loadTrackableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const loadTrackableRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadTrackableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITrackableLoader.loadTrackableRequest";
  }
  protected:
  explicit loadTrackableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackableFieldNumber = 1,
  };
  // bytes trackable = 1;
  void clear_trackable();
  const std::string& trackable() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackable(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackable();
  PROTOBUF_MUST_USE_RESULT std::string* release_trackable();
  void set_allocated_trackable(std::string* trackable);
  private:
  const std::string& _internal_trackable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackable(const std::string& value);
  std::string* _internal_mutable_trackable();
  public:

  // @@protoc_insertion_point(class_scope:grpcITrackableLoader.loadTrackableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITrackableLoaderService_2eproto;
};
// -------------------------------------------------------------------

class loadTrackableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITrackableLoader.loadTrackableResponse) */ {
 public:
  inline loadTrackableResponse() : loadTrackableResponse(nullptr) {}
  ~loadTrackableResponse() override;
  explicit constexpr loadTrackableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadTrackableResponse(const loadTrackableResponse& from);
  loadTrackableResponse(loadTrackableResponse&& from) noexcept
    : loadTrackableResponse() {
    *this = ::std::move(from);
  }

  inline loadTrackableResponse& operator=(const loadTrackableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadTrackableResponse& operator=(loadTrackableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loadTrackableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadTrackableResponse* internal_default_instance() {
    return reinterpret_cast<const loadTrackableResponse*>(
               &_loadTrackableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(loadTrackableResponse& a, loadTrackableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(loadTrackableResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadTrackableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadTrackableResponse* New() const final {
    return new loadTrackableResponse();
  }

  loadTrackableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadTrackableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loadTrackableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const loadTrackableResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadTrackableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITrackableLoader.loadTrackableResponse";
  }
  protected:
  explicit loadTrackableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackableFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes trackable = 1;
  void clear_trackable();
  const std::string& trackable() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackable(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackable();
  PROTOBUF_MUST_USE_RESULT std::string* release_trackable();
  void set_allocated_trackable(std::string* trackable);
  private:
  const std::string& _internal_trackable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackable(const std::string& value);
  std::string* _internal_mutable_trackable();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITrackableLoader.loadTrackableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITrackableLoaderService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// loadTrackableRequest

// bytes trackable = 1;
inline void loadTrackableRequest::clear_trackable() {
  trackable_.ClearToEmpty();
}
inline const std::string& loadTrackableRequest::trackable() const {
  // @@protoc_insertion_point(field_get:grpcITrackableLoader.loadTrackableRequest.trackable)
  return _internal_trackable();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void loadTrackableRequest::set_trackable(ArgT0&& arg0, ArgT... args) {
 
 trackable_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITrackableLoader.loadTrackableRequest.trackable)
}
inline std::string* loadTrackableRequest::mutable_trackable() {
  std::string* _s = _internal_mutable_trackable();
  // @@protoc_insertion_point(field_mutable:grpcITrackableLoader.loadTrackableRequest.trackable)
  return _s;
}
inline const std::string& loadTrackableRequest::_internal_trackable() const {
  return trackable_.Get();
}
inline void loadTrackableRequest::_internal_set_trackable(const std::string& value) {
  
  trackable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* loadTrackableRequest::_internal_mutable_trackable() {
  
  return trackable_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* loadTrackableRequest::release_trackable() {
  // @@protoc_insertion_point(field_release:grpcITrackableLoader.loadTrackableRequest.trackable)
  return trackable_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void loadTrackableRequest::set_allocated_trackable(std::string* trackable) {
  if (trackable != nullptr) {
    
  } else {
    
  }
  trackable_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trackable,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcITrackableLoader.loadTrackableRequest.trackable)
}

// -------------------------------------------------------------------

// loadTrackableResponse

// bytes trackable = 1;
inline void loadTrackableResponse::clear_trackable() {
  trackable_.ClearToEmpty();
}
inline const std::string& loadTrackableResponse::trackable() const {
  // @@protoc_insertion_point(field_get:grpcITrackableLoader.loadTrackableResponse.trackable)
  return _internal_trackable();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void loadTrackableResponse::set_trackable(ArgT0&& arg0, ArgT... args) {
 
 trackable_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITrackableLoader.loadTrackableResponse.trackable)
}
inline std::string* loadTrackableResponse::mutable_trackable() {
  std::string* _s = _internal_mutable_trackable();
  // @@protoc_insertion_point(field_mutable:grpcITrackableLoader.loadTrackableResponse.trackable)
  return _s;
}
inline const std::string& loadTrackableResponse::_internal_trackable() const {
  return trackable_.Get();
}
inline void loadTrackableResponse::_internal_set_trackable(const std::string& value) {
  
  trackable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* loadTrackableResponse::_internal_mutable_trackable() {
  
  return trackable_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* loadTrackableResponse::release_trackable() {
  // @@protoc_insertion_point(field_release:grpcITrackableLoader.loadTrackableResponse.trackable)
  return trackable_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void loadTrackableResponse::set_allocated_trackable(std::string* trackable) {
  if (trackable != nullptr) {
    
  } else {
    
  }
  trackable_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trackable,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcITrackableLoader.loadTrackableResponse.trackable)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void loadTrackableResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loadTrackableResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loadTrackableResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcITrackableLoader.loadTrackableResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void loadTrackableResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void loadTrackableResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcITrackableLoader.loadTrackableResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcITrackableLoader

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcITrackableLoaderService_2eproto
