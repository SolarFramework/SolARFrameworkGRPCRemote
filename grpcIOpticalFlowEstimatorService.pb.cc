// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIOpticalFlowEstimatorService.proto

#include "grpcIOpticalFlowEstimatorService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpcIOpticalFlowEstimator {
constexpr estimate_grpc0Request::estimate_grpc0Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : previousimage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currentimage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pointstotrack_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trackedpoints_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , grpcservercompressionformat_(0){}
struct estimate_grpc0RequestDefaultTypeInternal {
  constexpr estimate_grpc0RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~estimate_grpc0RequestDefaultTypeInternal() {}
  union {
    estimate_grpc0Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT estimate_grpc0RequestDefaultTypeInternal _estimate_grpc0Request_default_instance_;
constexpr estimate_grpc0Response::estimate_grpc0Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trackedpoints_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xpcfgrpcreturnvalue_(0){}
struct estimate_grpc0ResponseDefaultTypeInternal {
  constexpr estimate_grpc0ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~estimate_grpc0ResponseDefaultTypeInternal() {}
  union {
    estimate_grpc0Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT estimate_grpc0ResponseDefaultTypeInternal _estimate_grpc0Response_default_instance_;
constexpr estimate_grpc1Request::estimate_grpc1Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : previousimage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currentimage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pointstotrack_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , trackedpoints_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , grpcservercompressionformat_(0){}
struct estimate_grpc1RequestDefaultTypeInternal {
  constexpr estimate_grpc1RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~estimate_grpc1RequestDefaultTypeInternal() {}
  union {
    estimate_grpc1Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT estimate_grpc1RequestDefaultTypeInternal _estimate_grpc1Request_default_instance_;
constexpr estimate_grpc1Response::estimate_grpc1Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trackedpoints_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xpcfgrpcreturnvalue_(0){}
struct estimate_grpc1ResponseDefaultTypeInternal {
  constexpr estimate_grpc1ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~estimate_grpc1ResponseDefaultTypeInternal() {}
  union {
    estimate_grpc1Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT estimate_grpc1ResponseDefaultTypeInternal _estimate_grpc1Response_default_instance_;
}  // namespace grpcIOpticalFlowEstimator
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpcIOpticalFlowEstimatorService_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grpcIOpticalFlowEstimatorService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpcIOpticalFlowEstimatorService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grpcIOpticalFlowEstimatorService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Request, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Request, previousimage_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Request, currentimage_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Request, pointstotrack_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Request, trackedpoints_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Request, status_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Request, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Response, trackedpoints_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Response, status_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Response, error_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc0Response, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Request, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Request, previousimage_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Request, currentimage_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Request, pointstotrack_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Request, trackedpoints_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Request, status_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Request, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Response, trackedpoints_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Response, status_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Response, error_),
  PROTOBUF_FIELD_OFFSET(::grpcIOpticalFlowEstimator::estimate_grpc1Response, xpcfgrpcreturnvalue_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpcIOpticalFlowEstimator::estimate_grpc0Request)},
  { 12, -1, sizeof(::grpcIOpticalFlowEstimator::estimate_grpc0Response)},
  { 21, -1, sizeof(::grpcIOpticalFlowEstimator::estimate_grpc1Request)},
  { 33, -1, sizeof(::grpcIOpticalFlowEstimator::estimate_grpc1Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIOpticalFlowEstimator::_estimate_grpc0Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIOpticalFlowEstimator::_estimate_grpc0Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIOpticalFlowEstimator::_estimate_grpc1Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIOpticalFlowEstimator::_estimate_grpc1Response_default_instance_),
};

const char descriptor_table_protodef_grpcIOpticalFlowEstimatorService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&grpcIOpticalFlowEstimatorService.proto"
  "\022\031grpcIOpticalFlowEstimator\032\033google/prot"
  "obuf/empty.proto\"\266\001\n\025estimate_grpc0Reque"
  "st\022#\n\033grpcServerCompressionFormat\030\001 \001(\005\022"
  "\025\n\rpreviousImage\030\002 \001(\014\022\024\n\014currentImage\030\003"
  " \001(\014\022\025\n\rpointsToTrack\030\004 \001(\014\022\025\n\rtrackedPo"
  "ints\030\005 \001(\014\022\016\n\006status\030\006 \001(\014\022\r\n\005error\030\007 \001("
  "\014\"k\n\026estimate_grpc0Response\022\025\n\rtrackedPo"
  "ints\030\001 \001(\014\022\016\n\006status\030\002 \001(\014\022\r\n\005error\030\003 \001("
  "\014\022\033\n\023xpcfGrpcReturnValue\030\004 \001(\021\"\266\001\n\025estim"
  "ate_grpc1Request\022#\n\033grpcServerCompressio"
  "nFormat\030\001 \001(\005\022\025\n\rpreviousImage\030\002 \001(\014\022\024\n\014"
  "currentImage\030\003 \001(\014\022\025\n\rpointsToTrack\030\004 \001("
  "\014\022\025\n\rtrackedPoints\030\005 \001(\014\022\016\n\006status\030\006 \001(\014"
  "\022\r\n\005error\030\007 \001(\014\"k\n\026estimate_grpc1Respons"
  "e\022\025\n\rtrackedPoints\030\001 \001(\014\022\016\n\006status\030\002 \001(\014"
  "\022\r\n\005error\030\003 \001(\014\022\033\n\023xpcfGrpcReturnValue\030\004"
  " \001(\0212\224\002\n grpcIOpticalFlowEstimatorServic"
  "e\022w\n\016estimate_grpc0\0220.grpcIOpticalFlowEs"
  "timator.estimate_grpc0Request\0321.grpcIOpt"
  "icalFlowEstimator.estimate_grpc0Response"
  "\"\000\022w\n\016estimate_grpc1\0220.grpcIOpticalFlowE"
  "stimator.estimate_grpc1Request\0321.grpcIOp"
  "ticalFlowEstimator.estimate_grpc1Respons"
  "e\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grpcIOpticalFlowEstimatorService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpcIOpticalFlowEstimatorService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIOpticalFlowEstimatorService_2eproto = {
  false, false, 971, descriptor_table_protodef_grpcIOpticalFlowEstimatorService_2eproto, "grpcIOpticalFlowEstimatorService.proto", 
  &descriptor_table_grpcIOpticalFlowEstimatorService_2eproto_once, descriptor_table_grpcIOpticalFlowEstimatorService_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_grpcIOpticalFlowEstimatorService_2eproto::offsets,
  file_level_metadata_grpcIOpticalFlowEstimatorService_2eproto, file_level_enum_descriptors_grpcIOpticalFlowEstimatorService_2eproto, file_level_service_descriptors_grpcIOpticalFlowEstimatorService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_grpcIOpticalFlowEstimatorService_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grpcIOpticalFlowEstimatorService_2eproto);
  return descriptor_table_grpcIOpticalFlowEstimatorService_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_grpcIOpticalFlowEstimatorService_2eproto(&descriptor_table_grpcIOpticalFlowEstimatorService_2eproto);
namespace grpcIOpticalFlowEstimator {

// ===================================================================

class estimate_grpc0Request::_Internal {
 public:
};

estimate_grpc0Request::estimate_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIOpticalFlowEstimator.estimate_grpc0Request)
}
estimate_grpc0Request::estimate_grpc0Request(const estimate_grpc0Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  previousimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previousimage().empty()) {
    previousimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previousimage(), 
      GetArena());
  }
  currentimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currentimage().empty()) {
    currentimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currentimage(), 
      GetArena());
  }
  pointstotrack_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pointstotrack().empty()) {
    pointstotrack_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pointstotrack(), 
      GetArena());
  }
  trackedpoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trackedpoints().empty()) {
    trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trackedpoints(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArena());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIOpticalFlowEstimator.estimate_grpc0Request)
}

void estimate_grpc0Request::SharedCtor() {
previousimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
currentimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pointstotrack_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
trackedpoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
grpcservercompressionformat_ = 0;
}

estimate_grpc0Request::~estimate_grpc0Request() {
  // @@protoc_insertion_point(destructor:grpcIOpticalFlowEstimator.estimate_grpc0Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void estimate_grpc0Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  previousimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currentimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pointstotrack_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trackedpoints_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void estimate_grpc0Request::ArenaDtor(void* object) {
  estimate_grpc0Request* _this = reinterpret_cast< estimate_grpc0Request* >(object);
  (void)_this;
}
void estimate_grpc0Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void estimate_grpc0Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void estimate_grpc0Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIOpticalFlowEstimator.estimate_grpc0Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previousimage_.ClearToEmpty();
  currentimage_.ClearToEmpty();
  pointstotrack_.ClearToEmpty();
  trackedpoints_.ClearToEmpty();
  status_.ClearToEmpty();
  error_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* estimate_grpc0Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previousImage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_previousimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes currentImage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_currentimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pointsToTrack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pointstotrack();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes trackedPoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_trackedpoints();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* estimate_grpc0Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIOpticalFlowEstimator.estimate_grpc0Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes previousImage = 2;
  if (this->previousimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_previousimage(), target);
  }

  // bytes currentImage = 3;
  if (this->currentimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_currentimage(), target);
  }

  // bytes pointsToTrack = 4;
  if (this->pointstotrack().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pointstotrack(), target);
  }

  // bytes trackedPoints = 5;
  if (this->trackedpoints().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_trackedpoints(), target);
  }

  // bytes status = 6;
  if (this->status().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_status(), target);
  }

  // bytes error = 7;
  if (this->error().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIOpticalFlowEstimator.estimate_grpc0Request)
  return target;
}

size_t estimate_grpc0Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIOpticalFlowEstimator.estimate_grpc0Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes previousImage = 2;
  if (this->previousimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previousimage());
  }

  // bytes currentImage = 3;
  if (this->currentimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_currentimage());
  }

  // bytes pointsToTrack = 4;
  if (this->pointstotrack().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pointstotrack());
  }

  // bytes trackedPoints = 5;
  if (this->trackedpoints().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trackedpoints());
  }

  // bytes status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_status());
  }

  // bytes error = 7;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void estimate_grpc0Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIOpticalFlowEstimator.estimate_grpc0Request)
  GOOGLE_DCHECK_NE(&from, this);
  const estimate_grpc0Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<estimate_grpc0Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIOpticalFlowEstimator.estimate_grpc0Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIOpticalFlowEstimator.estimate_grpc0Request)
    MergeFrom(*source);
  }
}

void estimate_grpc0Request::MergeFrom(const estimate_grpc0Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIOpticalFlowEstimator.estimate_grpc0Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.previousimage().size() > 0) {
    _internal_set_previousimage(from._internal_previousimage());
  }
  if (from.currentimage().size() > 0) {
    _internal_set_currentimage(from._internal_currentimage());
  }
  if (from.pointstotrack().size() > 0) {
    _internal_set_pointstotrack(from._internal_pointstotrack());
  }
  if (from.trackedpoints().size() > 0) {
    _internal_set_trackedpoints(from._internal_trackedpoints());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void estimate_grpc0Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIOpticalFlowEstimator.estimate_grpc0Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void estimate_grpc0Request::CopyFrom(const estimate_grpc0Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIOpticalFlowEstimator.estimate_grpc0Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool estimate_grpc0Request::IsInitialized() const {
  return true;
}

void estimate_grpc0Request::InternalSwap(estimate_grpc0Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  previousimage_.Swap(&other->previousimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currentimage_.Swap(&other->currentimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pointstotrack_.Swap(&other->pointstotrack_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trackedpoints_.Swap(&other->trackedpoints_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata estimate_grpc0Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class estimate_grpc0Response::_Internal {
 public:
};

estimate_grpc0Response::estimate_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIOpticalFlowEstimator.estimate_grpc0Response)
}
estimate_grpc0Response::estimate_grpc0Response(const estimate_grpc0Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trackedpoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trackedpoints().empty()) {
    trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trackedpoints(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArena());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIOpticalFlowEstimator.estimate_grpc0Response)
}

void estimate_grpc0Response::SharedCtor() {
trackedpoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
xpcfgrpcreturnvalue_ = 0;
}

estimate_grpc0Response::~estimate_grpc0Response() {
  // @@protoc_insertion_point(destructor:grpcIOpticalFlowEstimator.estimate_grpc0Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void estimate_grpc0Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trackedpoints_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void estimate_grpc0Response::ArenaDtor(void* object) {
  estimate_grpc0Response* _this = reinterpret_cast< estimate_grpc0Response* >(object);
  (void)_this;
}
void estimate_grpc0Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void estimate_grpc0Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void estimate_grpc0Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIOpticalFlowEstimator.estimate_grpc0Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackedpoints_.ClearToEmpty();
  status_.ClearToEmpty();
  error_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* estimate_grpc0Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes trackedPoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trackedpoints();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* estimate_grpc0Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIOpticalFlowEstimator.estimate_grpc0Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trackedPoints = 1;
  if (this->trackedpoints().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trackedpoints(), target);
  }

  // bytes status = 2;
  if (this->status().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_status(), target);
  }

  // bytes error = 3;
  if (this->error().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_error(), target);
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIOpticalFlowEstimator.estimate_grpc0Response)
  return target;
}

size_t estimate_grpc0Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIOpticalFlowEstimator.estimate_grpc0Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trackedPoints = 1;
  if (this->trackedpoints().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trackedpoints());
  }

  // bytes status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_status());
  }

  // bytes error = 3;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error());
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void estimate_grpc0Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIOpticalFlowEstimator.estimate_grpc0Response)
  GOOGLE_DCHECK_NE(&from, this);
  const estimate_grpc0Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<estimate_grpc0Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIOpticalFlowEstimator.estimate_grpc0Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIOpticalFlowEstimator.estimate_grpc0Response)
    MergeFrom(*source);
  }
}

void estimate_grpc0Response::MergeFrom(const estimate_grpc0Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIOpticalFlowEstimator.estimate_grpc0Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trackedpoints().size() > 0) {
    _internal_set_trackedpoints(from._internal_trackedpoints());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void estimate_grpc0Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIOpticalFlowEstimator.estimate_grpc0Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void estimate_grpc0Response::CopyFrom(const estimate_grpc0Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIOpticalFlowEstimator.estimate_grpc0Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool estimate_grpc0Response::IsInitialized() const {
  return true;
}

void estimate_grpc0Response::InternalSwap(estimate_grpc0Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trackedpoints_.Swap(&other->trackedpoints_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata estimate_grpc0Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class estimate_grpc1Request::_Internal {
 public:
};

estimate_grpc1Request::estimate_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIOpticalFlowEstimator.estimate_grpc1Request)
}
estimate_grpc1Request::estimate_grpc1Request(const estimate_grpc1Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  previousimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previousimage().empty()) {
    previousimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previousimage(), 
      GetArena());
  }
  currentimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currentimage().empty()) {
    currentimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currentimage(), 
      GetArena());
  }
  pointstotrack_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pointstotrack().empty()) {
    pointstotrack_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pointstotrack(), 
      GetArena());
  }
  trackedpoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trackedpoints().empty()) {
    trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trackedpoints(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArena());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIOpticalFlowEstimator.estimate_grpc1Request)
}

void estimate_grpc1Request::SharedCtor() {
previousimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
currentimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pointstotrack_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
trackedpoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
grpcservercompressionformat_ = 0;
}

estimate_grpc1Request::~estimate_grpc1Request() {
  // @@protoc_insertion_point(destructor:grpcIOpticalFlowEstimator.estimate_grpc1Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void estimate_grpc1Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  previousimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currentimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pointstotrack_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trackedpoints_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void estimate_grpc1Request::ArenaDtor(void* object) {
  estimate_grpc1Request* _this = reinterpret_cast< estimate_grpc1Request* >(object);
  (void)_this;
}
void estimate_grpc1Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void estimate_grpc1Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void estimate_grpc1Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIOpticalFlowEstimator.estimate_grpc1Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previousimage_.ClearToEmpty();
  currentimage_.ClearToEmpty();
  pointstotrack_.ClearToEmpty();
  trackedpoints_.ClearToEmpty();
  status_.ClearToEmpty();
  error_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* estimate_grpc1Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previousImage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_previousimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes currentImage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_currentimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pointsToTrack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pointstotrack();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes trackedPoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_trackedpoints();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* estimate_grpc1Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIOpticalFlowEstimator.estimate_grpc1Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes previousImage = 2;
  if (this->previousimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_previousimage(), target);
  }

  // bytes currentImage = 3;
  if (this->currentimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_currentimage(), target);
  }

  // bytes pointsToTrack = 4;
  if (this->pointstotrack().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pointstotrack(), target);
  }

  // bytes trackedPoints = 5;
  if (this->trackedpoints().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_trackedpoints(), target);
  }

  // bytes status = 6;
  if (this->status().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_status(), target);
  }

  // bytes error = 7;
  if (this->error().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIOpticalFlowEstimator.estimate_grpc1Request)
  return target;
}

size_t estimate_grpc1Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIOpticalFlowEstimator.estimate_grpc1Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes previousImage = 2;
  if (this->previousimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previousimage());
  }

  // bytes currentImage = 3;
  if (this->currentimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_currentimage());
  }

  // bytes pointsToTrack = 4;
  if (this->pointstotrack().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pointstotrack());
  }

  // bytes trackedPoints = 5;
  if (this->trackedpoints().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trackedpoints());
  }

  // bytes status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_status());
  }

  // bytes error = 7;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void estimate_grpc1Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIOpticalFlowEstimator.estimate_grpc1Request)
  GOOGLE_DCHECK_NE(&from, this);
  const estimate_grpc1Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<estimate_grpc1Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIOpticalFlowEstimator.estimate_grpc1Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIOpticalFlowEstimator.estimate_grpc1Request)
    MergeFrom(*source);
  }
}

void estimate_grpc1Request::MergeFrom(const estimate_grpc1Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIOpticalFlowEstimator.estimate_grpc1Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.previousimage().size() > 0) {
    _internal_set_previousimage(from._internal_previousimage());
  }
  if (from.currentimage().size() > 0) {
    _internal_set_currentimage(from._internal_currentimage());
  }
  if (from.pointstotrack().size() > 0) {
    _internal_set_pointstotrack(from._internal_pointstotrack());
  }
  if (from.trackedpoints().size() > 0) {
    _internal_set_trackedpoints(from._internal_trackedpoints());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void estimate_grpc1Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIOpticalFlowEstimator.estimate_grpc1Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void estimate_grpc1Request::CopyFrom(const estimate_grpc1Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIOpticalFlowEstimator.estimate_grpc1Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool estimate_grpc1Request::IsInitialized() const {
  return true;
}

void estimate_grpc1Request::InternalSwap(estimate_grpc1Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  previousimage_.Swap(&other->previousimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currentimage_.Swap(&other->currentimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pointstotrack_.Swap(&other->pointstotrack_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trackedpoints_.Swap(&other->trackedpoints_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata estimate_grpc1Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class estimate_grpc1Response::_Internal {
 public:
};

estimate_grpc1Response::estimate_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIOpticalFlowEstimator.estimate_grpc1Response)
}
estimate_grpc1Response::estimate_grpc1Response(const estimate_grpc1Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trackedpoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trackedpoints().empty()) {
    trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trackedpoints(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArena());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIOpticalFlowEstimator.estimate_grpc1Response)
}

void estimate_grpc1Response::SharedCtor() {
trackedpoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
xpcfgrpcreturnvalue_ = 0;
}

estimate_grpc1Response::~estimate_grpc1Response() {
  // @@protoc_insertion_point(destructor:grpcIOpticalFlowEstimator.estimate_grpc1Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void estimate_grpc1Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trackedpoints_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void estimate_grpc1Response::ArenaDtor(void* object) {
  estimate_grpc1Response* _this = reinterpret_cast< estimate_grpc1Response* >(object);
  (void)_this;
}
void estimate_grpc1Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void estimate_grpc1Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void estimate_grpc1Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIOpticalFlowEstimator.estimate_grpc1Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackedpoints_.ClearToEmpty();
  status_.ClearToEmpty();
  error_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* estimate_grpc1Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes trackedPoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trackedpoints();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* estimate_grpc1Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIOpticalFlowEstimator.estimate_grpc1Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trackedPoints = 1;
  if (this->trackedpoints().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trackedpoints(), target);
  }

  // bytes status = 2;
  if (this->status().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_status(), target);
  }

  // bytes error = 3;
  if (this->error().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_error(), target);
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIOpticalFlowEstimator.estimate_grpc1Response)
  return target;
}

size_t estimate_grpc1Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIOpticalFlowEstimator.estimate_grpc1Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trackedPoints = 1;
  if (this->trackedpoints().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trackedpoints());
  }

  // bytes status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_status());
  }

  // bytes error = 3;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_error());
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void estimate_grpc1Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIOpticalFlowEstimator.estimate_grpc1Response)
  GOOGLE_DCHECK_NE(&from, this);
  const estimate_grpc1Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<estimate_grpc1Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIOpticalFlowEstimator.estimate_grpc1Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIOpticalFlowEstimator.estimate_grpc1Response)
    MergeFrom(*source);
  }
}

void estimate_grpc1Response::MergeFrom(const estimate_grpc1Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIOpticalFlowEstimator.estimate_grpc1Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trackedpoints().size() > 0) {
    _internal_set_trackedpoints(from._internal_trackedpoints());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void estimate_grpc1Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIOpticalFlowEstimator.estimate_grpc1Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void estimate_grpc1Response::CopyFrom(const estimate_grpc1Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIOpticalFlowEstimator.estimate_grpc1Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool estimate_grpc1Response::IsInitialized() const {
  return true;
}

void estimate_grpc1Response::InternalSwap(estimate_grpc1Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trackedpoints_.Swap(&other->trackedpoints_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata estimate_grpc1Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIOpticalFlowEstimator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIOpticalFlowEstimator::estimate_grpc0Request* Arena::CreateMaybeMessage< ::grpcIOpticalFlowEstimator::estimate_grpc0Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIOpticalFlowEstimator::estimate_grpc0Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIOpticalFlowEstimator::estimate_grpc0Response* Arena::CreateMaybeMessage< ::grpcIOpticalFlowEstimator::estimate_grpc0Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIOpticalFlowEstimator::estimate_grpc0Response >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIOpticalFlowEstimator::estimate_grpc1Request* Arena::CreateMaybeMessage< ::grpcIOpticalFlowEstimator::estimate_grpc1Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIOpticalFlowEstimator::estimate_grpc1Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIOpticalFlowEstimator::estimate_grpc1Response* Arena::CreateMaybeMessage< ::grpcIOpticalFlowEstimator::estimate_grpc1Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIOpticalFlowEstimator::estimate_grpc1Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
