// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcICameraService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcICameraService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcICameraService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcICameraService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcICameraService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcICameraService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcICameraService_2eproto_metadata_getter(int index);
namespace grpcICamera {
class getDistortionParametersRequest;
struct getDistortionParametersRequestDefaultTypeInternal;
extern getDistortionParametersRequestDefaultTypeInternal _getDistortionParametersRequest_default_instance_;
class getDistortionParametersResponse;
struct getDistortionParametersResponseDefaultTypeInternal;
extern getDistortionParametersResponseDefaultTypeInternal _getDistortionParametersResponse_default_instance_;
class getIntrinsicsParametersRequest;
struct getIntrinsicsParametersRequestDefaultTypeInternal;
extern getIntrinsicsParametersRequestDefaultTypeInternal _getIntrinsicsParametersRequest_default_instance_;
class getIntrinsicsParametersResponse;
struct getIntrinsicsParametersResponseDefaultTypeInternal;
extern getIntrinsicsParametersResponseDefaultTypeInternal _getIntrinsicsParametersResponse_default_instance_;
class getNextImageRequest;
struct getNextImageRequestDefaultTypeInternal;
extern getNextImageRequestDefaultTypeInternal _getNextImageRequest_default_instance_;
class getNextImageResponse;
struct getNextImageResponseDefaultTypeInternal;
extern getNextImageResponseDefaultTypeInternal _getNextImageResponse_default_instance_;
class getParametersRequest;
struct getParametersRequestDefaultTypeInternal;
extern getParametersRequestDefaultTypeInternal _getParametersRequest_default_instance_;
class getParametersResponse;
struct getParametersResponseDefaultTypeInternal;
extern getParametersResponseDefaultTypeInternal _getParametersResponse_default_instance_;
class getResolutionRequest;
struct getResolutionRequestDefaultTypeInternal;
extern getResolutionRequestDefaultTypeInternal _getResolutionRequest_default_instance_;
class getResolutionResponse;
struct getResolutionResponseDefaultTypeInternal;
extern getResolutionResponseDefaultTypeInternal _getResolutionResponse_default_instance_;
class setDistortionParametersRequest;
struct setDistortionParametersRequestDefaultTypeInternal;
extern setDistortionParametersRequestDefaultTypeInternal _setDistortionParametersRequest_default_instance_;
class setIntrinsicParametersRequest;
struct setIntrinsicParametersRequestDefaultTypeInternal;
extern setIntrinsicParametersRequestDefaultTypeInternal _setIntrinsicParametersRequest_default_instance_;
class setParametersRequest;
struct setParametersRequestDefaultTypeInternal;
extern setParametersRequestDefaultTypeInternal _setParametersRequest_default_instance_;
class setResolutionRequest;
struct setResolutionRequestDefaultTypeInternal;
extern setResolutionRequestDefaultTypeInternal _setResolutionRequest_default_instance_;
class startRequest;
struct startRequestDefaultTypeInternal;
extern startRequestDefaultTypeInternal _startRequest_default_instance_;
class startResponse;
struct startResponseDefaultTypeInternal;
extern startResponseDefaultTypeInternal _startResponse_default_instance_;
class stopRequest;
struct stopRequestDefaultTypeInternal;
extern stopRequestDefaultTypeInternal _stopRequest_default_instance_;
class stopResponse;
struct stopResponseDefaultTypeInternal;
extern stopResponseDefaultTypeInternal _stopResponse_default_instance_;
}  // namespace grpcICamera
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcICamera::getDistortionParametersRequest* Arena::CreateMaybeMessage<::grpcICamera::getDistortionParametersRequest>(Arena*);
template<> ::grpcICamera::getDistortionParametersResponse* Arena::CreateMaybeMessage<::grpcICamera::getDistortionParametersResponse>(Arena*);
template<> ::grpcICamera::getIntrinsicsParametersRequest* Arena::CreateMaybeMessage<::grpcICamera::getIntrinsicsParametersRequest>(Arena*);
template<> ::grpcICamera::getIntrinsicsParametersResponse* Arena::CreateMaybeMessage<::grpcICamera::getIntrinsicsParametersResponse>(Arena*);
template<> ::grpcICamera::getNextImageRequest* Arena::CreateMaybeMessage<::grpcICamera::getNextImageRequest>(Arena*);
template<> ::grpcICamera::getNextImageResponse* Arena::CreateMaybeMessage<::grpcICamera::getNextImageResponse>(Arena*);
template<> ::grpcICamera::getParametersRequest* Arena::CreateMaybeMessage<::grpcICamera::getParametersRequest>(Arena*);
template<> ::grpcICamera::getParametersResponse* Arena::CreateMaybeMessage<::grpcICamera::getParametersResponse>(Arena*);
template<> ::grpcICamera::getResolutionRequest* Arena::CreateMaybeMessage<::grpcICamera::getResolutionRequest>(Arena*);
template<> ::grpcICamera::getResolutionResponse* Arena::CreateMaybeMessage<::grpcICamera::getResolutionResponse>(Arena*);
template<> ::grpcICamera::setDistortionParametersRequest* Arena::CreateMaybeMessage<::grpcICamera::setDistortionParametersRequest>(Arena*);
template<> ::grpcICamera::setIntrinsicParametersRequest* Arena::CreateMaybeMessage<::grpcICamera::setIntrinsicParametersRequest>(Arena*);
template<> ::grpcICamera::setParametersRequest* Arena::CreateMaybeMessage<::grpcICamera::setParametersRequest>(Arena*);
template<> ::grpcICamera::setResolutionRequest* Arena::CreateMaybeMessage<::grpcICamera::setResolutionRequest>(Arena*);
template<> ::grpcICamera::startRequest* Arena::CreateMaybeMessage<::grpcICamera::startRequest>(Arena*);
template<> ::grpcICamera::startResponse* Arena::CreateMaybeMessage<::grpcICamera::startResponse>(Arena*);
template<> ::grpcICamera::stopRequest* Arena::CreateMaybeMessage<::grpcICamera::stopRequest>(Arena*);
template<> ::grpcICamera::stopResponse* Arena::CreateMaybeMessage<::grpcICamera::stopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcICamera {

// ===================================================================

class startRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.startRequest) */ {
 public:
  inline startRequest() : startRequest(nullptr) {}
  virtual ~startRequest();
  explicit constexpr startRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startRequest(const startRequest& from);
  startRequest(startRequest&& from) noexcept
    : startRequest() {
    *this = ::std::move(from);
  }

  inline startRequest& operator=(const startRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline startRequest& operator=(startRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const startRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const startRequest* internal_default_instance() {
    return reinterpret_cast<const startRequest*>(
               &_startRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(startRequest& a, startRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(startRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline startRequest* New() const final {
    return CreateMaybeMessage<startRequest>(nullptr);
  }

  startRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<startRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const startRequest& from);
  void MergeFrom(const startRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.startRequest";
  }
  protected:
  explicit startRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.startRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class startResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.startResponse) */ {
 public:
  inline startResponse() : startResponse(nullptr) {}
  virtual ~startResponse();
  explicit constexpr startResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startResponse(const startResponse& from);
  startResponse(startResponse&& from) noexcept
    : startResponse() {
    *this = ::std::move(from);
  }

  inline startResponse& operator=(const startResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline startResponse& operator=(startResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const startResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const startResponse* internal_default_instance() {
    return reinterpret_cast<const startResponse*>(
               &_startResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(startResponse& a, startResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(startResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline startResponse* New() const final {
    return CreateMaybeMessage<startResponse>(nullptr);
  }

  startResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<startResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const startResponse& from);
  void MergeFrom(const startResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.startResponse";
  }
  protected:
  explicit startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.startResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class stopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.stopRequest) */ {
 public:
  inline stopRequest() : stopRequest(nullptr) {}
  virtual ~stopRequest();
  explicit constexpr stopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopRequest(const stopRequest& from);
  stopRequest(stopRequest&& from) noexcept
    : stopRequest() {
    *this = ::std::move(from);
  }

  inline stopRequest& operator=(const stopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopRequest& operator=(stopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const stopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopRequest* internal_default_instance() {
    return reinterpret_cast<const stopRequest*>(
               &_stopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(stopRequest& a, stopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(stopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stopRequest* New() const final {
    return CreateMaybeMessage<stopRequest>(nullptr);
  }

  stopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const stopRequest& from);
  void MergeFrom(const stopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.stopRequest";
  }
  protected:
  explicit stopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.stopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class stopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.stopResponse) */ {
 public:
  inline stopResponse() : stopResponse(nullptr) {}
  virtual ~stopResponse();
  explicit constexpr stopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopResponse(const stopResponse& from);
  stopResponse(stopResponse&& from) noexcept
    : stopResponse() {
    *this = ::std::move(from);
  }

  inline stopResponse& operator=(const stopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopResponse& operator=(stopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const stopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopResponse* internal_default_instance() {
    return reinterpret_cast<const stopResponse*>(
               &_stopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(stopResponse& a, stopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(stopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stopResponse* New() const final {
    return CreateMaybeMessage<stopResponse>(nullptr);
  }

  stopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const stopResponse& from);
  void MergeFrom(const stopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.stopResponse";
  }
  protected:
  explicit stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.stopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class getNextImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.getNextImageRequest) */ {
 public:
  inline getNextImageRequest() : getNextImageRequest(nullptr) {}
  virtual ~getNextImageRequest();
  explicit constexpr getNextImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNextImageRequest(const getNextImageRequest& from);
  getNextImageRequest(getNextImageRequest&& from) noexcept
    : getNextImageRequest() {
    *this = ::std::move(from);
  }

  inline getNextImageRequest& operator=(const getNextImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNextImageRequest& operator=(getNextImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getNextImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNextImageRequest* internal_default_instance() {
    return reinterpret_cast<const getNextImageRequest*>(
               &_getNextImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getNextImageRequest& a, getNextImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getNextImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNextImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNextImageRequest* New() const final {
    return CreateMaybeMessage<getNextImageRequest>(nullptr);
  }

  getNextImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNextImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getNextImageRequest& from);
  void MergeFrom(const getNextImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNextImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.getNextImageRequest";
  }
  protected:
  explicit getNextImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes img = 2;
  void clear_img();
  const std::string& img() const;
  void set_img(const std::string& value);
  void set_img(std::string&& value);
  void set_img(const char* value);
  void set_img(const void* value, size_t size);
  std::string* mutable_img();
  std::string* release_img();
  void set_allocated_img(std::string* img);
  private:
  const std::string& _internal_img() const;
  void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.getNextImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class getNextImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.getNextImageResponse) */ {
 public:
  inline getNextImageResponse() : getNextImageResponse(nullptr) {}
  virtual ~getNextImageResponse();
  explicit constexpr getNextImageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNextImageResponse(const getNextImageResponse& from);
  getNextImageResponse(getNextImageResponse&& from) noexcept
    : getNextImageResponse() {
    *this = ::std::move(from);
  }

  inline getNextImageResponse& operator=(const getNextImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNextImageResponse& operator=(getNextImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getNextImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNextImageResponse* internal_default_instance() {
    return reinterpret_cast<const getNextImageResponse*>(
               &_getNextImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getNextImageResponse& a, getNextImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getNextImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNextImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNextImageResponse* New() const final {
    return CreateMaybeMessage<getNextImageResponse>(nullptr);
  }

  getNextImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNextImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getNextImageResponse& from);
  void MergeFrom(const getNextImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNextImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.getNextImageResponse";
  }
  protected:
  explicit getNextImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes img = 1;
  void clear_img();
  const std::string& img() const;
  void set_img(const std::string& value);
  void set_img(std::string&& value);
  void set_img(const char* value);
  void set_img(const void* value, size_t size);
  std::string* mutable_img();
  std::string* release_img();
  void set_allocated_img(std::string* img);
  private:
  const std::string& _internal_img() const;
  void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.getNextImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class setResolutionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.setResolutionRequest) */ {
 public:
  inline setResolutionRequest() : setResolutionRequest(nullptr) {}
  virtual ~setResolutionRequest();
  explicit constexpr setResolutionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setResolutionRequest(const setResolutionRequest& from);
  setResolutionRequest(setResolutionRequest&& from) noexcept
    : setResolutionRequest() {
    *this = ::std::move(from);
  }

  inline setResolutionRequest& operator=(const setResolutionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setResolutionRequest& operator=(setResolutionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setResolutionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setResolutionRequest* internal_default_instance() {
    return reinterpret_cast<const setResolutionRequest*>(
               &_setResolutionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(setResolutionRequest& a, setResolutionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setResolutionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setResolutionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setResolutionRequest* New() const final {
    return CreateMaybeMessage<setResolutionRequest>(nullptr);
  }

  setResolutionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setResolutionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setResolutionRequest& from);
  void MergeFrom(const setResolutionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setResolutionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.setResolutionRequest";
  }
  protected:
  explicit setResolutionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolutionFieldNumber = 1,
  };
  // bytes resolution = 1;
  void clear_resolution();
  const std::string& resolution() const;
  void set_resolution(const std::string& value);
  void set_resolution(std::string&& value);
  void set_resolution(const char* value);
  void set_resolution(const void* value, size_t size);
  std::string* mutable_resolution();
  std::string* release_resolution();
  void set_allocated_resolution(std::string* resolution);
  private:
  const std::string& _internal_resolution() const;
  void _internal_set_resolution(const std::string& value);
  std::string* _internal_mutable_resolution();
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.setResolutionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class setIntrinsicParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.setIntrinsicParametersRequest) */ {
 public:
  inline setIntrinsicParametersRequest() : setIntrinsicParametersRequest(nullptr) {}
  virtual ~setIntrinsicParametersRequest();
  explicit constexpr setIntrinsicParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setIntrinsicParametersRequest(const setIntrinsicParametersRequest& from);
  setIntrinsicParametersRequest(setIntrinsicParametersRequest&& from) noexcept
    : setIntrinsicParametersRequest() {
    *this = ::std::move(from);
  }

  inline setIntrinsicParametersRequest& operator=(const setIntrinsicParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setIntrinsicParametersRequest& operator=(setIntrinsicParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setIntrinsicParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setIntrinsicParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setIntrinsicParametersRequest*>(
               &_setIntrinsicParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(setIntrinsicParametersRequest& a, setIntrinsicParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setIntrinsicParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setIntrinsicParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setIntrinsicParametersRequest* New() const final {
    return CreateMaybeMessage<setIntrinsicParametersRequest>(nullptr);
  }

  setIntrinsicParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setIntrinsicParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setIntrinsicParametersRequest& from);
  void MergeFrom(const setIntrinsicParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setIntrinsicParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.setIntrinsicParametersRequest";
  }
  protected:
  explicit setIntrinsicParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntrinsicParametersFieldNumber = 1,
  };
  // bytes intrinsic_parameters = 1;
  void clear_intrinsic_parameters();
  const std::string& intrinsic_parameters() const;
  void set_intrinsic_parameters(const std::string& value);
  void set_intrinsic_parameters(std::string&& value);
  void set_intrinsic_parameters(const char* value);
  void set_intrinsic_parameters(const void* value, size_t size);
  std::string* mutable_intrinsic_parameters();
  std::string* release_intrinsic_parameters();
  void set_allocated_intrinsic_parameters(std::string* intrinsic_parameters);
  private:
  const std::string& _internal_intrinsic_parameters() const;
  void _internal_set_intrinsic_parameters(const std::string& value);
  std::string* _internal_mutable_intrinsic_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.setIntrinsicParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intrinsic_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class setDistortionParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.setDistortionParametersRequest) */ {
 public:
  inline setDistortionParametersRequest() : setDistortionParametersRequest(nullptr) {}
  virtual ~setDistortionParametersRequest();
  explicit constexpr setDistortionParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDistortionParametersRequest(const setDistortionParametersRequest& from);
  setDistortionParametersRequest(setDistortionParametersRequest&& from) noexcept
    : setDistortionParametersRequest() {
    *this = ::std::move(from);
  }

  inline setDistortionParametersRequest& operator=(const setDistortionParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDistortionParametersRequest& operator=(setDistortionParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setDistortionParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDistortionParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setDistortionParametersRequest*>(
               &_setDistortionParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(setDistortionParametersRequest& a, setDistortionParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setDistortionParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDistortionParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDistortionParametersRequest* New() const final {
    return CreateMaybeMessage<setDistortionParametersRequest>(nullptr);
  }

  setDistortionParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDistortionParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setDistortionParametersRequest& from);
  void MergeFrom(const setDistortionParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDistortionParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.setDistortionParametersRequest";
  }
  protected:
  explicit setDistortionParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistortionParametersFieldNumber = 1,
  };
  // bytes distortion_parameters = 1;
  void clear_distortion_parameters();
  const std::string& distortion_parameters() const;
  void set_distortion_parameters(const std::string& value);
  void set_distortion_parameters(std::string&& value);
  void set_distortion_parameters(const char* value);
  void set_distortion_parameters(const void* value, size_t size);
  std::string* mutable_distortion_parameters();
  std::string* release_distortion_parameters();
  void set_allocated_distortion_parameters(std::string* distortion_parameters);
  private:
  const std::string& _internal_distortion_parameters() const;
  void _internal_set_distortion_parameters(const std::string& value);
  std::string* _internal_mutable_distortion_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.setDistortionParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distortion_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class setParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.setParametersRequest) */ {
 public:
  inline setParametersRequest() : setParametersRequest(nullptr) {}
  virtual ~setParametersRequest();
  explicit constexpr setParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setParametersRequest(const setParametersRequest& from);
  setParametersRequest(setParametersRequest&& from) noexcept
    : setParametersRequest() {
    *this = ::std::move(from);
  }

  inline setParametersRequest& operator=(const setParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setParametersRequest& operator=(setParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setParametersRequest*>(
               &_setParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(setParametersRequest& a, setParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setParametersRequest* New() const final {
    return CreateMaybeMessage<setParametersRequest>(nullptr);
  }

  setParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setParametersRequest& from);
  void MergeFrom(const setParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.setParametersRequest";
  }
  protected:
  explicit setParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
  };
  // bytes parameters = 1;
  void clear_parameters();
  const std::string& parameters() const;
  void set_parameters(const std::string& value);
  void set_parameters(std::string&& value);
  void set_parameters(const char* value);
  void set_parameters(const void* value, size_t size);
  std::string* mutable_parameters();
  std::string* release_parameters();
  void set_allocated_parameters(std::string* parameters);
  private:
  const std::string& _internal_parameters() const;
  void _internal_set_parameters(const std::string& value);
  std::string* _internal_mutable_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.setParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class getResolutionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.getResolutionRequest) */ {
 public:
  inline getResolutionRequest() : getResolutionRequest(nullptr) {}
  virtual ~getResolutionRequest();
  explicit constexpr getResolutionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getResolutionRequest(const getResolutionRequest& from);
  getResolutionRequest(getResolutionRequest&& from) noexcept
    : getResolutionRequest() {
    *this = ::std::move(from);
  }

  inline getResolutionRequest& operator=(const getResolutionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getResolutionRequest& operator=(getResolutionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getResolutionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getResolutionRequest* internal_default_instance() {
    return reinterpret_cast<const getResolutionRequest*>(
               &_getResolutionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(getResolutionRequest& a, getResolutionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getResolutionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getResolutionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getResolutionRequest* New() const final {
    return CreateMaybeMessage<getResolutionRequest>(nullptr);
  }

  getResolutionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getResolutionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getResolutionRequest& from);
  void MergeFrom(const getResolutionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getResolutionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.getResolutionRequest";
  }
  protected:
  explicit getResolutionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.getResolutionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class getResolutionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.getResolutionResponse) */ {
 public:
  inline getResolutionResponse() : getResolutionResponse(nullptr) {}
  virtual ~getResolutionResponse();
  explicit constexpr getResolutionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getResolutionResponse(const getResolutionResponse& from);
  getResolutionResponse(getResolutionResponse&& from) noexcept
    : getResolutionResponse() {
    *this = ::std::move(from);
  }

  inline getResolutionResponse& operator=(const getResolutionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getResolutionResponse& operator=(getResolutionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getResolutionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getResolutionResponse* internal_default_instance() {
    return reinterpret_cast<const getResolutionResponse*>(
               &_getResolutionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(getResolutionResponse& a, getResolutionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getResolutionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getResolutionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getResolutionResponse* New() const final {
    return CreateMaybeMessage<getResolutionResponse>(nullptr);
  }

  getResolutionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getResolutionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getResolutionResponse& from);
  void MergeFrom(const getResolutionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getResolutionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.getResolutionResponse";
  }
  protected:
  explicit getResolutionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(const std::string& value);
  void set_xpcfgrpcreturnvalue(std::string&& value);
  void set_xpcfgrpcreturnvalue(const char* value);
  void set_xpcfgrpcreturnvalue(const void* value, size_t size);
  std::string* mutable_xpcfgrpcreturnvalue();
  std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.getResolutionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class getIntrinsicsParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.getIntrinsicsParametersRequest) */ {
 public:
  inline getIntrinsicsParametersRequest() : getIntrinsicsParametersRequest(nullptr) {}
  virtual ~getIntrinsicsParametersRequest();
  explicit constexpr getIntrinsicsParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getIntrinsicsParametersRequest(const getIntrinsicsParametersRequest& from);
  getIntrinsicsParametersRequest(getIntrinsicsParametersRequest&& from) noexcept
    : getIntrinsicsParametersRequest() {
    *this = ::std::move(from);
  }

  inline getIntrinsicsParametersRequest& operator=(const getIntrinsicsParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getIntrinsicsParametersRequest& operator=(getIntrinsicsParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getIntrinsicsParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getIntrinsicsParametersRequest* internal_default_instance() {
    return reinterpret_cast<const getIntrinsicsParametersRequest*>(
               &_getIntrinsicsParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(getIntrinsicsParametersRequest& a, getIntrinsicsParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getIntrinsicsParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getIntrinsicsParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getIntrinsicsParametersRequest* New() const final {
    return CreateMaybeMessage<getIntrinsicsParametersRequest>(nullptr);
  }

  getIntrinsicsParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getIntrinsicsParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getIntrinsicsParametersRequest& from);
  void MergeFrom(const getIntrinsicsParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getIntrinsicsParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.getIntrinsicsParametersRequest";
  }
  protected:
  explicit getIntrinsicsParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.getIntrinsicsParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class getIntrinsicsParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.getIntrinsicsParametersResponse) */ {
 public:
  inline getIntrinsicsParametersResponse() : getIntrinsicsParametersResponse(nullptr) {}
  virtual ~getIntrinsicsParametersResponse();
  explicit constexpr getIntrinsicsParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getIntrinsicsParametersResponse(const getIntrinsicsParametersResponse& from);
  getIntrinsicsParametersResponse(getIntrinsicsParametersResponse&& from) noexcept
    : getIntrinsicsParametersResponse() {
    *this = ::std::move(from);
  }

  inline getIntrinsicsParametersResponse& operator=(const getIntrinsicsParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getIntrinsicsParametersResponse& operator=(getIntrinsicsParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getIntrinsicsParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getIntrinsicsParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getIntrinsicsParametersResponse*>(
               &_getIntrinsicsParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(getIntrinsicsParametersResponse& a, getIntrinsicsParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getIntrinsicsParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getIntrinsicsParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getIntrinsicsParametersResponse* New() const final {
    return CreateMaybeMessage<getIntrinsicsParametersResponse>(nullptr);
  }

  getIntrinsicsParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getIntrinsicsParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getIntrinsicsParametersResponse& from);
  void MergeFrom(const getIntrinsicsParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getIntrinsicsParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.getIntrinsicsParametersResponse";
  }
  protected:
  explicit getIntrinsicsParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(const std::string& value);
  void set_xpcfgrpcreturnvalue(std::string&& value);
  void set_xpcfgrpcreturnvalue(const char* value);
  void set_xpcfgrpcreturnvalue(const void* value, size_t size);
  std::string* mutable_xpcfgrpcreturnvalue();
  std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.getIntrinsicsParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class getParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.getParametersRequest) */ {
 public:
  inline getParametersRequest() : getParametersRequest(nullptr) {}
  virtual ~getParametersRequest();
  explicit constexpr getParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getParametersRequest(const getParametersRequest& from);
  getParametersRequest(getParametersRequest&& from) noexcept
    : getParametersRequest() {
    *this = ::std::move(from);
  }

  inline getParametersRequest& operator=(const getParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getParametersRequest& operator=(getParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getParametersRequest* internal_default_instance() {
    return reinterpret_cast<const getParametersRequest*>(
               &_getParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(getParametersRequest& a, getParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getParametersRequest* New() const final {
    return CreateMaybeMessage<getParametersRequest>(nullptr);
  }

  getParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getParametersRequest& from);
  void MergeFrom(const getParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.getParametersRequest";
  }
  protected:
  explicit getParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.getParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class getParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.getParametersResponse) */ {
 public:
  inline getParametersResponse() : getParametersResponse(nullptr) {}
  virtual ~getParametersResponse();
  explicit constexpr getParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getParametersResponse(const getParametersResponse& from);
  getParametersResponse(getParametersResponse&& from) noexcept
    : getParametersResponse() {
    *this = ::std::move(from);
  }

  inline getParametersResponse& operator=(const getParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getParametersResponse& operator=(getParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getParametersResponse*>(
               &_getParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(getParametersResponse& a, getParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getParametersResponse* New() const final {
    return CreateMaybeMessage<getParametersResponse>(nullptr);
  }

  getParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getParametersResponse& from);
  void MergeFrom(const getParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.getParametersResponse";
  }
  protected:
  explicit getParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(const std::string& value);
  void set_xpcfgrpcreturnvalue(std::string&& value);
  void set_xpcfgrpcreturnvalue(const char* value);
  void set_xpcfgrpcreturnvalue(const void* value, size_t size);
  std::string* mutable_xpcfgrpcreturnvalue();
  std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.getParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class getDistortionParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.getDistortionParametersRequest) */ {
 public:
  inline getDistortionParametersRequest() : getDistortionParametersRequest(nullptr) {}
  virtual ~getDistortionParametersRequest();
  explicit constexpr getDistortionParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDistortionParametersRequest(const getDistortionParametersRequest& from);
  getDistortionParametersRequest(getDistortionParametersRequest&& from) noexcept
    : getDistortionParametersRequest() {
    *this = ::std::move(from);
  }

  inline getDistortionParametersRequest& operator=(const getDistortionParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDistortionParametersRequest& operator=(getDistortionParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getDistortionParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDistortionParametersRequest* internal_default_instance() {
    return reinterpret_cast<const getDistortionParametersRequest*>(
               &_getDistortionParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(getDistortionParametersRequest& a, getDistortionParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getDistortionParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDistortionParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDistortionParametersRequest* New() const final {
    return CreateMaybeMessage<getDistortionParametersRequest>(nullptr);
  }

  getDistortionParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDistortionParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getDistortionParametersRequest& from);
  void MergeFrom(const getDistortionParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDistortionParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.getDistortionParametersRequest";
  }
  protected:
  explicit getDistortionParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.getDistortionParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// -------------------------------------------------------------------

class getDistortionParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICamera.getDistortionParametersResponse) */ {
 public:
  inline getDistortionParametersResponse() : getDistortionParametersResponse(nullptr) {}
  virtual ~getDistortionParametersResponse();
  explicit constexpr getDistortionParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDistortionParametersResponse(const getDistortionParametersResponse& from);
  getDistortionParametersResponse(getDistortionParametersResponse&& from) noexcept
    : getDistortionParametersResponse() {
    *this = ::std::move(from);
  }

  inline getDistortionParametersResponse& operator=(const getDistortionParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDistortionParametersResponse& operator=(getDistortionParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getDistortionParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDistortionParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getDistortionParametersResponse*>(
               &_getDistortionParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(getDistortionParametersResponse& a, getDistortionParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDistortionParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDistortionParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDistortionParametersResponse* New() const final {
    return CreateMaybeMessage<getDistortionParametersResponse>(nullptr);
  }

  getDistortionParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDistortionParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getDistortionParametersResponse& from);
  void MergeFrom(const getDistortionParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDistortionParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICamera.getDistortionParametersResponse";
  }
  protected:
  explicit getDistortionParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(const std::string& value);
  void set_xpcfgrpcreturnvalue(std::string&& value);
  void set_xpcfgrpcreturnvalue(const char* value);
  void set_xpcfgrpcreturnvalue(const void* value, size_t size);
  std::string* mutable_xpcfgrpcreturnvalue();
  std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcICamera.getDistortionParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// startRequest

// int32 grpcServerCompressionFormat = 1;
inline void startRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcICamera.startRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void startRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void startRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcICamera.startRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// startResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void startResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICamera.startResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void startResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void startResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICamera.startResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stopRequest

// int32 grpcServerCompressionFormat = 1;
inline void stopRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcICamera.stopRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void stopRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void stopRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcICamera.stopRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// stopResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void stopResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICamera.stopResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stopResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void stopResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICamera.stopResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getNextImageRequest

// int32 grpcServerCompressionFormat = 1;
inline void getNextImageRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextImageRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextImageRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getNextImageRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getNextImageRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void getNextImageRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getNextImageRequest.grpcServerCompressionFormat)
}

// bytes img = 2;
inline void getNextImageRequest::clear_img() {
  img_.ClearToEmpty();
}
inline const std::string& getNextImageRequest::img() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getNextImageRequest.img)
  return _internal_img();
}
inline void getNextImageRequest::set_img(const std::string& value) {
  _internal_set_img(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getNextImageRequest.img)
}
inline std::string* getNextImageRequest::mutable_img() {
  // @@protoc_insertion_point(field_mutable:grpcICamera.getNextImageRequest.img)
  return _internal_mutable_img();
}
inline const std::string& getNextImageRequest::_internal_img() const {
  return img_.Get();
}
inline void getNextImageRequest::_internal_set_img(const std::string& value) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getNextImageRequest::set_img(std::string&& value) {
  
  img_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICamera.getNextImageRequest.img)
}
inline void getNextImageRequest::set_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICamera.getNextImageRequest.img)
}
inline void getNextImageRequest::set_img(const void* value,
    size_t size) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICamera.getNextImageRequest.img)
}
inline std::string* getNextImageRequest::_internal_mutable_img() {
  
  return img_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getNextImageRequest::release_img() {
  // @@protoc_insertion_point(field_release:grpcICamera.getNextImageRequest.img)
  return img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getNextImageRequest::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    
  } else {
    
  }
  img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICamera.getNextImageRequest.img)
}

// -------------------------------------------------------------------

// getNextImageResponse

// bytes img = 1;
inline void getNextImageResponse::clear_img() {
  img_.ClearToEmpty();
}
inline const std::string& getNextImageResponse::img() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getNextImageResponse.img)
  return _internal_img();
}
inline void getNextImageResponse::set_img(const std::string& value) {
  _internal_set_img(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getNextImageResponse.img)
}
inline std::string* getNextImageResponse::mutable_img() {
  // @@protoc_insertion_point(field_mutable:grpcICamera.getNextImageResponse.img)
  return _internal_mutable_img();
}
inline const std::string& getNextImageResponse::_internal_img() const {
  return img_.Get();
}
inline void getNextImageResponse::_internal_set_img(const std::string& value) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getNextImageResponse::set_img(std::string&& value) {
  
  img_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICamera.getNextImageResponse.img)
}
inline void getNextImageResponse::set_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICamera.getNextImageResponse.img)
}
inline void getNextImageResponse::set_img(const void* value,
    size_t size) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICamera.getNextImageResponse.img)
}
inline std::string* getNextImageResponse::_internal_mutable_img() {
  
  return img_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getNextImageResponse::release_img() {
  // @@protoc_insertion_point(field_release:grpcICamera.getNextImageResponse.img)
  return img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getNextImageResponse::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    
  } else {
    
  }
  img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICamera.getNextImageResponse.img)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getNextImageResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextImageResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextImageResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getNextImageResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getNextImageResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getNextImageResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getNextImageResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setResolutionRequest

// bytes resolution = 1;
inline void setResolutionRequest::clear_resolution() {
  resolution_.ClearToEmpty();
}
inline const std::string& setResolutionRequest::resolution() const {
  // @@protoc_insertion_point(field_get:grpcICamera.setResolutionRequest.resolution)
  return _internal_resolution();
}
inline void setResolutionRequest::set_resolution(const std::string& value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:grpcICamera.setResolutionRequest.resolution)
}
inline std::string* setResolutionRequest::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable:grpcICamera.setResolutionRequest.resolution)
  return _internal_mutable_resolution();
}
inline const std::string& setResolutionRequest::_internal_resolution() const {
  return resolution_.Get();
}
inline void setResolutionRequest::_internal_set_resolution(const std::string& value) {
  
  resolution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setResolutionRequest::set_resolution(std::string&& value) {
  
  resolution_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICamera.setResolutionRequest.resolution)
}
inline void setResolutionRequest::set_resolution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resolution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICamera.setResolutionRequest.resolution)
}
inline void setResolutionRequest::set_resolution(const void* value,
    size_t size) {
  
  resolution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICamera.setResolutionRequest.resolution)
}
inline std::string* setResolutionRequest::_internal_mutable_resolution() {
  
  return resolution_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setResolutionRequest::release_resolution() {
  // @@protoc_insertion_point(field_release:grpcICamera.setResolutionRequest.resolution)
  return resolution_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setResolutionRequest::set_allocated_resolution(std::string* resolution) {
  if (resolution != nullptr) {
    
  } else {
    
  }
  resolution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resolution,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICamera.setResolutionRequest.resolution)
}

// -------------------------------------------------------------------

// setIntrinsicParametersRequest

// bytes intrinsic_parameters = 1;
inline void setIntrinsicParametersRequest::clear_intrinsic_parameters() {
  intrinsic_parameters_.ClearToEmpty();
}
inline const std::string& setIntrinsicParametersRequest::intrinsic_parameters() const {
  // @@protoc_insertion_point(field_get:grpcICamera.setIntrinsicParametersRequest.intrinsic_parameters)
  return _internal_intrinsic_parameters();
}
inline void setIntrinsicParametersRequest::set_intrinsic_parameters(const std::string& value) {
  _internal_set_intrinsic_parameters(value);
  // @@protoc_insertion_point(field_set:grpcICamera.setIntrinsicParametersRequest.intrinsic_parameters)
}
inline std::string* setIntrinsicParametersRequest::mutable_intrinsic_parameters() {
  // @@protoc_insertion_point(field_mutable:grpcICamera.setIntrinsicParametersRequest.intrinsic_parameters)
  return _internal_mutable_intrinsic_parameters();
}
inline const std::string& setIntrinsicParametersRequest::_internal_intrinsic_parameters() const {
  return intrinsic_parameters_.Get();
}
inline void setIntrinsicParametersRequest::_internal_set_intrinsic_parameters(const std::string& value) {
  
  intrinsic_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setIntrinsicParametersRequest::set_intrinsic_parameters(std::string&& value) {
  
  intrinsic_parameters_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICamera.setIntrinsicParametersRequest.intrinsic_parameters)
}
inline void setIntrinsicParametersRequest::set_intrinsic_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intrinsic_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICamera.setIntrinsicParametersRequest.intrinsic_parameters)
}
inline void setIntrinsicParametersRequest::set_intrinsic_parameters(const void* value,
    size_t size) {
  
  intrinsic_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICamera.setIntrinsicParametersRequest.intrinsic_parameters)
}
inline std::string* setIntrinsicParametersRequest::_internal_mutable_intrinsic_parameters() {
  
  return intrinsic_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setIntrinsicParametersRequest::release_intrinsic_parameters() {
  // @@protoc_insertion_point(field_release:grpcICamera.setIntrinsicParametersRequest.intrinsic_parameters)
  return intrinsic_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setIntrinsicParametersRequest::set_allocated_intrinsic_parameters(std::string* intrinsic_parameters) {
  if (intrinsic_parameters != nullptr) {
    
  } else {
    
  }
  intrinsic_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intrinsic_parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICamera.setIntrinsicParametersRequest.intrinsic_parameters)
}

// -------------------------------------------------------------------

// setDistortionParametersRequest

// bytes distortion_parameters = 1;
inline void setDistortionParametersRequest::clear_distortion_parameters() {
  distortion_parameters_.ClearToEmpty();
}
inline const std::string& setDistortionParametersRequest::distortion_parameters() const {
  // @@protoc_insertion_point(field_get:grpcICamera.setDistortionParametersRequest.distortion_parameters)
  return _internal_distortion_parameters();
}
inline void setDistortionParametersRequest::set_distortion_parameters(const std::string& value) {
  _internal_set_distortion_parameters(value);
  // @@protoc_insertion_point(field_set:grpcICamera.setDistortionParametersRequest.distortion_parameters)
}
inline std::string* setDistortionParametersRequest::mutable_distortion_parameters() {
  // @@protoc_insertion_point(field_mutable:grpcICamera.setDistortionParametersRequest.distortion_parameters)
  return _internal_mutable_distortion_parameters();
}
inline const std::string& setDistortionParametersRequest::_internal_distortion_parameters() const {
  return distortion_parameters_.Get();
}
inline void setDistortionParametersRequest::_internal_set_distortion_parameters(const std::string& value) {
  
  distortion_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setDistortionParametersRequest::set_distortion_parameters(std::string&& value) {
  
  distortion_parameters_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICamera.setDistortionParametersRequest.distortion_parameters)
}
inline void setDistortionParametersRequest::set_distortion_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  distortion_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICamera.setDistortionParametersRequest.distortion_parameters)
}
inline void setDistortionParametersRequest::set_distortion_parameters(const void* value,
    size_t size) {
  
  distortion_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICamera.setDistortionParametersRequest.distortion_parameters)
}
inline std::string* setDistortionParametersRequest::_internal_mutable_distortion_parameters() {
  
  return distortion_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setDistortionParametersRequest::release_distortion_parameters() {
  // @@protoc_insertion_point(field_release:grpcICamera.setDistortionParametersRequest.distortion_parameters)
  return distortion_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setDistortionParametersRequest::set_allocated_distortion_parameters(std::string* distortion_parameters) {
  if (distortion_parameters != nullptr) {
    
  } else {
    
  }
  distortion_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distortion_parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICamera.setDistortionParametersRequest.distortion_parameters)
}

// -------------------------------------------------------------------

// setParametersRequest

// bytes parameters = 1;
inline void setParametersRequest::clear_parameters() {
  parameters_.ClearToEmpty();
}
inline const std::string& setParametersRequest::parameters() const {
  // @@protoc_insertion_point(field_get:grpcICamera.setParametersRequest.parameters)
  return _internal_parameters();
}
inline void setParametersRequest::set_parameters(const std::string& value) {
  _internal_set_parameters(value);
  // @@protoc_insertion_point(field_set:grpcICamera.setParametersRequest.parameters)
}
inline std::string* setParametersRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:grpcICamera.setParametersRequest.parameters)
  return _internal_mutable_parameters();
}
inline const std::string& setParametersRequest::_internal_parameters() const {
  return parameters_.Get();
}
inline void setParametersRequest::_internal_set_parameters(const std::string& value) {
  
  parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setParametersRequest::set_parameters(std::string&& value) {
  
  parameters_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICamera.setParametersRequest.parameters)
}
inline void setParametersRequest::set_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICamera.setParametersRequest.parameters)
}
inline void setParametersRequest::set_parameters(const void* value,
    size_t size) {
  
  parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICamera.setParametersRequest.parameters)
}
inline std::string* setParametersRequest::_internal_mutable_parameters() {
  
  return parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setParametersRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:grpcICamera.setParametersRequest.parameters)
  return parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setParametersRequest::set_allocated_parameters(std::string* parameters) {
  if (parameters != nullptr) {
    
  } else {
    
  }
  parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameters,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICamera.setParametersRequest.parameters)
}

// -------------------------------------------------------------------

// getResolutionRequest

// int32 grpcServerCompressionFormat = 1;
inline void getResolutionRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getResolutionRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getResolutionRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getResolutionRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getResolutionRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void getResolutionRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getResolutionRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// getResolutionResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getResolutionResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getResolutionResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getResolutionResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getResolutionResponse::set_xpcfgrpcreturnvalue(const std::string& value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getResolutionResponse.xpcfGrpcReturnValue)
}
inline std::string* getResolutionResponse::mutable_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_mutable:grpcICamera.getResolutionResponse.xpcfGrpcReturnValue)
  return _internal_mutable_xpcfgrpcreturnvalue();
}
inline const std::string& getResolutionResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getResolutionResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getResolutionResponse::set_xpcfgrpcreturnvalue(std::string&& value) {
  
  xpcfgrpcreturnvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICamera.getResolutionResponse.xpcfGrpcReturnValue)
}
inline void getResolutionResponse::set_xpcfgrpcreturnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICamera.getResolutionResponse.xpcfGrpcReturnValue)
}
inline void getResolutionResponse::set_xpcfgrpcreturnvalue(const void* value,
    size_t size) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICamera.getResolutionResponse.xpcfGrpcReturnValue)
}
inline std::string* getResolutionResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getResolutionResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcICamera.getResolutionResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getResolutionResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICamera.getResolutionResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getIntrinsicsParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void getIntrinsicsParametersRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getIntrinsicsParametersRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getIntrinsicsParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getIntrinsicsParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getIntrinsicsParametersRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void getIntrinsicsParametersRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getIntrinsicsParametersRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// getIntrinsicsParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getIntrinsicsParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getIntrinsicsParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getIntrinsicsParametersResponse::set_xpcfgrpcreturnvalue(const std::string& value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getIntrinsicsParametersResponse::mutable_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_mutable:grpcICamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
  return _internal_mutable_xpcfgrpcreturnvalue();
}
inline const std::string& getIntrinsicsParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getIntrinsicsParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getIntrinsicsParametersResponse::set_xpcfgrpcreturnvalue(std::string&& value) {
  
  xpcfgrpcreturnvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
}
inline void getIntrinsicsParametersResponse::set_xpcfgrpcreturnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
}
inline void getIntrinsicsParametersResponse::set_xpcfgrpcreturnvalue(const void* value,
    size_t size) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getIntrinsicsParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getIntrinsicsParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcICamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getIntrinsicsParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void getParametersRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getParametersRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getParametersRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void getParametersRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getParametersRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// getParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getParametersResponse::set_xpcfgrpcreturnvalue(const std::string& value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getParametersResponse::mutable_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_mutable:grpcICamera.getParametersResponse.xpcfGrpcReturnValue)
  return _internal_mutable_xpcfgrpcreturnvalue();
}
inline const std::string& getParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getParametersResponse::set_xpcfgrpcreturnvalue(std::string&& value) {
  
  xpcfgrpcreturnvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICamera.getParametersResponse.xpcfGrpcReturnValue)
}
inline void getParametersResponse::set_xpcfgrpcreturnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICamera.getParametersResponse.xpcfGrpcReturnValue)
}
inline void getParametersResponse::set_xpcfgrpcreturnvalue(const void* value,
    size_t size) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICamera.getParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcICamera.getParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICamera.getParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDistortionParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void getDistortionParametersRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDistortionParametersRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDistortionParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getDistortionParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getDistortionParametersRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void getDistortionParametersRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getDistortionParametersRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// getDistortionParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getDistortionParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getDistortionParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getDistortionParametersResponse::set_xpcfgrpcreturnvalue(const std::string& value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getDistortionParametersResponse::mutable_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_mutable:grpcICamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
  return _internal_mutable_xpcfgrpcreturnvalue();
}
inline const std::string& getDistortionParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getDistortionParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDistortionParametersResponse::set_xpcfgrpcreturnvalue(std::string&& value) {
  
  xpcfgrpcreturnvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
}
inline void getDistortionParametersResponse::set_xpcfgrpcreturnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
}
inline void getDistortionParametersResponse::set_xpcfgrpcreturnvalue(const void* value,
    size_t size) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getDistortionParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDistortionParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcICamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDistortionParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcICamera

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcICameraService_2eproto
