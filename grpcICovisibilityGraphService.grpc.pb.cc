// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcICovisibilityGraphService.proto

#include "grpcICovisibilityGraphService.pb.h"
#include "grpcICovisibilityGraphService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcICovisibilityGraph {

static const char* grpcICovisibilityGraphService_method_names[] = {
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/increaseEdge",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/decreaseEdge",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/removeEdge",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/getEdge",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/isEdge",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/getAllNodes",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/suppressNode",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/getNeighbors",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/minimalSpanningTree",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/maximalSpanningTree",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/getShortestPath",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/display",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/saveToFile",
  "/grpcICovisibilityGraph.grpcICovisibilityGraphService/loadFromFile",
};

std::unique_ptr< grpcICovisibilityGraphService::Stub> grpcICovisibilityGraphService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcICovisibilityGraphService::Stub> stub(new grpcICovisibilityGraphService::Stub(channel));
  return stub;
}

grpcICovisibilityGraphService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_increaseEdge_(grpcICovisibilityGraphService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_decreaseEdge_(grpcICovisibilityGraphService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeEdge_(grpcICovisibilityGraphService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getEdge_(grpcICovisibilityGraphService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isEdge_(grpcICovisibilityGraphService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllNodes_(grpcICovisibilityGraphService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_suppressNode_(grpcICovisibilityGraphService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNeighbors_(grpcICovisibilityGraphService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_minimalSpanningTree_(grpcICovisibilityGraphService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_maximalSpanningTree_(grpcICovisibilityGraphService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getShortestPath_(grpcICovisibilityGraphService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_display_(grpcICovisibilityGraphService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveToFile_(grpcICovisibilityGraphService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadFromFile_(grpcICovisibilityGraphService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcICovisibilityGraphService::Stub::increaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::increaseEdgeRequest& request, ::grpcICovisibilityGraph::increaseEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::increaseEdgeRequest, ::grpcICovisibilityGraph::increaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_increaseEdge_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::increaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::increaseEdgeRequest* request, ::grpcICovisibilityGraph::increaseEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::increaseEdgeRequest, ::grpcICovisibilityGraph::increaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_increaseEdge_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::increaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::increaseEdgeRequest* request, ::grpcICovisibilityGraph::increaseEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_increaseEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::increaseEdgeResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncincreaseEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::increaseEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::increaseEdgeResponse, ::grpcICovisibilityGraph::increaseEdgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_increaseEdge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::increaseEdgeResponse>* grpcICovisibilityGraphService::Stub::AsyncincreaseEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::increaseEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncincreaseEdgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::decreaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::decreaseEdgeRequest& request, ::grpcICovisibilityGraph::decreaseEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::decreaseEdgeRequest, ::grpcICovisibilityGraph::decreaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_decreaseEdge_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::decreaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::decreaseEdgeRequest* request, ::grpcICovisibilityGraph::decreaseEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::decreaseEdgeRequest, ::grpcICovisibilityGraph::decreaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_decreaseEdge_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::decreaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::decreaseEdgeRequest* request, ::grpcICovisibilityGraph::decreaseEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_decreaseEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::decreaseEdgeResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncdecreaseEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::decreaseEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::decreaseEdgeResponse, ::grpcICovisibilityGraph::decreaseEdgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_decreaseEdge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::decreaseEdgeResponse>* grpcICovisibilityGraphService::Stub::AsyncdecreaseEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::decreaseEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdecreaseEdgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::removeEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::removeEdgeRequest& request, ::grpcICovisibilityGraph::removeEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::removeEdgeRequest, ::grpcICovisibilityGraph::removeEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeEdge_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::removeEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::removeEdgeRequest* request, ::grpcICovisibilityGraph::removeEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::removeEdgeRequest, ::grpcICovisibilityGraph::removeEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeEdge_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::removeEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::removeEdgeRequest* request, ::grpcICovisibilityGraph::removeEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::removeEdgeResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncremoveEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::removeEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::removeEdgeResponse, ::grpcICovisibilityGraph::removeEdgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeEdge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::removeEdgeResponse>* grpcICovisibilityGraphService::Stub::AsyncremoveEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::removeEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveEdgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::getEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getEdgeRequest& request, ::grpcICovisibilityGraph::getEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::getEdgeRequest, ::grpcICovisibilityGraph::getEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getEdge_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::getEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getEdgeRequest* request, ::grpcICovisibilityGraph::getEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::getEdgeRequest, ::grpcICovisibilityGraph::getEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEdge_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::getEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getEdgeRequest* request, ::grpcICovisibilityGraph::getEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::getEdgeResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncgetEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::getEdgeResponse, ::grpcICovisibilityGraph::getEdgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getEdge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::getEdgeResponse>* grpcICovisibilityGraphService::Stub::AsyncgetEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetEdgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::isEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::isEdgeRequest& request, ::grpcICovisibilityGraph::isEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::isEdgeRequest, ::grpcICovisibilityGraph::isEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isEdge_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::isEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::isEdgeRequest* request, ::grpcICovisibilityGraph::isEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::isEdgeRequest, ::grpcICovisibilityGraph::isEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEdge_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::isEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::isEdgeRequest* request, ::grpcICovisibilityGraph::isEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::isEdgeResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncisEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::isEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::isEdgeResponse, ::grpcICovisibilityGraph::isEdgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isEdge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::isEdgeResponse>* grpcICovisibilityGraphService::Stub::AsyncisEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::isEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisEdgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::getAllNodes(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getAllNodesRequest& request, ::grpcICovisibilityGraph::getAllNodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::getAllNodesRequest, ::grpcICovisibilityGraph::getAllNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllNodes_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::getAllNodes(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getAllNodesRequest* request, ::grpcICovisibilityGraph::getAllNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::getAllNodesRequest, ::grpcICovisibilityGraph::getAllNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllNodes_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::getAllNodes(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getAllNodesRequest* request, ::grpcICovisibilityGraph::getAllNodesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::getAllNodesResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncgetAllNodesRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getAllNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::getAllNodesResponse, ::grpcICovisibilityGraph::getAllNodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::getAllNodesResponse>* grpcICovisibilityGraphService::Stub::AsyncgetAllNodesRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getAllNodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::suppressNode(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::suppressNodeRequest& request, ::grpcICovisibilityGraph::suppressNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::suppressNodeRequest, ::grpcICovisibilityGraph::suppressNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_suppressNode_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::suppressNode(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::suppressNodeRequest* request, ::grpcICovisibilityGraph::suppressNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::suppressNodeRequest, ::grpcICovisibilityGraph::suppressNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_suppressNode_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::suppressNode(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::suppressNodeRequest* request, ::grpcICovisibilityGraph::suppressNodeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_suppressNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::suppressNodeResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncsuppressNodeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::suppressNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::suppressNodeResponse, ::grpcICovisibilityGraph::suppressNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_suppressNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::suppressNodeResponse>* grpcICovisibilityGraphService::Stub::AsyncsuppressNodeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::suppressNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsuppressNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::getNeighbors(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getNeighborsRequest& request, ::grpcICovisibilityGraph::getNeighborsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::getNeighborsRequest, ::grpcICovisibilityGraph::getNeighborsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNeighbors_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::getNeighbors(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getNeighborsRequest* request, ::grpcICovisibilityGraph::getNeighborsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::getNeighborsRequest, ::grpcICovisibilityGraph::getNeighborsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNeighbors_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::getNeighbors(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getNeighborsRequest* request, ::grpcICovisibilityGraph::getNeighborsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNeighbors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::getNeighborsResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncgetNeighborsRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getNeighborsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::getNeighborsResponse, ::grpcICovisibilityGraph::getNeighborsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNeighbors_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::getNeighborsResponse>* grpcICovisibilityGraphService::Stub::AsyncgetNeighborsRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getNeighborsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNeighborsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::minimalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::minimalSpanningTreeRequest& request, ::grpcICovisibilityGraph::minimalSpanningTreeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::minimalSpanningTreeRequest, ::grpcICovisibilityGraph::minimalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_minimalSpanningTree_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::minimalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::minimalSpanningTreeRequest* request, ::grpcICovisibilityGraph::minimalSpanningTreeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::minimalSpanningTreeRequest, ::grpcICovisibilityGraph::minimalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_minimalSpanningTree_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::minimalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::minimalSpanningTreeRequest* request, ::grpcICovisibilityGraph::minimalSpanningTreeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_minimalSpanningTree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::minimalSpanningTreeResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncminimalSpanningTreeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::minimalSpanningTreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::minimalSpanningTreeResponse, ::grpcICovisibilityGraph::minimalSpanningTreeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_minimalSpanningTree_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::minimalSpanningTreeResponse>* grpcICovisibilityGraphService::Stub::AsyncminimalSpanningTreeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::minimalSpanningTreeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncminimalSpanningTreeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::maximalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::maximalSpanningTreeRequest& request, ::grpcICovisibilityGraph::maximalSpanningTreeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::maximalSpanningTreeRequest, ::grpcICovisibilityGraph::maximalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_maximalSpanningTree_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::maximalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::maximalSpanningTreeRequest* request, ::grpcICovisibilityGraph::maximalSpanningTreeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::maximalSpanningTreeRequest, ::grpcICovisibilityGraph::maximalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_maximalSpanningTree_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::maximalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::maximalSpanningTreeRequest* request, ::grpcICovisibilityGraph::maximalSpanningTreeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_maximalSpanningTree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::maximalSpanningTreeResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncmaximalSpanningTreeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::maximalSpanningTreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::maximalSpanningTreeResponse, ::grpcICovisibilityGraph::maximalSpanningTreeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_maximalSpanningTree_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::maximalSpanningTreeResponse>* grpcICovisibilityGraphService::Stub::AsyncmaximalSpanningTreeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::maximalSpanningTreeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmaximalSpanningTreeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::getShortestPath(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getShortestPathRequest& request, ::grpcICovisibilityGraph::getShortestPathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::getShortestPathRequest, ::grpcICovisibilityGraph::getShortestPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getShortestPath_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::getShortestPath(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getShortestPathRequest* request, ::grpcICovisibilityGraph::getShortestPathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::getShortestPathRequest, ::grpcICovisibilityGraph::getShortestPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getShortestPath_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::getShortestPath(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getShortestPathRequest* request, ::grpcICovisibilityGraph::getShortestPathResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getShortestPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::getShortestPathResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncgetShortestPathRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getShortestPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::getShortestPathResponse, ::grpcICovisibilityGraph::getShortestPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getShortestPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::getShortestPathResponse>* grpcICovisibilityGraphService::Stub::AsyncgetShortestPathRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::getShortestPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetShortestPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::display(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcICovisibilityGraph::displayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcICovisibilityGraph::displayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_display_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::display(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcICovisibilityGraph::displayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcICovisibilityGraph::displayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_display_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::display(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcICovisibilityGraph::displayResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_display_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::displayResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncdisplayRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::displayResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_display_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::displayResponse>* grpcICovisibilityGraphService::Stub::AsyncdisplayRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdisplayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::saveToFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::saveToFileRequest& request, ::grpcICovisibilityGraph::saveToFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::saveToFileRequest, ::grpcICovisibilityGraph::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveToFile_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::saveToFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::saveToFileRequest* request, ::grpcICovisibilityGraph::saveToFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::saveToFileRequest, ::grpcICovisibilityGraph::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::saveToFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::saveToFileRequest* request, ::grpcICovisibilityGraph::saveToFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::saveToFileResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::saveToFileResponse, ::grpcICovisibilityGraph::saveToFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveToFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::saveToFileResponse>* grpcICovisibilityGraphService::Stub::AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveToFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphService::Stub::loadFromFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::loadFromFileRequest& request, ::grpcICovisibilityGraph::loadFromFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraph::loadFromFileRequest, ::grpcICovisibilityGraph::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadFromFile_, context, request, response);
}

void grpcICovisibilityGraphService::Stub::experimental_async::loadFromFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::loadFromFileRequest* request, ::grpcICovisibilityGraph::loadFromFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraph::loadFromFileRequest, ::grpcICovisibilityGraph::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphService::Stub::experimental_async::loadFromFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::loadFromFileRequest* request, ::grpcICovisibilityGraph::loadFromFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::loadFromFileResponse>* grpcICovisibilityGraphService::Stub::PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraph::loadFromFileResponse, ::grpcICovisibilityGraph::loadFromFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadFromFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraph::loadFromFileResponse>* grpcICovisibilityGraphService::Stub::AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraph::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadFromFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcICovisibilityGraphService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::increaseEdgeRequest, ::grpcICovisibilityGraph::increaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::increaseEdgeRequest* req,
             ::grpcICovisibilityGraph::increaseEdgeResponse* resp) {
               return service->increaseEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::decreaseEdgeRequest, ::grpcICovisibilityGraph::decreaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::decreaseEdgeRequest* req,
             ::grpcICovisibilityGraph::decreaseEdgeResponse* resp) {
               return service->decreaseEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::removeEdgeRequest, ::grpcICovisibilityGraph::removeEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::removeEdgeRequest* req,
             ::grpcICovisibilityGraph::removeEdgeResponse* resp) {
               return service->removeEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::getEdgeRequest, ::grpcICovisibilityGraph::getEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::getEdgeRequest* req,
             ::grpcICovisibilityGraph::getEdgeResponse* resp) {
               return service->getEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::isEdgeRequest, ::grpcICovisibilityGraph::isEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::isEdgeRequest* req,
             ::grpcICovisibilityGraph::isEdgeResponse* resp) {
               return service->isEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::getAllNodesRequest, ::grpcICovisibilityGraph::getAllNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::getAllNodesRequest* req,
             ::grpcICovisibilityGraph::getAllNodesResponse* resp) {
               return service->getAllNodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::suppressNodeRequest, ::grpcICovisibilityGraph::suppressNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::suppressNodeRequest* req,
             ::grpcICovisibilityGraph::suppressNodeResponse* resp) {
               return service->suppressNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::getNeighborsRequest, ::grpcICovisibilityGraph::getNeighborsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::getNeighborsRequest* req,
             ::grpcICovisibilityGraph::getNeighborsResponse* resp) {
               return service->getNeighbors(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::minimalSpanningTreeRequest, ::grpcICovisibilityGraph::minimalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::minimalSpanningTreeRequest* req,
             ::grpcICovisibilityGraph::minimalSpanningTreeResponse* resp) {
               return service->minimalSpanningTree(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::maximalSpanningTreeRequest, ::grpcICovisibilityGraph::maximalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::maximalSpanningTreeRequest* req,
             ::grpcICovisibilityGraph::maximalSpanningTreeResponse* resp) {
               return service->maximalSpanningTree(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::getShortestPathRequest, ::grpcICovisibilityGraph::getShortestPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::getShortestPathRequest* req,
             ::grpcICovisibilityGraph::getShortestPathResponse* resp) {
               return service->getShortestPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::google::protobuf::Empty, ::grpcICovisibilityGraph::displayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcICovisibilityGraph::displayResponse* resp) {
               return service->display(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::saveToFileRequest, ::grpcICovisibilityGraph::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::saveToFileRequest* req,
             ::grpcICovisibilityGraph::saveToFileResponse* resp) {
               return service->saveToFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphService::Service, ::grpcICovisibilityGraph::loadFromFileRequest, ::grpcICovisibilityGraph::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraph::loadFromFileRequest* req,
             ::grpcICovisibilityGraph::loadFromFileResponse* resp) {
               return service->loadFromFile(ctx, req, resp);
             }, this)));
}

grpcICovisibilityGraphService::Service::~Service() {
}

::grpc::Status grpcICovisibilityGraphService::Service::increaseEdge(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::increaseEdgeRequest* request, ::grpcICovisibilityGraph::increaseEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::decreaseEdge(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::decreaseEdgeRequest* request, ::grpcICovisibilityGraph::decreaseEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::removeEdge(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::removeEdgeRequest* request, ::grpcICovisibilityGraph::removeEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::getEdge(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::getEdgeRequest* request, ::grpcICovisibilityGraph::getEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::isEdge(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::isEdgeRequest* request, ::grpcICovisibilityGraph::isEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::getAllNodes(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::getAllNodesRequest* request, ::grpcICovisibilityGraph::getAllNodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::suppressNode(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::suppressNodeRequest* request, ::grpcICovisibilityGraph::suppressNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::getNeighbors(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::getNeighborsRequest* request, ::grpcICovisibilityGraph::getNeighborsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::minimalSpanningTree(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::minimalSpanningTreeRequest* request, ::grpcICovisibilityGraph::minimalSpanningTreeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::maximalSpanningTree(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::maximalSpanningTreeRequest* request, ::grpcICovisibilityGraph::maximalSpanningTreeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::getShortestPath(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::getShortestPathRequest* request, ::grpcICovisibilityGraph::getShortestPathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::display(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcICovisibilityGraph::displayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::saveToFile(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::saveToFileRequest* request, ::grpcICovisibilityGraph::saveToFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphService::Service::loadFromFile(::grpc::ServerContext* context, const ::grpcICovisibilityGraph::loadFromFileRequest* request, ::grpcICovisibilityGraph::loadFromFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcICovisibilityGraph

