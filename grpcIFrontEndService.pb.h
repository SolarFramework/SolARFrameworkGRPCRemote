// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIFrontEndService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIFrontEndService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIFrontEndService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIFrontEndService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIFrontEndService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIFrontEndService_2eproto;
namespace grpcIFrontEnd {
class get3DTransformRequestRequest;
struct get3DTransformRequestRequestDefaultTypeInternal;
extern get3DTransformRequestRequestDefaultTypeInternal _get3DTransformRequestRequest_default_instance_;
class get3DTransformRequestResponse;
struct get3DTransformRequestResponseDefaultTypeInternal;
extern get3DTransformRequestResponseDefaultTypeInternal _get3DTransformRequestResponse_default_instance_;
class getAllClientsUUIDRequest;
struct getAllClientsUUIDRequestDefaultTypeInternal;
extern getAllClientsUUIDRequestDefaultTypeInternal _getAllClientsUUIDRequest_default_instance_;
class getAllClientsUUIDResponse;
struct getAllClientsUUIDResponseDefaultTypeInternal;
extern getAllClientsUUIDResponseDefaultTypeInternal _getAllClientsUUIDResponse_default_instance_;
class getCameraParametersRequest;
struct getCameraParametersRequestDefaultTypeInternal;
extern getCameraParametersRequestDefaultTypeInternal _getCameraParametersRequest_default_instance_;
class getCameraParametersResponse;
struct getCameraParametersResponseDefaultTypeInternal;
extern getCameraParametersResponseDefaultTypeInternal _getCameraParametersResponse_default_instance_;
class getLastPoseRequest;
struct getLastPoseRequestDefaultTypeInternal;
extern getLastPoseRequestDefaultTypeInternal _getLastPoseRequest_default_instance_;
class getLastPoseResponse;
struct getLastPoseResponseDefaultTypeInternal;
extern getLastPoseResponseDefaultTypeInternal _getLastPoseResponse_default_instance_;
class getMapRequestRequest;
struct getMapRequestRequestDefaultTypeInternal;
extern getMapRequestRequestDefaultTypeInternal _getMapRequestRequest_default_instance_;
class getMapRequestResponse;
struct getMapRequestResponseDefaultTypeInternal;
extern getMapRequestResponseDefaultTypeInternal _getMapRequestResponse_default_instance_;
class getMappingDataRequestRequest;
struct getMappingDataRequestRequestDefaultTypeInternal;
extern getMappingDataRequestRequestDefaultTypeInternal _getMappingDataRequestRequest_default_instance_;
class getMappingDataRequestResponse;
struct getMappingDataRequestResponseDefaultTypeInternal;
extern getMappingDataRequestResponseDefaultTypeInternal _getMappingDataRequestResponse_default_instance_;
class getPointCloudRequestRequest;
struct getPointCloudRequestRequestDefaultTypeInternal;
extern getPointCloudRequestRequestDefaultTypeInternal _getPointCloudRequestRequest_default_instance_;
class getPointCloudRequestResponse;
struct getPointCloudRequestResponseDefaultTypeInternal;
extern getPointCloudRequestResponseDefaultTypeInternal _getPointCloudRequestResponse_default_instance_;
class getProcessingModeRequest;
struct getProcessingModeRequestDefaultTypeInternal;
extern getProcessingModeRequestDefaultTypeInternal _getProcessingModeRequest_default_instance_;
class getProcessingModeResponse;
struct getProcessingModeResponseDefaultTypeInternal;
extern getProcessingModeResponseDefaultTypeInternal _getProcessingModeResponse_default_instance_;
class init_grpc0Request;
struct init_grpc0RequestDefaultTypeInternal;
extern init_grpc0RequestDefaultTypeInternal _init_grpc0Request_default_instance_;
class init_grpc0Response;
struct init_grpc0ResponseDefaultTypeInternal;
extern init_grpc0ResponseDefaultTypeInternal _init_grpc0Response_default_instance_;
class init_grpc1Request;
struct init_grpc1RequestDefaultTypeInternal;
extern init_grpc1RequestDefaultTypeInternal _init_grpc1Request_default_instance_;
class init_grpc1Response;
struct init_grpc1ResponseDefaultTypeInternal;
extern init_grpc1ResponseDefaultTypeInternal _init_grpc1Response_default_instance_;
class registerClientRequest;
struct registerClientRequestDefaultTypeInternal;
extern registerClientRequestDefaultTypeInternal _registerClientRequest_default_instance_;
class registerClientResponse;
struct registerClientResponseDefaultTypeInternal;
extern registerClientResponseDefaultTypeInternal _registerClientResponse_default_instance_;
class relocalizeProcessRequestRequest;
struct relocalizeProcessRequestRequestDefaultTypeInternal;
extern relocalizeProcessRequestRequestDefaultTypeInternal _relocalizeProcessRequestRequest_default_instance_;
class relocalizeProcessRequestResponse;
struct relocalizeProcessRequestResponseDefaultTypeInternal;
extern relocalizeProcessRequestResponseDefaultTypeInternal _relocalizeProcessRequestResponse_default_instance_;
class resetMapRequest;
struct resetMapRequestDefaultTypeInternal;
extern resetMapRequestDefaultTypeInternal _resetMapRequest_default_instance_;
class resetMapResponse;
struct resetMapResponseDefaultTypeInternal;
extern resetMapResponseDefaultTypeInternal _resetMapResponse_default_instance_;
class setCameraParameters_grpc0Request;
struct setCameraParameters_grpc0RequestDefaultTypeInternal;
extern setCameraParameters_grpc0RequestDefaultTypeInternal _setCameraParameters_grpc0Request_default_instance_;
class setCameraParameters_grpc0Response;
struct setCameraParameters_grpc0ResponseDefaultTypeInternal;
extern setCameraParameters_grpc0ResponseDefaultTypeInternal _setCameraParameters_grpc0Response_default_instance_;
class setCameraParameters_grpc1Request;
struct setCameraParameters_grpc1RequestDefaultTypeInternal;
extern setCameraParameters_grpc1RequestDefaultTypeInternal _setCameraParameters_grpc1Request_default_instance_;
class setCameraParameters_grpc1Response;
struct setCameraParameters_grpc1ResponseDefaultTypeInternal;
extern setCameraParameters_grpc1ResponseDefaultTypeInternal _setCameraParameters_grpc1Response_default_instance_;
class setMapRequestRequest;
struct setMapRequestRequestDefaultTypeInternal;
extern setMapRequestRequestDefaultTypeInternal _setMapRequestRequest_default_instance_;
class setMapRequestResponse;
struct setMapRequestResponseDefaultTypeInternal;
extern setMapRequestResponseDefaultTypeInternal _setMapRequestResponse_default_instance_;
class setRectificationParametersRequest;
struct setRectificationParametersRequestDefaultTypeInternal;
extern setRectificationParametersRequestDefaultTypeInternal _setRectificationParametersRequest_default_instance_;
class setRectificationParametersResponse;
struct setRectificationParametersResponseDefaultTypeInternal;
extern setRectificationParametersResponseDefaultTypeInternal _setRectificationParametersResponse_default_instance_;
class startRequest;
struct startRequestDefaultTypeInternal;
extern startRequestDefaultTypeInternal _startRequest_default_instance_;
class startResponse;
struct startResponseDefaultTypeInternal;
extern startResponseDefaultTypeInternal _startResponse_default_instance_;
class stopRequest;
struct stopRequestDefaultTypeInternal;
extern stopRequestDefaultTypeInternal _stopRequest_default_instance_;
class stopResponse;
struct stopResponseDefaultTypeInternal;
extern stopResponseDefaultTypeInternal _stopResponse_default_instance_;
class unregisterClientRequest;
struct unregisterClientRequestDefaultTypeInternal;
extern unregisterClientRequestDefaultTypeInternal _unregisterClientRequest_default_instance_;
class unregisterClientResponse;
struct unregisterClientResponseDefaultTypeInternal;
extern unregisterClientResponseDefaultTypeInternal _unregisterClientResponse_default_instance_;
}  // namespace grpcIFrontEnd
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIFrontEnd::get3DTransformRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::get3DTransformRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::get3DTransformRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::get3DTransformRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::getAllClientsUUIDRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getAllClientsUUIDRequest>(Arena*);
template<> ::grpcIFrontEnd::getAllClientsUUIDResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getAllClientsUUIDResponse>(Arena*);
template<> ::grpcIFrontEnd::getCameraParametersRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getCameraParametersRequest>(Arena*);
template<> ::grpcIFrontEnd::getCameraParametersResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getCameraParametersResponse>(Arena*);
template<> ::grpcIFrontEnd::getLastPoseRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getLastPoseRequest>(Arena*);
template<> ::grpcIFrontEnd::getLastPoseResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getLastPoseResponse>(Arena*);
template<> ::grpcIFrontEnd::getMapRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMapRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::getMapRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMapRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::getMappingDataRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMappingDataRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::getMappingDataRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMappingDataRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::getPointCloudRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getPointCloudRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::getPointCloudRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getPointCloudRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::getProcessingModeRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getProcessingModeRequest>(Arena*);
template<> ::grpcIFrontEnd::getProcessingModeResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getProcessingModeResponse>(Arena*);
template<> ::grpcIFrontEnd::init_grpc0Request* Arena::CreateMaybeMessage<::grpcIFrontEnd::init_grpc0Request>(Arena*);
template<> ::grpcIFrontEnd::init_grpc0Response* Arena::CreateMaybeMessage<::grpcIFrontEnd::init_grpc0Response>(Arena*);
template<> ::grpcIFrontEnd::init_grpc1Request* Arena::CreateMaybeMessage<::grpcIFrontEnd::init_grpc1Request>(Arena*);
template<> ::grpcIFrontEnd::init_grpc1Response* Arena::CreateMaybeMessage<::grpcIFrontEnd::init_grpc1Response>(Arena*);
template<> ::grpcIFrontEnd::registerClientRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::registerClientRequest>(Arena*);
template<> ::grpcIFrontEnd::registerClientResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::registerClientResponse>(Arena*);
template<> ::grpcIFrontEnd::relocalizeProcessRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::relocalizeProcessRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::relocalizeProcessRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::relocalizeProcessRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::resetMapRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::resetMapRequest>(Arena*);
template<> ::grpcIFrontEnd::resetMapResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::resetMapResponse>(Arena*);
template<> ::grpcIFrontEnd::setCameraParameters_grpc0Request* Arena::CreateMaybeMessage<::grpcIFrontEnd::setCameraParameters_grpc0Request>(Arena*);
template<> ::grpcIFrontEnd::setCameraParameters_grpc0Response* Arena::CreateMaybeMessage<::grpcIFrontEnd::setCameraParameters_grpc0Response>(Arena*);
template<> ::grpcIFrontEnd::setCameraParameters_grpc1Request* Arena::CreateMaybeMessage<::grpcIFrontEnd::setCameraParameters_grpc1Request>(Arena*);
template<> ::grpcIFrontEnd::setCameraParameters_grpc1Response* Arena::CreateMaybeMessage<::grpcIFrontEnd::setCameraParameters_grpc1Response>(Arena*);
template<> ::grpcIFrontEnd::setMapRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::setMapRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::setMapRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::setMapRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::setRectificationParametersRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::setRectificationParametersRequest>(Arena*);
template<> ::grpcIFrontEnd::setRectificationParametersResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::setRectificationParametersResponse>(Arena*);
template<> ::grpcIFrontEnd::startRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::startRequest>(Arena*);
template<> ::grpcIFrontEnd::startResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::startResponse>(Arena*);
template<> ::grpcIFrontEnd::stopRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::stopRequest>(Arena*);
template<> ::grpcIFrontEnd::stopResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::stopResponse>(Arena*);
template<> ::grpcIFrontEnd::unregisterClientRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::unregisterClientRequest>(Arena*);
template<> ::grpcIFrontEnd::unregisterClientResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::unregisterClientResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIFrontEnd {

// ===================================================================

class registerClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.registerClientRequest) */ {
 public:
  inline registerClientRequest() : registerClientRequest(nullptr) {}
  ~registerClientRequest() override;
  explicit PROTOBUF_CONSTEXPR registerClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  registerClientRequest(const registerClientRequest& from);
  registerClientRequest(registerClientRequest&& from) noexcept
    : registerClientRequest() {
    *this = ::std::move(from);
  }

  inline registerClientRequest& operator=(const registerClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerClientRequest& operator=(registerClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const registerClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const registerClientRequest* internal_default_instance() {
    return reinterpret_cast<const registerClientRequest*>(
               &_registerClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(registerClientRequest& a, registerClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(registerClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  registerClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<registerClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const registerClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const registerClientRequest& from) {
    registerClientRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerClientRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.registerClientRequest";
  }
  protected:
  explicit registerClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.registerClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class registerClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.registerClientResponse) */ {
 public:
  inline registerClientResponse() : registerClientResponse(nullptr) {}
  ~registerClientResponse() override;
  explicit PROTOBUF_CONSTEXPR registerClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  registerClientResponse(const registerClientResponse& from);
  registerClientResponse(registerClientResponse&& from) noexcept
    : registerClientResponse() {
    *this = ::std::move(from);
  }

  inline registerClientResponse& operator=(const registerClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerClientResponse& operator=(registerClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const registerClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const registerClientResponse* internal_default_instance() {
    return reinterpret_cast<const registerClientResponse*>(
               &_registerClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(registerClientResponse& a, registerClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(registerClientResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  registerClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<registerClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const registerClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const registerClientResponse& from) {
    registerClientResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerClientResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.registerClientResponse";
  }
  protected:
  explicit registerClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.registerClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class unregisterClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.unregisterClientRequest) */ {
 public:
  inline unregisterClientRequest() : unregisterClientRequest(nullptr) {}
  ~unregisterClientRequest() override;
  explicit PROTOBUF_CONSTEXPR unregisterClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  unregisterClientRequest(const unregisterClientRequest& from);
  unregisterClientRequest(unregisterClientRequest&& from) noexcept
    : unregisterClientRequest() {
    *this = ::std::move(from);
  }

  inline unregisterClientRequest& operator=(const unregisterClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline unregisterClientRequest& operator=(unregisterClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const unregisterClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const unregisterClientRequest* internal_default_instance() {
    return reinterpret_cast<const unregisterClientRequest*>(
               &_unregisterClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(unregisterClientRequest& a, unregisterClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(unregisterClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(unregisterClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  unregisterClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<unregisterClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const unregisterClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const unregisterClientRequest& from) {
    unregisterClientRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unregisterClientRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.unregisterClientRequest";
  }
  protected:
  explicit unregisterClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.unregisterClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class unregisterClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.unregisterClientResponse) */ {
 public:
  inline unregisterClientResponse() : unregisterClientResponse(nullptr) {}
  ~unregisterClientResponse() override;
  explicit PROTOBUF_CONSTEXPR unregisterClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  unregisterClientResponse(const unregisterClientResponse& from);
  unregisterClientResponse(unregisterClientResponse&& from) noexcept
    : unregisterClientResponse() {
    *this = ::std::move(from);
  }

  inline unregisterClientResponse& operator=(const unregisterClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline unregisterClientResponse& operator=(unregisterClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const unregisterClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const unregisterClientResponse* internal_default_instance() {
    return reinterpret_cast<const unregisterClientResponse*>(
               &_unregisterClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(unregisterClientResponse& a, unregisterClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(unregisterClientResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(unregisterClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  unregisterClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<unregisterClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const unregisterClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const unregisterClientResponse& from) {
    unregisterClientResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unregisterClientResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.unregisterClientResponse";
  }
  protected:
  explicit unregisterClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.unregisterClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getAllClientsUUIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getAllClientsUUIDRequest) */ {
 public:
  inline getAllClientsUUIDRequest() : getAllClientsUUIDRequest(nullptr) {}
  ~getAllClientsUUIDRequest() override;
  explicit PROTOBUF_CONSTEXPR getAllClientsUUIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllClientsUUIDRequest(const getAllClientsUUIDRequest& from);
  getAllClientsUUIDRequest(getAllClientsUUIDRequest&& from) noexcept
    : getAllClientsUUIDRequest() {
    *this = ::std::move(from);
  }

  inline getAllClientsUUIDRequest& operator=(const getAllClientsUUIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllClientsUUIDRequest& operator=(getAllClientsUUIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllClientsUUIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllClientsUUIDRequest* internal_default_instance() {
    return reinterpret_cast<const getAllClientsUUIDRequest*>(
               &_getAllClientsUUIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getAllClientsUUIDRequest& a, getAllClientsUUIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllClientsUUIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllClientsUUIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getAllClientsUUIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getAllClientsUUIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllClientsUUIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getAllClientsUUIDRequest& from) {
    getAllClientsUUIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllClientsUUIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getAllClientsUUIDRequest";
  }
  protected:
  explicit getAllClientsUUIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidListFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes uuidList = 2;
  void clear_uuidlist();
  const std::string& uuidlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuidlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuidlist();
  PROTOBUF_NODISCARD std::string* release_uuidlist();
  void set_allocated_uuidlist(std::string* uuidlist);
  private:
  const std::string& _internal_uuidlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuidlist(const std::string& value);
  std::string* _internal_mutable_uuidlist();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getAllClientsUUIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuidlist_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getAllClientsUUIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getAllClientsUUIDResponse) */ {
 public:
  inline getAllClientsUUIDResponse() : getAllClientsUUIDResponse(nullptr) {}
  ~getAllClientsUUIDResponse() override;
  explicit PROTOBUF_CONSTEXPR getAllClientsUUIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllClientsUUIDResponse(const getAllClientsUUIDResponse& from);
  getAllClientsUUIDResponse(getAllClientsUUIDResponse&& from) noexcept
    : getAllClientsUUIDResponse() {
    *this = ::std::move(from);
  }

  inline getAllClientsUUIDResponse& operator=(const getAllClientsUUIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllClientsUUIDResponse& operator=(getAllClientsUUIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllClientsUUIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllClientsUUIDResponse* internal_default_instance() {
    return reinterpret_cast<const getAllClientsUUIDResponse*>(
               &_getAllClientsUUIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getAllClientsUUIDResponse& a, getAllClientsUUIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllClientsUUIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllClientsUUIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getAllClientsUUIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getAllClientsUUIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllClientsUUIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getAllClientsUUIDResponse& from) {
    getAllClientsUUIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllClientsUUIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getAllClientsUUIDResponse";
  }
  protected:
  explicit getAllClientsUUIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidListFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes uuidList = 1;
  void clear_uuidlist();
  const std::string& uuidlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuidlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuidlist();
  PROTOBUF_NODISCARD std::string* release_uuidlist();
  void set_allocated_uuidlist(std::string* uuidlist);
  private:
  const std::string& _internal_uuidlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuidlist(const std::string& value);
  std::string* _internal_mutable_uuidlist();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getAllClientsUUIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuidlist_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.init_grpc0Request) */ {
 public:
  inline init_grpc0Request() : init_grpc0Request(nullptr) {}
  ~init_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR init_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc0Request(const init_grpc0Request& from);
  init_grpc0Request(init_grpc0Request&& from) noexcept
    : init_grpc0Request() {
    *this = ::std::move(from);
  }

  inline init_grpc0Request& operator=(const init_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc0Request& operator=(init_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const init_grpc0Request*>(
               &_init_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(init_grpc0Request& a, init_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc0Request& from) {
    init_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.init_grpc0Request";
  }
  protected:
  explicit init_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.init_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.init_grpc0Response) */ {
 public:
  inline init_grpc0Response() : init_grpc0Response(nullptr) {}
  ~init_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR init_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc0Response(const init_grpc0Response& from);
  init_grpc0Response(init_grpc0Response&& from) noexcept
    : init_grpc0Response() {
    *this = ::std::move(from);
  }

  inline init_grpc0Response& operator=(const init_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc0Response& operator=(init_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const init_grpc0Response*>(
               &_init_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(init_grpc0Response& a, init_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc0Response& from) {
    init_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.init_grpc0Response";
  }
  protected:
  explicit init_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.init_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.init_grpc1Request) */ {
 public:
  inline init_grpc1Request() : init_grpc1Request(nullptr) {}
  ~init_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR init_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc1Request(const init_grpc1Request& from);
  init_grpc1Request(init_grpc1Request&& from) noexcept
    : init_grpc1Request() {
    *this = ::std::move(from);
  }

  inline init_grpc1Request& operator=(const init_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc1Request& operator=(init_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const init_grpc1Request*>(
               &_init_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(init_grpc1Request& a, init_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc1Request& from) {
    init_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.init_grpc1Request";
  }
  protected:
  explicit init_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kPipelineModeFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes pipelineMode = 3;
  void clear_pipelinemode();
  const std::string& pipelinemode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pipelinemode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pipelinemode();
  PROTOBUF_NODISCARD std::string* release_pipelinemode();
  void set_allocated_pipelinemode(std::string* pipelinemode);
  private:
  const std::string& _internal_pipelinemode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pipelinemode(const std::string& value);
  std::string* _internal_mutable_pipelinemode();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.init_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pipelinemode_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.init_grpc1Response) */ {
 public:
  inline init_grpc1Response() : init_grpc1Response(nullptr) {}
  ~init_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR init_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc1Response(const init_grpc1Response& from);
  init_grpc1Response(init_grpc1Response&& from) noexcept
    : init_grpc1Response() {
    *this = ::std::move(from);
  }

  inline init_grpc1Response& operator=(const init_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc1Response& operator=(init_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const init_grpc1Response*>(
               &_init_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(init_grpc1Response& a, init_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc1Response& from) {
    init_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.init_grpc1Response";
  }
  protected:
  explicit init_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.init_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class startRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.startRequest) */ {
 public:
  inline startRequest() : startRequest(nullptr) {}
  ~startRequest() override;
  explicit PROTOBUF_CONSTEXPR startRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startRequest(const startRequest& from);
  startRequest(startRequest&& from) noexcept
    : startRequest() {
    *this = ::std::move(from);
  }

  inline startRequest& operator=(const startRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline startRequest& operator=(startRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const startRequest* internal_default_instance() {
    return reinterpret_cast<const startRequest*>(
               &_startRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(startRequest& a, startRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(startRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  startRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<startRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const startRequest& from) {
    startRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.startRequest";
  }
  protected:
  explicit startRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.startRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class startResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.startResponse) */ {
 public:
  inline startResponse() : startResponse(nullptr) {}
  ~startResponse() override;
  explicit PROTOBUF_CONSTEXPR startResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startResponse(const startResponse& from);
  startResponse(startResponse&& from) noexcept
    : startResponse() {
    *this = ::std::move(from);
  }

  inline startResponse& operator=(const startResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline startResponse& operator=(startResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const startResponse* internal_default_instance() {
    return reinterpret_cast<const startResponse*>(
               &_startResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(startResponse& a, startResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(startResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  startResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<startResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const startResponse& from) {
    startResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.startResponse";
  }
  protected:
  explicit startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.startResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class stopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.stopRequest) */ {
 public:
  inline stopRequest() : stopRequest(nullptr) {}
  ~stopRequest() override;
  explicit PROTOBUF_CONSTEXPR stopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopRequest(const stopRequest& from);
  stopRequest(stopRequest&& from) noexcept
    : stopRequest() {
    *this = ::std::move(from);
  }

  inline stopRequest& operator=(const stopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopRequest& operator=(stopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopRequest* internal_default_instance() {
    return reinterpret_cast<const stopRequest*>(
               &_stopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(stopRequest& a, stopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(stopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stopRequest& from) {
    stopRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.stopRequest";
  }
  protected:
  explicit stopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.stopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class stopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.stopResponse) */ {
 public:
  inline stopResponse() : stopResponse(nullptr) {}
  ~stopResponse() override;
  explicit PROTOBUF_CONSTEXPR stopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopResponse(const stopResponse& from);
  stopResponse(stopResponse&& from) noexcept
    : stopResponse() {
    *this = ::std::move(from);
  }

  inline stopResponse& operator=(const stopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopResponse& operator=(stopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopResponse* internal_default_instance() {
    return reinterpret_cast<const stopResponse*>(
               &_stopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(stopResponse& a, stopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(stopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stopResponse& from) {
    stopResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.stopResponse";
  }
  protected:
  explicit stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.stopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getProcessingModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getProcessingModeRequest) */ {
 public:
  inline getProcessingModeRequest() : getProcessingModeRequest(nullptr) {}
  ~getProcessingModeRequest() override;
  explicit PROTOBUF_CONSTEXPR getProcessingModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getProcessingModeRequest(const getProcessingModeRequest& from);
  getProcessingModeRequest(getProcessingModeRequest&& from) noexcept
    : getProcessingModeRequest() {
    *this = ::std::move(from);
  }

  inline getProcessingModeRequest& operator=(const getProcessingModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getProcessingModeRequest& operator=(getProcessingModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getProcessingModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getProcessingModeRequest* internal_default_instance() {
    return reinterpret_cast<const getProcessingModeRequest*>(
               &_getProcessingModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(getProcessingModeRequest& a, getProcessingModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getProcessingModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getProcessingModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getProcessingModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getProcessingModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getProcessingModeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getProcessingModeRequest& from) {
    getProcessingModeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getProcessingModeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getProcessingModeRequest";
  }
  protected:
  explicit getProcessingModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kPipelineModeFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes pipelineMode = 3;
  void clear_pipelinemode();
  const std::string& pipelinemode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pipelinemode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pipelinemode();
  PROTOBUF_NODISCARD std::string* release_pipelinemode();
  void set_allocated_pipelinemode(std::string* pipelinemode);
  private:
  const std::string& _internal_pipelinemode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pipelinemode(const std::string& value);
  std::string* _internal_mutable_pipelinemode();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getProcessingModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pipelinemode_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getProcessingModeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getProcessingModeResponse) */ {
 public:
  inline getProcessingModeResponse() : getProcessingModeResponse(nullptr) {}
  ~getProcessingModeResponse() override;
  explicit PROTOBUF_CONSTEXPR getProcessingModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getProcessingModeResponse(const getProcessingModeResponse& from);
  getProcessingModeResponse(getProcessingModeResponse&& from) noexcept
    : getProcessingModeResponse() {
    *this = ::std::move(from);
  }

  inline getProcessingModeResponse& operator=(const getProcessingModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getProcessingModeResponse& operator=(getProcessingModeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getProcessingModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getProcessingModeResponse* internal_default_instance() {
    return reinterpret_cast<const getProcessingModeResponse*>(
               &_getProcessingModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(getProcessingModeResponse& a, getProcessingModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getProcessingModeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getProcessingModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getProcessingModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getProcessingModeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getProcessingModeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getProcessingModeResponse& from) {
    getProcessingModeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getProcessingModeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getProcessingModeResponse";
  }
  protected:
  explicit getProcessingModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPipelineModeFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pipelineMode = 1;
  void clear_pipelinemode();
  const std::string& pipelinemode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pipelinemode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pipelinemode();
  PROTOBUF_NODISCARD std::string* release_pipelinemode();
  void set_allocated_pipelinemode(std::string* pipelinemode);
  private:
  const std::string& _internal_pipelinemode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pipelinemode(const std::string& value);
  std::string* _internal_mutable_pipelinemode();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getProcessingModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pipelinemode_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setCameraParameters_grpc0Request) */ {
 public:
  inline setCameraParameters_grpc0Request() : setCameraParameters_grpc0Request(nullptr) {}
  ~setCameraParameters_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc0Request(const setCameraParameters_grpc0Request& from);
  setCameraParameters_grpc0Request(setCameraParameters_grpc0Request&& from) noexcept
    : setCameraParameters_grpc0Request() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc0Request& operator=(const setCameraParameters_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc0Request& operator=(setCameraParameters_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc0Request*>(
               &_setCameraParameters_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(setCameraParameters_grpc0Request& a, setCameraParameters_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc0Request& from) {
    setCameraParameters_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setCameraParameters_grpc0Request";
  }
  protected:
  explicit setCameraParameters_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kCameraParamsFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes cameraParams = 3;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams();
  PROTOBUF_NODISCARD std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setCameraParameters_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setCameraParameters_grpc0Response) */ {
 public:
  inline setCameraParameters_grpc0Response() : setCameraParameters_grpc0Response(nullptr) {}
  ~setCameraParameters_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc0Response(const setCameraParameters_grpc0Response& from);
  setCameraParameters_grpc0Response(setCameraParameters_grpc0Response&& from) noexcept
    : setCameraParameters_grpc0Response() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc0Response& operator=(const setCameraParameters_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc0Response& operator=(setCameraParameters_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc0Response*>(
               &_setCameraParameters_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(setCameraParameters_grpc0Response& a, setCameraParameters_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc0Response& from) {
    setCameraParameters_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setCameraParameters_grpc0Response";
  }
  protected:
  explicit setCameraParameters_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setCameraParameters_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setCameraParameters_grpc1Request) */ {
 public:
  inline setCameraParameters_grpc1Request() : setCameraParameters_grpc1Request(nullptr) {}
  ~setCameraParameters_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc1Request(const setCameraParameters_grpc1Request& from);
  setCameraParameters_grpc1Request(setCameraParameters_grpc1Request&& from) noexcept
    : setCameraParameters_grpc1Request() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc1Request& operator=(const setCameraParameters_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc1Request& operator=(setCameraParameters_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc1Request*>(
               &_setCameraParameters_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(setCameraParameters_grpc1Request& a, setCameraParameters_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc1Request& from) {
    setCameraParameters_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setCameraParameters_grpc1Request";
  }
  protected:
  explicit setCameraParameters_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kCameraParams1FieldNumber = 3,
    kCameraParams2FieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes cameraParams1 = 3;
  void clear_cameraparams1();
  const std::string& cameraparams1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams1();
  PROTOBUF_NODISCARD std::string* release_cameraparams1();
  void set_allocated_cameraparams1(std::string* cameraparams1);
  private:
  const std::string& _internal_cameraparams1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams1(const std::string& value);
  std::string* _internal_mutable_cameraparams1();
  public:

  // bytes cameraParams2 = 4;
  void clear_cameraparams2();
  const std::string& cameraparams2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams2();
  PROTOBUF_NODISCARD std::string* release_cameraparams2();
  void set_allocated_cameraparams2(std::string* cameraparams2);
  private:
  const std::string& _internal_cameraparams2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams2(const std::string& value);
  std::string* _internal_mutable_cameraparams2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setCameraParameters_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams2_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setCameraParameters_grpc1Response) */ {
 public:
  inline setCameraParameters_grpc1Response() : setCameraParameters_grpc1Response(nullptr) {}
  ~setCameraParameters_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc1Response(const setCameraParameters_grpc1Response& from);
  setCameraParameters_grpc1Response(setCameraParameters_grpc1Response&& from) noexcept
    : setCameraParameters_grpc1Response() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc1Response& operator=(const setCameraParameters_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc1Response& operator=(setCameraParameters_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc1Response*>(
               &_setCameraParameters_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(setCameraParameters_grpc1Response& a, setCameraParameters_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc1Response& from) {
    setCameraParameters_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setCameraParameters_grpc1Response";
  }
  protected:
  explicit setCameraParameters_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setCameraParameters_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setRectificationParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setRectificationParametersRequest) */ {
 public:
  inline setRectificationParametersRequest() : setRectificationParametersRequest(nullptr) {}
  ~setRectificationParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setRectificationParametersRequest(const setRectificationParametersRequest& from);
  setRectificationParametersRequest(setRectificationParametersRequest&& from) noexcept
    : setRectificationParametersRequest() {
    *this = ::std::move(from);
  }

  inline setRectificationParametersRequest& operator=(const setRectificationParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setRectificationParametersRequest& operator=(setRectificationParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setRectificationParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setRectificationParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setRectificationParametersRequest*>(
               &_setRectificationParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(setRectificationParametersRequest& a, setRectificationParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setRectificationParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setRectificationParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setRectificationParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setRectificationParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setRectificationParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setRectificationParametersRequest& from) {
    setRectificationParametersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setRectificationParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setRectificationParametersRequest";
  }
  protected:
  explicit setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kRectCam1FieldNumber = 3,
    kRectCam2FieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes rectCam1 = 3;
  void clear_rectcam1();
  const std::string& rectcam1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectcam1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectcam1();
  PROTOBUF_NODISCARD std::string* release_rectcam1();
  void set_allocated_rectcam1(std::string* rectcam1);
  private:
  const std::string& _internal_rectcam1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectcam1(const std::string& value);
  std::string* _internal_mutable_rectcam1();
  public:

  // bytes rectCam2 = 4;
  void clear_rectcam2();
  const std::string& rectcam2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectcam2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectcam2();
  PROTOBUF_NODISCARD std::string* release_rectcam2();
  void set_allocated_rectcam2(std::string* rectcam2);
  private:
  const std::string& _internal_rectcam2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectcam2(const std::string& value);
  std::string* _internal_mutable_rectcam2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setRectificationParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectcam1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectcam2_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setRectificationParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setRectificationParametersResponse) */ {
 public:
  inline setRectificationParametersResponse() : setRectificationParametersResponse(nullptr) {}
  ~setRectificationParametersResponse() override;
  explicit PROTOBUF_CONSTEXPR setRectificationParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setRectificationParametersResponse(const setRectificationParametersResponse& from);
  setRectificationParametersResponse(setRectificationParametersResponse&& from) noexcept
    : setRectificationParametersResponse() {
    *this = ::std::move(from);
  }

  inline setRectificationParametersResponse& operator=(const setRectificationParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setRectificationParametersResponse& operator=(setRectificationParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setRectificationParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setRectificationParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setRectificationParametersResponse*>(
               &_setRectificationParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(setRectificationParametersResponse& a, setRectificationParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setRectificationParametersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setRectificationParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setRectificationParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setRectificationParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setRectificationParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setRectificationParametersResponse& from) {
    setRectificationParametersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setRectificationParametersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setRectificationParametersResponse";
  }
  protected:
  explicit setRectificationParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setRectificationParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getCameraParametersRequest) */ {
 public:
  inline getCameraParametersRequest() : getCameraParametersRequest(nullptr) {}
  ~getCameraParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR getCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParametersRequest(const getCameraParametersRequest& from);
  getCameraParametersRequest(getCameraParametersRequest&& from) noexcept
    : getCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline getCameraParametersRequest& operator=(const getCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParametersRequest& operator=(getCameraParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const getCameraParametersRequest*>(
               &_getCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(getCameraParametersRequest& a, getCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getCameraParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCameraParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getCameraParametersRequest& from) {
    getCameraParametersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getCameraParametersRequest";
  }
  protected:
  explicit getCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kCameraParamsFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes cameraParams = 3;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams();
  PROTOBUF_NODISCARD std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getCameraParametersResponse) */ {
 public:
  inline getCameraParametersResponse() : getCameraParametersResponse(nullptr) {}
  ~getCameraParametersResponse() override;
  explicit PROTOBUF_CONSTEXPR getCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParametersResponse(const getCameraParametersResponse& from);
  getCameraParametersResponse(getCameraParametersResponse&& from) noexcept
    : getCameraParametersResponse() {
    *this = ::std::move(from);
  }

  inline getCameraParametersResponse& operator=(const getCameraParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParametersResponse& operator=(getCameraParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCameraParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getCameraParametersResponse*>(
               &_getCameraParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(getCameraParametersResponse& a, getCameraParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParametersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getCameraParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getCameraParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCameraParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getCameraParametersResponse& from) {
    getCameraParametersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParametersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getCameraParametersResponse";
  }
  protected:
  explicit getCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParamsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes cameraParams = 1;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams();
  PROTOBUF_NODISCARD std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getCameraParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class relocalizeProcessRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.relocalizeProcessRequestRequest) */ {
 public:
  inline relocalizeProcessRequestRequest() : relocalizeProcessRequestRequest(nullptr) {}
  ~relocalizeProcessRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR relocalizeProcessRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  relocalizeProcessRequestRequest(const relocalizeProcessRequestRequest& from);
  relocalizeProcessRequestRequest(relocalizeProcessRequestRequest&& from) noexcept
    : relocalizeProcessRequestRequest() {
    *this = ::std::move(from);
  }

  inline relocalizeProcessRequestRequest& operator=(const relocalizeProcessRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline relocalizeProcessRequestRequest& operator=(relocalizeProcessRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const relocalizeProcessRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const relocalizeProcessRequestRequest* internal_default_instance() {
    return reinterpret_cast<const relocalizeProcessRequestRequest*>(
               &_relocalizeProcessRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(relocalizeProcessRequestRequest& a, relocalizeProcessRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(relocalizeProcessRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(relocalizeProcessRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  relocalizeProcessRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<relocalizeProcessRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const relocalizeProcessRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const relocalizeProcessRequestRequest& from) {
    relocalizeProcessRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relocalizeProcessRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.relocalizeProcessRequestRequest";
  }
  protected:
  explicit relocalizeProcessRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kImagesFieldNumber = 3,
    kPosesFieldNumber = 4,
    kWorldTransformFieldNumber = 6,
    kTimestampFieldNumber = 7,
    kTransform3DStatusFieldNumber = 8,
    kTransform3DFieldNumber = 9,
    kConfidenceFieldNumber = 10,
    kMappingStatusFieldNumber = 11,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kFixedPoseFieldNumber = 5,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes images = 3;
  void clear_images();
  const std::string& images() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_images(ArgT0&& arg0, ArgT... args);
  std::string* mutable_images();
  PROTOBUF_NODISCARD std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes poses = 4;
  void clear_poses();
  const std::string& poses() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poses(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poses();
  PROTOBUF_NODISCARD std::string* release_poses();
  void set_allocated_poses(std::string* poses);
  private:
  const std::string& _internal_poses() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poses(const std::string& value);
  std::string* _internal_mutable_poses();
  public:

  // bytes worldTransform = 6;
  void clear_worldtransform();
  const std::string& worldtransform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldtransform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldtransform();
  PROTOBUF_NODISCARD std::string* release_worldtransform();
  void set_allocated_worldtransform(std::string* worldtransform);
  private:
  const std::string& _internal_worldtransform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldtransform(const std::string& value);
  std::string* _internal_mutable_worldtransform();
  public:

  // bytes timestamp = 7;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // bytes transform3DStatus = 8;
  void clear_transform3dstatus();
  const std::string& transform3dstatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3dstatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3dstatus();
  PROTOBUF_NODISCARD std::string* release_transform3dstatus();
  void set_allocated_transform3dstatus(std::string* transform3dstatus);
  private:
  const std::string& _internal_transform3dstatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3dstatus(const std::string& value);
  std::string* _internal_mutable_transform3dstatus();
  public:

  // bytes transform3D = 9;
  void clear_transform3d();
  const std::string& transform3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3d();
  PROTOBUF_NODISCARD std::string* release_transform3d();
  void set_allocated_transform3d(std::string* transform3d);
  private:
  const std::string& _internal_transform3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3d(const std::string& value);
  std::string* _internal_mutable_transform3d();
  public:

  // bytes confidence = 10;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // bytes mappingStatus = 11;
  void clear_mappingstatus();
  const std::string& mappingstatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mappingstatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mappingstatus();
  PROTOBUF_NODISCARD std::string* release_mappingstatus();
  void set_allocated_mappingstatus(std::string* mappingstatus);
  private:
  const std::string& _internal_mappingstatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mappingstatus(const std::string& value);
  std::string* _internal_mutable_mappingstatus();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // bool fixedPose = 5;
  void clear_fixedpose();
  bool fixedpose() const;
  void set_fixedpose(bool value);
  private:
  bool _internal_fixedpose() const;
  void _internal_set_fixedpose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.relocalizeProcessRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldtransform_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3dstatus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mappingstatus_;
    int32_t grpcservercompressionformat_;
    bool fixedpose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class relocalizeProcessRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.relocalizeProcessRequestResponse) */ {
 public:
  inline relocalizeProcessRequestResponse() : relocalizeProcessRequestResponse(nullptr) {}
  ~relocalizeProcessRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR relocalizeProcessRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  relocalizeProcessRequestResponse(const relocalizeProcessRequestResponse& from);
  relocalizeProcessRequestResponse(relocalizeProcessRequestResponse&& from) noexcept
    : relocalizeProcessRequestResponse() {
    *this = ::std::move(from);
  }

  inline relocalizeProcessRequestResponse& operator=(const relocalizeProcessRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline relocalizeProcessRequestResponse& operator=(relocalizeProcessRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const relocalizeProcessRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const relocalizeProcessRequestResponse* internal_default_instance() {
    return reinterpret_cast<const relocalizeProcessRequestResponse*>(
               &_relocalizeProcessRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(relocalizeProcessRequestResponse& a, relocalizeProcessRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(relocalizeProcessRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(relocalizeProcessRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  relocalizeProcessRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<relocalizeProcessRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const relocalizeProcessRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const relocalizeProcessRequestResponse& from) {
    relocalizeProcessRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relocalizeProcessRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.relocalizeProcessRequestResponse";
  }
  protected:
  explicit relocalizeProcessRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransform3DStatusFieldNumber = 1,
    kTransform3DFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kMappingStatusFieldNumber = 4,
    kXpcfGrpcReturnValueFieldNumber = 5,
  };
  // bytes transform3DStatus = 1;
  void clear_transform3dstatus();
  const std::string& transform3dstatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3dstatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3dstatus();
  PROTOBUF_NODISCARD std::string* release_transform3dstatus();
  void set_allocated_transform3dstatus(std::string* transform3dstatus);
  private:
  const std::string& _internal_transform3dstatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3dstatus(const std::string& value);
  std::string* _internal_mutable_transform3dstatus();
  public:

  // bytes transform3D = 2;
  void clear_transform3d();
  const std::string& transform3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3d();
  PROTOBUF_NODISCARD std::string* release_transform3d();
  void set_allocated_transform3d(std::string* transform3d);
  private:
  const std::string& _internal_transform3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3d(const std::string& value);
  std::string* _internal_mutable_transform3d();
  public:

  // bytes confidence = 3;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // bytes mappingStatus = 4;
  void clear_mappingstatus();
  const std::string& mappingstatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mappingstatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mappingstatus();
  PROTOBUF_NODISCARD std::string* release_mappingstatus();
  void set_allocated_mappingstatus(std::string* mappingstatus);
  private:
  const std::string& _internal_mappingstatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mappingstatus(const std::string& value);
  std::string* _internal_mutable_mappingstatus();
  public:

  // sint32 xpcfGrpcReturnValue = 5;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.relocalizeProcessRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3dstatus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mappingstatus_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class get3DTransformRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.get3DTransformRequestRequest) */ {
 public:
  inline get3DTransformRequestRequest() : get3DTransformRequestRequest(nullptr) {}
  ~get3DTransformRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR get3DTransformRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get3DTransformRequestRequest(const get3DTransformRequestRequest& from);
  get3DTransformRequestRequest(get3DTransformRequestRequest&& from) noexcept
    : get3DTransformRequestRequest() {
    *this = ::std::move(from);
  }

  inline get3DTransformRequestRequest& operator=(const get3DTransformRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline get3DTransformRequestRequest& operator=(get3DTransformRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get3DTransformRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const get3DTransformRequestRequest* internal_default_instance() {
    return reinterpret_cast<const get3DTransformRequestRequest*>(
               &_get3DTransformRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(get3DTransformRequestRequest& a, get3DTransformRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(get3DTransformRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get3DTransformRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  get3DTransformRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<get3DTransformRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get3DTransformRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const get3DTransformRequestRequest& from) {
    get3DTransformRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get3DTransformRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.get3DTransformRequestRequest";
  }
  protected:
  explicit get3DTransformRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kTransform3DStatusFieldNumber = 3,
    kTransform3DFieldNumber = 4,
    kConfidenceFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes transform3DStatus = 3;
  void clear_transform3dstatus();
  const std::string& transform3dstatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3dstatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3dstatus();
  PROTOBUF_NODISCARD std::string* release_transform3dstatus();
  void set_allocated_transform3dstatus(std::string* transform3dstatus);
  private:
  const std::string& _internal_transform3dstatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3dstatus(const std::string& value);
  std::string* _internal_mutable_transform3dstatus();
  public:

  // bytes transform3D = 4;
  void clear_transform3d();
  const std::string& transform3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3d();
  PROTOBUF_NODISCARD std::string* release_transform3d();
  void set_allocated_transform3d(std::string* transform3d);
  private:
  const std::string& _internal_transform3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3d(const std::string& value);
  std::string* _internal_mutable_transform3d();
  public:

  // bytes confidence = 5;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.get3DTransformRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3dstatus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class get3DTransformRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.get3DTransformRequestResponse) */ {
 public:
  inline get3DTransformRequestResponse() : get3DTransformRequestResponse(nullptr) {}
  ~get3DTransformRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR get3DTransformRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get3DTransformRequestResponse(const get3DTransformRequestResponse& from);
  get3DTransformRequestResponse(get3DTransformRequestResponse&& from) noexcept
    : get3DTransformRequestResponse() {
    *this = ::std::move(from);
  }

  inline get3DTransformRequestResponse& operator=(const get3DTransformRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline get3DTransformRequestResponse& operator=(get3DTransformRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get3DTransformRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const get3DTransformRequestResponse* internal_default_instance() {
    return reinterpret_cast<const get3DTransformRequestResponse*>(
               &_get3DTransformRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(get3DTransformRequestResponse& a, get3DTransformRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(get3DTransformRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get3DTransformRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  get3DTransformRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<get3DTransformRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get3DTransformRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const get3DTransformRequestResponse& from) {
    get3DTransformRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get3DTransformRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.get3DTransformRequestResponse";
  }
  protected:
  explicit get3DTransformRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransform3DStatusFieldNumber = 1,
    kTransform3DFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes transform3DStatus = 1;
  void clear_transform3dstatus();
  const std::string& transform3dstatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3dstatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3dstatus();
  PROTOBUF_NODISCARD std::string* release_transform3dstatus();
  void set_allocated_transform3dstatus(std::string* transform3dstatus);
  private:
  const std::string& _internal_transform3dstatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3dstatus(const std::string& value);
  std::string* _internal_mutable_transform3dstatus();
  public:

  // bytes transform3D = 2;
  void clear_transform3d();
  const std::string& transform3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3d();
  PROTOBUF_NODISCARD std::string* release_transform3d();
  void set_allocated_transform3d(std::string* transform3d);
  private:
  const std::string& _internal_transform3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3d(const std::string& value);
  std::string* _internal_mutable_transform3d();
  public:

  // bytes confidence = 3;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.get3DTransformRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3dstatus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMappingDataRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMappingDataRequestRequest) */ {
 public:
  inline getMappingDataRequestRequest() : getMappingDataRequestRequest(nullptr) {}
  ~getMappingDataRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR getMappingDataRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMappingDataRequestRequest(const getMappingDataRequestRequest& from);
  getMappingDataRequestRequest(getMappingDataRequestRequest&& from) noexcept
    : getMappingDataRequestRequest() {
    *this = ::std::move(from);
  }

  inline getMappingDataRequestRequest& operator=(const getMappingDataRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMappingDataRequestRequest& operator=(getMappingDataRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMappingDataRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMappingDataRequestRequest* internal_default_instance() {
    return reinterpret_cast<const getMappingDataRequestRequest*>(
               &_getMappingDataRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(getMappingDataRequestRequest& a, getMappingDataRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMappingDataRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMappingDataRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMappingDataRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMappingDataRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMappingDataRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMappingDataRequestRequest& from) {
    getMappingDataRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMappingDataRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMappingDataRequestRequest";
  }
  protected:
  explicit getMappingDataRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kOutputPointCloudsFieldNumber = 3,
    kKeyframePosesFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes outputPointClouds = 3;
  void clear_outputpointclouds();
  const std::string& outputpointclouds() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputpointclouds(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputpointclouds();
  PROTOBUF_NODISCARD std::string* release_outputpointclouds();
  void set_allocated_outputpointclouds(std::string* outputpointclouds);
  private:
  const std::string& _internal_outputpointclouds() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputpointclouds(const std::string& value);
  std::string* _internal_mutable_outputpointclouds();
  public:

  // bytes keyframePoses = 4;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMappingDataRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpointclouds_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMappingDataRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMappingDataRequestResponse) */ {
 public:
  inline getMappingDataRequestResponse() : getMappingDataRequestResponse(nullptr) {}
  ~getMappingDataRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR getMappingDataRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMappingDataRequestResponse(const getMappingDataRequestResponse& from);
  getMappingDataRequestResponse(getMappingDataRequestResponse&& from) noexcept
    : getMappingDataRequestResponse() {
    *this = ::std::move(from);
  }

  inline getMappingDataRequestResponse& operator=(const getMappingDataRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMappingDataRequestResponse& operator=(getMappingDataRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMappingDataRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMappingDataRequestResponse* internal_default_instance() {
    return reinterpret_cast<const getMappingDataRequestResponse*>(
               &_getMappingDataRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(getMappingDataRequestResponse& a, getMappingDataRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMappingDataRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMappingDataRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMappingDataRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMappingDataRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMappingDataRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMappingDataRequestResponse& from) {
    getMappingDataRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMappingDataRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMappingDataRequestResponse";
  }
  protected:
  explicit getMappingDataRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputPointCloudsFieldNumber = 1,
    kKeyframePosesFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes outputPointClouds = 1;
  void clear_outputpointclouds();
  const std::string& outputpointclouds() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputpointclouds(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputpointclouds();
  PROTOBUF_NODISCARD std::string* release_outputpointclouds();
  void set_allocated_outputpointclouds(std::string* outputpointclouds);
  private:
  const std::string& _internal_outputpointclouds() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputpointclouds(const std::string& value);
  std::string* _internal_mutable_outputpointclouds();
  public:

  // bytes keyframePoses = 2;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMappingDataRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpointclouds_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getLastPoseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getLastPoseRequest) */ {
 public:
  inline getLastPoseRequest() : getLastPoseRequest(nullptr) {}
  ~getLastPoseRequest() override;
  explicit PROTOBUF_CONSTEXPR getLastPoseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getLastPoseRequest(const getLastPoseRequest& from);
  getLastPoseRequest(getLastPoseRequest&& from) noexcept
    : getLastPoseRequest() {
    *this = ::std::move(from);
  }

  inline getLastPoseRequest& operator=(const getLastPoseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getLastPoseRequest& operator=(getLastPoseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getLastPoseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getLastPoseRequest* internal_default_instance() {
    return reinterpret_cast<const getLastPoseRequest*>(
               &_getLastPoseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(getLastPoseRequest& a, getLastPoseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getLastPoseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getLastPoseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getLastPoseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getLastPoseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getLastPoseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getLastPoseRequest& from) {
    getLastPoseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getLastPoseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getLastPoseRequest";
  }
  protected:
  explicit getLastPoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kPoseTypeFieldNumber = 3,
    kPoseFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // bytes poseType = 3;
  void clear_posetype();
  const std::string& posetype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_posetype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_posetype();
  PROTOBUF_NODISCARD std::string* release_posetype();
  void set_allocated_posetype(std::string* posetype);
  private:
  const std::string& _internal_posetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_posetype(const std::string& value);
  std::string* _internal_mutable_posetype();
  public:

  // bytes pose = 4;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getLastPoseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posetype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getLastPoseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getLastPoseResponse) */ {
 public:
  inline getLastPoseResponse() : getLastPoseResponse(nullptr) {}
  ~getLastPoseResponse() override;
  explicit PROTOBUF_CONSTEXPR getLastPoseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getLastPoseResponse(const getLastPoseResponse& from);
  getLastPoseResponse(getLastPoseResponse&& from) noexcept
    : getLastPoseResponse() {
    *this = ::std::move(from);
  }

  inline getLastPoseResponse& operator=(const getLastPoseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getLastPoseResponse& operator=(getLastPoseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getLastPoseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getLastPoseResponse* internal_default_instance() {
    return reinterpret_cast<const getLastPoseResponse*>(
               &_getLastPoseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(getLastPoseResponse& a, getLastPoseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getLastPoseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getLastPoseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getLastPoseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getLastPoseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getLastPoseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getLastPoseResponse& from) {
    getLastPoseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getLastPoseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getLastPoseResponse";
  }
  protected:
  explicit getLastPoseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pose = 1;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getLastPoseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMapRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMapRequestRequest) */ {
 public:
  inline getMapRequestRequest() : getMapRequestRequest(nullptr) {}
  ~getMapRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR getMapRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapRequestRequest(const getMapRequestRequest& from);
  getMapRequestRequest(getMapRequestRequest&& from) noexcept
    : getMapRequestRequest() {
    *this = ::std::move(from);
  }

  inline getMapRequestRequest& operator=(const getMapRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapRequestRequest& operator=(getMapRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapRequestRequest* internal_default_instance() {
    return reinterpret_cast<const getMapRequestRequest*>(
               &_getMapRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(getMapRequestRequest& a, getMapRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapRequestRequest& from) {
    getMapRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMapRequestRequest";
  }
  protected:
  explicit getMapRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes map = 2;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMapRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMapRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMapRequestResponse) */ {
 public:
  inline getMapRequestResponse() : getMapRequestResponse(nullptr) {}
  ~getMapRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR getMapRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapRequestResponse(const getMapRequestResponse& from);
  getMapRequestResponse(getMapRequestResponse&& from) noexcept
    : getMapRequestResponse() {
    *this = ::std::move(from);
  }

  inline getMapRequestResponse& operator=(const getMapRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapRequestResponse& operator=(getMapRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapRequestResponse* internal_default_instance() {
    return reinterpret_cast<const getMapRequestResponse*>(
               &_getMapRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(getMapRequestResponse& a, getMapRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapRequestResponse& from) {
    getMapRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMapRequestResponse";
  }
  protected:
  explicit getMapRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes map = 1;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMapRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setMapRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setMapRequestRequest) */ {
 public:
  inline setMapRequestRequest() : setMapRequestRequest(nullptr) {}
  ~setMapRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR setMapRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapRequestRequest(const setMapRequestRequest& from);
  setMapRequestRequest(setMapRequestRequest&& from) noexcept
    : setMapRequestRequest() {
    *this = ::std::move(from);
  }

  inline setMapRequestRequest& operator=(const setMapRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapRequestRequest& operator=(setMapRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setMapRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapRequestRequest* internal_default_instance() {
    return reinterpret_cast<const setMapRequestRequest*>(
               &_setMapRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(setMapRequestRequest& a, setMapRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setMapRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setMapRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setMapRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setMapRequestRequest& from) {
    setMapRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setMapRequestRequest";
  }
  protected:
  explicit setMapRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes map = 2;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setMapRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setMapRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setMapRequestResponse) */ {
 public:
  inline setMapRequestResponse() : setMapRequestResponse(nullptr) {}
  ~setMapRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR setMapRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapRequestResponse(const setMapRequestResponse& from);
  setMapRequestResponse(setMapRequestResponse&& from) noexcept
    : setMapRequestResponse() {
    *this = ::std::move(from);
  }

  inline setMapRequestResponse& operator=(const setMapRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapRequestResponse& operator=(setMapRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setMapRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapRequestResponse* internal_default_instance() {
    return reinterpret_cast<const setMapRequestResponse*>(
               &_setMapRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(setMapRequestResponse& a, setMapRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setMapRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setMapRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setMapRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setMapRequestResponse& from) {
    setMapRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setMapRequestResponse";
  }
  protected:
  explicit setMapRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setMapRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class resetMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.resetMapRequest) */ {
 public:
  inline resetMapRequest() : resetMapRequest(nullptr) {}
  ~resetMapRequest() override;
  explicit PROTOBUF_CONSTEXPR resetMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  resetMapRequest(const resetMapRequest& from);
  resetMapRequest(resetMapRequest&& from) noexcept
    : resetMapRequest() {
    *this = ::std::move(from);
  }

  inline resetMapRequest& operator=(const resetMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline resetMapRequest& operator=(resetMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const resetMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const resetMapRequest* internal_default_instance() {
    return reinterpret_cast<const resetMapRequest*>(
               &_resetMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(resetMapRequest& a, resetMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(resetMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(resetMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  resetMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<resetMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const resetMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const resetMapRequest& from) {
    resetMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resetMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.resetMapRequest";
  }
  protected:
  explicit resetMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.resetMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class resetMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.resetMapResponse) */ {
 public:
  inline resetMapResponse() : resetMapResponse(nullptr) {}
  ~resetMapResponse() override;
  explicit PROTOBUF_CONSTEXPR resetMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  resetMapResponse(const resetMapResponse& from);
  resetMapResponse(resetMapResponse&& from) noexcept
    : resetMapResponse() {
    *this = ::std::move(from);
  }

  inline resetMapResponse& operator=(const resetMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline resetMapResponse& operator=(resetMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const resetMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const resetMapResponse* internal_default_instance() {
    return reinterpret_cast<const resetMapResponse*>(
               &_resetMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(resetMapResponse& a, resetMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(resetMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(resetMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  resetMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<resetMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const resetMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const resetMapResponse& from) {
    resetMapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resetMapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.resetMapResponse";
  }
  protected:
  explicit resetMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.resetMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getPointCloudRequestRequest) */ {
 public:
  inline getPointCloudRequestRequest() : getPointCloudRequestRequest(nullptr) {}
  ~getPointCloudRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR getPointCloudRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudRequestRequest(const getPointCloudRequestRequest& from);
  getPointCloudRequestRequest(getPointCloudRequestRequest&& from) noexcept
    : getPointCloudRequestRequest() {
    *this = ::std::move(from);
  }

  inline getPointCloudRequestRequest& operator=(const getPointCloudRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudRequestRequest& operator=(getPointCloudRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudRequestRequest* internal_default_instance() {
    return reinterpret_cast<const getPointCloudRequestRequest*>(
               &_getPointCloudRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(getPointCloudRequestRequest& a, getPointCloudRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getPointCloudRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getPointCloudRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getPointCloudRequestRequest& from) {
    getPointCloudRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getPointCloudRequestRequest";
  }
  protected:
  explicit getPointCloudRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes pointCloud = 2;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud();
  PROTOBUF_NODISCARD std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getPointCloudRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getPointCloudRequestResponse) */ {
 public:
  inline getPointCloudRequestResponse() : getPointCloudRequestResponse(nullptr) {}
  ~getPointCloudRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR getPointCloudRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudRequestResponse(const getPointCloudRequestResponse& from);
  getPointCloudRequestResponse(getPointCloudRequestResponse&& from) noexcept
    : getPointCloudRequestResponse() {
    *this = ::std::move(from);
  }

  inline getPointCloudRequestResponse& operator=(const getPointCloudRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudRequestResponse& operator=(getPointCloudRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudRequestResponse* internal_default_instance() {
    return reinterpret_cast<const getPointCloudRequestResponse*>(
               &_getPointCloudRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(getPointCloudRequestResponse& a, getPointCloudRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getPointCloudRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getPointCloudRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getPointCloudRequestResponse& from) {
    getPointCloudRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getPointCloudRequestResponse";
  }
  protected:
  explicit getPointCloudRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pointCloud = 1;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud();
  PROTOBUF_NODISCARD std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getPointCloudRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// registerClientRequest

// int32 grpcServerCompressionFormat = 1;
inline void registerClientRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t registerClientRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t registerClientRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void registerClientRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void registerClientRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void registerClientRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& registerClientRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registerClientRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientRequest.uuid)
}
inline std::string* registerClientRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.registerClientRequest.uuid)
  return _s;
}
inline const std::string& registerClientRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void registerClientRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* registerClientRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* registerClientRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.registerClientRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void registerClientRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.registerClientRequest.uuid)
}

// -------------------------------------------------------------------

// registerClientResponse

// string uuid = 1;
inline void registerClientResponse::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& registerClientResponse::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientResponse.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registerClientResponse::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientResponse.uuid)
}
inline std::string* registerClientResponse::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.registerClientResponse.uuid)
  return _s;
}
inline const std::string& registerClientResponse::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void registerClientResponse::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* registerClientResponse::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* registerClientResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.registerClientResponse.uuid)
  return _impl_.uuid_.Release();
}
inline void registerClientResponse::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.registerClientResponse.uuid)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void registerClientResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t registerClientResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t registerClientResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void registerClientResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void registerClientResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// unregisterClientRequest

// int32 grpcServerCompressionFormat = 1;
inline void unregisterClientRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t unregisterClientRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t unregisterClientRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.unregisterClientRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void unregisterClientRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void unregisterClientRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.unregisterClientRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void unregisterClientRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& unregisterClientRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.unregisterClientRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void unregisterClientRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.unregisterClientRequest.uuid)
}
inline std::string* unregisterClientRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.unregisterClientRequest.uuid)
  return _s;
}
inline const std::string& unregisterClientRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void unregisterClientRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* unregisterClientRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* unregisterClientRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.unregisterClientRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void unregisterClientRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.unregisterClientRequest.uuid)
}

// -------------------------------------------------------------------

// unregisterClientResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void unregisterClientResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t unregisterClientResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t unregisterClientResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.unregisterClientResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void unregisterClientResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void unregisterClientResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.unregisterClientResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getAllClientsUUIDRequest

// int32 grpcServerCompressionFormat = 1;
inline void getAllClientsUUIDRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getAllClientsUUIDRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getAllClientsUUIDRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllClientsUUIDRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getAllClientsUUIDRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getAllClientsUUIDRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllClientsUUIDRequest.grpcServerCompressionFormat)
}

// bytes uuidList = 2;
inline void getAllClientsUUIDRequest::clear_uuidlist() {
  _impl_.uuidlist_.ClearToEmpty();
}
inline const std::string& getAllClientsUUIDRequest::uuidlist() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllClientsUUIDRequest.uuidList)
  return _internal_uuidlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllClientsUUIDRequest::set_uuidlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuidlist_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllClientsUUIDRequest.uuidList)
}
inline std::string* getAllClientsUUIDRequest::mutable_uuidlist() {
  std::string* _s = _internal_mutable_uuidlist();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getAllClientsUUIDRequest.uuidList)
  return _s;
}
inline const std::string& getAllClientsUUIDRequest::_internal_uuidlist() const {
  return _impl_.uuidlist_.Get();
}
inline void getAllClientsUUIDRequest::_internal_set_uuidlist(const std::string& value) {
  
  _impl_.uuidlist_.Set(value, GetArenaForAllocation());
}
inline std::string* getAllClientsUUIDRequest::_internal_mutable_uuidlist() {
  
  return _impl_.uuidlist_.Mutable(GetArenaForAllocation());
}
inline std::string* getAllClientsUUIDRequest::release_uuidlist() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getAllClientsUUIDRequest.uuidList)
  return _impl_.uuidlist_.Release();
}
inline void getAllClientsUUIDRequest::set_allocated_uuidlist(std::string* uuidlist) {
  if (uuidlist != nullptr) {
    
  } else {
    
  }
  _impl_.uuidlist_.SetAllocated(uuidlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuidlist_.IsDefault()) {
    _impl_.uuidlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getAllClientsUUIDRequest.uuidList)
}

// -------------------------------------------------------------------

// getAllClientsUUIDResponse

// bytes uuidList = 1;
inline void getAllClientsUUIDResponse::clear_uuidlist() {
  _impl_.uuidlist_.ClearToEmpty();
}
inline const std::string& getAllClientsUUIDResponse::uuidlist() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllClientsUUIDResponse.uuidList)
  return _internal_uuidlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllClientsUUIDResponse::set_uuidlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuidlist_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllClientsUUIDResponse.uuidList)
}
inline std::string* getAllClientsUUIDResponse::mutable_uuidlist() {
  std::string* _s = _internal_mutable_uuidlist();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getAllClientsUUIDResponse.uuidList)
  return _s;
}
inline const std::string& getAllClientsUUIDResponse::_internal_uuidlist() const {
  return _impl_.uuidlist_.Get();
}
inline void getAllClientsUUIDResponse::_internal_set_uuidlist(const std::string& value) {
  
  _impl_.uuidlist_.Set(value, GetArenaForAllocation());
}
inline std::string* getAllClientsUUIDResponse::_internal_mutable_uuidlist() {
  
  return _impl_.uuidlist_.Mutable(GetArenaForAllocation());
}
inline std::string* getAllClientsUUIDResponse::release_uuidlist() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getAllClientsUUIDResponse.uuidList)
  return _impl_.uuidlist_.Release();
}
inline void getAllClientsUUIDResponse::set_allocated_uuidlist(std::string* uuidlist) {
  if (uuidlist != nullptr) {
    
  } else {
    
  }
  _impl_.uuidlist_.SetAllocated(uuidlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuidlist_.IsDefault()) {
    _impl_.uuidlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getAllClientsUUIDResponse.uuidList)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getAllClientsUUIDResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getAllClientsUUIDResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getAllClientsUUIDResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllClientsUUIDResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getAllClientsUUIDResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getAllClientsUUIDResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllClientsUUIDResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// init_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void init_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t init_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t init_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void init_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void init_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc0Request.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void init_grpc0Request::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& init_grpc0Request::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc0Request.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc0Request::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc0Request.uuid)
}
inline std::string* init_grpc0Request::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.init_grpc0Request.uuid)
  return _s;
}
inline const std::string& init_grpc0Request::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void init_grpc0Request::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc0Request::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc0Request::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.init_grpc0Request.uuid)
  return _impl_.uuid_.Release();
}
inline void init_grpc0Request::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.init_grpc0Request.uuid)
}

// -------------------------------------------------------------------

// init_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void init_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t init_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t init_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void init_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void init_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// init_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void init_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t init_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t init_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void init_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void init_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc1Request.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void init_grpc1Request::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& init_grpc1Request::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc1Request.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc1Request::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc1Request.uuid)
}
inline std::string* init_grpc1Request::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.init_grpc1Request.uuid)
  return _s;
}
inline const std::string& init_grpc1Request::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void init_grpc1Request::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc1Request::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc1Request::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.init_grpc1Request.uuid)
  return _impl_.uuid_.Release();
}
inline void init_grpc1Request::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.init_grpc1Request.uuid)
}

// bytes pipelineMode = 3;
inline void init_grpc1Request::clear_pipelinemode() {
  _impl_.pipelinemode_.ClearToEmpty();
}
inline const std::string& init_grpc1Request::pipelinemode() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc1Request.pipelineMode)
  return _internal_pipelinemode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc1Request::set_pipelinemode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pipelinemode_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc1Request.pipelineMode)
}
inline std::string* init_grpc1Request::mutable_pipelinemode() {
  std::string* _s = _internal_mutable_pipelinemode();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.init_grpc1Request.pipelineMode)
  return _s;
}
inline const std::string& init_grpc1Request::_internal_pipelinemode() const {
  return _impl_.pipelinemode_.Get();
}
inline void init_grpc1Request::_internal_set_pipelinemode(const std::string& value) {
  
  _impl_.pipelinemode_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc1Request::_internal_mutable_pipelinemode() {
  
  return _impl_.pipelinemode_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc1Request::release_pipelinemode() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.init_grpc1Request.pipelineMode)
  return _impl_.pipelinemode_.Release();
}
inline void init_grpc1Request::set_allocated_pipelinemode(std::string* pipelinemode) {
  if (pipelinemode != nullptr) {
    
  } else {
    
  }
  _impl_.pipelinemode_.SetAllocated(pipelinemode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pipelinemode_.IsDefault()) {
    _impl_.pipelinemode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.init_grpc1Request.pipelineMode)
}

// -------------------------------------------------------------------

// init_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void init_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t init_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t init_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void init_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void init_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// startRequest

// int32 grpcServerCompressionFormat = 1;
inline void startRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t startRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t startRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.startRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void startRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void startRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.startRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void startRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& startRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.startRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void startRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.startRequest.uuid)
}
inline std::string* startRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.startRequest.uuid)
  return _s;
}
inline const std::string& startRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void startRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* startRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* startRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.startRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void startRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.startRequest.uuid)
}

// -------------------------------------------------------------------

// startResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void startResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t startResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t startResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.startResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void startResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void startResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.startResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stopRequest

// int32 grpcServerCompressionFormat = 1;
inline void stopRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t stopRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t stopRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.stopRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void stopRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void stopRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.stopRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void stopRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& stopRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.stopRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void stopRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.stopRequest.uuid)
}
inline std::string* stopRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.stopRequest.uuid)
  return _s;
}
inline const std::string& stopRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void stopRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* stopRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* stopRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.stopRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void stopRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.stopRequest.uuid)
}

// -------------------------------------------------------------------

// stopResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void stopResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t stopResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t stopResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.stopResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stopResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void stopResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.stopResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getProcessingModeRequest

// int32 grpcServerCompressionFormat = 1;
inline void getProcessingModeRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getProcessingModeRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getProcessingModeRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getProcessingModeRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getProcessingModeRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void getProcessingModeRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& getProcessingModeRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getProcessingModeRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeRequest.uuid)
}
inline std::string* getProcessingModeRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getProcessingModeRequest.uuid)
  return _s;
}
inline const std::string& getProcessingModeRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void getProcessingModeRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getProcessingModeRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getProcessingModeRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getProcessingModeRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void getProcessingModeRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getProcessingModeRequest.uuid)
}

// bytes pipelineMode = 3;
inline void getProcessingModeRequest::clear_pipelinemode() {
  _impl_.pipelinemode_.ClearToEmpty();
}
inline const std::string& getProcessingModeRequest::pipelinemode() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeRequest.pipelineMode)
  return _internal_pipelinemode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getProcessingModeRequest::set_pipelinemode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pipelinemode_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeRequest.pipelineMode)
}
inline std::string* getProcessingModeRequest::mutable_pipelinemode() {
  std::string* _s = _internal_mutable_pipelinemode();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getProcessingModeRequest.pipelineMode)
  return _s;
}
inline const std::string& getProcessingModeRequest::_internal_pipelinemode() const {
  return _impl_.pipelinemode_.Get();
}
inline void getProcessingModeRequest::_internal_set_pipelinemode(const std::string& value) {
  
  _impl_.pipelinemode_.Set(value, GetArenaForAllocation());
}
inline std::string* getProcessingModeRequest::_internal_mutable_pipelinemode() {
  
  return _impl_.pipelinemode_.Mutable(GetArenaForAllocation());
}
inline std::string* getProcessingModeRequest::release_pipelinemode() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getProcessingModeRequest.pipelineMode)
  return _impl_.pipelinemode_.Release();
}
inline void getProcessingModeRequest::set_allocated_pipelinemode(std::string* pipelinemode) {
  if (pipelinemode != nullptr) {
    
  } else {
    
  }
  _impl_.pipelinemode_.SetAllocated(pipelinemode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pipelinemode_.IsDefault()) {
    _impl_.pipelinemode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getProcessingModeRequest.pipelineMode)
}

// -------------------------------------------------------------------

// getProcessingModeResponse

// bytes pipelineMode = 1;
inline void getProcessingModeResponse::clear_pipelinemode() {
  _impl_.pipelinemode_.ClearToEmpty();
}
inline const std::string& getProcessingModeResponse::pipelinemode() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeResponse.pipelineMode)
  return _internal_pipelinemode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getProcessingModeResponse::set_pipelinemode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pipelinemode_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeResponse.pipelineMode)
}
inline std::string* getProcessingModeResponse::mutable_pipelinemode() {
  std::string* _s = _internal_mutable_pipelinemode();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getProcessingModeResponse.pipelineMode)
  return _s;
}
inline const std::string& getProcessingModeResponse::_internal_pipelinemode() const {
  return _impl_.pipelinemode_.Get();
}
inline void getProcessingModeResponse::_internal_set_pipelinemode(const std::string& value) {
  
  _impl_.pipelinemode_.Set(value, GetArenaForAllocation());
}
inline std::string* getProcessingModeResponse::_internal_mutable_pipelinemode() {
  
  return _impl_.pipelinemode_.Mutable(GetArenaForAllocation());
}
inline std::string* getProcessingModeResponse::release_pipelinemode() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getProcessingModeResponse.pipelineMode)
  return _impl_.pipelinemode_.Release();
}
inline void getProcessingModeResponse::set_allocated_pipelinemode(std::string* pipelinemode) {
  if (pipelinemode != nullptr) {
    
  } else {
    
  }
  _impl_.pipelinemode_.SetAllocated(pipelinemode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pipelinemode_.IsDefault()) {
    _impl_.pipelinemode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getProcessingModeResponse.pipelineMode)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getProcessingModeResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getProcessingModeResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getProcessingModeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getProcessingModeResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getProcessingModeResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void setCameraParameters_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setCameraParameters_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setCameraParameters_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setCameraParameters_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setCameraParameters_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc0Request.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void setCameraParameters_grpc0Request::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc0Request::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc0Request.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc0Request::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc0Request.uuid)
}
inline std::string* setCameraParameters_grpc0Request::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc0Request.uuid)
  return _s;
}
inline const std::string& setCameraParameters_grpc0Request::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void setCameraParameters_grpc0Request::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc0Request.uuid)
  return _impl_.uuid_.Release();
}
inline void setCameraParameters_grpc0Request::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc0Request.uuid)
}

// bytes cameraParams = 3;
inline void setCameraParameters_grpc0Request::clear_cameraparams() {
  _impl_.cameraparams_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc0Request::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc0Request.cameraParams)
  return _internal_cameraparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc0Request::set_cameraparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc0Request.cameraParams)
}
inline std::string* setCameraParameters_grpc0Request::mutable_cameraparams() {
  std::string* _s = _internal_mutable_cameraparams();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc0Request.cameraParams)
  return _s;
}
inline const std::string& setCameraParameters_grpc0Request::_internal_cameraparams() const {
  return _impl_.cameraparams_.Get();
}
inline void setCameraParameters_grpc0Request::_internal_set_cameraparams(const std::string& value) {
  
  _impl_.cameraparams_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::_internal_mutable_cameraparams() {
  
  return _impl_.cameraparams_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc0Request.cameraParams)
  return _impl_.cameraparams_.Release();
}
inline void setCameraParameters_grpc0Request::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams_.SetAllocated(cameraparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams_.IsDefault()) {
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc0Request.cameraParams)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void setCameraParameters_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setCameraParameters_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setCameraParameters_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setCameraParameters_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setCameraParameters_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void setCameraParameters_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setCameraParameters_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setCameraParameters_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setCameraParameters_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setCameraParameters_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Request.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void setCameraParameters_grpc1Request::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc1Request::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Request.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc1Request::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Request.uuid)
}
inline std::string* setCameraParameters_grpc1Request::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc1Request.uuid)
  return _s;
}
inline const std::string& setCameraParameters_grpc1Request::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void setCameraParameters_grpc1Request::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc1Request.uuid)
  return _impl_.uuid_.Release();
}
inline void setCameraParameters_grpc1Request::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc1Request.uuid)
}

// bytes cameraParams1 = 3;
inline void setCameraParameters_grpc1Request::clear_cameraparams1() {
  _impl_.cameraparams1_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc1Request::cameraparams1() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams1)
  return _internal_cameraparams1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc1Request::set_cameraparams1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams1)
}
inline std::string* setCameraParameters_grpc1Request::mutable_cameraparams1() {
  std::string* _s = _internal_mutable_cameraparams1();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams1)
  return _s;
}
inline const std::string& setCameraParameters_grpc1Request::_internal_cameraparams1() const {
  return _impl_.cameraparams1_.Get();
}
inline void setCameraParameters_grpc1Request::_internal_set_cameraparams1(const std::string& value) {
  
  _impl_.cameraparams1_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::_internal_mutable_cameraparams1() {
  
  return _impl_.cameraparams1_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::release_cameraparams1() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams1)
  return _impl_.cameraparams1_.Release();
}
inline void setCameraParameters_grpc1Request::set_allocated_cameraparams1(std::string* cameraparams1) {
  if (cameraparams1 != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams1_.SetAllocated(cameraparams1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams1_.IsDefault()) {
    _impl_.cameraparams1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams1)
}

// bytes cameraParams2 = 4;
inline void setCameraParameters_grpc1Request::clear_cameraparams2() {
  _impl_.cameraparams2_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc1Request::cameraparams2() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams2)
  return _internal_cameraparams2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc1Request::set_cameraparams2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams2)
}
inline std::string* setCameraParameters_grpc1Request::mutable_cameraparams2() {
  std::string* _s = _internal_mutable_cameraparams2();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams2)
  return _s;
}
inline const std::string& setCameraParameters_grpc1Request::_internal_cameraparams2() const {
  return _impl_.cameraparams2_.Get();
}
inline void setCameraParameters_grpc1Request::_internal_set_cameraparams2(const std::string& value) {
  
  _impl_.cameraparams2_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::_internal_mutable_cameraparams2() {
  
  return _impl_.cameraparams2_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::release_cameraparams2() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams2)
  return _impl_.cameraparams2_.Release();
}
inline void setCameraParameters_grpc1Request::set_allocated_cameraparams2(std::string* cameraparams2) {
  if (cameraparams2 != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams2_.SetAllocated(cameraparams2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams2_.IsDefault()) {
    _impl_.cameraparams2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams2)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void setCameraParameters_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setCameraParameters_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setCameraParameters_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setCameraParameters_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setCameraParameters_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setRectificationParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void setRectificationParametersRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setRectificationParametersRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setRectificationParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setRectificationParametersRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setRectificationParametersRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void setRectificationParametersRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersRequest.uuid)
}
inline std::string* setRectificationParametersRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setRectificationParametersRequest.uuid)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void setRectificationParametersRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setRectificationParametersRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void setRectificationParametersRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setRectificationParametersRequest.uuid)
}

// bytes rectCam1 = 3;
inline void setRectificationParametersRequest::clear_rectcam1() {
  _impl_.rectcam1_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::rectcam1() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersRequest.rectCam1)
  return _internal_rectcam1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_rectcam1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rectcam1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersRequest.rectCam1)
}
inline std::string* setRectificationParametersRequest::mutable_rectcam1() {
  std::string* _s = _internal_mutable_rectcam1();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setRectificationParametersRequest.rectCam1)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_rectcam1() const {
  return _impl_.rectcam1_.Get();
}
inline void setRectificationParametersRequest::_internal_set_rectcam1(const std::string& value) {
  
  _impl_.rectcam1_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_rectcam1() {
  
  return _impl_.rectcam1_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_rectcam1() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setRectificationParametersRequest.rectCam1)
  return _impl_.rectcam1_.Release();
}
inline void setRectificationParametersRequest::set_allocated_rectcam1(std::string* rectcam1) {
  if (rectcam1 != nullptr) {
    
  } else {
    
  }
  _impl_.rectcam1_.SetAllocated(rectcam1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rectcam1_.IsDefault()) {
    _impl_.rectcam1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setRectificationParametersRequest.rectCam1)
}

// bytes rectCam2 = 4;
inline void setRectificationParametersRequest::clear_rectcam2() {
  _impl_.rectcam2_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::rectcam2() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersRequest.rectCam2)
  return _internal_rectcam2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_rectcam2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rectcam2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersRequest.rectCam2)
}
inline std::string* setRectificationParametersRequest::mutable_rectcam2() {
  std::string* _s = _internal_mutable_rectcam2();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setRectificationParametersRequest.rectCam2)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_rectcam2() const {
  return _impl_.rectcam2_.Get();
}
inline void setRectificationParametersRequest::_internal_set_rectcam2(const std::string& value) {
  
  _impl_.rectcam2_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_rectcam2() {
  
  return _impl_.rectcam2_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_rectcam2() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setRectificationParametersRequest.rectCam2)
  return _impl_.rectcam2_.Release();
}
inline void setRectificationParametersRequest::set_allocated_rectcam2(std::string* rectcam2) {
  if (rectcam2 != nullptr) {
    
  } else {
    
  }
  _impl_.rectcam2_.SetAllocated(rectcam2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rectcam2_.IsDefault()) {
    _impl_.rectcam2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setRectificationParametersRequest.rectCam2)
}

// -------------------------------------------------------------------

// setRectificationParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setRectificationParametersResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setRectificationParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setRectificationParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setRectificationParametersResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setRectificationParametersResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getCameraParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void getCameraParametersRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getCameraParametersRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getCameraParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getCameraParametersRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getCameraParametersRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void getCameraParametersRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& getCameraParametersRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParametersRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersRequest.uuid)
}
inline std::string* getCameraParametersRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getCameraParametersRequest.uuid)
  return _s;
}
inline const std::string& getCameraParametersRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void getCameraParametersRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getCameraParametersRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void getCameraParametersRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getCameraParametersRequest.uuid)
}

// bytes cameraParams = 3;
inline void getCameraParametersRequest::clear_cameraparams() {
  _impl_.cameraparams_.ClearToEmpty();
}
inline const std::string& getCameraParametersRequest::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersRequest.cameraParams)
  return _internal_cameraparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParametersRequest::set_cameraparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersRequest.cameraParams)
}
inline std::string* getCameraParametersRequest::mutable_cameraparams() {
  std::string* _s = _internal_mutable_cameraparams();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getCameraParametersRequest.cameraParams)
  return _s;
}
inline const std::string& getCameraParametersRequest::_internal_cameraparams() const {
  return _impl_.cameraparams_.Get();
}
inline void getCameraParametersRequest::_internal_set_cameraparams(const std::string& value) {
  
  _impl_.cameraparams_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::_internal_mutable_cameraparams() {
  
  return _impl_.cameraparams_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getCameraParametersRequest.cameraParams)
  return _impl_.cameraparams_.Release();
}
inline void getCameraParametersRequest::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams_.SetAllocated(cameraparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams_.IsDefault()) {
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getCameraParametersRequest.cameraParams)
}

// -------------------------------------------------------------------

// getCameraParametersResponse

// bytes cameraParams = 1;
inline void getCameraParametersResponse::clear_cameraparams() {
  _impl_.cameraparams_.ClearToEmpty();
}
inline const std::string& getCameraParametersResponse::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersResponse.cameraParams)
  return _internal_cameraparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParametersResponse::set_cameraparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersResponse.cameraParams)
}
inline std::string* getCameraParametersResponse::mutable_cameraparams() {
  std::string* _s = _internal_mutable_cameraparams();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getCameraParametersResponse.cameraParams)
  return _s;
}
inline const std::string& getCameraParametersResponse::_internal_cameraparams() const {
  return _impl_.cameraparams_.Get();
}
inline void getCameraParametersResponse::_internal_set_cameraparams(const std::string& value) {
  
  _impl_.cameraparams_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParametersResponse::_internal_mutable_cameraparams() {
  
  return _impl_.cameraparams_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParametersResponse::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getCameraParametersResponse.cameraParams)
  return _impl_.cameraparams_.Release();
}
inline void getCameraParametersResponse::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams_.SetAllocated(cameraparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams_.IsDefault()) {
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getCameraParametersResponse.cameraParams)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getCameraParametersResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getCameraParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getCameraParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getCameraParametersResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getCameraParametersResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// relocalizeProcessRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void relocalizeProcessRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t relocalizeProcessRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t relocalizeProcessRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void relocalizeProcessRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void relocalizeProcessRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void relocalizeProcessRequestRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.uuid)
}
inline std::string* relocalizeProcessRequestRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestRequest.uuid)
  return _s;
}
inline const std::string& relocalizeProcessRequestRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void relocalizeProcessRequestRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void relocalizeProcessRequestRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestRequest.uuid)
}

// bytes images = 3;
inline void relocalizeProcessRequestRequest::clear_images() {
  _impl_.images_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestRequest::images() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.images)
  return _internal_images();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestRequest::set_images(ArgT0&& arg0, ArgT... args) {
 
 _impl_.images_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.images)
}
inline std::string* relocalizeProcessRequestRequest::mutable_images() {
  std::string* _s = _internal_mutable_images();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestRequest.images)
  return _s;
}
inline const std::string& relocalizeProcessRequestRequest::_internal_images() const {
  return _impl_.images_.Get();
}
inline void relocalizeProcessRequestRequest::_internal_set_images(const std::string& value) {
  
  _impl_.images_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::_internal_mutable_images() {
  
  return _impl_.images_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::release_images() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestRequest.images)
  return _impl_.images_.Release();
}
inline void relocalizeProcessRequestRequest::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  _impl_.images_.SetAllocated(images, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.images_.IsDefault()) {
    _impl_.images_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestRequest.images)
}

// bytes poses = 4;
inline void relocalizeProcessRequestRequest::clear_poses() {
  _impl_.poses_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestRequest::poses() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.poses)
  return _internal_poses();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestRequest::set_poses(ArgT0&& arg0, ArgT... args) {
 
 _impl_.poses_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.poses)
}
inline std::string* relocalizeProcessRequestRequest::mutable_poses() {
  std::string* _s = _internal_mutable_poses();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestRequest.poses)
  return _s;
}
inline const std::string& relocalizeProcessRequestRequest::_internal_poses() const {
  return _impl_.poses_.Get();
}
inline void relocalizeProcessRequestRequest::_internal_set_poses(const std::string& value) {
  
  _impl_.poses_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::_internal_mutable_poses() {
  
  return _impl_.poses_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::release_poses() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestRequest.poses)
  return _impl_.poses_.Release();
}
inline void relocalizeProcessRequestRequest::set_allocated_poses(std::string* poses) {
  if (poses != nullptr) {
    
  } else {
    
  }
  _impl_.poses_.SetAllocated(poses, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.poses_.IsDefault()) {
    _impl_.poses_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestRequest.poses)
}

// bool fixedPose = 5;
inline void relocalizeProcessRequestRequest::clear_fixedpose() {
  _impl_.fixedpose_ = false;
}
inline bool relocalizeProcessRequestRequest::_internal_fixedpose() const {
  return _impl_.fixedpose_;
}
inline bool relocalizeProcessRequestRequest::fixedpose() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.fixedPose)
  return _internal_fixedpose();
}
inline void relocalizeProcessRequestRequest::_internal_set_fixedpose(bool value) {
  
  _impl_.fixedpose_ = value;
}
inline void relocalizeProcessRequestRequest::set_fixedpose(bool value) {
  _internal_set_fixedpose(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.fixedPose)
}

// bytes worldTransform = 6;
inline void relocalizeProcessRequestRequest::clear_worldtransform() {
  _impl_.worldtransform_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestRequest::worldtransform() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.worldTransform)
  return _internal_worldtransform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestRequest::set_worldtransform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldtransform_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.worldTransform)
}
inline std::string* relocalizeProcessRequestRequest::mutable_worldtransform() {
  std::string* _s = _internal_mutable_worldtransform();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestRequest.worldTransform)
  return _s;
}
inline const std::string& relocalizeProcessRequestRequest::_internal_worldtransform() const {
  return _impl_.worldtransform_.Get();
}
inline void relocalizeProcessRequestRequest::_internal_set_worldtransform(const std::string& value) {
  
  _impl_.worldtransform_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::_internal_mutable_worldtransform() {
  
  return _impl_.worldtransform_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::release_worldtransform() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestRequest.worldTransform)
  return _impl_.worldtransform_.Release();
}
inline void relocalizeProcessRequestRequest::set_allocated_worldtransform(std::string* worldtransform) {
  if (worldtransform != nullptr) {
    
  } else {
    
  }
  _impl_.worldtransform_.SetAllocated(worldtransform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldtransform_.IsDefault()) {
    _impl_.worldtransform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestRequest.worldTransform)
}

// bytes timestamp = 7;
inline void relocalizeProcessRequestRequest::clear_timestamp() {
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestRequest::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timestamp_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.timestamp)
}
inline std::string* relocalizeProcessRequestRequest::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestRequest.timestamp)
  return _s;
}
inline const std::string& relocalizeProcessRequestRequest::_internal_timestamp() const {
  return _impl_.timestamp_.Get();
}
inline void relocalizeProcessRequestRequest::_internal_set_timestamp(const std::string& value) {
  
  _impl_.timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::_internal_mutable_timestamp() {
  
  return _impl_.timestamp_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestRequest.timestamp)
  return _impl_.timestamp_.Release();
}
inline void relocalizeProcessRequestRequest::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  _impl_.timestamp_.SetAllocated(timestamp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestRequest.timestamp)
}

// bytes transform3DStatus = 8;
inline void relocalizeProcessRequestRequest::clear_transform3dstatus() {
  _impl_.transform3dstatus_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestRequest::transform3dstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.transform3DStatus)
  return _internal_transform3dstatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestRequest::set_transform3dstatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3dstatus_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.transform3DStatus)
}
inline std::string* relocalizeProcessRequestRequest::mutable_transform3dstatus() {
  std::string* _s = _internal_mutable_transform3dstatus();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestRequest.transform3DStatus)
  return _s;
}
inline const std::string& relocalizeProcessRequestRequest::_internal_transform3dstatus() const {
  return _impl_.transform3dstatus_.Get();
}
inline void relocalizeProcessRequestRequest::_internal_set_transform3dstatus(const std::string& value) {
  
  _impl_.transform3dstatus_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::_internal_mutable_transform3dstatus() {
  
  return _impl_.transform3dstatus_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::release_transform3dstatus() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestRequest.transform3DStatus)
  return _impl_.transform3dstatus_.Release();
}
inline void relocalizeProcessRequestRequest::set_allocated_transform3dstatus(std::string* transform3dstatus) {
  if (transform3dstatus != nullptr) {
    
  } else {
    
  }
  _impl_.transform3dstatus_.SetAllocated(transform3dstatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3dstatus_.IsDefault()) {
    _impl_.transform3dstatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestRequest.transform3DStatus)
}

// bytes transform3D = 9;
inline void relocalizeProcessRequestRequest::clear_transform3d() {
  _impl_.transform3d_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestRequest::transform3d() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.transform3D)
  return _internal_transform3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestRequest::set_transform3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.transform3D)
}
inline std::string* relocalizeProcessRequestRequest::mutable_transform3d() {
  std::string* _s = _internal_mutable_transform3d();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestRequest.transform3D)
  return _s;
}
inline const std::string& relocalizeProcessRequestRequest::_internal_transform3d() const {
  return _impl_.transform3d_.Get();
}
inline void relocalizeProcessRequestRequest::_internal_set_transform3d(const std::string& value) {
  
  _impl_.transform3d_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::_internal_mutable_transform3d() {
  
  return _impl_.transform3d_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::release_transform3d() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestRequest.transform3D)
  return _impl_.transform3d_.Release();
}
inline void relocalizeProcessRequestRequest::set_allocated_transform3d(std::string* transform3d) {
  if (transform3d != nullptr) {
    
  } else {
    
  }
  _impl_.transform3d_.SetAllocated(transform3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3d_.IsDefault()) {
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestRequest.transform3D)
}

// bytes confidence = 10;
inline void relocalizeProcessRequestRequest::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestRequest::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestRequest::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.confidence)
}
inline std::string* relocalizeProcessRequestRequest::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestRequest.confidence)
  return _s;
}
inline const std::string& relocalizeProcessRequestRequest::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void relocalizeProcessRequestRequest::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestRequest.confidence)
  return _impl_.confidence_.Release();
}
inline void relocalizeProcessRequestRequest::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestRequest.confidence)
}

// bytes mappingStatus = 11;
inline void relocalizeProcessRequestRequest::clear_mappingstatus() {
  _impl_.mappingstatus_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestRequest::mappingstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestRequest.mappingStatus)
  return _internal_mappingstatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestRequest::set_mappingstatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mappingstatus_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestRequest.mappingStatus)
}
inline std::string* relocalizeProcessRequestRequest::mutable_mappingstatus() {
  std::string* _s = _internal_mutable_mappingstatus();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestRequest.mappingStatus)
  return _s;
}
inline const std::string& relocalizeProcessRequestRequest::_internal_mappingstatus() const {
  return _impl_.mappingstatus_.Get();
}
inline void relocalizeProcessRequestRequest::_internal_set_mappingstatus(const std::string& value) {
  
  _impl_.mappingstatus_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::_internal_mutable_mappingstatus() {
  
  return _impl_.mappingstatus_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestRequest::release_mappingstatus() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestRequest.mappingStatus)
  return _impl_.mappingstatus_.Release();
}
inline void relocalizeProcessRequestRequest::set_allocated_mappingstatus(std::string* mappingstatus) {
  if (mappingstatus != nullptr) {
    
  } else {
    
  }
  _impl_.mappingstatus_.SetAllocated(mappingstatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mappingstatus_.IsDefault()) {
    _impl_.mappingstatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestRequest.mappingStatus)
}

// -------------------------------------------------------------------

// relocalizeProcessRequestResponse

// bytes transform3DStatus = 1;
inline void relocalizeProcessRequestResponse::clear_transform3dstatus() {
  _impl_.transform3dstatus_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestResponse::transform3dstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestResponse.transform3DStatus)
  return _internal_transform3dstatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestResponse::set_transform3dstatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3dstatus_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestResponse.transform3DStatus)
}
inline std::string* relocalizeProcessRequestResponse::mutable_transform3dstatus() {
  std::string* _s = _internal_mutable_transform3dstatus();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestResponse.transform3DStatus)
  return _s;
}
inline const std::string& relocalizeProcessRequestResponse::_internal_transform3dstatus() const {
  return _impl_.transform3dstatus_.Get();
}
inline void relocalizeProcessRequestResponse::_internal_set_transform3dstatus(const std::string& value) {
  
  _impl_.transform3dstatus_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestResponse::_internal_mutable_transform3dstatus() {
  
  return _impl_.transform3dstatus_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestResponse::release_transform3dstatus() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestResponse.transform3DStatus)
  return _impl_.transform3dstatus_.Release();
}
inline void relocalizeProcessRequestResponse::set_allocated_transform3dstatus(std::string* transform3dstatus) {
  if (transform3dstatus != nullptr) {
    
  } else {
    
  }
  _impl_.transform3dstatus_.SetAllocated(transform3dstatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3dstatus_.IsDefault()) {
    _impl_.transform3dstatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestResponse.transform3DStatus)
}

// bytes transform3D = 2;
inline void relocalizeProcessRequestResponse::clear_transform3d() {
  _impl_.transform3d_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestResponse::transform3d() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestResponse.transform3D)
  return _internal_transform3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestResponse::set_transform3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestResponse.transform3D)
}
inline std::string* relocalizeProcessRequestResponse::mutable_transform3d() {
  std::string* _s = _internal_mutable_transform3d();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestResponse.transform3D)
  return _s;
}
inline const std::string& relocalizeProcessRequestResponse::_internal_transform3d() const {
  return _impl_.transform3d_.Get();
}
inline void relocalizeProcessRequestResponse::_internal_set_transform3d(const std::string& value) {
  
  _impl_.transform3d_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestResponse::_internal_mutable_transform3d() {
  
  return _impl_.transform3d_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestResponse::release_transform3d() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestResponse.transform3D)
  return _impl_.transform3d_.Release();
}
inline void relocalizeProcessRequestResponse::set_allocated_transform3d(std::string* transform3d) {
  if (transform3d != nullptr) {
    
  } else {
    
  }
  _impl_.transform3d_.SetAllocated(transform3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3d_.IsDefault()) {
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestResponse.transform3D)
}

// bytes confidence = 3;
inline void relocalizeProcessRequestResponse::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestResponse::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestResponse.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestResponse::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestResponse.confidence)
}
inline std::string* relocalizeProcessRequestResponse::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestResponse.confidence)
  return _s;
}
inline const std::string& relocalizeProcessRequestResponse::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void relocalizeProcessRequestResponse::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestResponse::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestResponse::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestResponse.confidence)
  return _impl_.confidence_.Release();
}
inline void relocalizeProcessRequestResponse::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestResponse.confidence)
}

// bytes mappingStatus = 4;
inline void relocalizeProcessRequestResponse::clear_mappingstatus() {
  _impl_.mappingstatus_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequestResponse::mappingstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestResponse.mappingStatus)
  return _internal_mappingstatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequestResponse::set_mappingstatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mappingstatus_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestResponse.mappingStatus)
}
inline std::string* relocalizeProcessRequestResponse::mutable_mappingstatus() {
  std::string* _s = _internal_mutable_mappingstatus();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.relocalizeProcessRequestResponse.mappingStatus)
  return _s;
}
inline const std::string& relocalizeProcessRequestResponse::_internal_mappingstatus() const {
  return _impl_.mappingstatus_.Get();
}
inline void relocalizeProcessRequestResponse::_internal_set_mappingstatus(const std::string& value) {
  
  _impl_.mappingstatus_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestResponse::_internal_mutable_mappingstatus() {
  
  return _impl_.mappingstatus_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequestResponse::release_mappingstatus() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.relocalizeProcessRequestResponse.mappingStatus)
  return _impl_.mappingstatus_.Release();
}
inline void relocalizeProcessRequestResponse::set_allocated_mappingstatus(std::string* mappingstatus) {
  if (mappingstatus != nullptr) {
    
  } else {
    
  }
  _impl_.mappingstatus_.SetAllocated(mappingstatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mappingstatus_.IsDefault()) {
    _impl_.mappingstatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.relocalizeProcessRequestResponse.mappingStatus)
}

// sint32 xpcfGrpcReturnValue = 5;
inline void relocalizeProcessRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t relocalizeProcessRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t relocalizeProcessRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.relocalizeProcessRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void relocalizeProcessRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void relocalizeProcessRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.relocalizeProcessRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// get3DTransformRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void get3DTransformRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t get3DTransformRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t get3DTransformRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.get3DTransformRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void get3DTransformRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void get3DTransformRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.get3DTransformRequestRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void get3DTransformRequestRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& get3DTransformRequestRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.get3DTransformRequestRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get3DTransformRequestRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.get3DTransformRequestRequest.uuid)
}
inline std::string* get3DTransformRequestRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.get3DTransformRequestRequest.uuid)
  return _s;
}
inline const std::string& get3DTransformRequestRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void get3DTransformRequestRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* get3DTransformRequestRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* get3DTransformRequestRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.get3DTransformRequestRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void get3DTransformRequestRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.get3DTransformRequestRequest.uuid)
}

// bytes transform3DStatus = 3;
inline void get3DTransformRequestRequest::clear_transform3dstatus() {
  _impl_.transform3dstatus_.ClearToEmpty();
}
inline const std::string& get3DTransformRequestRequest::transform3dstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.get3DTransformRequestRequest.transform3DStatus)
  return _internal_transform3dstatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get3DTransformRequestRequest::set_transform3dstatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3dstatus_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.get3DTransformRequestRequest.transform3DStatus)
}
inline std::string* get3DTransformRequestRequest::mutable_transform3dstatus() {
  std::string* _s = _internal_mutable_transform3dstatus();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.get3DTransformRequestRequest.transform3DStatus)
  return _s;
}
inline const std::string& get3DTransformRequestRequest::_internal_transform3dstatus() const {
  return _impl_.transform3dstatus_.Get();
}
inline void get3DTransformRequestRequest::_internal_set_transform3dstatus(const std::string& value) {
  
  _impl_.transform3dstatus_.Set(value, GetArenaForAllocation());
}
inline std::string* get3DTransformRequestRequest::_internal_mutable_transform3dstatus() {
  
  return _impl_.transform3dstatus_.Mutable(GetArenaForAllocation());
}
inline std::string* get3DTransformRequestRequest::release_transform3dstatus() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.get3DTransformRequestRequest.transform3DStatus)
  return _impl_.transform3dstatus_.Release();
}
inline void get3DTransformRequestRequest::set_allocated_transform3dstatus(std::string* transform3dstatus) {
  if (transform3dstatus != nullptr) {
    
  } else {
    
  }
  _impl_.transform3dstatus_.SetAllocated(transform3dstatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3dstatus_.IsDefault()) {
    _impl_.transform3dstatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.get3DTransformRequestRequest.transform3DStatus)
}

// bytes transform3D = 4;
inline void get3DTransformRequestRequest::clear_transform3d() {
  _impl_.transform3d_.ClearToEmpty();
}
inline const std::string& get3DTransformRequestRequest::transform3d() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.get3DTransformRequestRequest.transform3D)
  return _internal_transform3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get3DTransformRequestRequest::set_transform3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.get3DTransformRequestRequest.transform3D)
}
inline std::string* get3DTransformRequestRequest::mutable_transform3d() {
  std::string* _s = _internal_mutable_transform3d();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.get3DTransformRequestRequest.transform3D)
  return _s;
}
inline const std::string& get3DTransformRequestRequest::_internal_transform3d() const {
  return _impl_.transform3d_.Get();
}
inline void get3DTransformRequestRequest::_internal_set_transform3d(const std::string& value) {
  
  _impl_.transform3d_.Set(value, GetArenaForAllocation());
}
inline std::string* get3DTransformRequestRequest::_internal_mutable_transform3d() {
  
  return _impl_.transform3d_.Mutable(GetArenaForAllocation());
}
inline std::string* get3DTransformRequestRequest::release_transform3d() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.get3DTransformRequestRequest.transform3D)
  return _impl_.transform3d_.Release();
}
inline void get3DTransformRequestRequest::set_allocated_transform3d(std::string* transform3d) {
  if (transform3d != nullptr) {
    
  } else {
    
  }
  _impl_.transform3d_.SetAllocated(transform3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3d_.IsDefault()) {
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.get3DTransformRequestRequest.transform3D)
}

// bytes confidence = 5;
inline void get3DTransformRequestRequest::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& get3DTransformRequestRequest::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.get3DTransformRequestRequest.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get3DTransformRequestRequest::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.get3DTransformRequestRequest.confidence)
}
inline std::string* get3DTransformRequestRequest::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.get3DTransformRequestRequest.confidence)
  return _s;
}
inline const std::string& get3DTransformRequestRequest::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void get3DTransformRequestRequest::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* get3DTransformRequestRequest::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* get3DTransformRequestRequest::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.get3DTransformRequestRequest.confidence)
  return _impl_.confidence_.Release();
}
inline void get3DTransformRequestRequest::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.get3DTransformRequestRequest.confidence)
}

// -------------------------------------------------------------------

// get3DTransformRequestResponse

// bytes transform3DStatus = 1;
inline void get3DTransformRequestResponse::clear_transform3dstatus() {
  _impl_.transform3dstatus_.ClearToEmpty();
}
inline const std::string& get3DTransformRequestResponse::transform3dstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.get3DTransformRequestResponse.transform3DStatus)
  return _internal_transform3dstatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get3DTransformRequestResponse::set_transform3dstatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3dstatus_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.get3DTransformRequestResponse.transform3DStatus)
}
inline std::string* get3DTransformRequestResponse::mutable_transform3dstatus() {
  std::string* _s = _internal_mutable_transform3dstatus();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.get3DTransformRequestResponse.transform3DStatus)
  return _s;
}
inline const std::string& get3DTransformRequestResponse::_internal_transform3dstatus() const {
  return _impl_.transform3dstatus_.Get();
}
inline void get3DTransformRequestResponse::_internal_set_transform3dstatus(const std::string& value) {
  
  _impl_.transform3dstatus_.Set(value, GetArenaForAllocation());
}
inline std::string* get3DTransformRequestResponse::_internal_mutable_transform3dstatus() {
  
  return _impl_.transform3dstatus_.Mutable(GetArenaForAllocation());
}
inline std::string* get3DTransformRequestResponse::release_transform3dstatus() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.get3DTransformRequestResponse.transform3DStatus)
  return _impl_.transform3dstatus_.Release();
}
inline void get3DTransformRequestResponse::set_allocated_transform3dstatus(std::string* transform3dstatus) {
  if (transform3dstatus != nullptr) {
    
  } else {
    
  }
  _impl_.transform3dstatus_.SetAllocated(transform3dstatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3dstatus_.IsDefault()) {
    _impl_.transform3dstatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.get3DTransformRequestResponse.transform3DStatus)
}

// bytes transform3D = 2;
inline void get3DTransformRequestResponse::clear_transform3d() {
  _impl_.transform3d_.ClearToEmpty();
}
inline const std::string& get3DTransformRequestResponse::transform3d() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.get3DTransformRequestResponse.transform3D)
  return _internal_transform3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get3DTransformRequestResponse::set_transform3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.get3DTransformRequestResponse.transform3D)
}
inline std::string* get3DTransformRequestResponse::mutable_transform3d() {
  std::string* _s = _internal_mutable_transform3d();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.get3DTransformRequestResponse.transform3D)
  return _s;
}
inline const std::string& get3DTransformRequestResponse::_internal_transform3d() const {
  return _impl_.transform3d_.Get();
}
inline void get3DTransformRequestResponse::_internal_set_transform3d(const std::string& value) {
  
  _impl_.transform3d_.Set(value, GetArenaForAllocation());
}
inline std::string* get3DTransformRequestResponse::_internal_mutable_transform3d() {
  
  return _impl_.transform3d_.Mutable(GetArenaForAllocation());
}
inline std::string* get3DTransformRequestResponse::release_transform3d() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.get3DTransformRequestResponse.transform3D)
  return _impl_.transform3d_.Release();
}
inline void get3DTransformRequestResponse::set_allocated_transform3d(std::string* transform3d) {
  if (transform3d != nullptr) {
    
  } else {
    
  }
  _impl_.transform3d_.SetAllocated(transform3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3d_.IsDefault()) {
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.get3DTransformRequestResponse.transform3D)
}

// bytes confidence = 3;
inline void get3DTransformRequestResponse::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& get3DTransformRequestResponse::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.get3DTransformRequestResponse.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get3DTransformRequestResponse::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.get3DTransformRequestResponse.confidence)
}
inline std::string* get3DTransformRequestResponse::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.get3DTransformRequestResponse.confidence)
  return _s;
}
inline const std::string& get3DTransformRequestResponse::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void get3DTransformRequestResponse::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* get3DTransformRequestResponse::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* get3DTransformRequestResponse::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.get3DTransformRequestResponse.confidence)
  return _impl_.confidence_.Release();
}
inline void get3DTransformRequestResponse::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.get3DTransformRequestResponse.confidence)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void get3DTransformRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t get3DTransformRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t get3DTransformRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.get3DTransformRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void get3DTransformRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void get3DTransformRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.get3DTransformRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMappingDataRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMappingDataRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getMappingDataRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getMappingDataRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMappingDataRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getMappingDataRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void getMappingDataRequestRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestRequest.uuid)
}
inline std::string* getMappingDataRequestRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestRequest.uuid)
  return _s;
}
inline const std::string& getMappingDataRequestRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void getMappingDataRequestRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void getMappingDataRequestRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestRequest.uuid)
}

// bytes outputPointClouds = 3;
inline void getMappingDataRequestRequest::clear_outputpointclouds() {
  _impl_.outputpointclouds_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestRequest::outputpointclouds() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestRequest.outputPointClouds)
  return _internal_outputpointclouds();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestRequest::set_outputpointclouds(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputpointclouds_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestRequest.outputPointClouds)
}
inline std::string* getMappingDataRequestRequest::mutable_outputpointclouds() {
  std::string* _s = _internal_mutable_outputpointclouds();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestRequest.outputPointClouds)
  return _s;
}
inline const std::string& getMappingDataRequestRequest::_internal_outputpointclouds() const {
  return _impl_.outputpointclouds_.Get();
}
inline void getMappingDataRequestRequest::_internal_set_outputpointclouds(const std::string& value) {
  
  _impl_.outputpointclouds_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::_internal_mutable_outputpointclouds() {
  
  return _impl_.outputpointclouds_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::release_outputpointclouds() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestRequest.outputPointClouds)
  return _impl_.outputpointclouds_.Release();
}
inline void getMappingDataRequestRequest::set_allocated_outputpointclouds(std::string* outputpointclouds) {
  if (outputpointclouds != nullptr) {
    
  } else {
    
  }
  _impl_.outputpointclouds_.SetAllocated(outputpointclouds, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputpointclouds_.IsDefault()) {
    _impl_.outputpointclouds_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestRequest.outputPointClouds)
}

// bytes keyframePoses = 4;
inline void getMappingDataRequestRequest::clear_keyframeposes() {
  _impl_.keyframeposes_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestRequest::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestRequest.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestRequest::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestRequest.keyframePoses)
}
inline std::string* getMappingDataRequestRequest::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestRequest.keyframePoses)
  return _s;
}
inline const std::string& getMappingDataRequestRequest::_internal_keyframeposes() const {
  return _impl_.keyframeposes_.Get();
}
inline void getMappingDataRequestRequest::_internal_set_keyframeposes(const std::string& value) {
  
  _impl_.keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::_internal_mutable_keyframeposes() {
  
  return _impl_.keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestRequest.keyframePoses)
  return _impl_.keyframeposes_.Release();
}
inline void getMappingDataRequestRequest::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  _impl_.keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframeposes_.IsDefault()) {
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestRequest.keyframePoses)
}

// -------------------------------------------------------------------

// getMappingDataRequestResponse

// bytes outputPointClouds = 1;
inline void getMappingDataRequestResponse::clear_outputpointclouds() {
  _impl_.outputpointclouds_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestResponse::outputpointclouds() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestResponse.outputPointClouds)
  return _internal_outputpointclouds();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestResponse::set_outputpointclouds(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputpointclouds_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestResponse.outputPointClouds)
}
inline std::string* getMappingDataRequestResponse::mutable_outputpointclouds() {
  std::string* _s = _internal_mutable_outputpointclouds();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestResponse.outputPointClouds)
  return _s;
}
inline const std::string& getMappingDataRequestResponse::_internal_outputpointclouds() const {
  return _impl_.outputpointclouds_.Get();
}
inline void getMappingDataRequestResponse::_internal_set_outputpointclouds(const std::string& value) {
  
  _impl_.outputpointclouds_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestResponse::_internal_mutable_outputpointclouds() {
  
  return _impl_.outputpointclouds_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestResponse::release_outputpointclouds() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestResponse.outputPointClouds)
  return _impl_.outputpointclouds_.Release();
}
inline void getMappingDataRequestResponse::set_allocated_outputpointclouds(std::string* outputpointclouds) {
  if (outputpointclouds != nullptr) {
    
  } else {
    
  }
  _impl_.outputpointclouds_.SetAllocated(outputpointclouds, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputpointclouds_.IsDefault()) {
    _impl_.outputpointclouds_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestResponse.outputPointClouds)
}

// bytes keyframePoses = 2;
inline void getMappingDataRequestResponse::clear_keyframeposes() {
  _impl_.keyframeposes_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestResponse::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestResponse.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestResponse::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestResponse.keyframePoses)
}
inline std::string* getMappingDataRequestResponse::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestResponse.keyframePoses)
  return _s;
}
inline const std::string& getMappingDataRequestResponse::_internal_keyframeposes() const {
  return _impl_.keyframeposes_.Get();
}
inline void getMappingDataRequestResponse::_internal_set_keyframeposes(const std::string& value) {
  
  _impl_.keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestResponse::_internal_mutable_keyframeposes() {
  
  return _impl_.keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestResponse::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestResponse.keyframePoses)
  return _impl_.keyframeposes_.Release();
}
inline void getMappingDataRequestResponse::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  _impl_.keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframeposes_.IsDefault()) {
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestResponse.keyframePoses)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void getMappingDataRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMappingDataRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getMappingDataRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMappingDataRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getMappingDataRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getLastPoseRequest

// int32 grpcServerCompressionFormat = 1;
inline void getLastPoseRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getLastPoseRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getLastPoseRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getLastPoseRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getLastPoseRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getLastPoseRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getLastPoseRequest.grpcServerCompressionFormat)
}

// string uuid = 2;
inline void getLastPoseRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& getLastPoseRequest::uuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getLastPoseRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getLastPoseRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getLastPoseRequest.uuid)
}
inline std::string* getLastPoseRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getLastPoseRequest.uuid)
  return _s;
}
inline const std::string& getLastPoseRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void getLastPoseRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getLastPoseRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getLastPoseRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getLastPoseRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void getLastPoseRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getLastPoseRequest.uuid)
}

// bytes poseType = 3;
inline void getLastPoseRequest::clear_posetype() {
  _impl_.posetype_.ClearToEmpty();
}
inline const std::string& getLastPoseRequest::posetype() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getLastPoseRequest.poseType)
  return _internal_posetype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getLastPoseRequest::set_posetype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.posetype_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getLastPoseRequest.poseType)
}
inline std::string* getLastPoseRequest::mutable_posetype() {
  std::string* _s = _internal_mutable_posetype();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getLastPoseRequest.poseType)
  return _s;
}
inline const std::string& getLastPoseRequest::_internal_posetype() const {
  return _impl_.posetype_.Get();
}
inline void getLastPoseRequest::_internal_set_posetype(const std::string& value) {
  
  _impl_.posetype_.Set(value, GetArenaForAllocation());
}
inline std::string* getLastPoseRequest::_internal_mutable_posetype() {
  
  return _impl_.posetype_.Mutable(GetArenaForAllocation());
}
inline std::string* getLastPoseRequest::release_posetype() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getLastPoseRequest.poseType)
  return _impl_.posetype_.Release();
}
inline void getLastPoseRequest::set_allocated_posetype(std::string* posetype) {
  if (posetype != nullptr) {
    
  } else {
    
  }
  _impl_.posetype_.SetAllocated(posetype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.posetype_.IsDefault()) {
    _impl_.posetype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getLastPoseRequest.poseType)
}

// bytes pose = 4;
inline void getLastPoseRequest::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& getLastPoseRequest::pose() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getLastPoseRequest.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getLastPoseRequest::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getLastPoseRequest.pose)
}
inline std::string* getLastPoseRequest::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getLastPoseRequest.pose)
  return _s;
}
inline const std::string& getLastPoseRequest::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void getLastPoseRequest::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* getLastPoseRequest::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* getLastPoseRequest::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getLastPoseRequest.pose)
  return _impl_.pose_.Release();
}
inline void getLastPoseRequest::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getLastPoseRequest.pose)
}

// -------------------------------------------------------------------

// getLastPoseResponse

// bytes pose = 1;
inline void getLastPoseResponse::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& getLastPoseResponse::pose() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getLastPoseResponse.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getLastPoseResponse::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getLastPoseResponse.pose)
}
inline std::string* getLastPoseResponse::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getLastPoseResponse.pose)
  return _s;
}
inline const std::string& getLastPoseResponse::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void getLastPoseResponse::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* getLastPoseResponse::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* getLastPoseResponse::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getLastPoseResponse.pose)
  return _impl_.pose_.Release();
}
inline void getLastPoseResponse::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getLastPoseResponse.pose)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getLastPoseResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getLastPoseResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getLastPoseResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getLastPoseResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getLastPoseResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getLastPoseResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getLastPoseResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMapRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMapRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getMapRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getMapRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMapRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getMapRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestRequest.grpcServerCompressionFormat)
}

// bytes map = 2;
inline void getMapRequestRequest::clear_map() {
  _impl_.map_.ClearToEmpty();
}
inline const std::string& getMapRequestRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestRequest.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestRequest::set_map(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestRequest.map)
}
inline std::string* getMapRequestRequest::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapRequestRequest.map)
  return _s;
}
inline const std::string& getMapRequestRequest::_internal_map() const {
  return _impl_.map_.Get();
}
inline void getMapRequestRequest::_internal_set_map(const std::string& value) {
  
  _impl_.map_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::_internal_mutable_map() {
  
  return _impl_.map_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapRequestRequest.map)
  return _impl_.map_.Release();
}
inline void getMapRequestRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  _impl_.map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_.IsDefault()) {
    _impl_.map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapRequestRequest.map)
}

// -------------------------------------------------------------------

// getMapRequestResponse

// bytes map = 1;
inline void getMapRequestResponse::clear_map() {
  _impl_.map_.ClearToEmpty();
}
inline const std::string& getMapRequestResponse::map() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestResponse.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestResponse::set_map(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestResponse.map)
}
inline std::string* getMapRequestResponse::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapRequestResponse.map)
  return _s;
}
inline const std::string& getMapRequestResponse::_internal_map() const {
  return _impl_.map_.Get();
}
inline void getMapRequestResponse::_internal_set_map(const std::string& value) {
  
  _impl_.map_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestResponse::_internal_mutable_map() {
  
  return _impl_.map_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestResponse::release_map() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapRequestResponse.map)
  return _impl_.map_.Release();
}
inline void getMapRequestResponse::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  _impl_.map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_.IsDefault()) {
    _impl_.map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapRequestResponse.map)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getMapRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMapRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getMapRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMapRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getMapRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setMapRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void setMapRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setMapRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setMapRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setMapRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setMapRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setMapRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setMapRequestRequest.grpcServerCompressionFormat)
}

// bytes map = 2;
inline void setMapRequestRequest::clear_map() {
  _impl_.map_.ClearToEmpty();
}
inline const std::string& setMapRequestRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setMapRequestRequest.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setMapRequestRequest::set_map(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setMapRequestRequest.map)
}
inline std::string* setMapRequestRequest::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setMapRequestRequest.map)
  return _s;
}
inline const std::string& setMapRequestRequest::_internal_map() const {
  return _impl_.map_.Get();
}
inline void setMapRequestRequest::_internal_set_map(const std::string& value) {
  
  _impl_.map_.Set(value, GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::_internal_mutable_map() {
  
  return _impl_.map_.Mutable(GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setMapRequestRequest.map)
  return _impl_.map_.Release();
}
inline void setMapRequestRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  _impl_.map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_.IsDefault()) {
    _impl_.map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setMapRequestRequest.map)
}

// -------------------------------------------------------------------

// setMapRequestResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setMapRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setMapRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setMapRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setMapRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setMapRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setMapRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setMapRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// resetMapRequest

// int32 grpcServerCompressionFormat = 1;
inline void resetMapRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t resetMapRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t resetMapRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.resetMapRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void resetMapRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void resetMapRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.resetMapRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// resetMapResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void resetMapResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t resetMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t resetMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.resetMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void resetMapResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void resetMapResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.resetMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getPointCloudRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void getPointCloudRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getPointCloudRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getPointCloudRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getPointCloudRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getPointCloudRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getPointCloudRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getPointCloudRequestRequest.grpcServerCompressionFormat)
}

// bytes pointCloud = 2;
inline void getPointCloudRequestRequest::clear_pointcloud() {
  _impl_.pointcloud_.ClearToEmpty();
}
inline const std::string& getPointCloudRequestRequest::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getPointCloudRequestRequest.pointCloud)
  return _internal_pointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequestRequest::set_pointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getPointCloudRequestRequest.pointCloud)
}
inline std::string* getPointCloudRequestRequest::mutable_pointcloud() {
  std::string* _s = _internal_mutable_pointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getPointCloudRequestRequest.pointCloud)
  return _s;
}
inline const std::string& getPointCloudRequestRequest::_internal_pointcloud() const {
  return _impl_.pointcloud_.Get();
}
inline void getPointCloudRequestRequest::_internal_set_pointcloud(const std::string& value) {
  
  _impl_.pointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::_internal_mutable_pointcloud() {
  
  return _impl_.pointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getPointCloudRequestRequest.pointCloud)
  return _impl_.pointcloud_.Release();
}
inline void getPointCloudRequestRequest::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.pointcloud_.SetAllocated(pointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pointcloud_.IsDefault()) {
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getPointCloudRequestRequest.pointCloud)
}

// -------------------------------------------------------------------

// getPointCloudRequestResponse

// bytes pointCloud = 1;
inline void getPointCloudRequestResponse::clear_pointcloud() {
  _impl_.pointcloud_.ClearToEmpty();
}
inline const std::string& getPointCloudRequestResponse::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getPointCloudRequestResponse.pointCloud)
  return _internal_pointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequestResponse::set_pointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getPointCloudRequestResponse.pointCloud)
}
inline std::string* getPointCloudRequestResponse::mutable_pointcloud() {
  std::string* _s = _internal_mutable_pointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getPointCloudRequestResponse.pointCloud)
  return _s;
}
inline const std::string& getPointCloudRequestResponse::_internal_pointcloud() const {
  return _impl_.pointcloud_.Get();
}
inline void getPointCloudRequestResponse::_internal_set_pointcloud(const std::string& value) {
  
  _impl_.pointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequestResponse::_internal_mutable_pointcloud() {
  
  return _impl_.pointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudRequestResponse::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getPointCloudRequestResponse.pointCloud)
  return _impl_.pointcloud_.Release();
}
inline void getPointCloudRequestResponse::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.pointcloud_.SetAllocated(pointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pointcloud_.IsDefault()) {
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getPointCloudRequestResponse.pointCloud)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getPointCloudRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getPointCloudRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getPointCloudRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getPointCloudRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getPointCloudRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getPointCloudRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getPointCloudRequestResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIFrontEnd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIFrontEndService_2eproto
