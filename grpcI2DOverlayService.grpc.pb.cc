// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcI2DOverlayService.proto

#include "grpcI2DOverlayService.pb.h"
#include "grpcI2DOverlayService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcI2DOverlay {

static const char* grpcI2DOverlayService_method_names[] = {
  "/grpcI2DOverlay.grpcI2DOverlayService/drawCircle",
  "/grpcI2DOverlay.grpcI2DOverlayService/drawCircles_grpc0",
  "/grpcI2DOverlay.grpcI2DOverlayService/drawCircles_grpc1",
  "/grpcI2DOverlay.grpcI2DOverlayService/drawContour",
  "/grpcI2DOverlay.grpcI2DOverlayService/drawContours",
  "/grpcI2DOverlay.grpcI2DOverlayService/drawSBPattern",
};

std::unique_ptr< grpcI2DOverlayService::Stub> grpcI2DOverlayService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcI2DOverlayService::Stub> stub(new grpcI2DOverlayService::Stub(channel));
  return stub;
}

grpcI2DOverlayService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_drawCircle_(grpcI2DOverlayService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_drawCircles_grpc0_(grpcI2DOverlayService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_drawCircles_grpc1_(grpcI2DOverlayService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_drawContour_(grpcI2DOverlayService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_drawContours_(grpcI2DOverlayService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_drawSBPattern_(grpcI2DOverlayService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcI2DOverlayService::Stub::drawCircle(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircleRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcI2DOverlay::drawCircleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_drawCircle_, context, request, response);
}

void grpcI2DOverlayService::Stub::experimental_async::drawCircle(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircleRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcI2DOverlay::drawCircleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawCircle_, context, request, response, std::move(f));
}

void grpcI2DOverlayService::Stub::experimental_async::drawCircle(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircleRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawCircle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::PrepareAsyncdrawCircleRaw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcI2DOverlay::drawCircleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_drawCircle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::AsyncdrawCircleRaw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdrawCircleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcI2DOverlayService::Stub::drawCircles_grpc0(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircles_grpc0Request& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcI2DOverlay::drawCircles_grpc0Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_drawCircles_grpc0_, context, request, response);
}

void grpcI2DOverlayService::Stub::experimental_async::drawCircles_grpc0(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircles_grpc0Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcI2DOverlay::drawCircles_grpc0Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawCircles_grpc0_, context, request, response, std::move(f));
}

void grpcI2DOverlayService::Stub::experimental_async::drawCircles_grpc0(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircles_grpc0Request* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawCircles_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::PrepareAsyncdrawCircles_grpc0Raw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircles_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcI2DOverlay::drawCircles_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_drawCircles_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::AsyncdrawCircles_grpc0Raw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircles_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdrawCircles_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcI2DOverlayService::Stub::drawCircles_grpc1(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircles_grpc1Request& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcI2DOverlay::drawCircles_grpc1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_drawCircles_grpc1_, context, request, response);
}

void grpcI2DOverlayService::Stub::experimental_async::drawCircles_grpc1(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircles_grpc1Request* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcI2DOverlay::drawCircles_grpc1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawCircles_grpc1_, context, request, response, std::move(f));
}

void grpcI2DOverlayService::Stub::experimental_async::drawCircles_grpc1(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircles_grpc1Request* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawCircles_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::PrepareAsyncdrawCircles_grpc1Raw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircles_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcI2DOverlay::drawCircles_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_drawCircles_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::AsyncdrawCircles_grpc1Raw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawCircles_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdrawCircles_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcI2DOverlayService::Stub::drawContour(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawContourRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcI2DOverlay::drawContourRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_drawContour_, context, request, response);
}

void grpcI2DOverlayService::Stub::experimental_async::drawContour(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawContourRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcI2DOverlay::drawContourRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawContour_, context, request, response, std::move(f));
}

void grpcI2DOverlayService::Stub::experimental_async::drawContour(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawContourRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawContour_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::PrepareAsyncdrawContourRaw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawContourRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcI2DOverlay::drawContourRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_drawContour_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::AsyncdrawContourRaw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawContourRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdrawContourRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcI2DOverlayService::Stub::drawContours(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawContoursRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcI2DOverlay::drawContoursRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_drawContours_, context, request, response);
}

void grpcI2DOverlayService::Stub::experimental_async::drawContours(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawContoursRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcI2DOverlay::drawContoursRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawContours_, context, request, response, std::move(f));
}

void grpcI2DOverlayService::Stub::experimental_async::drawContours(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawContoursRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawContours_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::PrepareAsyncdrawContoursRaw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawContoursRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcI2DOverlay::drawContoursRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_drawContours_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::AsyncdrawContoursRaw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawContoursRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdrawContoursRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcI2DOverlayService::Stub::drawSBPattern(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawSBPatternRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcI2DOverlay::drawSBPatternRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_drawSBPattern_, context, request, response);
}

void grpcI2DOverlayService::Stub::experimental_async::drawSBPattern(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawSBPatternRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcI2DOverlay::drawSBPatternRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawSBPattern_, context, request, response, std::move(f));
}

void grpcI2DOverlayService::Stub::experimental_async::drawSBPattern(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawSBPatternRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_drawSBPattern_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::PrepareAsyncdrawSBPatternRaw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawSBPatternRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcI2DOverlay::drawSBPatternRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_drawSBPattern_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcI2DOverlayService::Stub::AsyncdrawSBPatternRaw(::grpc::ClientContext* context, const ::grpcI2DOverlay::drawSBPatternRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdrawSBPatternRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcI2DOverlayService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcI2DOverlayService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcI2DOverlayService::Service, ::grpcI2DOverlay::drawCircleRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcI2DOverlayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcI2DOverlay::drawCircleRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->drawCircle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcI2DOverlayService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcI2DOverlayService::Service, ::grpcI2DOverlay::drawCircles_grpc0Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcI2DOverlayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcI2DOverlay::drawCircles_grpc0Request* req,
             ::google::protobuf::Empty* resp) {
               return service->drawCircles_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcI2DOverlayService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcI2DOverlayService::Service, ::grpcI2DOverlay::drawCircles_grpc1Request, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcI2DOverlayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcI2DOverlay::drawCircles_grpc1Request* req,
             ::google::protobuf::Empty* resp) {
               return service->drawCircles_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcI2DOverlayService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcI2DOverlayService::Service, ::grpcI2DOverlay::drawContourRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcI2DOverlayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcI2DOverlay::drawContourRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->drawContour(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcI2DOverlayService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcI2DOverlayService::Service, ::grpcI2DOverlay::drawContoursRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcI2DOverlayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcI2DOverlay::drawContoursRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->drawContours(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcI2DOverlayService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcI2DOverlayService::Service, ::grpcI2DOverlay::drawSBPatternRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcI2DOverlayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcI2DOverlay::drawSBPatternRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->drawSBPattern(ctx, req, resp);
             }, this)));
}

grpcI2DOverlayService::Service::~Service() {
}

::grpc::Status grpcI2DOverlayService::Service::drawCircle(::grpc::ServerContext* context, const ::grpcI2DOverlay::drawCircleRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcI2DOverlayService::Service::drawCircles_grpc0(::grpc::ServerContext* context, const ::grpcI2DOverlay::drawCircles_grpc0Request* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcI2DOverlayService::Service::drawCircles_grpc1(::grpc::ServerContext* context, const ::grpcI2DOverlay::drawCircles_grpc1Request* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcI2DOverlayService::Service::drawContour(::grpc::ServerContext* context, const ::grpcI2DOverlay::drawContourRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcI2DOverlayService::Service::drawContours(::grpc::ServerContext* context, const ::grpcI2DOverlay::drawContoursRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcI2DOverlayService::Service::drawSBPattern(::grpc::ServerContext* context, const ::grpcI2DOverlay::drawSBPatternRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcI2DOverlay

