// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIUndistortPointsService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIUndistortPointsService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIUndistortPointsService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIUndistortPointsService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIUndistortPointsService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIUndistortPointsService_2eproto;
namespace grpcIUndistortPoints {
class undistort_grpc0Request;
struct undistort_grpc0RequestDefaultTypeInternal;
extern undistort_grpc0RequestDefaultTypeInternal _undistort_grpc0Request_default_instance_;
class undistort_grpc0Response;
struct undistort_grpc0ResponseDefaultTypeInternal;
extern undistort_grpc0ResponseDefaultTypeInternal _undistort_grpc0Response_default_instance_;
class undistort_grpc1Request;
struct undistort_grpc1RequestDefaultTypeInternal;
extern undistort_grpc1RequestDefaultTypeInternal _undistort_grpc1Request_default_instance_;
class undistort_grpc1Response;
struct undistort_grpc1ResponseDefaultTypeInternal;
extern undistort_grpc1ResponseDefaultTypeInternal _undistort_grpc1Response_default_instance_;
}  // namespace grpcIUndistortPoints
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIUndistortPoints::undistort_grpc0Request* Arena::CreateMaybeMessage<::grpcIUndistortPoints::undistort_grpc0Request>(Arena*);
template<> ::grpcIUndistortPoints::undistort_grpc0Response* Arena::CreateMaybeMessage<::grpcIUndistortPoints::undistort_grpc0Response>(Arena*);
template<> ::grpcIUndistortPoints::undistort_grpc1Request* Arena::CreateMaybeMessage<::grpcIUndistortPoints::undistort_grpc1Request>(Arena*);
template<> ::grpcIUndistortPoints::undistort_grpc1Response* Arena::CreateMaybeMessage<::grpcIUndistortPoints::undistort_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIUndistortPoints {

// ===================================================================

class undistort_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIUndistortPoints.undistort_grpc0Request) */ {
 public:
  inline undistort_grpc0Request() : undistort_grpc0Request(nullptr) {}
  ~undistort_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR undistort_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  undistort_grpc0Request(const undistort_grpc0Request& from);
  undistort_grpc0Request(undistort_grpc0Request&& from) noexcept
    : undistort_grpc0Request() {
    *this = ::std::move(from);
  }

  inline undistort_grpc0Request& operator=(const undistort_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline undistort_grpc0Request& operator=(undistort_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const undistort_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const undistort_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const undistort_grpc0Request*>(
               &_undistort_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(undistort_grpc0Request& a, undistort_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(undistort_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(undistort_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  undistort_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<undistort_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const undistort_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const undistort_grpc0Request& from) {
    undistort_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(undistort_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIUndistortPoints.undistort_grpc0Request";
  }
  protected:
  explicit undistort_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputPointsFieldNumber = 2,
    kCamParamsFieldNumber = 3,
    kOutputPointsFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes inputPoints = 2;
  void clear_inputpoints();
  const std::string& inputpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inputpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inputpoints();
  PROTOBUF_NODISCARD std::string* release_inputpoints();
  void set_allocated_inputpoints(std::string* inputpoints);
  private:
  const std::string& _internal_inputpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inputpoints(const std::string& value);
  std::string* _internal_mutable_inputpoints();
  public:

  // bytes camParams = 3;
  void clear_camparams();
  const std::string& camparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams();
  PROTOBUF_NODISCARD std::string* release_camparams();
  void set_allocated_camparams(std::string* camparams);
  private:
  const std::string& _internal_camparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams(const std::string& value);
  std::string* _internal_mutable_camparams();
  public:

  // bytes outputPoints = 4;
  void clear_outputpoints();
  const std::string& outputpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputpoints();
  PROTOBUF_NODISCARD std::string* release_outputpoints();
  void set_allocated_outputpoints(std::string* outputpoints);
  private:
  const std::string& _internal_outputpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputpoints(const std::string& value);
  std::string* _internal_mutable_outputpoints();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIUndistortPoints.undistort_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputpoints_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpoints_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIUndistortPointsService_2eproto;
};
// -------------------------------------------------------------------

class undistort_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIUndistortPoints.undistort_grpc0Response) */ {
 public:
  inline undistort_grpc0Response() : undistort_grpc0Response(nullptr) {}
  ~undistort_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR undistort_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  undistort_grpc0Response(const undistort_grpc0Response& from);
  undistort_grpc0Response(undistort_grpc0Response&& from) noexcept
    : undistort_grpc0Response() {
    *this = ::std::move(from);
  }

  inline undistort_grpc0Response& operator=(const undistort_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline undistort_grpc0Response& operator=(undistort_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const undistort_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const undistort_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const undistort_grpc0Response*>(
               &_undistort_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(undistort_grpc0Response& a, undistort_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(undistort_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(undistort_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  undistort_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<undistort_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const undistort_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const undistort_grpc0Response& from) {
    undistort_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(undistort_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIUndistortPoints.undistort_grpc0Response";
  }
  protected:
  explicit undistort_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputPointsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes outputPoints = 1;
  void clear_outputpoints();
  const std::string& outputpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputpoints();
  PROTOBUF_NODISCARD std::string* release_outputpoints();
  void set_allocated_outputpoints(std::string* outputpoints);
  private:
  const std::string& _internal_outputpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputpoints(const std::string& value);
  std::string* _internal_mutable_outputpoints();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIUndistortPoints.undistort_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpoints_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIUndistortPointsService_2eproto;
};
// -------------------------------------------------------------------

class undistort_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIUndistortPoints.undistort_grpc1Request) */ {
 public:
  inline undistort_grpc1Request() : undistort_grpc1Request(nullptr) {}
  ~undistort_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR undistort_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  undistort_grpc1Request(const undistort_grpc1Request& from);
  undistort_grpc1Request(undistort_grpc1Request&& from) noexcept
    : undistort_grpc1Request() {
    *this = ::std::move(from);
  }

  inline undistort_grpc1Request& operator=(const undistort_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline undistort_grpc1Request& operator=(undistort_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const undistort_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const undistort_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const undistort_grpc1Request*>(
               &_undistort_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(undistort_grpc1Request& a, undistort_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(undistort_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(undistort_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  undistort_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<undistort_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const undistort_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const undistort_grpc1Request& from) {
    undistort_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(undistort_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIUndistortPoints.undistort_grpc1Request";
  }
  protected:
  explicit undistort_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputKeypointsFieldNumber = 2,
    kCamParamsFieldNumber = 3,
    kOutputKeypointsFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes inputKeypoints = 2;
  void clear_inputkeypoints();
  const std::string& inputkeypoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inputkeypoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inputkeypoints();
  PROTOBUF_NODISCARD std::string* release_inputkeypoints();
  void set_allocated_inputkeypoints(std::string* inputkeypoints);
  private:
  const std::string& _internal_inputkeypoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inputkeypoints(const std::string& value);
  std::string* _internal_mutable_inputkeypoints();
  public:

  // bytes camParams = 3;
  void clear_camparams();
  const std::string& camparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams();
  PROTOBUF_NODISCARD std::string* release_camparams();
  void set_allocated_camparams(std::string* camparams);
  private:
  const std::string& _internal_camparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams(const std::string& value);
  std::string* _internal_mutable_camparams();
  public:

  // bytes outputKeypoints = 4;
  void clear_outputkeypoints();
  const std::string& outputkeypoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputkeypoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputkeypoints();
  PROTOBUF_NODISCARD std::string* release_outputkeypoints();
  void set_allocated_outputkeypoints(std::string* outputkeypoints);
  private:
  const std::string& _internal_outputkeypoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputkeypoints(const std::string& value);
  std::string* _internal_mutable_outputkeypoints();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIUndistortPoints.undistort_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputkeypoints_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputkeypoints_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIUndistortPointsService_2eproto;
};
// -------------------------------------------------------------------

class undistort_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIUndistortPoints.undistort_grpc1Response) */ {
 public:
  inline undistort_grpc1Response() : undistort_grpc1Response(nullptr) {}
  ~undistort_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR undistort_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  undistort_grpc1Response(const undistort_grpc1Response& from);
  undistort_grpc1Response(undistort_grpc1Response&& from) noexcept
    : undistort_grpc1Response() {
    *this = ::std::move(from);
  }

  inline undistort_grpc1Response& operator=(const undistort_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline undistort_grpc1Response& operator=(undistort_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const undistort_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const undistort_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const undistort_grpc1Response*>(
               &_undistort_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(undistort_grpc1Response& a, undistort_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(undistort_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(undistort_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  undistort_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<undistort_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const undistort_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const undistort_grpc1Response& from) {
    undistort_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(undistort_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIUndistortPoints.undistort_grpc1Response";
  }
  protected:
  explicit undistort_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputKeypointsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes outputKeypoints = 1;
  void clear_outputkeypoints();
  const std::string& outputkeypoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputkeypoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputkeypoints();
  PROTOBUF_NODISCARD std::string* release_outputkeypoints();
  void set_allocated_outputkeypoints(std::string* outputkeypoints);
  private:
  const std::string& _internal_outputkeypoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputkeypoints(const std::string& value);
  std::string* _internal_mutable_outputkeypoints();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIUndistortPoints.undistort_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputkeypoints_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIUndistortPointsService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// undistort_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void undistort_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t undistort_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t undistort_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void undistort_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void undistort_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc0Request.grpcServerCompressionFormat)
}

// bytes inputPoints = 2;
inline void undistort_grpc0Request::clear_inputpoints() {
  _impl_.inputpoints_.ClearToEmpty();
}
inline const std::string& undistort_grpc0Request::inputpoints() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc0Request.inputPoints)
  return _internal_inputpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void undistort_grpc0Request::set_inputpoints(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inputpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc0Request.inputPoints)
}
inline std::string* undistort_grpc0Request::mutable_inputpoints() {
  std::string* _s = _internal_mutable_inputpoints();
  // @@protoc_insertion_point(field_mutable:grpcIUndistortPoints.undistort_grpc0Request.inputPoints)
  return _s;
}
inline const std::string& undistort_grpc0Request::_internal_inputpoints() const {
  return _impl_.inputpoints_.Get();
}
inline void undistort_grpc0Request::_internal_set_inputpoints(const std::string& value) {
  
  _impl_.inputpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* undistort_grpc0Request::_internal_mutable_inputpoints() {
  
  return _impl_.inputpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* undistort_grpc0Request::release_inputpoints() {
  // @@protoc_insertion_point(field_release:grpcIUndistortPoints.undistort_grpc0Request.inputPoints)
  return _impl_.inputpoints_.Release();
}
inline void undistort_grpc0Request::set_allocated_inputpoints(std::string* inputpoints) {
  if (inputpoints != nullptr) {
    
  } else {
    
  }
  _impl_.inputpoints_.SetAllocated(inputpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inputpoints_.IsDefault()) {
    _impl_.inputpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIUndistortPoints.undistort_grpc0Request.inputPoints)
}

// bytes camParams = 3;
inline void undistort_grpc0Request::clear_camparams() {
  _impl_.camparams_.ClearToEmpty();
}
inline const std::string& undistort_grpc0Request::camparams() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc0Request.camParams)
  return _internal_camparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void undistort_grpc0Request::set_camparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.camparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc0Request.camParams)
}
inline std::string* undistort_grpc0Request::mutable_camparams() {
  std::string* _s = _internal_mutable_camparams();
  // @@protoc_insertion_point(field_mutable:grpcIUndistortPoints.undistort_grpc0Request.camParams)
  return _s;
}
inline const std::string& undistort_grpc0Request::_internal_camparams() const {
  return _impl_.camparams_.Get();
}
inline void undistort_grpc0Request::_internal_set_camparams(const std::string& value) {
  
  _impl_.camparams_.Set(value, GetArenaForAllocation());
}
inline std::string* undistort_grpc0Request::_internal_mutable_camparams() {
  
  return _impl_.camparams_.Mutable(GetArenaForAllocation());
}
inline std::string* undistort_grpc0Request::release_camparams() {
  // @@protoc_insertion_point(field_release:grpcIUndistortPoints.undistort_grpc0Request.camParams)
  return _impl_.camparams_.Release();
}
inline void undistort_grpc0Request::set_allocated_camparams(std::string* camparams) {
  if (camparams != nullptr) {
    
  } else {
    
  }
  _impl_.camparams_.SetAllocated(camparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camparams_.IsDefault()) {
    _impl_.camparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIUndistortPoints.undistort_grpc0Request.camParams)
}

// bytes outputPoints = 4;
inline void undistort_grpc0Request::clear_outputpoints() {
  _impl_.outputpoints_.ClearToEmpty();
}
inline const std::string& undistort_grpc0Request::outputpoints() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc0Request.outputPoints)
  return _internal_outputpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void undistort_grpc0Request::set_outputpoints(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc0Request.outputPoints)
}
inline std::string* undistort_grpc0Request::mutable_outputpoints() {
  std::string* _s = _internal_mutable_outputpoints();
  // @@protoc_insertion_point(field_mutable:grpcIUndistortPoints.undistort_grpc0Request.outputPoints)
  return _s;
}
inline const std::string& undistort_grpc0Request::_internal_outputpoints() const {
  return _impl_.outputpoints_.Get();
}
inline void undistort_grpc0Request::_internal_set_outputpoints(const std::string& value) {
  
  _impl_.outputpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* undistort_grpc0Request::_internal_mutable_outputpoints() {
  
  return _impl_.outputpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* undistort_grpc0Request::release_outputpoints() {
  // @@protoc_insertion_point(field_release:grpcIUndistortPoints.undistort_grpc0Request.outputPoints)
  return _impl_.outputpoints_.Release();
}
inline void undistort_grpc0Request::set_allocated_outputpoints(std::string* outputpoints) {
  if (outputpoints != nullptr) {
    
  } else {
    
  }
  _impl_.outputpoints_.SetAllocated(outputpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputpoints_.IsDefault()) {
    _impl_.outputpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIUndistortPoints.undistort_grpc0Request.outputPoints)
}

// -------------------------------------------------------------------

// undistort_grpc0Response

// bytes outputPoints = 1;
inline void undistort_grpc0Response::clear_outputpoints() {
  _impl_.outputpoints_.ClearToEmpty();
}
inline const std::string& undistort_grpc0Response::outputpoints() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc0Response.outputPoints)
  return _internal_outputpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void undistort_grpc0Response::set_outputpoints(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc0Response.outputPoints)
}
inline std::string* undistort_grpc0Response::mutable_outputpoints() {
  std::string* _s = _internal_mutable_outputpoints();
  // @@protoc_insertion_point(field_mutable:grpcIUndistortPoints.undistort_grpc0Response.outputPoints)
  return _s;
}
inline const std::string& undistort_grpc0Response::_internal_outputpoints() const {
  return _impl_.outputpoints_.Get();
}
inline void undistort_grpc0Response::_internal_set_outputpoints(const std::string& value) {
  
  _impl_.outputpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* undistort_grpc0Response::_internal_mutable_outputpoints() {
  
  return _impl_.outputpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* undistort_grpc0Response::release_outputpoints() {
  // @@protoc_insertion_point(field_release:grpcIUndistortPoints.undistort_grpc0Response.outputPoints)
  return _impl_.outputpoints_.Release();
}
inline void undistort_grpc0Response::set_allocated_outputpoints(std::string* outputpoints) {
  if (outputpoints != nullptr) {
    
  } else {
    
  }
  _impl_.outputpoints_.SetAllocated(outputpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputpoints_.IsDefault()) {
    _impl_.outputpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIUndistortPoints.undistort_grpc0Response.outputPoints)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void undistort_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t undistort_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t undistort_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void undistort_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void undistort_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// undistort_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void undistort_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t undistort_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t undistort_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void undistort_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void undistort_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc1Request.grpcServerCompressionFormat)
}

// bytes inputKeypoints = 2;
inline void undistort_grpc1Request::clear_inputkeypoints() {
  _impl_.inputkeypoints_.ClearToEmpty();
}
inline const std::string& undistort_grpc1Request::inputkeypoints() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc1Request.inputKeypoints)
  return _internal_inputkeypoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void undistort_grpc1Request::set_inputkeypoints(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inputkeypoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc1Request.inputKeypoints)
}
inline std::string* undistort_grpc1Request::mutable_inputkeypoints() {
  std::string* _s = _internal_mutable_inputkeypoints();
  // @@protoc_insertion_point(field_mutable:grpcIUndistortPoints.undistort_grpc1Request.inputKeypoints)
  return _s;
}
inline const std::string& undistort_grpc1Request::_internal_inputkeypoints() const {
  return _impl_.inputkeypoints_.Get();
}
inline void undistort_grpc1Request::_internal_set_inputkeypoints(const std::string& value) {
  
  _impl_.inputkeypoints_.Set(value, GetArenaForAllocation());
}
inline std::string* undistort_grpc1Request::_internal_mutable_inputkeypoints() {
  
  return _impl_.inputkeypoints_.Mutable(GetArenaForAllocation());
}
inline std::string* undistort_grpc1Request::release_inputkeypoints() {
  // @@protoc_insertion_point(field_release:grpcIUndistortPoints.undistort_grpc1Request.inputKeypoints)
  return _impl_.inputkeypoints_.Release();
}
inline void undistort_grpc1Request::set_allocated_inputkeypoints(std::string* inputkeypoints) {
  if (inputkeypoints != nullptr) {
    
  } else {
    
  }
  _impl_.inputkeypoints_.SetAllocated(inputkeypoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inputkeypoints_.IsDefault()) {
    _impl_.inputkeypoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIUndistortPoints.undistort_grpc1Request.inputKeypoints)
}

// bytes camParams = 3;
inline void undistort_grpc1Request::clear_camparams() {
  _impl_.camparams_.ClearToEmpty();
}
inline const std::string& undistort_grpc1Request::camparams() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc1Request.camParams)
  return _internal_camparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void undistort_grpc1Request::set_camparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.camparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc1Request.camParams)
}
inline std::string* undistort_grpc1Request::mutable_camparams() {
  std::string* _s = _internal_mutable_camparams();
  // @@protoc_insertion_point(field_mutable:grpcIUndistortPoints.undistort_grpc1Request.camParams)
  return _s;
}
inline const std::string& undistort_grpc1Request::_internal_camparams() const {
  return _impl_.camparams_.Get();
}
inline void undistort_grpc1Request::_internal_set_camparams(const std::string& value) {
  
  _impl_.camparams_.Set(value, GetArenaForAllocation());
}
inline std::string* undistort_grpc1Request::_internal_mutable_camparams() {
  
  return _impl_.camparams_.Mutable(GetArenaForAllocation());
}
inline std::string* undistort_grpc1Request::release_camparams() {
  // @@protoc_insertion_point(field_release:grpcIUndistortPoints.undistort_grpc1Request.camParams)
  return _impl_.camparams_.Release();
}
inline void undistort_grpc1Request::set_allocated_camparams(std::string* camparams) {
  if (camparams != nullptr) {
    
  } else {
    
  }
  _impl_.camparams_.SetAllocated(camparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camparams_.IsDefault()) {
    _impl_.camparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIUndistortPoints.undistort_grpc1Request.camParams)
}

// bytes outputKeypoints = 4;
inline void undistort_grpc1Request::clear_outputkeypoints() {
  _impl_.outputkeypoints_.ClearToEmpty();
}
inline const std::string& undistort_grpc1Request::outputkeypoints() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc1Request.outputKeypoints)
  return _internal_outputkeypoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void undistort_grpc1Request::set_outputkeypoints(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputkeypoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc1Request.outputKeypoints)
}
inline std::string* undistort_grpc1Request::mutable_outputkeypoints() {
  std::string* _s = _internal_mutable_outputkeypoints();
  // @@protoc_insertion_point(field_mutable:grpcIUndistortPoints.undistort_grpc1Request.outputKeypoints)
  return _s;
}
inline const std::string& undistort_grpc1Request::_internal_outputkeypoints() const {
  return _impl_.outputkeypoints_.Get();
}
inline void undistort_grpc1Request::_internal_set_outputkeypoints(const std::string& value) {
  
  _impl_.outputkeypoints_.Set(value, GetArenaForAllocation());
}
inline std::string* undistort_grpc1Request::_internal_mutable_outputkeypoints() {
  
  return _impl_.outputkeypoints_.Mutable(GetArenaForAllocation());
}
inline std::string* undistort_grpc1Request::release_outputkeypoints() {
  // @@protoc_insertion_point(field_release:grpcIUndistortPoints.undistort_grpc1Request.outputKeypoints)
  return _impl_.outputkeypoints_.Release();
}
inline void undistort_grpc1Request::set_allocated_outputkeypoints(std::string* outputkeypoints) {
  if (outputkeypoints != nullptr) {
    
  } else {
    
  }
  _impl_.outputkeypoints_.SetAllocated(outputkeypoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputkeypoints_.IsDefault()) {
    _impl_.outputkeypoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIUndistortPoints.undistort_grpc1Request.outputKeypoints)
}

// -------------------------------------------------------------------

// undistort_grpc1Response

// bytes outputKeypoints = 1;
inline void undistort_grpc1Response::clear_outputkeypoints() {
  _impl_.outputkeypoints_.ClearToEmpty();
}
inline const std::string& undistort_grpc1Response::outputkeypoints() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc1Response.outputKeypoints)
  return _internal_outputkeypoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void undistort_grpc1Response::set_outputkeypoints(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputkeypoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc1Response.outputKeypoints)
}
inline std::string* undistort_grpc1Response::mutable_outputkeypoints() {
  std::string* _s = _internal_mutable_outputkeypoints();
  // @@protoc_insertion_point(field_mutable:grpcIUndistortPoints.undistort_grpc1Response.outputKeypoints)
  return _s;
}
inline const std::string& undistort_grpc1Response::_internal_outputkeypoints() const {
  return _impl_.outputkeypoints_.Get();
}
inline void undistort_grpc1Response::_internal_set_outputkeypoints(const std::string& value) {
  
  _impl_.outputkeypoints_.Set(value, GetArenaForAllocation());
}
inline std::string* undistort_grpc1Response::_internal_mutable_outputkeypoints() {
  
  return _impl_.outputkeypoints_.Mutable(GetArenaForAllocation());
}
inline std::string* undistort_grpc1Response::release_outputkeypoints() {
  // @@protoc_insertion_point(field_release:grpcIUndistortPoints.undistort_grpc1Response.outputKeypoints)
  return _impl_.outputkeypoints_.Release();
}
inline void undistort_grpc1Response::set_allocated_outputkeypoints(std::string* outputkeypoints) {
  if (outputkeypoints != nullptr) {
    
  } else {
    
  }
  _impl_.outputkeypoints_.SetAllocated(outputkeypoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputkeypoints_.IsDefault()) {
    _impl_.outputkeypoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIUndistortPoints.undistort_grpc1Response.outputKeypoints)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void undistort_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t undistort_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t undistort_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIUndistortPoints.undistort_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void undistort_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void undistort_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIUndistortPoints.undistort_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIUndistortPoints

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIUndistortPointsService_2eproto
