// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMatchesOverlayService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIMatchesOverlayService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIMatchesOverlayService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIMatchesOverlayService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIMatchesOverlayService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMatchesOverlayService_2eproto;
namespace grpcIMatchesOverlay {
class draw_grpc0Request;
struct draw_grpc0RequestDefaultTypeInternal;
extern draw_grpc0RequestDefaultTypeInternal _draw_grpc0Request_default_instance_;
class draw_grpc0Response;
struct draw_grpc0ResponseDefaultTypeInternal;
extern draw_grpc0ResponseDefaultTypeInternal _draw_grpc0Response_default_instance_;
class draw_grpc1Request;
struct draw_grpc1RequestDefaultTypeInternal;
extern draw_grpc1RequestDefaultTypeInternal _draw_grpc1Request_default_instance_;
class draw_grpc1Response;
struct draw_grpc1ResponseDefaultTypeInternal;
extern draw_grpc1ResponseDefaultTypeInternal _draw_grpc1Response_default_instance_;
class draw_grpc2Request;
struct draw_grpc2RequestDefaultTypeInternal;
extern draw_grpc2RequestDefaultTypeInternal _draw_grpc2Request_default_instance_;
class draw_grpc2Response;
struct draw_grpc2ResponseDefaultTypeInternal;
extern draw_grpc2ResponseDefaultTypeInternal _draw_grpc2Response_default_instance_;
class draw_grpc3Request;
struct draw_grpc3RequestDefaultTypeInternal;
extern draw_grpc3RequestDefaultTypeInternal _draw_grpc3Request_default_instance_;
class draw_grpc3Response;
struct draw_grpc3ResponseDefaultTypeInternal;
extern draw_grpc3ResponseDefaultTypeInternal _draw_grpc3Response_default_instance_;
}  // namespace grpcIMatchesOverlay
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIMatchesOverlay::draw_grpc0Request* Arena::CreateMaybeMessage<::grpcIMatchesOverlay::draw_grpc0Request>(Arena*);
template<> ::grpcIMatchesOverlay::draw_grpc0Response* Arena::CreateMaybeMessage<::grpcIMatchesOverlay::draw_grpc0Response>(Arena*);
template<> ::grpcIMatchesOverlay::draw_grpc1Request* Arena::CreateMaybeMessage<::grpcIMatchesOverlay::draw_grpc1Request>(Arena*);
template<> ::grpcIMatchesOverlay::draw_grpc1Response* Arena::CreateMaybeMessage<::grpcIMatchesOverlay::draw_grpc1Response>(Arena*);
template<> ::grpcIMatchesOverlay::draw_grpc2Request* Arena::CreateMaybeMessage<::grpcIMatchesOverlay::draw_grpc2Request>(Arena*);
template<> ::grpcIMatchesOverlay::draw_grpc2Response* Arena::CreateMaybeMessage<::grpcIMatchesOverlay::draw_grpc2Response>(Arena*);
template<> ::grpcIMatchesOverlay::draw_grpc3Request* Arena::CreateMaybeMessage<::grpcIMatchesOverlay::draw_grpc3Request>(Arena*);
template<> ::grpcIMatchesOverlay::draw_grpc3Response* Arena::CreateMaybeMessage<::grpcIMatchesOverlay::draw_grpc3Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIMatchesOverlay {

// ===================================================================

class draw_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMatchesOverlay.draw_grpc0Request) */ {
 public:
  inline draw_grpc0Request() : draw_grpc0Request(nullptr) {}
  ~draw_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR draw_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc0Request(const draw_grpc0Request& from);
  draw_grpc0Request(draw_grpc0Request&& from) noexcept
    : draw_grpc0Request() {
    *this = ::std::move(from);
  }

  inline draw_grpc0Request& operator=(const draw_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc0Request& operator=(draw_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const draw_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const draw_grpc0Request*>(
               &_draw_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(draw_grpc0Request& a, draw_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  draw_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<draw_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const draw_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const draw_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMatchesOverlay.draw_grpc0Request";
  }
  protected:
  explicit draw_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImage1FieldNumber = 2,
    kImage2FieldNumber = 3,
    kPointsImage1FieldNumber = 4,
    kPointsImage2FieldNumber = 5,
    kMatchesFieldNumber = 6,
    kOutImageFieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image1 = 2;
  void clear_image1();
  const std::string& image1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image1();
  PROTOBUF_NODISCARD std::string* release_image1();
  void set_allocated_image1(std::string* image1);
  private:
  const std::string& _internal_image1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image1(const std::string& value);
  std::string* _internal_mutable_image1();
  public:

  // bytes image2 = 3;
  void clear_image2();
  const std::string& image2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image2();
  PROTOBUF_NODISCARD std::string* release_image2();
  void set_allocated_image2(std::string* image2);
  private:
  const std::string& _internal_image2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image2(const std::string& value);
  std::string* _internal_mutable_image2();
  public:

  // bytes points_image1 = 4;
  void clear_points_image1();
  const std::string& points_image1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points_image1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points_image1();
  PROTOBUF_NODISCARD std::string* release_points_image1();
  void set_allocated_points_image1(std::string* points_image1);
  private:
  const std::string& _internal_points_image1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points_image1(const std::string& value);
  std::string* _internal_mutable_points_image1();
  public:

  // bytes points_image2 = 5;
  void clear_points_image2();
  const std::string& points_image2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points_image2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points_image2();
  PROTOBUF_NODISCARD std::string* release_points_image2();
  void set_allocated_points_image2(std::string* points_image2);
  private:
  const std::string& _internal_points_image2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points_image2(const std::string& value);
  std::string* _internal_mutable_points_image2();
  public:

  // bytes matches = 6;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes outImage = 7;
  void clear_outimage();
  const std::string& outimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outimage();
  PROTOBUF_NODISCARD std::string* release_outimage();
  void set_allocated_outimage(std::string* outimage);
  private:
  const std::string& _internal_outimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outimage(const std::string& value);
  std::string* _internal_mutable_outimage();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMatchesOverlay.draw_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_image1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_image2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outimage_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMatchesOverlayService_2eproto;
};
// -------------------------------------------------------------------

class draw_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMatchesOverlay.draw_grpc0Response) */ {
 public:
  inline draw_grpc0Response() : draw_grpc0Response(nullptr) {}
  ~draw_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR draw_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc0Response(const draw_grpc0Response& from);
  draw_grpc0Response(draw_grpc0Response&& from) noexcept
    : draw_grpc0Response() {
    *this = ::std::move(from);
  }

  inline draw_grpc0Response& operator=(const draw_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc0Response& operator=(draw_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const draw_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const draw_grpc0Response*>(
               &_draw_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(draw_grpc0Response& a, draw_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  draw_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<draw_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const draw_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const draw_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMatchesOverlay.draw_grpc0Response";
  }
  protected:
  explicit draw_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutImageFieldNumber = 1,
  };
  // bytes outImage = 1;
  void clear_outimage();
  const std::string& outimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outimage();
  PROTOBUF_NODISCARD std::string* release_outimage();
  void set_allocated_outimage(std::string* outimage);
  private:
  const std::string& _internal_outimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outimage(const std::string& value);
  std::string* _internal_mutable_outimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMatchesOverlay.draw_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMatchesOverlayService_2eproto;
};
// -------------------------------------------------------------------

class draw_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMatchesOverlay.draw_grpc1Request) */ {
 public:
  inline draw_grpc1Request() : draw_grpc1Request(nullptr) {}
  ~draw_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR draw_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc1Request(const draw_grpc1Request& from);
  draw_grpc1Request(draw_grpc1Request&& from) noexcept
    : draw_grpc1Request() {
    *this = ::std::move(from);
  }

  inline draw_grpc1Request& operator=(const draw_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc1Request& operator=(draw_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const draw_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const draw_grpc1Request*>(
               &_draw_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(draw_grpc1Request& a, draw_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  draw_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<draw_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const draw_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const draw_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMatchesOverlay.draw_grpc1Request";
  }
  protected:
  explicit draw_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImage1FieldNumber = 2,
    kImage2FieldNumber = 3,
    kKeypointsImage1FieldNumber = 4,
    kKeypointsImage2FieldNumber = 5,
    kMatchesFieldNumber = 6,
    kOutImageFieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image1 = 2;
  void clear_image1();
  const std::string& image1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image1();
  PROTOBUF_NODISCARD std::string* release_image1();
  void set_allocated_image1(std::string* image1);
  private:
  const std::string& _internal_image1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image1(const std::string& value);
  std::string* _internal_mutable_image1();
  public:

  // bytes image2 = 3;
  void clear_image2();
  const std::string& image2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image2();
  PROTOBUF_NODISCARD std::string* release_image2();
  void set_allocated_image2(std::string* image2);
  private:
  const std::string& _internal_image2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image2(const std::string& value);
  std::string* _internal_mutable_image2();
  public:

  // bytes keypoints_image1 = 4;
  void clear_keypoints_image1();
  const std::string& keypoints_image1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keypoints_image1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keypoints_image1();
  PROTOBUF_NODISCARD std::string* release_keypoints_image1();
  void set_allocated_keypoints_image1(std::string* keypoints_image1);
  private:
  const std::string& _internal_keypoints_image1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keypoints_image1(const std::string& value);
  std::string* _internal_mutable_keypoints_image1();
  public:

  // bytes keypoints_image2 = 5;
  void clear_keypoints_image2();
  const std::string& keypoints_image2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keypoints_image2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keypoints_image2();
  PROTOBUF_NODISCARD std::string* release_keypoints_image2();
  void set_allocated_keypoints_image2(std::string* keypoints_image2);
  private:
  const std::string& _internal_keypoints_image2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keypoints_image2(const std::string& value);
  std::string* _internal_mutable_keypoints_image2();
  public:

  // bytes matches = 6;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes outImage = 7;
  void clear_outimage();
  const std::string& outimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outimage();
  PROTOBUF_NODISCARD std::string* release_outimage();
  void set_allocated_outimage(std::string* outimage);
  private:
  const std::string& _internal_outimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outimage(const std::string& value);
  std::string* _internal_mutable_outimage();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMatchesOverlay.draw_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoints_image1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoints_image2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outimage_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMatchesOverlayService_2eproto;
};
// -------------------------------------------------------------------

class draw_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMatchesOverlay.draw_grpc1Response) */ {
 public:
  inline draw_grpc1Response() : draw_grpc1Response(nullptr) {}
  ~draw_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR draw_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc1Response(const draw_grpc1Response& from);
  draw_grpc1Response(draw_grpc1Response&& from) noexcept
    : draw_grpc1Response() {
    *this = ::std::move(from);
  }

  inline draw_grpc1Response& operator=(const draw_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc1Response& operator=(draw_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const draw_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const draw_grpc1Response*>(
               &_draw_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(draw_grpc1Response& a, draw_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  draw_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<draw_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const draw_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const draw_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMatchesOverlay.draw_grpc1Response";
  }
  protected:
  explicit draw_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutImageFieldNumber = 1,
  };
  // bytes outImage = 1;
  void clear_outimage();
  const std::string& outimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outimage();
  PROTOBUF_NODISCARD std::string* release_outimage();
  void set_allocated_outimage(std::string* outimage);
  private:
  const std::string& _internal_outimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outimage(const std::string& value);
  std::string* _internal_mutable_outimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMatchesOverlay.draw_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMatchesOverlayService_2eproto;
};
// -------------------------------------------------------------------

class draw_grpc2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMatchesOverlay.draw_grpc2Request) */ {
 public:
  inline draw_grpc2Request() : draw_grpc2Request(nullptr) {}
  ~draw_grpc2Request() override;
  explicit PROTOBUF_CONSTEXPR draw_grpc2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc2Request(const draw_grpc2Request& from);
  draw_grpc2Request(draw_grpc2Request&& from) noexcept
    : draw_grpc2Request() {
    *this = ::std::move(from);
  }

  inline draw_grpc2Request& operator=(const draw_grpc2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc2Request& operator=(draw_grpc2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const draw_grpc2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc2Request* internal_default_instance() {
    return reinterpret_cast<const draw_grpc2Request*>(
               &_draw_grpc2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(draw_grpc2Request& a, draw_grpc2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  draw_grpc2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<draw_grpc2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const draw_grpc2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const draw_grpc2Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMatchesOverlay.draw_grpc2Request";
  }
  protected:
  explicit draw_grpc2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kPointsImage1FieldNumber = 3,
    kPointsImage2FieldNumber = 4,
    kMatchesFieldNumber = 5,
    kOutImageFieldNumber = 6,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes points_image1 = 3;
  void clear_points_image1();
  const std::string& points_image1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points_image1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points_image1();
  PROTOBUF_NODISCARD std::string* release_points_image1();
  void set_allocated_points_image1(std::string* points_image1);
  private:
  const std::string& _internal_points_image1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points_image1(const std::string& value);
  std::string* _internal_mutable_points_image1();
  public:

  // bytes points_image2 = 4;
  void clear_points_image2();
  const std::string& points_image2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points_image2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points_image2();
  PROTOBUF_NODISCARD std::string* release_points_image2();
  void set_allocated_points_image2(std::string* points_image2);
  private:
  const std::string& _internal_points_image2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points_image2(const std::string& value);
  std::string* _internal_mutable_points_image2();
  public:

  // bytes matches = 5;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes outImage = 6;
  void clear_outimage();
  const std::string& outimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outimage();
  PROTOBUF_NODISCARD std::string* release_outimage();
  void set_allocated_outimage(std::string* outimage);
  private:
  const std::string& _internal_outimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outimage(const std::string& value);
  std::string* _internal_mutable_outimage();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMatchesOverlay.draw_grpc2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_image1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_image2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outimage_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMatchesOverlayService_2eproto;
};
// -------------------------------------------------------------------

class draw_grpc2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMatchesOverlay.draw_grpc2Response) */ {
 public:
  inline draw_grpc2Response() : draw_grpc2Response(nullptr) {}
  ~draw_grpc2Response() override;
  explicit PROTOBUF_CONSTEXPR draw_grpc2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc2Response(const draw_grpc2Response& from);
  draw_grpc2Response(draw_grpc2Response&& from) noexcept
    : draw_grpc2Response() {
    *this = ::std::move(from);
  }

  inline draw_grpc2Response& operator=(const draw_grpc2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc2Response& operator=(draw_grpc2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const draw_grpc2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc2Response* internal_default_instance() {
    return reinterpret_cast<const draw_grpc2Response*>(
               &_draw_grpc2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(draw_grpc2Response& a, draw_grpc2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  draw_grpc2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<draw_grpc2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const draw_grpc2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const draw_grpc2Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMatchesOverlay.draw_grpc2Response";
  }
  protected:
  explicit draw_grpc2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutImageFieldNumber = 1,
  };
  // bytes outImage = 1;
  void clear_outimage();
  const std::string& outimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outimage();
  PROTOBUF_NODISCARD std::string* release_outimage();
  void set_allocated_outimage(std::string* outimage);
  private:
  const std::string& _internal_outimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outimage(const std::string& value);
  std::string* _internal_mutable_outimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMatchesOverlay.draw_grpc2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMatchesOverlayService_2eproto;
};
// -------------------------------------------------------------------

class draw_grpc3Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMatchesOverlay.draw_grpc3Request) */ {
 public:
  inline draw_grpc3Request() : draw_grpc3Request(nullptr) {}
  ~draw_grpc3Request() override;
  explicit PROTOBUF_CONSTEXPR draw_grpc3Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc3Request(const draw_grpc3Request& from);
  draw_grpc3Request(draw_grpc3Request&& from) noexcept
    : draw_grpc3Request() {
    *this = ::std::move(from);
  }

  inline draw_grpc3Request& operator=(const draw_grpc3Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc3Request& operator=(draw_grpc3Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const draw_grpc3Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc3Request* internal_default_instance() {
    return reinterpret_cast<const draw_grpc3Request*>(
               &_draw_grpc3Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(draw_grpc3Request& a, draw_grpc3Request& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc3Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc3Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  draw_grpc3Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<draw_grpc3Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const draw_grpc3Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const draw_grpc3Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc3Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMatchesOverlay.draw_grpc3Request";
  }
  protected:
  explicit draw_grpc3Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kKeypointsImage1FieldNumber = 3,
    kKeypointsImage2FieldNumber = 4,
    kMatchesFieldNumber = 5,
    kOutImageFieldNumber = 6,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes keypoints_image1 = 3;
  void clear_keypoints_image1();
  const std::string& keypoints_image1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keypoints_image1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keypoints_image1();
  PROTOBUF_NODISCARD std::string* release_keypoints_image1();
  void set_allocated_keypoints_image1(std::string* keypoints_image1);
  private:
  const std::string& _internal_keypoints_image1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keypoints_image1(const std::string& value);
  std::string* _internal_mutable_keypoints_image1();
  public:

  // bytes keypoints_image2 = 4;
  void clear_keypoints_image2();
  const std::string& keypoints_image2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keypoints_image2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keypoints_image2();
  PROTOBUF_NODISCARD std::string* release_keypoints_image2();
  void set_allocated_keypoints_image2(std::string* keypoints_image2);
  private:
  const std::string& _internal_keypoints_image2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keypoints_image2(const std::string& value);
  std::string* _internal_mutable_keypoints_image2();
  public:

  // bytes matches = 5;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes outImage = 6;
  void clear_outimage();
  const std::string& outimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outimage();
  PROTOBUF_NODISCARD std::string* release_outimage();
  void set_allocated_outimage(std::string* outimage);
  private:
  const std::string& _internal_outimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outimage(const std::string& value);
  std::string* _internal_mutable_outimage();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMatchesOverlay.draw_grpc3Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoints_image1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoints_image2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outimage_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMatchesOverlayService_2eproto;
};
// -------------------------------------------------------------------

class draw_grpc3Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMatchesOverlay.draw_grpc3Response) */ {
 public:
  inline draw_grpc3Response() : draw_grpc3Response(nullptr) {}
  ~draw_grpc3Response() override;
  explicit PROTOBUF_CONSTEXPR draw_grpc3Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc3Response(const draw_grpc3Response& from);
  draw_grpc3Response(draw_grpc3Response&& from) noexcept
    : draw_grpc3Response() {
    *this = ::std::move(from);
  }

  inline draw_grpc3Response& operator=(const draw_grpc3Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc3Response& operator=(draw_grpc3Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const draw_grpc3Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc3Response* internal_default_instance() {
    return reinterpret_cast<const draw_grpc3Response*>(
               &_draw_grpc3Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(draw_grpc3Response& a, draw_grpc3Response& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc3Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc3Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  draw_grpc3Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<draw_grpc3Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const draw_grpc3Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const draw_grpc3Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc3Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMatchesOverlay.draw_grpc3Response";
  }
  protected:
  explicit draw_grpc3Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutImageFieldNumber = 1,
  };
  // bytes outImage = 1;
  void clear_outimage();
  const std::string& outimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outimage();
  PROTOBUF_NODISCARD std::string* release_outimage();
  void set_allocated_outimage(std::string* outimage);
  private:
  const std::string& _internal_outimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outimage(const std::string& value);
  std::string* _internal_mutable_outimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMatchesOverlay.draw_grpc3Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMatchesOverlayService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// draw_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void draw_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t draw_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t draw_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void draw_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void draw_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc0Request.grpcServerCompressionFormat)
}

// bytes image1 = 2;
inline void draw_grpc0Request::clear_image1() {
  image1_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::image1() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc0Request.image1)
  return _internal_image1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc0Request::set_image1(ArgT0&& arg0, ArgT... args) {
 
 image1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc0Request.image1)
}
inline std::string* draw_grpc0Request::mutable_image1() {
  std::string* _s = _internal_mutable_image1();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc0Request.image1)
  return _s;
}
inline const std::string& draw_grpc0Request::_internal_image1() const {
  return image1_.Get();
}
inline void draw_grpc0Request::_internal_set_image1(const std::string& value) {
  
  image1_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::_internal_mutable_image1() {
  
  return image1_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::release_image1() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc0Request.image1)
  return image1_.Release();
}
inline void draw_grpc0Request::set_allocated_image1(std::string* image1) {
  if (image1 != nullptr) {
    
  } else {
    
  }
  image1_.SetAllocated(image1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image1_.IsDefault()) {
    image1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc0Request.image1)
}

// bytes image2 = 3;
inline void draw_grpc0Request::clear_image2() {
  image2_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::image2() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc0Request.image2)
  return _internal_image2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc0Request::set_image2(ArgT0&& arg0, ArgT... args) {
 
 image2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc0Request.image2)
}
inline std::string* draw_grpc0Request::mutable_image2() {
  std::string* _s = _internal_mutable_image2();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc0Request.image2)
  return _s;
}
inline const std::string& draw_grpc0Request::_internal_image2() const {
  return image2_.Get();
}
inline void draw_grpc0Request::_internal_set_image2(const std::string& value) {
  
  image2_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::_internal_mutable_image2() {
  
  return image2_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::release_image2() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc0Request.image2)
  return image2_.Release();
}
inline void draw_grpc0Request::set_allocated_image2(std::string* image2) {
  if (image2 != nullptr) {
    
  } else {
    
  }
  image2_.SetAllocated(image2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image2_.IsDefault()) {
    image2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc0Request.image2)
}

// bytes points_image1 = 4;
inline void draw_grpc0Request::clear_points_image1() {
  points_image1_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::points_image1() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc0Request.points_image1)
  return _internal_points_image1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc0Request::set_points_image1(ArgT0&& arg0, ArgT... args) {
 
 points_image1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc0Request.points_image1)
}
inline std::string* draw_grpc0Request::mutable_points_image1() {
  std::string* _s = _internal_mutable_points_image1();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc0Request.points_image1)
  return _s;
}
inline const std::string& draw_grpc0Request::_internal_points_image1() const {
  return points_image1_.Get();
}
inline void draw_grpc0Request::_internal_set_points_image1(const std::string& value) {
  
  points_image1_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::_internal_mutable_points_image1() {
  
  return points_image1_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::release_points_image1() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc0Request.points_image1)
  return points_image1_.Release();
}
inline void draw_grpc0Request::set_allocated_points_image1(std::string* points_image1) {
  if (points_image1 != nullptr) {
    
  } else {
    
  }
  points_image1_.SetAllocated(points_image1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points_image1_.IsDefault()) {
    points_image1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc0Request.points_image1)
}

// bytes points_image2 = 5;
inline void draw_grpc0Request::clear_points_image2() {
  points_image2_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::points_image2() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc0Request.points_image2)
  return _internal_points_image2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc0Request::set_points_image2(ArgT0&& arg0, ArgT... args) {
 
 points_image2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc0Request.points_image2)
}
inline std::string* draw_grpc0Request::mutable_points_image2() {
  std::string* _s = _internal_mutable_points_image2();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc0Request.points_image2)
  return _s;
}
inline const std::string& draw_grpc0Request::_internal_points_image2() const {
  return points_image2_.Get();
}
inline void draw_grpc0Request::_internal_set_points_image2(const std::string& value) {
  
  points_image2_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::_internal_mutable_points_image2() {
  
  return points_image2_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::release_points_image2() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc0Request.points_image2)
  return points_image2_.Release();
}
inline void draw_grpc0Request::set_allocated_points_image2(std::string* points_image2) {
  if (points_image2 != nullptr) {
    
  } else {
    
  }
  points_image2_.SetAllocated(points_image2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points_image2_.IsDefault()) {
    points_image2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc0Request.points_image2)
}

// bytes matches = 6;
inline void draw_grpc0Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc0Request.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc0Request::set_matches(ArgT0&& arg0, ArgT... args) {
 
 matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc0Request.matches)
}
inline std::string* draw_grpc0Request::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc0Request.matches)
  return _s;
}
inline const std::string& draw_grpc0Request::_internal_matches() const {
  return matches_.Get();
}
inline void draw_grpc0Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::_internal_mutable_matches() {
  
  return matches_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc0Request.matches)
  return matches_.Release();
}
inline void draw_grpc0Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (matches_.IsDefault()) {
    matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc0Request.matches)
}

// bytes outImage = 7;
inline void draw_grpc0Request::clear_outimage() {
  outimage_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::outimage() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc0Request.outImage)
  return _internal_outimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc0Request::set_outimage(ArgT0&& arg0, ArgT... args) {
 
 outimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc0Request.outImage)
}
inline std::string* draw_grpc0Request::mutable_outimage() {
  std::string* _s = _internal_mutable_outimage();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc0Request.outImage)
  return _s;
}
inline const std::string& draw_grpc0Request::_internal_outimage() const {
  return outimage_.Get();
}
inline void draw_grpc0Request::_internal_set_outimage(const std::string& value) {
  
  outimage_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::_internal_mutable_outimage() {
  
  return outimage_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc0Request::release_outimage() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc0Request.outImage)
  return outimage_.Release();
}
inline void draw_grpc0Request::set_allocated_outimage(std::string* outimage) {
  if (outimage != nullptr) {
    
  } else {
    
  }
  outimage_.SetAllocated(outimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outimage_.IsDefault()) {
    outimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc0Request.outImage)
}

// -------------------------------------------------------------------

// draw_grpc0Response

// bytes outImage = 1;
inline void draw_grpc0Response::clear_outimage() {
  outimage_.ClearToEmpty();
}
inline const std::string& draw_grpc0Response::outimage() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc0Response.outImage)
  return _internal_outimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc0Response::set_outimage(ArgT0&& arg0, ArgT... args) {
 
 outimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc0Response.outImage)
}
inline std::string* draw_grpc0Response::mutable_outimage() {
  std::string* _s = _internal_mutable_outimage();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc0Response.outImage)
  return _s;
}
inline const std::string& draw_grpc0Response::_internal_outimage() const {
  return outimage_.Get();
}
inline void draw_grpc0Response::_internal_set_outimage(const std::string& value) {
  
  outimage_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc0Response::_internal_mutable_outimage() {
  
  return outimage_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc0Response::release_outimage() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc0Response.outImage)
  return outimage_.Release();
}
inline void draw_grpc0Response::set_allocated_outimage(std::string* outimage) {
  if (outimage != nullptr) {
    
  } else {
    
  }
  outimage_.SetAllocated(outimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outimage_.IsDefault()) {
    outimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc0Response.outImage)
}

// -------------------------------------------------------------------

// draw_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void draw_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t draw_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t draw_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void draw_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void draw_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc1Request.grpcServerCompressionFormat)
}

// bytes image1 = 2;
inline void draw_grpc1Request::clear_image1() {
  image1_.ClearToEmpty();
}
inline const std::string& draw_grpc1Request::image1() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc1Request.image1)
  return _internal_image1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc1Request::set_image1(ArgT0&& arg0, ArgT... args) {
 
 image1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc1Request.image1)
}
inline std::string* draw_grpc1Request::mutable_image1() {
  std::string* _s = _internal_mutable_image1();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc1Request.image1)
  return _s;
}
inline const std::string& draw_grpc1Request::_internal_image1() const {
  return image1_.Get();
}
inline void draw_grpc1Request::_internal_set_image1(const std::string& value) {
  
  image1_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::_internal_mutable_image1() {
  
  return image1_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::release_image1() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc1Request.image1)
  return image1_.Release();
}
inline void draw_grpc1Request::set_allocated_image1(std::string* image1) {
  if (image1 != nullptr) {
    
  } else {
    
  }
  image1_.SetAllocated(image1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image1_.IsDefault()) {
    image1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc1Request.image1)
}

// bytes image2 = 3;
inline void draw_grpc1Request::clear_image2() {
  image2_.ClearToEmpty();
}
inline const std::string& draw_grpc1Request::image2() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc1Request.image2)
  return _internal_image2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc1Request::set_image2(ArgT0&& arg0, ArgT... args) {
 
 image2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc1Request.image2)
}
inline std::string* draw_grpc1Request::mutable_image2() {
  std::string* _s = _internal_mutable_image2();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc1Request.image2)
  return _s;
}
inline const std::string& draw_grpc1Request::_internal_image2() const {
  return image2_.Get();
}
inline void draw_grpc1Request::_internal_set_image2(const std::string& value) {
  
  image2_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::_internal_mutable_image2() {
  
  return image2_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::release_image2() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc1Request.image2)
  return image2_.Release();
}
inline void draw_grpc1Request::set_allocated_image2(std::string* image2) {
  if (image2 != nullptr) {
    
  } else {
    
  }
  image2_.SetAllocated(image2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image2_.IsDefault()) {
    image2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc1Request.image2)
}

// bytes keypoints_image1 = 4;
inline void draw_grpc1Request::clear_keypoints_image1() {
  keypoints_image1_.ClearToEmpty();
}
inline const std::string& draw_grpc1Request::keypoints_image1() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc1Request.keypoints_image1)
  return _internal_keypoints_image1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc1Request::set_keypoints_image1(ArgT0&& arg0, ArgT... args) {
 
 keypoints_image1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc1Request.keypoints_image1)
}
inline std::string* draw_grpc1Request::mutable_keypoints_image1() {
  std::string* _s = _internal_mutable_keypoints_image1();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc1Request.keypoints_image1)
  return _s;
}
inline const std::string& draw_grpc1Request::_internal_keypoints_image1() const {
  return keypoints_image1_.Get();
}
inline void draw_grpc1Request::_internal_set_keypoints_image1(const std::string& value) {
  
  keypoints_image1_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::_internal_mutable_keypoints_image1() {
  
  return keypoints_image1_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::release_keypoints_image1() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc1Request.keypoints_image1)
  return keypoints_image1_.Release();
}
inline void draw_grpc1Request::set_allocated_keypoints_image1(std::string* keypoints_image1) {
  if (keypoints_image1 != nullptr) {
    
  } else {
    
  }
  keypoints_image1_.SetAllocated(keypoints_image1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keypoints_image1_.IsDefault()) {
    keypoints_image1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc1Request.keypoints_image1)
}

// bytes keypoints_image2 = 5;
inline void draw_grpc1Request::clear_keypoints_image2() {
  keypoints_image2_.ClearToEmpty();
}
inline const std::string& draw_grpc1Request::keypoints_image2() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc1Request.keypoints_image2)
  return _internal_keypoints_image2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc1Request::set_keypoints_image2(ArgT0&& arg0, ArgT... args) {
 
 keypoints_image2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc1Request.keypoints_image2)
}
inline std::string* draw_grpc1Request::mutable_keypoints_image2() {
  std::string* _s = _internal_mutable_keypoints_image2();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc1Request.keypoints_image2)
  return _s;
}
inline const std::string& draw_grpc1Request::_internal_keypoints_image2() const {
  return keypoints_image2_.Get();
}
inline void draw_grpc1Request::_internal_set_keypoints_image2(const std::string& value) {
  
  keypoints_image2_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::_internal_mutable_keypoints_image2() {
  
  return keypoints_image2_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::release_keypoints_image2() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc1Request.keypoints_image2)
  return keypoints_image2_.Release();
}
inline void draw_grpc1Request::set_allocated_keypoints_image2(std::string* keypoints_image2) {
  if (keypoints_image2 != nullptr) {
    
  } else {
    
  }
  keypoints_image2_.SetAllocated(keypoints_image2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keypoints_image2_.IsDefault()) {
    keypoints_image2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc1Request.keypoints_image2)
}

// bytes matches = 6;
inline void draw_grpc1Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& draw_grpc1Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc1Request.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc1Request::set_matches(ArgT0&& arg0, ArgT... args) {
 
 matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc1Request.matches)
}
inline std::string* draw_grpc1Request::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc1Request.matches)
  return _s;
}
inline const std::string& draw_grpc1Request::_internal_matches() const {
  return matches_.Get();
}
inline void draw_grpc1Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::_internal_mutable_matches() {
  
  return matches_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc1Request.matches)
  return matches_.Release();
}
inline void draw_grpc1Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (matches_.IsDefault()) {
    matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc1Request.matches)
}

// bytes outImage = 7;
inline void draw_grpc1Request::clear_outimage() {
  outimage_.ClearToEmpty();
}
inline const std::string& draw_grpc1Request::outimage() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc1Request.outImage)
  return _internal_outimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc1Request::set_outimage(ArgT0&& arg0, ArgT... args) {
 
 outimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc1Request.outImage)
}
inline std::string* draw_grpc1Request::mutable_outimage() {
  std::string* _s = _internal_mutable_outimage();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc1Request.outImage)
  return _s;
}
inline const std::string& draw_grpc1Request::_internal_outimage() const {
  return outimage_.Get();
}
inline void draw_grpc1Request::_internal_set_outimage(const std::string& value) {
  
  outimage_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::_internal_mutable_outimage() {
  
  return outimage_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc1Request::release_outimage() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc1Request.outImage)
  return outimage_.Release();
}
inline void draw_grpc1Request::set_allocated_outimage(std::string* outimage) {
  if (outimage != nullptr) {
    
  } else {
    
  }
  outimage_.SetAllocated(outimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outimage_.IsDefault()) {
    outimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc1Request.outImage)
}

// -------------------------------------------------------------------

// draw_grpc1Response

// bytes outImage = 1;
inline void draw_grpc1Response::clear_outimage() {
  outimage_.ClearToEmpty();
}
inline const std::string& draw_grpc1Response::outimage() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc1Response.outImage)
  return _internal_outimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc1Response::set_outimage(ArgT0&& arg0, ArgT... args) {
 
 outimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc1Response.outImage)
}
inline std::string* draw_grpc1Response::mutable_outimage() {
  std::string* _s = _internal_mutable_outimage();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc1Response.outImage)
  return _s;
}
inline const std::string& draw_grpc1Response::_internal_outimage() const {
  return outimage_.Get();
}
inline void draw_grpc1Response::_internal_set_outimage(const std::string& value) {
  
  outimage_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc1Response::_internal_mutable_outimage() {
  
  return outimage_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc1Response::release_outimage() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc1Response.outImage)
  return outimage_.Release();
}
inline void draw_grpc1Response::set_allocated_outimage(std::string* outimage) {
  if (outimage != nullptr) {
    
  } else {
    
  }
  outimage_.SetAllocated(outimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outimage_.IsDefault()) {
    outimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc1Response.outImage)
}

// -------------------------------------------------------------------

// draw_grpc2Request

// int32 grpcServerCompressionFormat = 1;
inline void draw_grpc2Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t draw_grpc2Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t draw_grpc2Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc2Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void draw_grpc2Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void draw_grpc2Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc2Request.grpcServerCompressionFormat)
}

// bytes image = 2;
inline void draw_grpc2Request::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& draw_grpc2Request::image() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc2Request.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc2Request::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc2Request.image)
}
inline std::string* draw_grpc2Request::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc2Request.image)
  return _s;
}
inline const std::string& draw_grpc2Request::_internal_image() const {
  return image_.Get();
}
inline void draw_grpc2Request::_internal_set_image(const std::string& value) {
  
  image_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc2Request::_internal_mutable_image() {
  
  return image_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc2Request::release_image() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc2Request.image)
  return image_.Release();
}
inline void draw_grpc2Request::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault()) {
    image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc2Request.image)
}

// bytes points_image1 = 3;
inline void draw_grpc2Request::clear_points_image1() {
  points_image1_.ClearToEmpty();
}
inline const std::string& draw_grpc2Request::points_image1() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc2Request.points_image1)
  return _internal_points_image1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc2Request::set_points_image1(ArgT0&& arg0, ArgT... args) {
 
 points_image1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc2Request.points_image1)
}
inline std::string* draw_grpc2Request::mutable_points_image1() {
  std::string* _s = _internal_mutable_points_image1();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc2Request.points_image1)
  return _s;
}
inline const std::string& draw_grpc2Request::_internal_points_image1() const {
  return points_image1_.Get();
}
inline void draw_grpc2Request::_internal_set_points_image1(const std::string& value) {
  
  points_image1_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc2Request::_internal_mutable_points_image1() {
  
  return points_image1_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc2Request::release_points_image1() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc2Request.points_image1)
  return points_image1_.Release();
}
inline void draw_grpc2Request::set_allocated_points_image1(std::string* points_image1) {
  if (points_image1 != nullptr) {
    
  } else {
    
  }
  points_image1_.SetAllocated(points_image1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points_image1_.IsDefault()) {
    points_image1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc2Request.points_image1)
}

// bytes points_image2 = 4;
inline void draw_grpc2Request::clear_points_image2() {
  points_image2_.ClearToEmpty();
}
inline const std::string& draw_grpc2Request::points_image2() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc2Request.points_image2)
  return _internal_points_image2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc2Request::set_points_image2(ArgT0&& arg0, ArgT... args) {
 
 points_image2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc2Request.points_image2)
}
inline std::string* draw_grpc2Request::mutable_points_image2() {
  std::string* _s = _internal_mutable_points_image2();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc2Request.points_image2)
  return _s;
}
inline const std::string& draw_grpc2Request::_internal_points_image2() const {
  return points_image2_.Get();
}
inline void draw_grpc2Request::_internal_set_points_image2(const std::string& value) {
  
  points_image2_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc2Request::_internal_mutable_points_image2() {
  
  return points_image2_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc2Request::release_points_image2() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc2Request.points_image2)
  return points_image2_.Release();
}
inline void draw_grpc2Request::set_allocated_points_image2(std::string* points_image2) {
  if (points_image2 != nullptr) {
    
  } else {
    
  }
  points_image2_.SetAllocated(points_image2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points_image2_.IsDefault()) {
    points_image2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc2Request.points_image2)
}

// bytes matches = 5;
inline void draw_grpc2Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& draw_grpc2Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc2Request.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc2Request::set_matches(ArgT0&& arg0, ArgT... args) {
 
 matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc2Request.matches)
}
inline std::string* draw_grpc2Request::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc2Request.matches)
  return _s;
}
inline const std::string& draw_grpc2Request::_internal_matches() const {
  return matches_.Get();
}
inline void draw_grpc2Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc2Request::_internal_mutable_matches() {
  
  return matches_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc2Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc2Request.matches)
  return matches_.Release();
}
inline void draw_grpc2Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (matches_.IsDefault()) {
    matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc2Request.matches)
}

// bytes outImage = 6;
inline void draw_grpc2Request::clear_outimage() {
  outimage_.ClearToEmpty();
}
inline const std::string& draw_grpc2Request::outimage() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc2Request.outImage)
  return _internal_outimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc2Request::set_outimage(ArgT0&& arg0, ArgT... args) {
 
 outimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc2Request.outImage)
}
inline std::string* draw_grpc2Request::mutable_outimage() {
  std::string* _s = _internal_mutable_outimage();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc2Request.outImage)
  return _s;
}
inline const std::string& draw_grpc2Request::_internal_outimage() const {
  return outimage_.Get();
}
inline void draw_grpc2Request::_internal_set_outimage(const std::string& value) {
  
  outimage_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc2Request::_internal_mutable_outimage() {
  
  return outimage_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc2Request::release_outimage() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc2Request.outImage)
  return outimage_.Release();
}
inline void draw_grpc2Request::set_allocated_outimage(std::string* outimage) {
  if (outimage != nullptr) {
    
  } else {
    
  }
  outimage_.SetAllocated(outimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outimage_.IsDefault()) {
    outimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc2Request.outImage)
}

// -------------------------------------------------------------------

// draw_grpc2Response

// bytes outImage = 1;
inline void draw_grpc2Response::clear_outimage() {
  outimage_.ClearToEmpty();
}
inline const std::string& draw_grpc2Response::outimage() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc2Response.outImage)
  return _internal_outimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc2Response::set_outimage(ArgT0&& arg0, ArgT... args) {
 
 outimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc2Response.outImage)
}
inline std::string* draw_grpc2Response::mutable_outimage() {
  std::string* _s = _internal_mutable_outimage();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc2Response.outImage)
  return _s;
}
inline const std::string& draw_grpc2Response::_internal_outimage() const {
  return outimage_.Get();
}
inline void draw_grpc2Response::_internal_set_outimage(const std::string& value) {
  
  outimage_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc2Response::_internal_mutable_outimage() {
  
  return outimage_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc2Response::release_outimage() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc2Response.outImage)
  return outimage_.Release();
}
inline void draw_grpc2Response::set_allocated_outimage(std::string* outimage) {
  if (outimage != nullptr) {
    
  } else {
    
  }
  outimage_.SetAllocated(outimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outimage_.IsDefault()) {
    outimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc2Response.outImage)
}

// -------------------------------------------------------------------

// draw_grpc3Request

// int32 grpcServerCompressionFormat = 1;
inline void draw_grpc3Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t draw_grpc3Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t draw_grpc3Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc3Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void draw_grpc3Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void draw_grpc3Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc3Request.grpcServerCompressionFormat)
}

// bytes image = 2;
inline void draw_grpc3Request::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& draw_grpc3Request::image() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc3Request.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc3Request::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc3Request.image)
}
inline std::string* draw_grpc3Request::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc3Request.image)
  return _s;
}
inline const std::string& draw_grpc3Request::_internal_image() const {
  return image_.Get();
}
inline void draw_grpc3Request::_internal_set_image(const std::string& value) {
  
  image_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc3Request::_internal_mutable_image() {
  
  return image_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc3Request::release_image() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc3Request.image)
  return image_.Release();
}
inline void draw_grpc3Request::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault()) {
    image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc3Request.image)
}

// bytes keypoints_image1 = 3;
inline void draw_grpc3Request::clear_keypoints_image1() {
  keypoints_image1_.ClearToEmpty();
}
inline const std::string& draw_grpc3Request::keypoints_image1() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc3Request.keypoints_image1)
  return _internal_keypoints_image1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc3Request::set_keypoints_image1(ArgT0&& arg0, ArgT... args) {
 
 keypoints_image1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc3Request.keypoints_image1)
}
inline std::string* draw_grpc3Request::mutable_keypoints_image1() {
  std::string* _s = _internal_mutable_keypoints_image1();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc3Request.keypoints_image1)
  return _s;
}
inline const std::string& draw_grpc3Request::_internal_keypoints_image1() const {
  return keypoints_image1_.Get();
}
inline void draw_grpc3Request::_internal_set_keypoints_image1(const std::string& value) {
  
  keypoints_image1_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc3Request::_internal_mutable_keypoints_image1() {
  
  return keypoints_image1_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc3Request::release_keypoints_image1() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc3Request.keypoints_image1)
  return keypoints_image1_.Release();
}
inline void draw_grpc3Request::set_allocated_keypoints_image1(std::string* keypoints_image1) {
  if (keypoints_image1 != nullptr) {
    
  } else {
    
  }
  keypoints_image1_.SetAllocated(keypoints_image1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keypoints_image1_.IsDefault()) {
    keypoints_image1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc3Request.keypoints_image1)
}

// bytes keypoints_image2 = 4;
inline void draw_grpc3Request::clear_keypoints_image2() {
  keypoints_image2_.ClearToEmpty();
}
inline const std::string& draw_grpc3Request::keypoints_image2() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc3Request.keypoints_image2)
  return _internal_keypoints_image2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc3Request::set_keypoints_image2(ArgT0&& arg0, ArgT... args) {
 
 keypoints_image2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc3Request.keypoints_image2)
}
inline std::string* draw_grpc3Request::mutable_keypoints_image2() {
  std::string* _s = _internal_mutable_keypoints_image2();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc3Request.keypoints_image2)
  return _s;
}
inline const std::string& draw_grpc3Request::_internal_keypoints_image2() const {
  return keypoints_image2_.Get();
}
inline void draw_grpc3Request::_internal_set_keypoints_image2(const std::string& value) {
  
  keypoints_image2_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc3Request::_internal_mutable_keypoints_image2() {
  
  return keypoints_image2_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc3Request::release_keypoints_image2() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc3Request.keypoints_image2)
  return keypoints_image2_.Release();
}
inline void draw_grpc3Request::set_allocated_keypoints_image2(std::string* keypoints_image2) {
  if (keypoints_image2 != nullptr) {
    
  } else {
    
  }
  keypoints_image2_.SetAllocated(keypoints_image2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keypoints_image2_.IsDefault()) {
    keypoints_image2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc3Request.keypoints_image2)
}

// bytes matches = 5;
inline void draw_grpc3Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& draw_grpc3Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc3Request.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc3Request::set_matches(ArgT0&& arg0, ArgT... args) {
 
 matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc3Request.matches)
}
inline std::string* draw_grpc3Request::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc3Request.matches)
  return _s;
}
inline const std::string& draw_grpc3Request::_internal_matches() const {
  return matches_.Get();
}
inline void draw_grpc3Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc3Request::_internal_mutable_matches() {
  
  return matches_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc3Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc3Request.matches)
  return matches_.Release();
}
inline void draw_grpc3Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (matches_.IsDefault()) {
    matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc3Request.matches)
}

// bytes outImage = 6;
inline void draw_grpc3Request::clear_outimage() {
  outimage_.ClearToEmpty();
}
inline const std::string& draw_grpc3Request::outimage() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc3Request.outImage)
  return _internal_outimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc3Request::set_outimage(ArgT0&& arg0, ArgT... args) {
 
 outimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc3Request.outImage)
}
inline std::string* draw_grpc3Request::mutable_outimage() {
  std::string* _s = _internal_mutable_outimage();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc3Request.outImage)
  return _s;
}
inline const std::string& draw_grpc3Request::_internal_outimage() const {
  return outimage_.Get();
}
inline void draw_grpc3Request::_internal_set_outimage(const std::string& value) {
  
  outimage_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc3Request::_internal_mutable_outimage() {
  
  return outimage_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc3Request::release_outimage() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc3Request.outImage)
  return outimage_.Release();
}
inline void draw_grpc3Request::set_allocated_outimage(std::string* outimage) {
  if (outimage != nullptr) {
    
  } else {
    
  }
  outimage_.SetAllocated(outimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outimage_.IsDefault()) {
    outimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc3Request.outImage)
}

// -------------------------------------------------------------------

// draw_grpc3Response

// bytes outImage = 1;
inline void draw_grpc3Response::clear_outimage() {
  outimage_.ClearToEmpty();
}
inline const std::string& draw_grpc3Response::outimage() const {
  // @@protoc_insertion_point(field_get:grpcIMatchesOverlay.draw_grpc3Response.outImage)
  return _internal_outimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void draw_grpc3Response::set_outimage(ArgT0&& arg0, ArgT... args) {
 
 outimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMatchesOverlay.draw_grpc3Response.outImage)
}
inline std::string* draw_grpc3Response::mutable_outimage() {
  std::string* _s = _internal_mutable_outimage();
  // @@protoc_insertion_point(field_mutable:grpcIMatchesOverlay.draw_grpc3Response.outImage)
  return _s;
}
inline const std::string& draw_grpc3Response::_internal_outimage() const {
  return outimage_.Get();
}
inline void draw_grpc3Response::_internal_set_outimage(const std::string& value) {
  
  outimage_.Set(value, GetArenaForAllocation());
}
inline std::string* draw_grpc3Response::_internal_mutable_outimage() {
  
  return outimage_.Mutable(GetArenaForAllocation());
}
inline std::string* draw_grpc3Response::release_outimage() {
  // @@protoc_insertion_point(field_release:grpcIMatchesOverlay.draw_grpc3Response.outImage)
  return outimage_.Release();
}
inline void draw_grpc3Response::set_allocated_outimage(std::string* outimage) {
  if (outimage != nullptr) {
    
  } else {
    
  }
  outimage_.SetAllocated(outimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outimage_.IsDefault()) {
    outimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMatchesOverlay.draw_grpc3Response.outImage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIMatchesOverlay

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIMatchesOverlayService_2eproto
