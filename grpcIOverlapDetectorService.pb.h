// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIOverlapDetectorService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIOverlapDetectorService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIOverlapDetectorService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIOverlapDetectorService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIOverlapDetectorService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIOverlapDetectorService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIOverlapDetectorService_2eproto_metadata_getter(int index);
namespace grpcIOverlapDetector {
class detect_grpc0Request;
struct detect_grpc0RequestDefaultTypeInternal;
extern detect_grpc0RequestDefaultTypeInternal _detect_grpc0Request_default_instance_;
class detect_grpc0Response;
struct detect_grpc0ResponseDefaultTypeInternal;
extern detect_grpc0ResponseDefaultTypeInternal _detect_grpc0Response_default_instance_;
class detect_grpc1Request;
struct detect_grpc1RequestDefaultTypeInternal;
extern detect_grpc1RequestDefaultTypeInternal _detect_grpc1Request_default_instance_;
class detect_grpc1Response;
struct detect_grpc1ResponseDefaultTypeInternal;
extern detect_grpc1ResponseDefaultTypeInternal _detect_grpc1Response_default_instance_;
class setCameraParametersRequest;
struct setCameraParametersRequestDefaultTypeInternal;
extern setCameraParametersRequestDefaultTypeInternal _setCameraParametersRequest_default_instance_;
}  // namespace grpcIOverlapDetector
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIOverlapDetector::detect_grpc0Request* Arena::CreateMaybeMessage<::grpcIOverlapDetector::detect_grpc0Request>(Arena*);
template<> ::grpcIOverlapDetector::detect_grpc0Response* Arena::CreateMaybeMessage<::grpcIOverlapDetector::detect_grpc0Response>(Arena*);
template<> ::grpcIOverlapDetector::detect_grpc1Request* Arena::CreateMaybeMessage<::grpcIOverlapDetector::detect_grpc1Request>(Arena*);
template<> ::grpcIOverlapDetector::detect_grpc1Response* Arena::CreateMaybeMessage<::grpcIOverlapDetector::detect_grpc1Response>(Arena*);
template<> ::grpcIOverlapDetector::setCameraParametersRequest* Arena::CreateMaybeMessage<::grpcIOverlapDetector::setCameraParametersRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIOverlapDetector {

// ===================================================================

class setCameraParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOverlapDetector.setCameraParametersRequest) */ {
 public:
  inline setCameraParametersRequest() : setCameraParametersRequest(nullptr) {}
  virtual ~setCameraParametersRequest();
  explicit constexpr setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParametersRequest(const setCameraParametersRequest& from);
  setCameraParametersRequest(setCameraParametersRequest&& from) noexcept
    : setCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline setCameraParametersRequest& operator=(const setCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParametersRequest& operator=(setCameraParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setCameraParametersRequest*>(
               &_setCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setCameraParametersRequest& a, setCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setCameraParametersRequest* New() const final {
    return CreateMaybeMessage<setCameraParametersRequest>(nullptr);
  }

  setCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setCameraParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setCameraParametersRequest& from);
  void MergeFrom(const setCameraParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOverlapDetector.setCameraParametersRequest";
  }
  protected:
  explicit setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIOverlapDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntrinsicParamsFieldNumber = 1,
    kDistortionParamsFieldNumber = 2,
  };
  // bytes intrinsicParams = 1;
  void clear_intrinsicparams();
  const std::string& intrinsicparams() const;
  void set_intrinsicparams(const std::string& value);
  void set_intrinsicparams(std::string&& value);
  void set_intrinsicparams(const char* value);
  void set_intrinsicparams(const void* value, size_t size);
  std::string* mutable_intrinsicparams();
  std::string* release_intrinsicparams();
  void set_allocated_intrinsicparams(std::string* intrinsicparams);
  private:
  const std::string& _internal_intrinsicparams() const;
  void _internal_set_intrinsicparams(const std::string& value);
  std::string* _internal_mutable_intrinsicparams();
  public:

  // bytes distortionParams = 2;
  void clear_distortionparams();
  const std::string& distortionparams() const;
  void set_distortionparams(const std::string& value);
  void set_distortionparams(std::string&& value);
  void set_distortionparams(const char* value);
  void set_distortionparams(const void* value, size_t size);
  std::string* mutable_distortionparams();
  std::string* release_distortionparams();
  void set_allocated_distortionparams(std::string* distortionparams);
  private:
  const std::string& _internal_distortionparams() const;
  void _internal_set_distortionparams(const std::string& value);
  std::string* _internal_mutable_distortionparams();
  public:

  // @@protoc_insertion_point(class_scope:grpcIOverlapDetector.setCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intrinsicparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distortionparams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOverlapDetectorService_2eproto;
};
// -------------------------------------------------------------------

class detect_grpc0Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOverlapDetector.detect_grpc0Request) */ {
 public:
  inline detect_grpc0Request() : detect_grpc0Request(nullptr) {}
  virtual ~detect_grpc0Request();
  explicit constexpr detect_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  detect_grpc0Request(const detect_grpc0Request& from);
  detect_grpc0Request(detect_grpc0Request&& from) noexcept
    : detect_grpc0Request() {
    *this = ::std::move(from);
  }

  inline detect_grpc0Request& operator=(const detect_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline detect_grpc0Request& operator=(detect_grpc0Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const detect_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const detect_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const detect_grpc0Request*>(
               &_detect_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(detect_grpc0Request& a, detect_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(detect_grpc0Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(detect_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline detect_grpc0Request* New() const final {
    return CreateMaybeMessage<detect_grpc0Request>(nullptr);
  }

  detect_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<detect_grpc0Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const detect_grpc0Request& from);
  void MergeFrom(const detect_grpc0Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(detect_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOverlapDetector.detect_grpc0Request";
  }
  protected:
  explicit detect_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIOverlapDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalMapFieldNumber = 2,
    kFloatingMapFieldNumber = 3,
    kSim3TransformFieldNumber = 4,
    kCpOverlapIndicesFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes globalMap = 2;
  void clear_globalmap();
  const std::string& globalmap() const;
  void set_globalmap(const std::string& value);
  void set_globalmap(std::string&& value);
  void set_globalmap(const char* value);
  void set_globalmap(const void* value, size_t size);
  std::string* mutable_globalmap();
  std::string* release_globalmap();
  void set_allocated_globalmap(std::string* globalmap);
  private:
  const std::string& _internal_globalmap() const;
  void _internal_set_globalmap(const std::string& value);
  std::string* _internal_mutable_globalmap();
  public:

  // bytes floatingMap = 3;
  void clear_floatingmap();
  const std::string& floatingmap() const;
  void set_floatingmap(const std::string& value);
  void set_floatingmap(std::string&& value);
  void set_floatingmap(const char* value);
  void set_floatingmap(const void* value, size_t size);
  std::string* mutable_floatingmap();
  std::string* release_floatingmap();
  void set_allocated_floatingmap(std::string* floatingmap);
  private:
  const std::string& _internal_floatingmap() const;
  void _internal_set_floatingmap(const std::string& value);
  std::string* _internal_mutable_floatingmap();
  public:

  // bytes sim3Transform = 4;
  void clear_sim3transform();
  const std::string& sim3transform() const;
  void set_sim3transform(const std::string& value);
  void set_sim3transform(std::string&& value);
  void set_sim3transform(const char* value);
  void set_sim3transform(const void* value, size_t size);
  std::string* mutable_sim3transform();
  std::string* release_sim3transform();
  void set_allocated_sim3transform(std::string* sim3transform);
  private:
  const std::string& _internal_sim3transform() const;
  void _internal_set_sim3transform(const std::string& value);
  std::string* _internal_mutable_sim3transform();
  public:

  // bytes cpOverlapIndices = 5;
  void clear_cpoverlapindices();
  const std::string& cpoverlapindices() const;
  void set_cpoverlapindices(const std::string& value);
  void set_cpoverlapindices(std::string&& value);
  void set_cpoverlapindices(const char* value);
  void set_cpoverlapindices(const void* value, size_t size);
  std::string* mutable_cpoverlapindices();
  std::string* release_cpoverlapindices();
  void set_allocated_cpoverlapindices(std::string* cpoverlapindices);
  private:
  const std::string& _internal_cpoverlapindices() const;
  void _internal_set_cpoverlapindices(const std::string& value);
  std::string* _internal_mutable_cpoverlapindices();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIOverlapDetector.detect_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalmap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr floatingmap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim3transform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpoverlapindices_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOverlapDetectorService_2eproto;
};
// -------------------------------------------------------------------

class detect_grpc0Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOverlapDetector.detect_grpc0Response) */ {
 public:
  inline detect_grpc0Response() : detect_grpc0Response(nullptr) {}
  virtual ~detect_grpc0Response();
  explicit constexpr detect_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  detect_grpc0Response(const detect_grpc0Response& from);
  detect_grpc0Response(detect_grpc0Response&& from) noexcept
    : detect_grpc0Response() {
    *this = ::std::move(from);
  }

  inline detect_grpc0Response& operator=(const detect_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline detect_grpc0Response& operator=(detect_grpc0Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const detect_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const detect_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const detect_grpc0Response*>(
               &_detect_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(detect_grpc0Response& a, detect_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(detect_grpc0Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(detect_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline detect_grpc0Response* New() const final {
    return CreateMaybeMessage<detect_grpc0Response>(nullptr);
  }

  detect_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<detect_grpc0Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const detect_grpc0Response& from);
  void MergeFrom(const detect_grpc0Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(detect_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOverlapDetector.detect_grpc0Response";
  }
  protected:
  explicit detect_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIOverlapDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSim3TransformFieldNumber = 1,
    kCpOverlapIndicesFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes sim3Transform = 1;
  void clear_sim3transform();
  const std::string& sim3transform() const;
  void set_sim3transform(const std::string& value);
  void set_sim3transform(std::string&& value);
  void set_sim3transform(const char* value);
  void set_sim3transform(const void* value, size_t size);
  std::string* mutable_sim3transform();
  std::string* release_sim3transform();
  void set_allocated_sim3transform(std::string* sim3transform);
  private:
  const std::string& _internal_sim3transform() const;
  void _internal_set_sim3transform(const std::string& value);
  std::string* _internal_mutable_sim3transform();
  public:

  // bytes cpOverlapIndices = 2;
  void clear_cpoverlapindices();
  const std::string& cpoverlapindices() const;
  void set_cpoverlapindices(const std::string& value);
  void set_cpoverlapindices(std::string&& value);
  void set_cpoverlapindices(const char* value);
  void set_cpoverlapindices(const void* value, size_t size);
  std::string* mutable_cpoverlapindices();
  std::string* release_cpoverlapindices();
  void set_allocated_cpoverlapindices(std::string* cpoverlapindices);
  private:
  const std::string& _internal_cpoverlapindices() const;
  void _internal_set_cpoverlapindices(const std::string& value);
  std::string* _internal_mutable_cpoverlapindices();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIOverlapDetector.detect_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim3transform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpoverlapindices_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOverlapDetectorService_2eproto;
};
// -------------------------------------------------------------------

class detect_grpc1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOverlapDetector.detect_grpc1Request) */ {
 public:
  inline detect_grpc1Request() : detect_grpc1Request(nullptr) {}
  virtual ~detect_grpc1Request();
  explicit constexpr detect_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  detect_grpc1Request(const detect_grpc1Request& from);
  detect_grpc1Request(detect_grpc1Request&& from) noexcept
    : detect_grpc1Request() {
    *this = ::std::move(from);
  }

  inline detect_grpc1Request& operator=(const detect_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline detect_grpc1Request& operator=(detect_grpc1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const detect_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const detect_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const detect_grpc1Request*>(
               &_detect_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(detect_grpc1Request& a, detect_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(detect_grpc1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(detect_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline detect_grpc1Request* New() const final {
    return CreateMaybeMessage<detect_grpc1Request>(nullptr);
  }

  detect_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<detect_grpc1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const detect_grpc1Request& from);
  void MergeFrom(const detect_grpc1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(detect_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOverlapDetector.detect_grpc1Request";
  }
  protected:
  explicit detect_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIOverlapDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalMapFieldNumber = 2,
    kFloatingMapFieldNumber = 3,
    kSim3TransformFieldNumber = 4,
    kOverlapIndicesFieldNumber = 5,
    kScoresFieldNumber = 6,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes globalMap = 2;
  void clear_globalmap();
  const std::string& globalmap() const;
  void set_globalmap(const std::string& value);
  void set_globalmap(std::string&& value);
  void set_globalmap(const char* value);
  void set_globalmap(const void* value, size_t size);
  std::string* mutable_globalmap();
  std::string* release_globalmap();
  void set_allocated_globalmap(std::string* globalmap);
  private:
  const std::string& _internal_globalmap() const;
  void _internal_set_globalmap(const std::string& value);
  std::string* _internal_mutable_globalmap();
  public:

  // bytes floatingMap = 3;
  void clear_floatingmap();
  const std::string& floatingmap() const;
  void set_floatingmap(const std::string& value);
  void set_floatingmap(std::string&& value);
  void set_floatingmap(const char* value);
  void set_floatingmap(const void* value, size_t size);
  std::string* mutable_floatingmap();
  std::string* release_floatingmap();
  void set_allocated_floatingmap(std::string* floatingmap);
  private:
  const std::string& _internal_floatingmap() const;
  void _internal_set_floatingmap(const std::string& value);
  std::string* _internal_mutable_floatingmap();
  public:

  // bytes sim3Transform = 4;
  void clear_sim3transform();
  const std::string& sim3transform() const;
  void set_sim3transform(const std::string& value);
  void set_sim3transform(std::string&& value);
  void set_sim3transform(const char* value);
  void set_sim3transform(const void* value, size_t size);
  std::string* mutable_sim3transform();
  std::string* release_sim3transform();
  void set_allocated_sim3transform(std::string* sim3transform);
  private:
  const std::string& _internal_sim3transform() const;
  void _internal_set_sim3transform(const std::string& value);
  std::string* _internal_mutable_sim3transform();
  public:

  // bytes overlapIndices = 5;
  void clear_overlapindices();
  const std::string& overlapindices() const;
  void set_overlapindices(const std::string& value);
  void set_overlapindices(std::string&& value);
  void set_overlapindices(const char* value);
  void set_overlapindices(const void* value, size_t size);
  std::string* mutable_overlapindices();
  std::string* release_overlapindices();
  void set_allocated_overlapindices(std::string* overlapindices);
  private:
  const std::string& _internal_overlapindices() const;
  void _internal_set_overlapindices(const std::string& value);
  std::string* _internal_mutable_overlapindices();
  public:

  // bytes scores = 6;
  void clear_scores();
  const std::string& scores() const;
  void set_scores(const std::string& value);
  void set_scores(std::string&& value);
  void set_scores(const char* value);
  void set_scores(const void* value, size_t size);
  std::string* mutable_scores();
  std::string* release_scores();
  void set_allocated_scores(std::string* scores);
  private:
  const std::string& _internal_scores() const;
  void _internal_set_scores(const std::string& value);
  std::string* _internal_mutable_scores();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIOverlapDetector.detect_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalmap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr floatingmap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim3transform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overlapindices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scores_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOverlapDetectorService_2eproto;
};
// -------------------------------------------------------------------

class detect_grpc1Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOverlapDetector.detect_grpc1Response) */ {
 public:
  inline detect_grpc1Response() : detect_grpc1Response(nullptr) {}
  virtual ~detect_grpc1Response();
  explicit constexpr detect_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  detect_grpc1Response(const detect_grpc1Response& from);
  detect_grpc1Response(detect_grpc1Response&& from) noexcept
    : detect_grpc1Response() {
    *this = ::std::move(from);
  }

  inline detect_grpc1Response& operator=(const detect_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline detect_grpc1Response& operator=(detect_grpc1Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const detect_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const detect_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const detect_grpc1Response*>(
               &_detect_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(detect_grpc1Response& a, detect_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(detect_grpc1Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(detect_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline detect_grpc1Response* New() const final {
    return CreateMaybeMessage<detect_grpc1Response>(nullptr);
  }

  detect_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<detect_grpc1Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const detect_grpc1Response& from);
  void MergeFrom(const detect_grpc1Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(detect_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOverlapDetector.detect_grpc1Response";
  }
  protected:
  explicit detect_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIOverlapDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSim3TransformFieldNumber = 1,
    kOverlapIndicesFieldNumber = 2,
    kScoresFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes sim3Transform = 1;
  void clear_sim3transform();
  const std::string& sim3transform() const;
  void set_sim3transform(const std::string& value);
  void set_sim3transform(std::string&& value);
  void set_sim3transform(const char* value);
  void set_sim3transform(const void* value, size_t size);
  std::string* mutable_sim3transform();
  std::string* release_sim3transform();
  void set_allocated_sim3transform(std::string* sim3transform);
  private:
  const std::string& _internal_sim3transform() const;
  void _internal_set_sim3transform(const std::string& value);
  std::string* _internal_mutable_sim3transform();
  public:

  // bytes overlapIndices = 2;
  void clear_overlapindices();
  const std::string& overlapindices() const;
  void set_overlapindices(const std::string& value);
  void set_overlapindices(std::string&& value);
  void set_overlapindices(const char* value);
  void set_overlapindices(const void* value, size_t size);
  std::string* mutable_overlapindices();
  std::string* release_overlapindices();
  void set_allocated_overlapindices(std::string* overlapindices);
  private:
  const std::string& _internal_overlapindices() const;
  void _internal_set_overlapindices(const std::string& value);
  std::string* _internal_mutable_overlapindices();
  public:

  // bytes scores = 3;
  void clear_scores();
  const std::string& scores() const;
  void set_scores(const std::string& value);
  void set_scores(std::string&& value);
  void set_scores(const char* value);
  void set_scores(const void* value, size_t size);
  std::string* mutable_scores();
  std::string* release_scores();
  void set_allocated_scores(std::string* scores);
  private:
  const std::string& _internal_scores() const;
  void _internal_set_scores(const std::string& value);
  std::string* _internal_mutable_scores();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIOverlapDetector.detect_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim3transform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overlapindices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scores_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOverlapDetectorService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setCameraParametersRequest

// bytes intrinsicParams = 1;
inline void setCameraParametersRequest::clear_intrinsicparams() {
  intrinsicparams_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::intrinsicparams() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.setCameraParametersRequest.intrinsicParams)
  return _internal_intrinsicparams();
}
inline void setCameraParametersRequest::set_intrinsicparams(const std::string& value) {
  _internal_set_intrinsicparams(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.setCameraParametersRequest.intrinsicParams)
}
inline std::string* setCameraParametersRequest::mutable_intrinsicparams() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.setCameraParametersRequest.intrinsicParams)
  return _internal_mutable_intrinsicparams();
}
inline const std::string& setCameraParametersRequest::_internal_intrinsicparams() const {
  return intrinsicparams_.Get();
}
inline void setCameraParametersRequest::_internal_set_intrinsicparams(const std::string& value) {
  
  intrinsicparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setCameraParametersRequest::set_intrinsicparams(std::string&& value) {
  
  intrinsicparams_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.setCameraParametersRequest.intrinsicParams)
}
inline void setCameraParametersRequest::set_intrinsicparams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intrinsicparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.setCameraParametersRequest.intrinsicParams)
}
inline void setCameraParametersRequest::set_intrinsicparams(const void* value,
    size_t size) {
  
  intrinsicparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.setCameraParametersRequest.intrinsicParams)
}
inline std::string* setCameraParametersRequest::_internal_mutable_intrinsicparams() {
  
  return intrinsicparams_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setCameraParametersRequest::release_intrinsicparams() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.setCameraParametersRequest.intrinsicParams)
  return intrinsicparams_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setCameraParametersRequest::set_allocated_intrinsicparams(std::string* intrinsicparams) {
  if (intrinsicparams != nullptr) {
    
  } else {
    
  }
  intrinsicparams_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intrinsicparams,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.setCameraParametersRequest.intrinsicParams)
}

// bytes distortionParams = 2;
inline void setCameraParametersRequest::clear_distortionparams() {
  distortionparams_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::distortionparams() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.setCameraParametersRequest.distortionParams)
  return _internal_distortionparams();
}
inline void setCameraParametersRequest::set_distortionparams(const std::string& value) {
  _internal_set_distortionparams(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.setCameraParametersRequest.distortionParams)
}
inline std::string* setCameraParametersRequest::mutable_distortionparams() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.setCameraParametersRequest.distortionParams)
  return _internal_mutable_distortionparams();
}
inline const std::string& setCameraParametersRequest::_internal_distortionparams() const {
  return distortionparams_.Get();
}
inline void setCameraParametersRequest::_internal_set_distortionparams(const std::string& value) {
  
  distortionparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setCameraParametersRequest::set_distortionparams(std::string&& value) {
  
  distortionparams_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.setCameraParametersRequest.distortionParams)
}
inline void setCameraParametersRequest::set_distortionparams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  distortionparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.setCameraParametersRequest.distortionParams)
}
inline void setCameraParametersRequest::set_distortionparams(const void* value,
    size_t size) {
  
  distortionparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.setCameraParametersRequest.distortionParams)
}
inline std::string* setCameraParametersRequest::_internal_mutable_distortionparams() {
  
  return distortionparams_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setCameraParametersRequest::release_distortionparams() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.setCameraParametersRequest.distortionParams)
  return distortionparams_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setCameraParametersRequest::set_allocated_distortionparams(std::string* distortionparams) {
  if (distortionparams != nullptr) {
    
  } else {
    
  }
  distortionparams_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distortionparams,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.setCameraParametersRequest.distortionParams)
}

// -------------------------------------------------------------------

// detect_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void detect_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detect_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detect_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void detect_grpc0Request::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void detect_grpc0Request::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc0Request.grpcServerCompressionFormat)
}

// bytes globalMap = 2;
inline void detect_grpc0Request::clear_globalmap() {
  globalmap_.ClearToEmpty();
}
inline const std::string& detect_grpc0Request::globalmap() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc0Request.globalMap)
  return _internal_globalmap();
}
inline void detect_grpc0Request::set_globalmap(const std::string& value) {
  _internal_set_globalmap(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc0Request.globalMap)
}
inline std::string* detect_grpc0Request::mutable_globalmap() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc0Request.globalMap)
  return _internal_mutable_globalmap();
}
inline const std::string& detect_grpc0Request::_internal_globalmap() const {
  return globalmap_.Get();
}
inline void detect_grpc0Request::_internal_set_globalmap(const std::string& value) {
  
  globalmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc0Request::set_globalmap(std::string&& value) {
  
  globalmap_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc0Request.globalMap)
}
inline void detect_grpc0Request::set_globalmap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  globalmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc0Request.globalMap)
}
inline void detect_grpc0Request::set_globalmap(const void* value,
    size_t size) {
  
  globalmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc0Request.globalMap)
}
inline std::string* detect_grpc0Request::_internal_mutable_globalmap() {
  
  return globalmap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc0Request::release_globalmap() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc0Request.globalMap)
  return globalmap_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc0Request::set_allocated_globalmap(std::string* globalmap) {
  if (globalmap != nullptr) {
    
  } else {
    
  }
  globalmap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), globalmap,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc0Request.globalMap)
}

// bytes floatingMap = 3;
inline void detect_grpc0Request::clear_floatingmap() {
  floatingmap_.ClearToEmpty();
}
inline const std::string& detect_grpc0Request::floatingmap() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc0Request.floatingMap)
  return _internal_floatingmap();
}
inline void detect_grpc0Request::set_floatingmap(const std::string& value) {
  _internal_set_floatingmap(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc0Request.floatingMap)
}
inline std::string* detect_grpc0Request::mutable_floatingmap() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc0Request.floatingMap)
  return _internal_mutable_floatingmap();
}
inline const std::string& detect_grpc0Request::_internal_floatingmap() const {
  return floatingmap_.Get();
}
inline void detect_grpc0Request::_internal_set_floatingmap(const std::string& value) {
  
  floatingmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc0Request::set_floatingmap(std::string&& value) {
  
  floatingmap_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc0Request.floatingMap)
}
inline void detect_grpc0Request::set_floatingmap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  floatingmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc0Request.floatingMap)
}
inline void detect_grpc0Request::set_floatingmap(const void* value,
    size_t size) {
  
  floatingmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc0Request.floatingMap)
}
inline std::string* detect_grpc0Request::_internal_mutable_floatingmap() {
  
  return floatingmap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc0Request::release_floatingmap() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc0Request.floatingMap)
  return floatingmap_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc0Request::set_allocated_floatingmap(std::string* floatingmap) {
  if (floatingmap != nullptr) {
    
  } else {
    
  }
  floatingmap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), floatingmap,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc0Request.floatingMap)
}

// bytes sim3Transform = 4;
inline void detect_grpc0Request::clear_sim3transform() {
  sim3transform_.ClearToEmpty();
}
inline const std::string& detect_grpc0Request::sim3transform() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc0Request.sim3Transform)
  return _internal_sim3transform();
}
inline void detect_grpc0Request::set_sim3transform(const std::string& value) {
  _internal_set_sim3transform(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc0Request.sim3Transform)
}
inline std::string* detect_grpc0Request::mutable_sim3transform() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc0Request.sim3Transform)
  return _internal_mutable_sim3transform();
}
inline const std::string& detect_grpc0Request::_internal_sim3transform() const {
  return sim3transform_.Get();
}
inline void detect_grpc0Request::_internal_set_sim3transform(const std::string& value) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc0Request::set_sim3transform(std::string&& value) {
  
  sim3transform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc0Request.sim3Transform)
}
inline void detect_grpc0Request::set_sim3transform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc0Request.sim3Transform)
}
inline void detect_grpc0Request::set_sim3transform(const void* value,
    size_t size) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc0Request.sim3Transform)
}
inline std::string* detect_grpc0Request::_internal_mutable_sim3transform() {
  
  return sim3transform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc0Request::release_sim3transform() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc0Request.sim3Transform)
  return sim3transform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc0Request::set_allocated_sim3transform(std::string* sim3transform) {
  if (sim3transform != nullptr) {
    
  } else {
    
  }
  sim3transform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sim3transform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc0Request.sim3Transform)
}

// bytes cpOverlapIndices = 5;
inline void detect_grpc0Request::clear_cpoverlapindices() {
  cpoverlapindices_.ClearToEmpty();
}
inline const std::string& detect_grpc0Request::cpoverlapindices() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc0Request.cpOverlapIndices)
  return _internal_cpoverlapindices();
}
inline void detect_grpc0Request::set_cpoverlapindices(const std::string& value) {
  _internal_set_cpoverlapindices(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc0Request.cpOverlapIndices)
}
inline std::string* detect_grpc0Request::mutable_cpoverlapindices() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc0Request.cpOverlapIndices)
  return _internal_mutable_cpoverlapindices();
}
inline const std::string& detect_grpc0Request::_internal_cpoverlapindices() const {
  return cpoverlapindices_.Get();
}
inline void detect_grpc0Request::_internal_set_cpoverlapindices(const std::string& value) {
  
  cpoverlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc0Request::set_cpoverlapindices(std::string&& value) {
  
  cpoverlapindices_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc0Request.cpOverlapIndices)
}
inline void detect_grpc0Request::set_cpoverlapindices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpoverlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc0Request.cpOverlapIndices)
}
inline void detect_grpc0Request::set_cpoverlapindices(const void* value,
    size_t size) {
  
  cpoverlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc0Request.cpOverlapIndices)
}
inline std::string* detect_grpc0Request::_internal_mutable_cpoverlapindices() {
  
  return cpoverlapindices_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc0Request::release_cpoverlapindices() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc0Request.cpOverlapIndices)
  return cpoverlapindices_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc0Request::set_allocated_cpoverlapindices(std::string* cpoverlapindices) {
  if (cpoverlapindices != nullptr) {
    
  } else {
    
  }
  cpoverlapindices_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpoverlapindices,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc0Request.cpOverlapIndices)
}

// -------------------------------------------------------------------

// detect_grpc0Response

// bytes sim3Transform = 1;
inline void detect_grpc0Response::clear_sim3transform() {
  sim3transform_.ClearToEmpty();
}
inline const std::string& detect_grpc0Response::sim3transform() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc0Response.sim3Transform)
  return _internal_sim3transform();
}
inline void detect_grpc0Response::set_sim3transform(const std::string& value) {
  _internal_set_sim3transform(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc0Response.sim3Transform)
}
inline std::string* detect_grpc0Response::mutable_sim3transform() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc0Response.sim3Transform)
  return _internal_mutable_sim3transform();
}
inline const std::string& detect_grpc0Response::_internal_sim3transform() const {
  return sim3transform_.Get();
}
inline void detect_grpc0Response::_internal_set_sim3transform(const std::string& value) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc0Response::set_sim3transform(std::string&& value) {
  
  sim3transform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc0Response.sim3Transform)
}
inline void detect_grpc0Response::set_sim3transform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc0Response.sim3Transform)
}
inline void detect_grpc0Response::set_sim3transform(const void* value,
    size_t size) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc0Response.sim3Transform)
}
inline std::string* detect_grpc0Response::_internal_mutable_sim3transform() {
  
  return sim3transform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc0Response::release_sim3transform() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc0Response.sim3Transform)
  return sim3transform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc0Response::set_allocated_sim3transform(std::string* sim3transform) {
  if (sim3transform != nullptr) {
    
  } else {
    
  }
  sim3transform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sim3transform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc0Response.sim3Transform)
}

// bytes cpOverlapIndices = 2;
inline void detect_grpc0Response::clear_cpoverlapindices() {
  cpoverlapindices_.ClearToEmpty();
}
inline const std::string& detect_grpc0Response::cpoverlapindices() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc0Response.cpOverlapIndices)
  return _internal_cpoverlapindices();
}
inline void detect_grpc0Response::set_cpoverlapindices(const std::string& value) {
  _internal_set_cpoverlapindices(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc0Response.cpOverlapIndices)
}
inline std::string* detect_grpc0Response::mutable_cpoverlapindices() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc0Response.cpOverlapIndices)
  return _internal_mutable_cpoverlapindices();
}
inline const std::string& detect_grpc0Response::_internal_cpoverlapindices() const {
  return cpoverlapindices_.Get();
}
inline void detect_grpc0Response::_internal_set_cpoverlapindices(const std::string& value) {
  
  cpoverlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc0Response::set_cpoverlapindices(std::string&& value) {
  
  cpoverlapindices_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc0Response.cpOverlapIndices)
}
inline void detect_grpc0Response::set_cpoverlapindices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpoverlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc0Response.cpOverlapIndices)
}
inline void detect_grpc0Response::set_cpoverlapindices(const void* value,
    size_t size) {
  
  cpoverlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc0Response.cpOverlapIndices)
}
inline std::string* detect_grpc0Response::_internal_mutable_cpoverlapindices() {
  
  return cpoverlapindices_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc0Response::release_cpoverlapindices() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc0Response.cpOverlapIndices)
  return cpoverlapindices_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc0Response::set_allocated_cpoverlapindices(std::string* cpoverlapindices) {
  if (cpoverlapindices != nullptr) {
    
  } else {
    
  }
  cpoverlapindices_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpoverlapindices,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc0Response.cpOverlapIndices)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void detect_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detect_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detect_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void detect_grpc0Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void detect_grpc0Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// detect_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void detect_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detect_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detect_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void detect_grpc1Request::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void detect_grpc1Request::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc1Request.grpcServerCompressionFormat)
}

// bytes globalMap = 2;
inline void detect_grpc1Request::clear_globalmap() {
  globalmap_.ClearToEmpty();
}
inline const std::string& detect_grpc1Request::globalmap() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc1Request.globalMap)
  return _internal_globalmap();
}
inline void detect_grpc1Request::set_globalmap(const std::string& value) {
  _internal_set_globalmap(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc1Request.globalMap)
}
inline std::string* detect_grpc1Request::mutable_globalmap() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc1Request.globalMap)
  return _internal_mutable_globalmap();
}
inline const std::string& detect_grpc1Request::_internal_globalmap() const {
  return globalmap_.Get();
}
inline void detect_grpc1Request::_internal_set_globalmap(const std::string& value) {
  
  globalmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc1Request::set_globalmap(std::string&& value) {
  
  globalmap_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc1Request.globalMap)
}
inline void detect_grpc1Request::set_globalmap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  globalmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc1Request.globalMap)
}
inline void detect_grpc1Request::set_globalmap(const void* value,
    size_t size) {
  
  globalmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc1Request.globalMap)
}
inline std::string* detect_grpc1Request::_internal_mutable_globalmap() {
  
  return globalmap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc1Request::release_globalmap() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc1Request.globalMap)
  return globalmap_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc1Request::set_allocated_globalmap(std::string* globalmap) {
  if (globalmap != nullptr) {
    
  } else {
    
  }
  globalmap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), globalmap,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc1Request.globalMap)
}

// bytes floatingMap = 3;
inline void detect_grpc1Request::clear_floatingmap() {
  floatingmap_.ClearToEmpty();
}
inline const std::string& detect_grpc1Request::floatingmap() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc1Request.floatingMap)
  return _internal_floatingmap();
}
inline void detect_grpc1Request::set_floatingmap(const std::string& value) {
  _internal_set_floatingmap(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc1Request.floatingMap)
}
inline std::string* detect_grpc1Request::mutable_floatingmap() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc1Request.floatingMap)
  return _internal_mutable_floatingmap();
}
inline const std::string& detect_grpc1Request::_internal_floatingmap() const {
  return floatingmap_.Get();
}
inline void detect_grpc1Request::_internal_set_floatingmap(const std::string& value) {
  
  floatingmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc1Request::set_floatingmap(std::string&& value) {
  
  floatingmap_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc1Request.floatingMap)
}
inline void detect_grpc1Request::set_floatingmap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  floatingmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc1Request.floatingMap)
}
inline void detect_grpc1Request::set_floatingmap(const void* value,
    size_t size) {
  
  floatingmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc1Request.floatingMap)
}
inline std::string* detect_grpc1Request::_internal_mutable_floatingmap() {
  
  return floatingmap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc1Request::release_floatingmap() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc1Request.floatingMap)
  return floatingmap_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc1Request::set_allocated_floatingmap(std::string* floatingmap) {
  if (floatingmap != nullptr) {
    
  } else {
    
  }
  floatingmap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), floatingmap,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc1Request.floatingMap)
}

// bytes sim3Transform = 4;
inline void detect_grpc1Request::clear_sim3transform() {
  sim3transform_.ClearToEmpty();
}
inline const std::string& detect_grpc1Request::sim3transform() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc1Request.sim3Transform)
  return _internal_sim3transform();
}
inline void detect_grpc1Request::set_sim3transform(const std::string& value) {
  _internal_set_sim3transform(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc1Request.sim3Transform)
}
inline std::string* detect_grpc1Request::mutable_sim3transform() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc1Request.sim3Transform)
  return _internal_mutable_sim3transform();
}
inline const std::string& detect_grpc1Request::_internal_sim3transform() const {
  return sim3transform_.Get();
}
inline void detect_grpc1Request::_internal_set_sim3transform(const std::string& value) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc1Request::set_sim3transform(std::string&& value) {
  
  sim3transform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc1Request.sim3Transform)
}
inline void detect_grpc1Request::set_sim3transform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc1Request.sim3Transform)
}
inline void detect_grpc1Request::set_sim3transform(const void* value,
    size_t size) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc1Request.sim3Transform)
}
inline std::string* detect_grpc1Request::_internal_mutable_sim3transform() {
  
  return sim3transform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc1Request::release_sim3transform() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc1Request.sim3Transform)
  return sim3transform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc1Request::set_allocated_sim3transform(std::string* sim3transform) {
  if (sim3transform != nullptr) {
    
  } else {
    
  }
  sim3transform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sim3transform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc1Request.sim3Transform)
}

// bytes overlapIndices = 5;
inline void detect_grpc1Request::clear_overlapindices() {
  overlapindices_.ClearToEmpty();
}
inline const std::string& detect_grpc1Request::overlapindices() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc1Request.overlapIndices)
  return _internal_overlapindices();
}
inline void detect_grpc1Request::set_overlapindices(const std::string& value) {
  _internal_set_overlapindices(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc1Request.overlapIndices)
}
inline std::string* detect_grpc1Request::mutable_overlapindices() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc1Request.overlapIndices)
  return _internal_mutable_overlapindices();
}
inline const std::string& detect_grpc1Request::_internal_overlapindices() const {
  return overlapindices_.Get();
}
inline void detect_grpc1Request::_internal_set_overlapindices(const std::string& value) {
  
  overlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc1Request::set_overlapindices(std::string&& value) {
  
  overlapindices_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc1Request.overlapIndices)
}
inline void detect_grpc1Request::set_overlapindices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  overlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc1Request.overlapIndices)
}
inline void detect_grpc1Request::set_overlapindices(const void* value,
    size_t size) {
  
  overlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc1Request.overlapIndices)
}
inline std::string* detect_grpc1Request::_internal_mutable_overlapindices() {
  
  return overlapindices_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc1Request::release_overlapindices() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc1Request.overlapIndices)
  return overlapindices_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc1Request::set_allocated_overlapindices(std::string* overlapindices) {
  if (overlapindices != nullptr) {
    
  } else {
    
  }
  overlapindices_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), overlapindices,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc1Request.overlapIndices)
}

// bytes scores = 6;
inline void detect_grpc1Request::clear_scores() {
  scores_.ClearToEmpty();
}
inline const std::string& detect_grpc1Request::scores() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc1Request.scores)
  return _internal_scores();
}
inline void detect_grpc1Request::set_scores(const std::string& value) {
  _internal_set_scores(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc1Request.scores)
}
inline std::string* detect_grpc1Request::mutable_scores() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc1Request.scores)
  return _internal_mutable_scores();
}
inline const std::string& detect_grpc1Request::_internal_scores() const {
  return scores_.Get();
}
inline void detect_grpc1Request::_internal_set_scores(const std::string& value) {
  
  scores_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc1Request::set_scores(std::string&& value) {
  
  scores_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc1Request.scores)
}
inline void detect_grpc1Request::set_scores(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scores_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc1Request.scores)
}
inline void detect_grpc1Request::set_scores(const void* value,
    size_t size) {
  
  scores_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc1Request.scores)
}
inline std::string* detect_grpc1Request::_internal_mutable_scores() {
  
  return scores_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc1Request::release_scores() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc1Request.scores)
  return scores_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc1Request::set_allocated_scores(std::string* scores) {
  if (scores != nullptr) {
    
  } else {
    
  }
  scores_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scores,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc1Request.scores)
}

// -------------------------------------------------------------------

// detect_grpc1Response

// bytes sim3Transform = 1;
inline void detect_grpc1Response::clear_sim3transform() {
  sim3transform_.ClearToEmpty();
}
inline const std::string& detect_grpc1Response::sim3transform() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc1Response.sim3Transform)
  return _internal_sim3transform();
}
inline void detect_grpc1Response::set_sim3transform(const std::string& value) {
  _internal_set_sim3transform(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc1Response.sim3Transform)
}
inline std::string* detect_grpc1Response::mutable_sim3transform() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc1Response.sim3Transform)
  return _internal_mutable_sim3transform();
}
inline const std::string& detect_grpc1Response::_internal_sim3transform() const {
  return sim3transform_.Get();
}
inline void detect_grpc1Response::_internal_set_sim3transform(const std::string& value) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc1Response::set_sim3transform(std::string&& value) {
  
  sim3transform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc1Response.sim3Transform)
}
inline void detect_grpc1Response::set_sim3transform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc1Response.sim3Transform)
}
inline void detect_grpc1Response::set_sim3transform(const void* value,
    size_t size) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc1Response.sim3Transform)
}
inline std::string* detect_grpc1Response::_internal_mutable_sim3transform() {
  
  return sim3transform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc1Response::release_sim3transform() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc1Response.sim3Transform)
  return sim3transform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc1Response::set_allocated_sim3transform(std::string* sim3transform) {
  if (sim3transform != nullptr) {
    
  } else {
    
  }
  sim3transform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sim3transform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc1Response.sim3Transform)
}

// bytes overlapIndices = 2;
inline void detect_grpc1Response::clear_overlapindices() {
  overlapindices_.ClearToEmpty();
}
inline const std::string& detect_grpc1Response::overlapindices() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc1Response.overlapIndices)
  return _internal_overlapindices();
}
inline void detect_grpc1Response::set_overlapindices(const std::string& value) {
  _internal_set_overlapindices(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc1Response.overlapIndices)
}
inline std::string* detect_grpc1Response::mutable_overlapindices() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc1Response.overlapIndices)
  return _internal_mutable_overlapindices();
}
inline const std::string& detect_grpc1Response::_internal_overlapindices() const {
  return overlapindices_.Get();
}
inline void detect_grpc1Response::_internal_set_overlapindices(const std::string& value) {
  
  overlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc1Response::set_overlapindices(std::string&& value) {
  
  overlapindices_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc1Response.overlapIndices)
}
inline void detect_grpc1Response::set_overlapindices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  overlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc1Response.overlapIndices)
}
inline void detect_grpc1Response::set_overlapindices(const void* value,
    size_t size) {
  
  overlapindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc1Response.overlapIndices)
}
inline std::string* detect_grpc1Response::_internal_mutable_overlapindices() {
  
  return overlapindices_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc1Response::release_overlapindices() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc1Response.overlapIndices)
  return overlapindices_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc1Response::set_allocated_overlapindices(std::string* overlapindices) {
  if (overlapindices != nullptr) {
    
  } else {
    
  }
  overlapindices_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), overlapindices,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc1Response.overlapIndices)
}

// bytes scores = 3;
inline void detect_grpc1Response::clear_scores() {
  scores_.ClearToEmpty();
}
inline const std::string& detect_grpc1Response::scores() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc1Response.scores)
  return _internal_scores();
}
inline void detect_grpc1Response::set_scores(const std::string& value) {
  _internal_set_scores(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc1Response.scores)
}
inline std::string* detect_grpc1Response::mutable_scores() {
  // @@protoc_insertion_point(field_mutable:grpcIOverlapDetector.detect_grpc1Response.scores)
  return _internal_mutable_scores();
}
inline const std::string& detect_grpc1Response::_internal_scores() const {
  return scores_.Get();
}
inline void detect_grpc1Response::_internal_set_scores(const std::string& value) {
  
  scores_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detect_grpc1Response::set_scores(std::string&& value) {
  
  scores_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOverlapDetector.detect_grpc1Response.scores)
}
inline void detect_grpc1Response::set_scores(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scores_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOverlapDetector.detect_grpc1Response.scores)
}
inline void detect_grpc1Response::set_scores(const void* value,
    size_t size) {
  
  scores_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOverlapDetector.detect_grpc1Response.scores)
}
inline std::string* detect_grpc1Response::_internal_mutable_scores() {
  
  return scores_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detect_grpc1Response::release_scores() {
  // @@protoc_insertion_point(field_release:grpcIOverlapDetector.detect_grpc1Response.scores)
  return scores_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detect_grpc1Response::set_allocated_scores(std::string* scores) {
  if (scores != nullptr) {
    
  } else {
    
  }
  scores_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scores,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOverlapDetector.detect_grpc1Response.scores)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void detect_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detect_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detect_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIOverlapDetector.detect_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void detect_grpc1Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void detect_grpc1Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIOverlapDetector.detect_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIOverlapDetector

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIOverlapDetectorService_2eproto
