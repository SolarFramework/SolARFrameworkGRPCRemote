// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcICovisibilityGraphManagerService.proto

#include "grpcICovisibilityGraphManagerService.pb.h"
#include "grpcICovisibilityGraphManagerService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcICovisibilityGraphManager {

static const char* grpcICovisibilityGraphManagerService_method_names[] = {
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/increaseEdge",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/decreaseEdge",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/removeEdge",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/getEdge",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/isEdge",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/getAllNodes",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/suppressNode",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/getNeighbors",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/minimalSpanningTree",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/maximalSpanningTree",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/getShortestPath",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/display",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/saveToFile",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/loadFromFile",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/getConstCovisibilityGraph",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/getCovisibilityGraph",
  "/grpcICovisibilityGraphManager.grpcICovisibilityGraphManagerService/setCovisibilityGraph",
};

std::unique_ptr< grpcICovisibilityGraphManagerService::Stub> grpcICovisibilityGraphManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcICovisibilityGraphManagerService::Stub> stub(new grpcICovisibilityGraphManagerService::Stub(channel, options));
  return stub;
}

grpcICovisibilityGraphManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_increaseEdge_(grpcICovisibilityGraphManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_decreaseEdge_(grpcICovisibilityGraphManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeEdge_(grpcICovisibilityGraphManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getEdge_(grpcICovisibilityGraphManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isEdge_(grpcICovisibilityGraphManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllNodes_(grpcICovisibilityGraphManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_suppressNode_(grpcICovisibilityGraphManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNeighbors_(grpcICovisibilityGraphManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_minimalSpanningTree_(grpcICovisibilityGraphManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_maximalSpanningTree_(grpcICovisibilityGraphManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getShortestPath_(grpcICovisibilityGraphManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_display_(grpcICovisibilityGraphManagerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveToFile_(grpcICovisibilityGraphManagerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadFromFile_(grpcICovisibilityGraphManagerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getConstCovisibilityGraph_(grpcICovisibilityGraphManagerService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCovisibilityGraph_(grpcICovisibilityGraphManagerService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setCovisibilityGraph_(grpcICovisibilityGraphManagerService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::increaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::increaseEdgeRequest& request, ::grpcICovisibilityGraphManager::increaseEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::increaseEdgeRequest, ::grpcICovisibilityGraphManager::increaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_increaseEdge_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::increaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::increaseEdgeRequest* request, ::grpcICovisibilityGraphManager::increaseEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::increaseEdgeRequest, ::grpcICovisibilityGraphManager::increaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_increaseEdge_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::increaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::increaseEdgeRequest* request, ::grpcICovisibilityGraphManager::increaseEdgeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_increaseEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::increaseEdgeResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncincreaseEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::increaseEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::increaseEdgeResponse, ::grpcICovisibilityGraphManager::increaseEdgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_increaseEdge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::increaseEdgeResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncincreaseEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::increaseEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncincreaseEdgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::decreaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::decreaseEdgeRequest& request, ::grpcICovisibilityGraphManager::decreaseEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::decreaseEdgeRequest, ::grpcICovisibilityGraphManager::decreaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_decreaseEdge_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::decreaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::decreaseEdgeRequest* request, ::grpcICovisibilityGraphManager::decreaseEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::decreaseEdgeRequest, ::grpcICovisibilityGraphManager::decreaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_decreaseEdge_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::decreaseEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::decreaseEdgeRequest* request, ::grpcICovisibilityGraphManager::decreaseEdgeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_decreaseEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::decreaseEdgeResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncdecreaseEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::decreaseEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::decreaseEdgeResponse, ::grpcICovisibilityGraphManager::decreaseEdgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_decreaseEdge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::decreaseEdgeResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncdecreaseEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::decreaseEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdecreaseEdgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::removeEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::removeEdgeRequest& request, ::grpcICovisibilityGraphManager::removeEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::removeEdgeRequest, ::grpcICovisibilityGraphManager::removeEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeEdge_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::removeEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::removeEdgeRequest* request, ::grpcICovisibilityGraphManager::removeEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::removeEdgeRequest, ::grpcICovisibilityGraphManager::removeEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeEdge_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::removeEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::removeEdgeRequest* request, ::grpcICovisibilityGraphManager::removeEdgeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::removeEdgeResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncremoveEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::removeEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::removeEdgeResponse, ::grpcICovisibilityGraphManager::removeEdgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeEdge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::removeEdgeResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncremoveEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::removeEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveEdgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::getEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getEdgeRequest& request, ::grpcICovisibilityGraphManager::getEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::getEdgeRequest, ::grpcICovisibilityGraphManager::getEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getEdge_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::getEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getEdgeRequest* request, ::grpcICovisibilityGraphManager::getEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::getEdgeRequest, ::grpcICovisibilityGraphManager::getEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEdge_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::getEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getEdgeRequest* request, ::grpcICovisibilityGraphManager::getEdgeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getEdgeResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncgetEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::getEdgeResponse, ::grpcICovisibilityGraphManager::getEdgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getEdge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getEdgeResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncgetEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetEdgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::isEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::isEdgeRequest& request, ::grpcICovisibilityGraphManager::isEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::isEdgeRequest, ::grpcICovisibilityGraphManager::isEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isEdge_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::isEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::isEdgeRequest* request, ::grpcICovisibilityGraphManager::isEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::isEdgeRequest, ::grpcICovisibilityGraphManager::isEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEdge_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::isEdge(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::isEdgeRequest* request, ::grpcICovisibilityGraphManager::isEdgeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::isEdgeResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncisEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::isEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::isEdgeResponse, ::grpcICovisibilityGraphManager::isEdgeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isEdge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::isEdgeResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncisEdgeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::isEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisEdgeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::getAllNodes(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getAllNodesRequest& request, ::grpcICovisibilityGraphManager::getAllNodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::getAllNodesRequest, ::grpcICovisibilityGraphManager::getAllNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllNodes_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::getAllNodes(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getAllNodesRequest* request, ::grpcICovisibilityGraphManager::getAllNodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::getAllNodesRequest, ::grpcICovisibilityGraphManager::getAllNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllNodes_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::getAllNodes(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getAllNodesRequest* request, ::grpcICovisibilityGraphManager::getAllNodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllNodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getAllNodesResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncgetAllNodesRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getAllNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::getAllNodesResponse, ::grpcICovisibilityGraphManager::getAllNodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllNodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getAllNodesResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncgetAllNodesRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getAllNodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllNodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::suppressNode(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::suppressNodeRequest& request, ::grpcICovisibilityGraphManager::suppressNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::suppressNodeRequest, ::grpcICovisibilityGraphManager::suppressNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_suppressNode_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::suppressNode(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::suppressNodeRequest* request, ::grpcICovisibilityGraphManager::suppressNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::suppressNodeRequest, ::grpcICovisibilityGraphManager::suppressNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_suppressNode_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::suppressNode(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::suppressNodeRequest* request, ::grpcICovisibilityGraphManager::suppressNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_suppressNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::suppressNodeResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncsuppressNodeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::suppressNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::suppressNodeResponse, ::grpcICovisibilityGraphManager::suppressNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_suppressNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::suppressNodeResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncsuppressNodeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::suppressNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsuppressNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::getNeighbors(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getNeighborsRequest& request, ::grpcICovisibilityGraphManager::getNeighborsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::getNeighborsRequest, ::grpcICovisibilityGraphManager::getNeighborsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNeighbors_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::getNeighbors(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getNeighborsRequest* request, ::grpcICovisibilityGraphManager::getNeighborsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::getNeighborsRequest, ::grpcICovisibilityGraphManager::getNeighborsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNeighbors_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::getNeighbors(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getNeighborsRequest* request, ::grpcICovisibilityGraphManager::getNeighborsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNeighbors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getNeighborsResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncgetNeighborsRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getNeighborsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::getNeighborsResponse, ::grpcICovisibilityGraphManager::getNeighborsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNeighbors_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getNeighborsResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncgetNeighborsRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getNeighborsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNeighborsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::minimalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest& request, ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest, ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_minimalSpanningTree_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::minimalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest* request, ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest, ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_minimalSpanningTree_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::minimalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest* request, ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_minimalSpanningTree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncminimalSpanningTreeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse, ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_minimalSpanningTree_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncminimalSpanningTreeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncminimalSpanningTreeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::maximalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest& request, ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest, ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_maximalSpanningTree_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::maximalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest* request, ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest, ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_maximalSpanningTree_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::maximalSpanningTree(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest* request, ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_maximalSpanningTree_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncmaximalSpanningTreeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse, ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_maximalSpanningTree_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncmaximalSpanningTreeRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmaximalSpanningTreeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::getShortestPath(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getShortestPathRequest& request, ::grpcICovisibilityGraphManager::getShortestPathResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::getShortestPathRequest, ::grpcICovisibilityGraphManager::getShortestPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getShortestPath_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::getShortestPath(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getShortestPathRequest* request, ::grpcICovisibilityGraphManager::getShortestPathResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::getShortestPathRequest, ::grpcICovisibilityGraphManager::getShortestPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getShortestPath_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::getShortestPath(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getShortestPathRequest* request, ::grpcICovisibilityGraphManager::getShortestPathResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getShortestPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getShortestPathResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncgetShortestPathRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getShortestPathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::getShortestPathResponse, ::grpcICovisibilityGraphManager::getShortestPathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getShortestPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getShortestPathResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncgetShortestPathRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getShortestPathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetShortestPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::display(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcICovisibilityGraphManager::displayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcICovisibilityGraphManager::displayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_display_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::display(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcICovisibilityGraphManager::displayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcICovisibilityGraphManager::displayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_display_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::display(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcICovisibilityGraphManager::displayResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_display_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::displayResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncdisplayRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::displayResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_display_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::displayResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncdisplayRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdisplayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::saveToFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::saveToFileRequest& request, ::grpcICovisibilityGraphManager::saveToFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::saveToFileRequest, ::grpcICovisibilityGraphManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveToFile_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::saveToFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::saveToFileRequest* request, ::grpcICovisibilityGraphManager::saveToFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::saveToFileRequest, ::grpcICovisibilityGraphManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::saveToFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::saveToFileRequest* request, ::grpcICovisibilityGraphManager::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::saveToFileResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::saveToFileResponse, ::grpcICovisibilityGraphManager::saveToFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveToFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::saveToFileResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveToFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::loadFromFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::loadFromFileRequest& request, ::grpcICovisibilityGraphManager::loadFromFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::loadFromFileRequest, ::grpcICovisibilityGraphManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadFromFile_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::loadFromFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::loadFromFileRequest* request, ::grpcICovisibilityGraphManager::loadFromFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::loadFromFileRequest, ::grpcICovisibilityGraphManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::loadFromFile(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::loadFromFileRequest* request, ::grpcICovisibilityGraphManager::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::loadFromFileResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::loadFromFileResponse, ::grpcICovisibilityGraphManager::loadFromFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadFromFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::loadFromFileResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadFromFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::getConstCovisibilityGraph(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getConstCovisibilityGraph_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::getConstCovisibilityGraph(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConstCovisibilityGraph_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::getConstCovisibilityGraph(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConstCovisibilityGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncgetConstCovisibilityGraphRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getConstCovisibilityGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncgetConstCovisibilityGraphRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetConstCovisibilityGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::getCovisibilityGraph(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest& request, ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest, ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getCovisibilityGraph_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::getCovisibilityGraph(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest* request, ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest, ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCovisibilityGraph_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::getCovisibilityGraph(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest* request, ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCovisibilityGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncgetCovisibilityGraphRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse, ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getCovisibilityGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse>* grpcICovisibilityGraphManagerService::Stub::AsyncgetCovisibilityGraphRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetCovisibilityGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICovisibilityGraphManagerService::Stub::setCovisibilityGraph(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setCovisibilityGraph_, context, request, response);
}

void grpcICovisibilityGraphManagerService::Stub::async::setCovisibilityGraph(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCovisibilityGraph_, context, request, response, std::move(f));
}

void grpcICovisibilityGraphManagerService::Stub::async::setCovisibilityGraph(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCovisibilityGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcICovisibilityGraphManagerService::Stub::PrepareAsyncsetCovisibilityGraphRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setCovisibilityGraph_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcICovisibilityGraphManagerService::Stub::AsyncsetCovisibilityGraphRaw(::grpc::ClientContext* context, const ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetCovisibilityGraphRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcICovisibilityGraphManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::increaseEdgeRequest, ::grpcICovisibilityGraphManager::increaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::increaseEdgeRequest* req,
             ::grpcICovisibilityGraphManager::increaseEdgeResponse* resp) {
               return service->increaseEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::decreaseEdgeRequest, ::grpcICovisibilityGraphManager::decreaseEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::decreaseEdgeRequest* req,
             ::grpcICovisibilityGraphManager::decreaseEdgeResponse* resp) {
               return service->decreaseEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::removeEdgeRequest, ::grpcICovisibilityGraphManager::removeEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::removeEdgeRequest* req,
             ::grpcICovisibilityGraphManager::removeEdgeResponse* resp) {
               return service->removeEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::getEdgeRequest, ::grpcICovisibilityGraphManager::getEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::getEdgeRequest* req,
             ::grpcICovisibilityGraphManager::getEdgeResponse* resp) {
               return service->getEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::isEdgeRequest, ::grpcICovisibilityGraphManager::isEdgeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::isEdgeRequest* req,
             ::grpcICovisibilityGraphManager::isEdgeResponse* resp) {
               return service->isEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::getAllNodesRequest, ::grpcICovisibilityGraphManager::getAllNodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::getAllNodesRequest* req,
             ::grpcICovisibilityGraphManager::getAllNodesResponse* resp) {
               return service->getAllNodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::suppressNodeRequest, ::grpcICovisibilityGraphManager::suppressNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::suppressNodeRequest* req,
             ::grpcICovisibilityGraphManager::suppressNodeResponse* resp) {
               return service->suppressNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::getNeighborsRequest, ::grpcICovisibilityGraphManager::getNeighborsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::getNeighborsRequest* req,
             ::grpcICovisibilityGraphManager::getNeighborsResponse* resp) {
               return service->getNeighbors(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest, ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest* req,
             ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse* resp) {
               return service->minimalSpanningTree(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest, ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest* req,
             ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse* resp) {
               return service->maximalSpanningTree(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::getShortestPathRequest, ::grpcICovisibilityGraphManager::getShortestPathResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::getShortestPathRequest* req,
             ::grpcICovisibilityGraphManager::getShortestPathResponse* resp) {
               return service->getShortestPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::google::protobuf::Empty, ::grpcICovisibilityGraphManager::displayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcICovisibilityGraphManager::displayResponse* resp) {
               return service->display(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::saveToFileRequest, ::grpcICovisibilityGraphManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::saveToFileRequest* req,
             ::grpcICovisibilityGraphManager::saveToFileResponse* resp) {
               return service->saveToFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::loadFromFileRequest, ::grpcICovisibilityGraphManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::loadFromFileRequest* req,
             ::grpcICovisibilityGraphManager::loadFromFileResponse* resp) {
               return service->loadFromFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::google::protobuf::Empty, ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse* resp) {
               return service->getConstCovisibilityGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest, ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest* req,
             ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse* resp) {
               return service->getCovisibilityGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICovisibilityGraphManagerService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICovisibilityGraphManagerService::Service, ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICovisibilityGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setCovisibilityGraph(ctx, req, resp);
             }, this)));
}

grpcICovisibilityGraphManagerService::Service::~Service() {
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::increaseEdge(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::increaseEdgeRequest* request, ::grpcICovisibilityGraphManager::increaseEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::decreaseEdge(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::decreaseEdgeRequest* request, ::grpcICovisibilityGraphManager::decreaseEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::removeEdge(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::removeEdgeRequest* request, ::grpcICovisibilityGraphManager::removeEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::getEdge(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::getEdgeRequest* request, ::grpcICovisibilityGraphManager::getEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::isEdge(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::isEdgeRequest* request, ::grpcICovisibilityGraphManager::isEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::getAllNodes(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::getAllNodesRequest* request, ::grpcICovisibilityGraphManager::getAllNodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::suppressNode(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::suppressNodeRequest* request, ::grpcICovisibilityGraphManager::suppressNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::getNeighbors(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::getNeighborsRequest* request, ::grpcICovisibilityGraphManager::getNeighborsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::minimalSpanningTree(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest* request, ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::maximalSpanningTree(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest* request, ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::getShortestPath(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::getShortestPathRequest* request, ::grpcICovisibilityGraphManager::getShortestPathResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::display(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcICovisibilityGraphManager::displayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::saveToFile(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::saveToFileRequest* request, ::grpcICovisibilityGraphManager::saveToFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::loadFromFile(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::loadFromFileRequest* request, ::grpcICovisibilityGraphManager::loadFromFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::getConstCovisibilityGraph(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::getCovisibilityGraph(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest* request, ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICovisibilityGraphManagerService::Service::setCovisibilityGraph(::grpc::ServerContext* context, const ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcICovisibilityGraphManager

