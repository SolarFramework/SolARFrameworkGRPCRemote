// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIImageRectificationService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIImageRectificationService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIImageRectificationService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIImageRectificationService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIImageRectificationService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIImageRectificationService_2eproto;
namespace grpcIImageRectification {
class rectifyRequest;
struct rectifyRequestDefaultTypeInternal;
extern rectifyRequestDefaultTypeInternal _rectifyRequest_default_instance_;
class rectifyResponse;
struct rectifyResponseDefaultTypeInternal;
extern rectifyResponseDefaultTypeInternal _rectifyResponse_default_instance_;
}  // namespace grpcIImageRectification
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIImageRectification::rectifyRequest* Arena::CreateMaybeMessage<::grpcIImageRectification::rectifyRequest>(Arena*);
template<> ::grpcIImageRectification::rectifyResponse* Arena::CreateMaybeMessage<::grpcIImageRectification::rectifyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIImageRectification {

// ===================================================================

class rectifyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIImageRectification.rectifyRequest) */ {
 public:
  inline rectifyRequest() : rectifyRequest(nullptr) {}
  ~rectifyRequest() override;
  explicit PROTOBUF_CONSTEXPR rectifyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  rectifyRequest(const rectifyRequest& from);
  rectifyRequest(rectifyRequest&& from) noexcept
    : rectifyRequest() {
    *this = ::std::move(from);
  }

  inline rectifyRequest& operator=(const rectifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline rectifyRequest& operator=(rectifyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const rectifyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const rectifyRequest* internal_default_instance() {
    return reinterpret_cast<const rectifyRequest*>(
               &_rectifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(rectifyRequest& a, rectifyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(rectifyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rectifyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  rectifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<rectifyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const rectifyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const rectifyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rectifyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIImageRectification.rectifyRequest";
  }
  protected:
  explicit rectifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kCamParamsFieldNumber = 3,
    kRectParamsFieldNumber = 4,
    kRectifiedImageFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes camParams = 3;
  void clear_camparams();
  const std::string& camparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams();
  PROTOBUF_NODISCARD std::string* release_camparams();
  void set_allocated_camparams(std::string* camparams);
  private:
  const std::string& _internal_camparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams(const std::string& value);
  std::string* _internal_mutable_camparams();
  public:

  // bytes rectParams = 4;
  void clear_rectparams();
  const std::string& rectparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectparams();
  PROTOBUF_NODISCARD std::string* release_rectparams();
  void set_allocated_rectparams(std::string* rectparams);
  private:
  const std::string& _internal_rectparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectparams(const std::string& value);
  std::string* _internal_mutable_rectparams();
  public:

  // bytes rectifiedImage = 5;
  void clear_rectifiedimage();
  const std::string& rectifiedimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectifiedimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectifiedimage();
  PROTOBUF_NODISCARD std::string* release_rectifiedimage();
  void set_allocated_rectifiedimage(std::string* rectifiedimage);
  private:
  const std::string& _internal_rectifiedimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectifiedimage(const std::string& value);
  std::string* _internal_mutable_rectifiedimage();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIImageRectification.rectifyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectifiedimage_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIImageRectificationService_2eproto;
};
// -------------------------------------------------------------------

class rectifyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIImageRectification.rectifyResponse) */ {
 public:
  inline rectifyResponse() : rectifyResponse(nullptr) {}
  ~rectifyResponse() override;
  explicit PROTOBUF_CONSTEXPR rectifyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  rectifyResponse(const rectifyResponse& from);
  rectifyResponse(rectifyResponse&& from) noexcept
    : rectifyResponse() {
    *this = ::std::move(from);
  }

  inline rectifyResponse& operator=(const rectifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline rectifyResponse& operator=(rectifyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const rectifyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const rectifyResponse* internal_default_instance() {
    return reinterpret_cast<const rectifyResponse*>(
               &_rectifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(rectifyResponse& a, rectifyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(rectifyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rectifyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  rectifyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<rectifyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const rectifyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const rectifyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rectifyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIImageRectification.rectifyResponse";
  }
  protected:
  explicit rectifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectifiedImageFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes rectifiedImage = 1;
  void clear_rectifiedimage();
  const std::string& rectifiedimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectifiedimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectifiedimage();
  PROTOBUF_NODISCARD std::string* release_rectifiedimage();
  void set_allocated_rectifiedimage(std::string* rectifiedimage);
  private:
  const std::string& _internal_rectifiedimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectifiedimage(const std::string& value);
  std::string* _internal_mutable_rectifiedimage();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIImageRectification.rectifyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectifiedimage_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIImageRectificationService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rectifyRequest

// int32 grpcServerCompressionFormat = 1;
inline void rectifyRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t rectifyRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t rectifyRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIImageRectification.rectifyRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void rectifyRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void rectifyRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIImageRectification.rectifyRequest.grpcServerCompressionFormat)
}

// bytes image = 2;
inline void rectifyRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& rectifyRequest::image() const {
  // @@protoc_insertion_point(field_get:grpcIImageRectification.rectifyRequest.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void rectifyRequest::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageRectification.rectifyRequest.image)
}
inline std::string* rectifyRequest::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:grpcIImageRectification.rectifyRequest.image)
  return _s;
}
inline const std::string& rectifyRequest::_internal_image() const {
  return image_.Get();
}
inline void rectifyRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(value, GetArenaForAllocation());
}
inline std::string* rectifyRequest::_internal_mutable_image() {
  
  return image_.Mutable(GetArenaForAllocation());
}
inline std::string* rectifyRequest::release_image() {
  // @@protoc_insertion_point(field_release:grpcIImageRectification.rectifyRequest.image)
  return image_.Release();
}
inline void rectifyRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault()) {
    image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIImageRectification.rectifyRequest.image)
}

// bytes camParams = 3;
inline void rectifyRequest::clear_camparams() {
  camparams_.ClearToEmpty();
}
inline const std::string& rectifyRequest::camparams() const {
  // @@protoc_insertion_point(field_get:grpcIImageRectification.rectifyRequest.camParams)
  return _internal_camparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void rectifyRequest::set_camparams(ArgT0&& arg0, ArgT... args) {
 
 camparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageRectification.rectifyRequest.camParams)
}
inline std::string* rectifyRequest::mutable_camparams() {
  std::string* _s = _internal_mutable_camparams();
  // @@protoc_insertion_point(field_mutable:grpcIImageRectification.rectifyRequest.camParams)
  return _s;
}
inline const std::string& rectifyRequest::_internal_camparams() const {
  return camparams_.Get();
}
inline void rectifyRequest::_internal_set_camparams(const std::string& value) {
  
  camparams_.Set(value, GetArenaForAllocation());
}
inline std::string* rectifyRequest::_internal_mutable_camparams() {
  
  return camparams_.Mutable(GetArenaForAllocation());
}
inline std::string* rectifyRequest::release_camparams() {
  // @@protoc_insertion_point(field_release:grpcIImageRectification.rectifyRequest.camParams)
  return camparams_.Release();
}
inline void rectifyRequest::set_allocated_camparams(std::string* camparams) {
  if (camparams != nullptr) {
    
  } else {
    
  }
  camparams_.SetAllocated(camparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams_.IsDefault()) {
    camparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIImageRectification.rectifyRequest.camParams)
}

// bytes rectParams = 4;
inline void rectifyRequest::clear_rectparams() {
  rectparams_.ClearToEmpty();
}
inline const std::string& rectifyRequest::rectparams() const {
  // @@protoc_insertion_point(field_get:grpcIImageRectification.rectifyRequest.rectParams)
  return _internal_rectparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void rectifyRequest::set_rectparams(ArgT0&& arg0, ArgT... args) {
 
 rectparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageRectification.rectifyRequest.rectParams)
}
inline std::string* rectifyRequest::mutable_rectparams() {
  std::string* _s = _internal_mutable_rectparams();
  // @@protoc_insertion_point(field_mutable:grpcIImageRectification.rectifyRequest.rectParams)
  return _s;
}
inline const std::string& rectifyRequest::_internal_rectparams() const {
  return rectparams_.Get();
}
inline void rectifyRequest::_internal_set_rectparams(const std::string& value) {
  
  rectparams_.Set(value, GetArenaForAllocation());
}
inline std::string* rectifyRequest::_internal_mutable_rectparams() {
  
  return rectparams_.Mutable(GetArenaForAllocation());
}
inline std::string* rectifyRequest::release_rectparams() {
  // @@protoc_insertion_point(field_release:grpcIImageRectification.rectifyRequest.rectParams)
  return rectparams_.Release();
}
inline void rectifyRequest::set_allocated_rectparams(std::string* rectparams) {
  if (rectparams != nullptr) {
    
  } else {
    
  }
  rectparams_.SetAllocated(rectparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectparams_.IsDefault()) {
    rectparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIImageRectification.rectifyRequest.rectParams)
}

// bytes rectifiedImage = 5;
inline void rectifyRequest::clear_rectifiedimage() {
  rectifiedimage_.ClearToEmpty();
}
inline const std::string& rectifyRequest::rectifiedimage() const {
  // @@protoc_insertion_point(field_get:grpcIImageRectification.rectifyRequest.rectifiedImage)
  return _internal_rectifiedimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void rectifyRequest::set_rectifiedimage(ArgT0&& arg0, ArgT... args) {
 
 rectifiedimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageRectification.rectifyRequest.rectifiedImage)
}
inline std::string* rectifyRequest::mutable_rectifiedimage() {
  std::string* _s = _internal_mutable_rectifiedimage();
  // @@protoc_insertion_point(field_mutable:grpcIImageRectification.rectifyRequest.rectifiedImage)
  return _s;
}
inline const std::string& rectifyRequest::_internal_rectifiedimage() const {
  return rectifiedimage_.Get();
}
inline void rectifyRequest::_internal_set_rectifiedimage(const std::string& value) {
  
  rectifiedimage_.Set(value, GetArenaForAllocation());
}
inline std::string* rectifyRequest::_internal_mutable_rectifiedimage() {
  
  return rectifiedimage_.Mutable(GetArenaForAllocation());
}
inline std::string* rectifyRequest::release_rectifiedimage() {
  // @@protoc_insertion_point(field_release:grpcIImageRectification.rectifyRequest.rectifiedImage)
  return rectifiedimage_.Release();
}
inline void rectifyRequest::set_allocated_rectifiedimage(std::string* rectifiedimage) {
  if (rectifiedimage != nullptr) {
    
  } else {
    
  }
  rectifiedimage_.SetAllocated(rectifiedimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectifiedimage_.IsDefault()) {
    rectifiedimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIImageRectification.rectifyRequest.rectifiedImage)
}

// -------------------------------------------------------------------

// rectifyResponse

// bytes rectifiedImage = 1;
inline void rectifyResponse::clear_rectifiedimage() {
  rectifiedimage_.ClearToEmpty();
}
inline const std::string& rectifyResponse::rectifiedimage() const {
  // @@protoc_insertion_point(field_get:grpcIImageRectification.rectifyResponse.rectifiedImage)
  return _internal_rectifiedimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void rectifyResponse::set_rectifiedimage(ArgT0&& arg0, ArgT... args) {
 
 rectifiedimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageRectification.rectifyResponse.rectifiedImage)
}
inline std::string* rectifyResponse::mutable_rectifiedimage() {
  std::string* _s = _internal_mutable_rectifiedimage();
  // @@protoc_insertion_point(field_mutable:grpcIImageRectification.rectifyResponse.rectifiedImage)
  return _s;
}
inline const std::string& rectifyResponse::_internal_rectifiedimage() const {
  return rectifiedimage_.Get();
}
inline void rectifyResponse::_internal_set_rectifiedimage(const std::string& value) {
  
  rectifiedimage_.Set(value, GetArenaForAllocation());
}
inline std::string* rectifyResponse::_internal_mutable_rectifiedimage() {
  
  return rectifiedimage_.Mutable(GetArenaForAllocation());
}
inline std::string* rectifyResponse::release_rectifiedimage() {
  // @@protoc_insertion_point(field_release:grpcIImageRectification.rectifyResponse.rectifiedImage)
  return rectifiedimage_.Release();
}
inline void rectifyResponse::set_allocated_rectifiedimage(std::string* rectifiedimage) {
  if (rectifiedimage != nullptr) {
    
  } else {
    
  }
  rectifiedimage_.SetAllocated(rectifiedimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectifiedimage_.IsDefault()) {
    rectifiedimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIImageRectification.rectifyResponse.rectifiedImage)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void rectifyResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t rectifyResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t rectifyResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIImageRectification.rectifyResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void rectifyResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void rectifyResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIImageRectification.rectifyResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIImageRectification

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIImageRectificationService_2eproto
