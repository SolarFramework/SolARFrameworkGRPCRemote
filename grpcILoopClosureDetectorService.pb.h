// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcILoopClosureDetectorService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcILoopClosureDetectorService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcILoopClosureDetectorService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcILoopClosureDetectorService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcILoopClosureDetectorService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcILoopClosureDetectorService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcILoopClosureDetectorService_2eproto_metadata_getter(int index);
namespace grpcILoopClosureDetector {
class detectRequest;
struct detectRequestDefaultTypeInternal;
extern detectRequestDefaultTypeInternal _detectRequest_default_instance_;
class detectResponse;
struct detectResponseDefaultTypeInternal;
extern detectResponseDefaultTypeInternal _detectResponse_default_instance_;
class setCameraParametersRequest;
struct setCameraParametersRequestDefaultTypeInternal;
extern setCameraParametersRequestDefaultTypeInternal _setCameraParametersRequest_default_instance_;
}  // namespace grpcILoopClosureDetector
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcILoopClosureDetector::detectRequest* Arena::CreateMaybeMessage<::grpcILoopClosureDetector::detectRequest>(Arena*);
template<> ::grpcILoopClosureDetector::detectResponse* Arena::CreateMaybeMessage<::grpcILoopClosureDetector::detectResponse>(Arena*);
template<> ::grpcILoopClosureDetector::setCameraParametersRequest* Arena::CreateMaybeMessage<::grpcILoopClosureDetector::setCameraParametersRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcILoopClosureDetector {

// ===================================================================

class setCameraParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcILoopClosureDetector.setCameraParametersRequest) */ {
 public:
  inline setCameraParametersRequest() : setCameraParametersRequest(nullptr) {}
  virtual ~setCameraParametersRequest();
  explicit constexpr setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParametersRequest(const setCameraParametersRequest& from);
  setCameraParametersRequest(setCameraParametersRequest&& from) noexcept
    : setCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline setCameraParametersRequest& operator=(const setCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParametersRequest& operator=(setCameraParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setCameraParametersRequest*>(
               &_setCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setCameraParametersRequest& a, setCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setCameraParametersRequest* New() const final {
    return CreateMaybeMessage<setCameraParametersRequest>(nullptr);
  }

  setCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setCameraParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setCameraParametersRequest& from);
  void MergeFrom(const setCameraParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcILoopClosureDetector.setCameraParametersRequest";
  }
  protected:
  explicit setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcILoopClosureDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntrinsicParamsFieldNumber = 1,
    kDistortionParamsFieldNumber = 2,
  };
  // bytes intrinsicParams = 1;
  void clear_intrinsicparams();
  const std::string& intrinsicparams() const;
  void set_intrinsicparams(const std::string& value);
  void set_intrinsicparams(std::string&& value);
  void set_intrinsicparams(const char* value);
  void set_intrinsicparams(const void* value, size_t size);
  std::string* mutable_intrinsicparams();
  std::string* release_intrinsicparams();
  void set_allocated_intrinsicparams(std::string* intrinsicparams);
  private:
  const std::string& _internal_intrinsicparams() const;
  void _internal_set_intrinsicparams(const std::string& value);
  std::string* _internal_mutable_intrinsicparams();
  public:

  // bytes distortionParams = 2;
  void clear_distortionparams();
  const std::string& distortionparams() const;
  void set_distortionparams(const std::string& value);
  void set_distortionparams(std::string&& value);
  void set_distortionparams(const char* value);
  void set_distortionparams(const void* value, size_t size);
  std::string* mutable_distortionparams();
  std::string* release_distortionparams();
  void set_allocated_distortionparams(std::string* distortionparams);
  private:
  const std::string& _internal_distortionparams() const;
  void _internal_set_distortionparams(const std::string& value);
  std::string* _internal_mutable_distortionparams();
  public:

  // @@protoc_insertion_point(class_scope:grpcILoopClosureDetector.setCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intrinsicparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distortionparams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcILoopClosureDetectorService_2eproto;
};
// -------------------------------------------------------------------

class detectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcILoopClosureDetector.detectRequest) */ {
 public:
  inline detectRequest() : detectRequest(nullptr) {}
  virtual ~detectRequest();
  explicit constexpr detectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  detectRequest(const detectRequest& from);
  detectRequest(detectRequest&& from) noexcept
    : detectRequest() {
    *this = ::std::move(from);
  }

  inline detectRequest& operator=(const detectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline detectRequest& operator=(detectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const detectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const detectRequest* internal_default_instance() {
    return reinterpret_cast<const detectRequest*>(
               &_detectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(detectRequest& a, detectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(detectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(detectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline detectRequest* New() const final {
    return CreateMaybeMessage<detectRequest>(nullptr);
  }

  detectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<detectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const detectRequest& from);
  void MergeFrom(const detectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(detectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcILoopClosureDetector.detectRequest";
  }
  protected:
  explicit detectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcILoopClosureDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryKeyframeFieldNumber = 1,
    kDetectedLoopKeyframeFieldNumber = 2,
    kSim3TransformFieldNumber = 3,
    kDuplicatedPointsIndicesFieldNumber = 4,
  };
  // bytes queryKeyframe = 1;
  void clear_querykeyframe();
  const std::string& querykeyframe() const;
  void set_querykeyframe(const std::string& value);
  void set_querykeyframe(std::string&& value);
  void set_querykeyframe(const char* value);
  void set_querykeyframe(const void* value, size_t size);
  std::string* mutable_querykeyframe();
  std::string* release_querykeyframe();
  void set_allocated_querykeyframe(std::string* querykeyframe);
  private:
  const std::string& _internal_querykeyframe() const;
  void _internal_set_querykeyframe(const std::string& value);
  std::string* _internal_mutable_querykeyframe();
  public:

  // bytes detectedLoopKeyframe = 2;
  void clear_detectedloopkeyframe();
  const std::string& detectedloopkeyframe() const;
  void set_detectedloopkeyframe(const std::string& value);
  void set_detectedloopkeyframe(std::string&& value);
  void set_detectedloopkeyframe(const char* value);
  void set_detectedloopkeyframe(const void* value, size_t size);
  std::string* mutable_detectedloopkeyframe();
  std::string* release_detectedloopkeyframe();
  void set_allocated_detectedloopkeyframe(std::string* detectedloopkeyframe);
  private:
  const std::string& _internal_detectedloopkeyframe() const;
  void _internal_set_detectedloopkeyframe(const std::string& value);
  std::string* _internal_mutable_detectedloopkeyframe();
  public:

  // bytes sim3Transform = 3;
  void clear_sim3transform();
  const std::string& sim3transform() const;
  void set_sim3transform(const std::string& value);
  void set_sim3transform(std::string&& value);
  void set_sim3transform(const char* value);
  void set_sim3transform(const void* value, size_t size);
  std::string* mutable_sim3transform();
  std::string* release_sim3transform();
  void set_allocated_sim3transform(std::string* sim3transform);
  private:
  const std::string& _internal_sim3transform() const;
  void _internal_set_sim3transform(const std::string& value);
  std::string* _internal_mutable_sim3transform();
  public:

  // bytes duplicatedPointsIndices = 4;
  void clear_duplicatedpointsindices();
  const std::string& duplicatedpointsindices() const;
  void set_duplicatedpointsindices(const std::string& value);
  void set_duplicatedpointsindices(std::string&& value);
  void set_duplicatedpointsindices(const char* value);
  void set_duplicatedpointsindices(const void* value, size_t size);
  std::string* mutable_duplicatedpointsindices();
  std::string* release_duplicatedpointsindices();
  void set_allocated_duplicatedpointsindices(std::string* duplicatedpointsindices);
  private:
  const std::string& _internal_duplicatedpointsindices() const;
  void _internal_set_duplicatedpointsindices(const std::string& value);
  std::string* _internal_mutable_duplicatedpointsindices();
  public:

  // @@protoc_insertion_point(class_scope:grpcILoopClosureDetector.detectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr querykeyframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detectedloopkeyframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim3transform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duplicatedpointsindices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcILoopClosureDetectorService_2eproto;
};
// -------------------------------------------------------------------

class detectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcILoopClosureDetector.detectResponse) */ {
 public:
  inline detectResponse() : detectResponse(nullptr) {}
  virtual ~detectResponse();
  explicit constexpr detectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  detectResponse(const detectResponse& from);
  detectResponse(detectResponse&& from) noexcept
    : detectResponse() {
    *this = ::std::move(from);
  }

  inline detectResponse& operator=(const detectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline detectResponse& operator=(detectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const detectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const detectResponse* internal_default_instance() {
    return reinterpret_cast<const detectResponse*>(
               &_detectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(detectResponse& a, detectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(detectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(detectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline detectResponse* New() const final {
    return CreateMaybeMessage<detectResponse>(nullptr);
  }

  detectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<detectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const detectResponse& from);
  void MergeFrom(const detectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(detectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcILoopClosureDetector.detectResponse";
  }
  protected:
  explicit detectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcILoopClosureDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectedLoopKeyframeFieldNumber = 1,
    kSim3TransformFieldNumber = 2,
    kDuplicatedPointsIndicesFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes detectedLoopKeyframe = 1;
  void clear_detectedloopkeyframe();
  const std::string& detectedloopkeyframe() const;
  void set_detectedloopkeyframe(const std::string& value);
  void set_detectedloopkeyframe(std::string&& value);
  void set_detectedloopkeyframe(const char* value);
  void set_detectedloopkeyframe(const void* value, size_t size);
  std::string* mutable_detectedloopkeyframe();
  std::string* release_detectedloopkeyframe();
  void set_allocated_detectedloopkeyframe(std::string* detectedloopkeyframe);
  private:
  const std::string& _internal_detectedloopkeyframe() const;
  void _internal_set_detectedloopkeyframe(const std::string& value);
  std::string* _internal_mutable_detectedloopkeyframe();
  public:

  // bytes sim3Transform = 2;
  void clear_sim3transform();
  const std::string& sim3transform() const;
  void set_sim3transform(const std::string& value);
  void set_sim3transform(std::string&& value);
  void set_sim3transform(const char* value);
  void set_sim3transform(const void* value, size_t size);
  std::string* mutable_sim3transform();
  std::string* release_sim3transform();
  void set_allocated_sim3transform(std::string* sim3transform);
  private:
  const std::string& _internal_sim3transform() const;
  void _internal_set_sim3transform(const std::string& value);
  std::string* _internal_mutable_sim3transform();
  public:

  // bytes duplicatedPointsIndices = 3;
  void clear_duplicatedpointsindices();
  const std::string& duplicatedpointsindices() const;
  void set_duplicatedpointsindices(const std::string& value);
  void set_duplicatedpointsindices(std::string&& value);
  void set_duplicatedpointsindices(const char* value);
  void set_duplicatedpointsindices(const void* value, size_t size);
  std::string* mutable_duplicatedpointsindices();
  std::string* release_duplicatedpointsindices();
  void set_allocated_duplicatedpointsindices(std::string* duplicatedpointsindices);
  private:
  const std::string& _internal_duplicatedpointsindices() const;
  void _internal_set_duplicatedpointsindices(const std::string& value);
  std::string* _internal_mutable_duplicatedpointsindices();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcILoopClosureDetector.detectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detectedloopkeyframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim3transform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duplicatedpointsindices_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcILoopClosureDetectorService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setCameraParametersRequest

// bytes intrinsicParams = 1;
inline void setCameraParametersRequest::clear_intrinsicparams() {
  intrinsicparams_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::intrinsicparams() const {
  // @@protoc_insertion_point(field_get:grpcILoopClosureDetector.setCameraParametersRequest.intrinsicParams)
  return _internal_intrinsicparams();
}
inline void setCameraParametersRequest::set_intrinsicparams(const std::string& value) {
  _internal_set_intrinsicparams(value);
  // @@protoc_insertion_point(field_set:grpcILoopClosureDetector.setCameraParametersRequest.intrinsicParams)
}
inline std::string* setCameraParametersRequest::mutable_intrinsicparams() {
  // @@protoc_insertion_point(field_mutable:grpcILoopClosureDetector.setCameraParametersRequest.intrinsicParams)
  return _internal_mutable_intrinsicparams();
}
inline const std::string& setCameraParametersRequest::_internal_intrinsicparams() const {
  return intrinsicparams_.Get();
}
inline void setCameraParametersRequest::_internal_set_intrinsicparams(const std::string& value) {
  
  intrinsicparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setCameraParametersRequest::set_intrinsicparams(std::string&& value) {
  
  intrinsicparams_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcILoopClosureDetector.setCameraParametersRequest.intrinsicParams)
}
inline void setCameraParametersRequest::set_intrinsicparams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intrinsicparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcILoopClosureDetector.setCameraParametersRequest.intrinsicParams)
}
inline void setCameraParametersRequest::set_intrinsicparams(const void* value,
    size_t size) {
  
  intrinsicparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcILoopClosureDetector.setCameraParametersRequest.intrinsicParams)
}
inline std::string* setCameraParametersRequest::_internal_mutable_intrinsicparams() {
  
  return intrinsicparams_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setCameraParametersRequest::release_intrinsicparams() {
  // @@protoc_insertion_point(field_release:grpcILoopClosureDetector.setCameraParametersRequest.intrinsicParams)
  return intrinsicparams_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setCameraParametersRequest::set_allocated_intrinsicparams(std::string* intrinsicparams) {
  if (intrinsicparams != nullptr) {
    
  } else {
    
  }
  intrinsicparams_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intrinsicparams,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcILoopClosureDetector.setCameraParametersRequest.intrinsicParams)
}

// bytes distortionParams = 2;
inline void setCameraParametersRequest::clear_distortionparams() {
  distortionparams_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::distortionparams() const {
  // @@protoc_insertion_point(field_get:grpcILoopClosureDetector.setCameraParametersRequest.distortionParams)
  return _internal_distortionparams();
}
inline void setCameraParametersRequest::set_distortionparams(const std::string& value) {
  _internal_set_distortionparams(value);
  // @@protoc_insertion_point(field_set:grpcILoopClosureDetector.setCameraParametersRequest.distortionParams)
}
inline std::string* setCameraParametersRequest::mutable_distortionparams() {
  // @@protoc_insertion_point(field_mutable:grpcILoopClosureDetector.setCameraParametersRequest.distortionParams)
  return _internal_mutable_distortionparams();
}
inline const std::string& setCameraParametersRequest::_internal_distortionparams() const {
  return distortionparams_.Get();
}
inline void setCameraParametersRequest::_internal_set_distortionparams(const std::string& value) {
  
  distortionparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setCameraParametersRequest::set_distortionparams(std::string&& value) {
  
  distortionparams_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcILoopClosureDetector.setCameraParametersRequest.distortionParams)
}
inline void setCameraParametersRequest::set_distortionparams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  distortionparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcILoopClosureDetector.setCameraParametersRequest.distortionParams)
}
inline void setCameraParametersRequest::set_distortionparams(const void* value,
    size_t size) {
  
  distortionparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcILoopClosureDetector.setCameraParametersRequest.distortionParams)
}
inline std::string* setCameraParametersRequest::_internal_mutable_distortionparams() {
  
  return distortionparams_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setCameraParametersRequest::release_distortionparams() {
  // @@protoc_insertion_point(field_release:grpcILoopClosureDetector.setCameraParametersRequest.distortionParams)
  return distortionparams_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setCameraParametersRequest::set_allocated_distortionparams(std::string* distortionparams) {
  if (distortionparams != nullptr) {
    
  } else {
    
  }
  distortionparams_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distortionparams,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcILoopClosureDetector.setCameraParametersRequest.distortionParams)
}

// -------------------------------------------------------------------

// detectRequest

// bytes queryKeyframe = 1;
inline void detectRequest::clear_querykeyframe() {
  querykeyframe_.ClearToEmpty();
}
inline const std::string& detectRequest::querykeyframe() const {
  // @@protoc_insertion_point(field_get:grpcILoopClosureDetector.detectRequest.queryKeyframe)
  return _internal_querykeyframe();
}
inline void detectRequest::set_querykeyframe(const std::string& value) {
  _internal_set_querykeyframe(value);
  // @@protoc_insertion_point(field_set:grpcILoopClosureDetector.detectRequest.queryKeyframe)
}
inline std::string* detectRequest::mutable_querykeyframe() {
  // @@protoc_insertion_point(field_mutable:grpcILoopClosureDetector.detectRequest.queryKeyframe)
  return _internal_mutable_querykeyframe();
}
inline const std::string& detectRequest::_internal_querykeyframe() const {
  return querykeyframe_.Get();
}
inline void detectRequest::_internal_set_querykeyframe(const std::string& value) {
  
  querykeyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectRequest::set_querykeyframe(std::string&& value) {
  
  querykeyframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcILoopClosureDetector.detectRequest.queryKeyframe)
}
inline void detectRequest::set_querykeyframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  querykeyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcILoopClosureDetector.detectRequest.queryKeyframe)
}
inline void detectRequest::set_querykeyframe(const void* value,
    size_t size) {
  
  querykeyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcILoopClosureDetector.detectRequest.queryKeyframe)
}
inline std::string* detectRequest::_internal_mutable_querykeyframe() {
  
  return querykeyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectRequest::release_querykeyframe() {
  // @@protoc_insertion_point(field_release:grpcILoopClosureDetector.detectRequest.queryKeyframe)
  return querykeyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectRequest::set_allocated_querykeyframe(std::string* querykeyframe) {
  if (querykeyframe != nullptr) {
    
  } else {
    
  }
  querykeyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), querykeyframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcILoopClosureDetector.detectRequest.queryKeyframe)
}

// bytes detectedLoopKeyframe = 2;
inline void detectRequest::clear_detectedloopkeyframe() {
  detectedloopkeyframe_.ClearToEmpty();
}
inline const std::string& detectRequest::detectedloopkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcILoopClosureDetector.detectRequest.detectedLoopKeyframe)
  return _internal_detectedloopkeyframe();
}
inline void detectRequest::set_detectedloopkeyframe(const std::string& value) {
  _internal_set_detectedloopkeyframe(value);
  // @@protoc_insertion_point(field_set:grpcILoopClosureDetector.detectRequest.detectedLoopKeyframe)
}
inline std::string* detectRequest::mutable_detectedloopkeyframe() {
  // @@protoc_insertion_point(field_mutable:grpcILoopClosureDetector.detectRequest.detectedLoopKeyframe)
  return _internal_mutable_detectedloopkeyframe();
}
inline const std::string& detectRequest::_internal_detectedloopkeyframe() const {
  return detectedloopkeyframe_.Get();
}
inline void detectRequest::_internal_set_detectedloopkeyframe(const std::string& value) {
  
  detectedloopkeyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectRequest::set_detectedloopkeyframe(std::string&& value) {
  
  detectedloopkeyframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcILoopClosureDetector.detectRequest.detectedLoopKeyframe)
}
inline void detectRequest::set_detectedloopkeyframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detectedloopkeyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcILoopClosureDetector.detectRequest.detectedLoopKeyframe)
}
inline void detectRequest::set_detectedloopkeyframe(const void* value,
    size_t size) {
  
  detectedloopkeyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcILoopClosureDetector.detectRequest.detectedLoopKeyframe)
}
inline std::string* detectRequest::_internal_mutable_detectedloopkeyframe() {
  
  return detectedloopkeyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectRequest::release_detectedloopkeyframe() {
  // @@protoc_insertion_point(field_release:grpcILoopClosureDetector.detectRequest.detectedLoopKeyframe)
  return detectedloopkeyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectRequest::set_allocated_detectedloopkeyframe(std::string* detectedloopkeyframe) {
  if (detectedloopkeyframe != nullptr) {
    
  } else {
    
  }
  detectedloopkeyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detectedloopkeyframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcILoopClosureDetector.detectRequest.detectedLoopKeyframe)
}

// bytes sim3Transform = 3;
inline void detectRequest::clear_sim3transform() {
  sim3transform_.ClearToEmpty();
}
inline const std::string& detectRequest::sim3transform() const {
  // @@protoc_insertion_point(field_get:grpcILoopClosureDetector.detectRequest.sim3Transform)
  return _internal_sim3transform();
}
inline void detectRequest::set_sim3transform(const std::string& value) {
  _internal_set_sim3transform(value);
  // @@protoc_insertion_point(field_set:grpcILoopClosureDetector.detectRequest.sim3Transform)
}
inline std::string* detectRequest::mutable_sim3transform() {
  // @@protoc_insertion_point(field_mutable:grpcILoopClosureDetector.detectRequest.sim3Transform)
  return _internal_mutable_sim3transform();
}
inline const std::string& detectRequest::_internal_sim3transform() const {
  return sim3transform_.Get();
}
inline void detectRequest::_internal_set_sim3transform(const std::string& value) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectRequest::set_sim3transform(std::string&& value) {
  
  sim3transform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcILoopClosureDetector.detectRequest.sim3Transform)
}
inline void detectRequest::set_sim3transform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcILoopClosureDetector.detectRequest.sim3Transform)
}
inline void detectRequest::set_sim3transform(const void* value,
    size_t size) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcILoopClosureDetector.detectRequest.sim3Transform)
}
inline std::string* detectRequest::_internal_mutable_sim3transform() {
  
  return sim3transform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectRequest::release_sim3transform() {
  // @@protoc_insertion_point(field_release:grpcILoopClosureDetector.detectRequest.sim3Transform)
  return sim3transform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectRequest::set_allocated_sim3transform(std::string* sim3transform) {
  if (sim3transform != nullptr) {
    
  } else {
    
  }
  sim3transform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sim3transform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcILoopClosureDetector.detectRequest.sim3Transform)
}

// bytes duplicatedPointsIndices = 4;
inline void detectRequest::clear_duplicatedpointsindices() {
  duplicatedpointsindices_.ClearToEmpty();
}
inline const std::string& detectRequest::duplicatedpointsindices() const {
  // @@protoc_insertion_point(field_get:grpcILoopClosureDetector.detectRequest.duplicatedPointsIndices)
  return _internal_duplicatedpointsindices();
}
inline void detectRequest::set_duplicatedpointsindices(const std::string& value) {
  _internal_set_duplicatedpointsindices(value);
  // @@protoc_insertion_point(field_set:grpcILoopClosureDetector.detectRequest.duplicatedPointsIndices)
}
inline std::string* detectRequest::mutable_duplicatedpointsindices() {
  // @@protoc_insertion_point(field_mutable:grpcILoopClosureDetector.detectRequest.duplicatedPointsIndices)
  return _internal_mutable_duplicatedpointsindices();
}
inline const std::string& detectRequest::_internal_duplicatedpointsindices() const {
  return duplicatedpointsindices_.Get();
}
inline void detectRequest::_internal_set_duplicatedpointsindices(const std::string& value) {
  
  duplicatedpointsindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectRequest::set_duplicatedpointsindices(std::string&& value) {
  
  duplicatedpointsindices_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcILoopClosureDetector.detectRequest.duplicatedPointsIndices)
}
inline void detectRequest::set_duplicatedpointsindices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  duplicatedpointsindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcILoopClosureDetector.detectRequest.duplicatedPointsIndices)
}
inline void detectRequest::set_duplicatedpointsindices(const void* value,
    size_t size) {
  
  duplicatedpointsindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcILoopClosureDetector.detectRequest.duplicatedPointsIndices)
}
inline std::string* detectRequest::_internal_mutable_duplicatedpointsindices() {
  
  return duplicatedpointsindices_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectRequest::release_duplicatedpointsindices() {
  // @@protoc_insertion_point(field_release:grpcILoopClosureDetector.detectRequest.duplicatedPointsIndices)
  return duplicatedpointsindices_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectRequest::set_allocated_duplicatedpointsindices(std::string* duplicatedpointsindices) {
  if (duplicatedpointsindices != nullptr) {
    
  } else {
    
  }
  duplicatedpointsindices_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duplicatedpointsindices,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcILoopClosureDetector.detectRequest.duplicatedPointsIndices)
}

// -------------------------------------------------------------------

// detectResponse

// bytes detectedLoopKeyframe = 1;
inline void detectResponse::clear_detectedloopkeyframe() {
  detectedloopkeyframe_.ClearToEmpty();
}
inline const std::string& detectResponse::detectedloopkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcILoopClosureDetector.detectResponse.detectedLoopKeyframe)
  return _internal_detectedloopkeyframe();
}
inline void detectResponse::set_detectedloopkeyframe(const std::string& value) {
  _internal_set_detectedloopkeyframe(value);
  // @@protoc_insertion_point(field_set:grpcILoopClosureDetector.detectResponse.detectedLoopKeyframe)
}
inline std::string* detectResponse::mutable_detectedloopkeyframe() {
  // @@protoc_insertion_point(field_mutable:grpcILoopClosureDetector.detectResponse.detectedLoopKeyframe)
  return _internal_mutable_detectedloopkeyframe();
}
inline const std::string& detectResponse::_internal_detectedloopkeyframe() const {
  return detectedloopkeyframe_.Get();
}
inline void detectResponse::_internal_set_detectedloopkeyframe(const std::string& value) {
  
  detectedloopkeyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectResponse::set_detectedloopkeyframe(std::string&& value) {
  
  detectedloopkeyframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcILoopClosureDetector.detectResponse.detectedLoopKeyframe)
}
inline void detectResponse::set_detectedloopkeyframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detectedloopkeyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcILoopClosureDetector.detectResponse.detectedLoopKeyframe)
}
inline void detectResponse::set_detectedloopkeyframe(const void* value,
    size_t size) {
  
  detectedloopkeyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcILoopClosureDetector.detectResponse.detectedLoopKeyframe)
}
inline std::string* detectResponse::_internal_mutable_detectedloopkeyframe() {
  
  return detectedloopkeyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectResponse::release_detectedloopkeyframe() {
  // @@protoc_insertion_point(field_release:grpcILoopClosureDetector.detectResponse.detectedLoopKeyframe)
  return detectedloopkeyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectResponse::set_allocated_detectedloopkeyframe(std::string* detectedloopkeyframe) {
  if (detectedloopkeyframe != nullptr) {
    
  } else {
    
  }
  detectedloopkeyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detectedloopkeyframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcILoopClosureDetector.detectResponse.detectedLoopKeyframe)
}

// bytes sim3Transform = 2;
inline void detectResponse::clear_sim3transform() {
  sim3transform_.ClearToEmpty();
}
inline const std::string& detectResponse::sim3transform() const {
  // @@protoc_insertion_point(field_get:grpcILoopClosureDetector.detectResponse.sim3Transform)
  return _internal_sim3transform();
}
inline void detectResponse::set_sim3transform(const std::string& value) {
  _internal_set_sim3transform(value);
  // @@protoc_insertion_point(field_set:grpcILoopClosureDetector.detectResponse.sim3Transform)
}
inline std::string* detectResponse::mutable_sim3transform() {
  // @@protoc_insertion_point(field_mutable:grpcILoopClosureDetector.detectResponse.sim3Transform)
  return _internal_mutable_sim3transform();
}
inline const std::string& detectResponse::_internal_sim3transform() const {
  return sim3transform_.Get();
}
inline void detectResponse::_internal_set_sim3transform(const std::string& value) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectResponse::set_sim3transform(std::string&& value) {
  
  sim3transform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcILoopClosureDetector.detectResponse.sim3Transform)
}
inline void detectResponse::set_sim3transform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcILoopClosureDetector.detectResponse.sim3Transform)
}
inline void detectResponse::set_sim3transform(const void* value,
    size_t size) {
  
  sim3transform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcILoopClosureDetector.detectResponse.sim3Transform)
}
inline std::string* detectResponse::_internal_mutable_sim3transform() {
  
  return sim3transform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectResponse::release_sim3transform() {
  // @@protoc_insertion_point(field_release:grpcILoopClosureDetector.detectResponse.sim3Transform)
  return sim3transform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectResponse::set_allocated_sim3transform(std::string* sim3transform) {
  if (sim3transform != nullptr) {
    
  } else {
    
  }
  sim3transform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sim3transform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcILoopClosureDetector.detectResponse.sim3Transform)
}

// bytes duplicatedPointsIndices = 3;
inline void detectResponse::clear_duplicatedpointsindices() {
  duplicatedpointsindices_.ClearToEmpty();
}
inline const std::string& detectResponse::duplicatedpointsindices() const {
  // @@protoc_insertion_point(field_get:grpcILoopClosureDetector.detectResponse.duplicatedPointsIndices)
  return _internal_duplicatedpointsindices();
}
inline void detectResponse::set_duplicatedpointsindices(const std::string& value) {
  _internal_set_duplicatedpointsindices(value);
  // @@protoc_insertion_point(field_set:grpcILoopClosureDetector.detectResponse.duplicatedPointsIndices)
}
inline std::string* detectResponse::mutable_duplicatedpointsindices() {
  // @@protoc_insertion_point(field_mutable:grpcILoopClosureDetector.detectResponse.duplicatedPointsIndices)
  return _internal_mutable_duplicatedpointsindices();
}
inline const std::string& detectResponse::_internal_duplicatedpointsindices() const {
  return duplicatedpointsindices_.Get();
}
inline void detectResponse::_internal_set_duplicatedpointsindices(const std::string& value) {
  
  duplicatedpointsindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectResponse::set_duplicatedpointsindices(std::string&& value) {
  
  duplicatedpointsindices_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcILoopClosureDetector.detectResponse.duplicatedPointsIndices)
}
inline void detectResponse::set_duplicatedpointsindices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  duplicatedpointsindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcILoopClosureDetector.detectResponse.duplicatedPointsIndices)
}
inline void detectResponse::set_duplicatedpointsindices(const void* value,
    size_t size) {
  
  duplicatedpointsindices_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcILoopClosureDetector.detectResponse.duplicatedPointsIndices)
}
inline std::string* detectResponse::_internal_mutable_duplicatedpointsindices() {
  
  return duplicatedpointsindices_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectResponse::release_duplicatedpointsindices() {
  // @@protoc_insertion_point(field_release:grpcILoopClosureDetector.detectResponse.duplicatedPointsIndices)
  return duplicatedpointsindices_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectResponse::set_allocated_duplicatedpointsindices(std::string* duplicatedpointsindices) {
  if (duplicatedpointsindices != nullptr) {
    
  } else {
    
  }
  duplicatedpointsindices_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duplicatedpointsindices,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcILoopClosureDetector.detectResponse.duplicatedPointsIndices)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void detectResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detectResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detectResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcILoopClosureDetector.detectResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void detectResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void detectResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcILoopClosureDetector.detectResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcILoopClosureDetector

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcILoopClosureDetectorService_2eproto
