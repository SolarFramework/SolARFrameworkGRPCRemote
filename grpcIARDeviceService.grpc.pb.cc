// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIARDeviceService.proto

#include "grpcIARDeviceService.pb.h"
#include "grpcIARDeviceService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIARDevice {

static const char* grpcIARDeviceService_method_names[] = {
  "/grpcIARDevice.grpcIARDeviceService/start",
  "/grpcIARDevice.grpcIARDeviceService/stop",
  "/grpcIARDevice.grpcIARDeviceService/getData",
  "/grpcIARDevice.grpcIARDeviceService/getCameraParameters",
};

std::unique_ptr< grpcIARDeviceService::Stub> grpcIARDeviceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIARDeviceService::Stub> stub(new grpcIARDeviceService::Stub(channel, options));
  return stub;
}

grpcIARDeviceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_start_(grpcIARDeviceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcIARDeviceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getData_(grpcIARDeviceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCameraParameters_(grpcIARDeviceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIARDeviceService::Stub::start(::grpc::ClientContext* context, const ::grpcIARDevice::startRequest& request, ::grpcIARDevice::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIARDevice::startRequest, ::grpcIARDevice::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcIARDeviceService::Stub::async::start(::grpc::ClientContext* context, const ::grpcIARDevice::startRequest* request, ::grpcIARDevice::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIARDevice::startRequest, ::grpcIARDevice::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcIARDeviceService::Stub::async::start(::grpc::ClientContext* context, const ::grpcIARDevice::startRequest* request, ::grpcIARDevice::startResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIARDevice::startResponse>* grpcIARDeviceService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIARDevice::startRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIARDevice::startResponse, ::grpcIARDevice::startRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIARDevice::startResponse>* grpcIARDeviceService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIARDevice::startRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIARDeviceService::Stub::stop(::grpc::ClientContext* context, const ::grpcIARDevice::stopRequest& request, ::grpcIARDevice::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIARDevice::stopRequest, ::grpcIARDevice::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcIARDeviceService::Stub::async::stop(::grpc::ClientContext* context, const ::grpcIARDevice::stopRequest* request, ::grpcIARDevice::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIARDevice::stopRequest, ::grpcIARDevice::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcIARDeviceService::Stub::async::stop(::grpc::ClientContext* context, const ::grpcIARDevice::stopRequest* request, ::grpcIARDevice::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIARDevice::stopResponse>* grpcIARDeviceService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIARDevice::stopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIARDevice::stopResponse, ::grpcIARDevice::stopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIARDevice::stopResponse>* grpcIARDeviceService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIARDevice::stopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIARDeviceService::Stub::getData(::grpc::ClientContext* context, const ::grpcIARDevice::getDataRequest& request, ::grpcIARDevice::getDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIARDevice::getDataRequest, ::grpcIARDevice::getDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getData_, context, request, response);
}

void grpcIARDeviceService::Stub::async::getData(::grpc::ClientContext* context, const ::grpcIARDevice::getDataRequest* request, ::grpcIARDevice::getDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIARDevice::getDataRequest, ::grpcIARDevice::getDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getData_, context, request, response, std::move(f));
}

void grpcIARDeviceService::Stub::async::getData(::grpc::ClientContext* context, const ::grpcIARDevice::getDataRequest* request, ::grpcIARDevice::getDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIARDevice::getDataResponse>* grpcIARDeviceService::Stub::PrepareAsyncgetDataRaw(::grpc::ClientContext* context, const ::grpcIARDevice::getDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIARDevice::getDataResponse, ::grpcIARDevice::getDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIARDevice::getDataResponse>* grpcIARDeviceService::Stub::AsyncgetDataRaw(::grpc::ClientContext* context, const ::grpcIARDevice::getDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIARDeviceService::Stub::getCameraParameters(::grpc::ClientContext* context, const ::grpcIARDevice::getCameraParametersRequest& request, ::grpcIARDevice::getCameraParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIARDevice::getCameraParametersRequest, ::grpcIARDevice::getCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getCameraParameters_, context, request, response);
}

void grpcIARDeviceService::Stub::async::getCameraParameters(::grpc::ClientContext* context, const ::grpcIARDevice::getCameraParametersRequest* request, ::grpcIARDevice::getCameraParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIARDevice::getCameraParametersRequest, ::grpcIARDevice::getCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCameraParameters_, context, request, response, std::move(f));
}

void grpcIARDeviceService::Stub::async::getCameraParameters(::grpc::ClientContext* context, const ::grpcIARDevice::getCameraParametersRequest* request, ::grpcIARDevice::getCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIARDevice::getCameraParametersResponse>* grpcIARDeviceService::Stub::PrepareAsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIARDevice::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIARDevice::getCameraParametersResponse, ::grpcIARDevice::getCameraParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIARDevice::getCameraParametersResponse>* grpcIARDeviceService::Stub::AsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIARDevice::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIARDeviceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIARDeviceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIARDeviceService::Service, ::grpcIARDevice::startRequest, ::grpcIARDevice::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIARDeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIARDevice::startRequest* req,
             ::grpcIARDevice::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIARDeviceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIARDeviceService::Service, ::grpcIARDevice::stopRequest, ::grpcIARDevice::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIARDeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIARDevice::stopRequest* req,
             ::grpcIARDevice::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIARDeviceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIARDeviceService::Service, ::grpcIARDevice::getDataRequest, ::grpcIARDevice::getDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIARDeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIARDevice::getDataRequest* req,
             ::grpcIARDevice::getDataResponse* resp) {
               return service->getData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIARDeviceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIARDeviceService::Service, ::grpcIARDevice::getCameraParametersRequest, ::grpcIARDevice::getCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIARDeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIARDevice::getCameraParametersRequest* req,
             ::grpcIARDevice::getCameraParametersResponse* resp) {
               return service->getCameraParameters(ctx, req, resp);
             }, this)));
}

grpcIARDeviceService::Service::~Service() {
}

::grpc::Status grpcIARDeviceService::Service::start(::grpc::ServerContext* context, const ::grpcIARDevice::startRequest* request, ::grpcIARDevice::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIARDeviceService::Service::stop(::grpc::ServerContext* context, const ::grpcIARDevice::stopRequest* request, ::grpcIARDevice::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIARDeviceService::Service::getData(::grpc::ServerContext* context, const ::grpcIARDevice::getDataRequest* request, ::grpcIARDevice::getDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIARDeviceService::Service::getCameraParameters(::grpc::ServerContext* context, const ::grpcIARDevice::getCameraParametersRequest* request, ::grpcIARDevice::getCameraParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIARDevice

