// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIDenseMappingPipelineService.proto
#ifndef GRPC_grpcIDenseMappingPipelineService_2eproto__INCLUDED
#define GRPC_grpcIDenseMappingPipelineService_2eproto__INCLUDED

#include "grpcIDenseMappingPipelineService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIDenseMappingPipeline {

class grpcIDenseMappingPipelineService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIDenseMappingPipeline.grpcIDenseMappingPipelineService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status isAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest& request, ::grpcIDenseMappingPipeline::isAliveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::isAliveResponse>> AsyncisAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::isAliveResponse>>(AsyncisAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::isAliveResponse>> PrepareAsyncisAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::isAliveResponse>>(PrepareAsyncisAliveRaw(context, request, cq));
    }
    virtual ::grpc::Status init(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest& request, ::grpcIDenseMappingPipeline::initResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::initResponse>> Asyncinit(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::initResponse>>(AsyncinitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::initResponse>> PrepareAsyncinit(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::initResponse>>(PrepareAsyncinitRaw(context, request, cq));
    }
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest& request, ::grpcIDenseMappingPipeline::startResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest& request, ::grpcIDenseMappingPipeline::stopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status denseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest& request, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>> AsyncdenseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>>(AsyncdenseMappingProcessRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>> PrepareAsyncdenseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>>(PrepareAsyncdenseMappingProcessRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status getPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest& request, ::grpcIDenseMappingPipeline::getPointCloudResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getPointCloudResponse>> AsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getPointCloudResponse>>(AsyncgetPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getPointCloudResponse>> PrepareAsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getPointCloudResponse>>(PrepareAsyncgetPointCloudRaw(context, request, cq));
    }
    virtual ::grpc::Status getMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest& request, ::grpcIDenseMappingPipeline::getMeshResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getMeshResponse>> AsyncgetMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getMeshResponse>>(AsyncgetMeshRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getMeshResponse>> PrepareAsyncgetMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getMeshResponse>>(PrepareAsyncgetMeshRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void isAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest* request, ::grpcIDenseMappingPipeline::isAliveResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void isAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest* request, ::grpcIDenseMappingPipeline::isAliveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void isAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest* request, ::grpcIDenseMappingPipeline::isAliveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void init(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest* request, ::grpcIDenseMappingPipeline::initResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void init(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest* request, ::grpcIDenseMappingPipeline::initResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void init(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest* request, ::grpcIDenseMappingPipeline::initResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void start(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest* request, ::grpcIDenseMappingPipeline::startResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void start(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest* request, ::grpcIDenseMappingPipeline::startResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void start(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest* request, ::grpcIDenseMappingPipeline::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void stop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest* request, ::grpcIDenseMappingPipeline::stopResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void stop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest* request, ::grpcIDenseMappingPipeline::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void stop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest* request, ::grpcIDenseMappingPipeline::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void denseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* request, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void denseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* request, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void denseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* request, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest* request, ::grpcIDenseMappingPipeline::getPointCloudResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest* request, ::grpcIDenseMappingPipeline::getPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest* request, ::grpcIDenseMappingPipeline::getPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest* request, ::grpcIDenseMappingPipeline::getMeshResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest* request, ::grpcIDenseMappingPipeline::getMeshResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest* request, ::grpcIDenseMappingPipeline::getMeshResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::isAliveResponse>* AsyncisAliveRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::isAliveResponse>* PrepareAsyncisAliveRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::initResponse>* AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::initResponse>* PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>* AsyncdenseMappingProcessRequestRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>* PrepareAsyncdenseMappingProcessRequestRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getPointCloudResponse>* AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getPointCloudResponse>* PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getMeshResponse>* AsyncgetMeshRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDenseMappingPipeline::getMeshResponse>* PrepareAsyncgetMeshRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status isAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest& request, ::grpcIDenseMappingPipeline::isAliveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::isAliveResponse>> AsyncisAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::isAliveResponse>>(AsyncisAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::isAliveResponse>> PrepareAsyncisAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::isAliveResponse>>(PrepareAsyncisAliveRaw(context, request, cq));
    }
    ::grpc::Status init(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest& request, ::grpcIDenseMappingPipeline::initResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::initResponse>> Asyncinit(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::initResponse>>(AsyncinitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::initResponse>> PrepareAsyncinit(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::initResponse>>(PrepareAsyncinitRaw(context, request, cq));
    }
    ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest& request, ::grpcIDenseMappingPipeline::startResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest& request, ::grpcIDenseMappingPipeline::stopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    ::grpc::Status denseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest& request, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>> AsyncdenseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>>(AsyncdenseMappingProcessRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>> PrepareAsyncdenseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>>(PrepareAsyncdenseMappingProcessRequestRaw(context, request, cq));
    }
    ::grpc::Status getPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest& request, ::grpcIDenseMappingPipeline::getPointCloudResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getPointCloudResponse>> AsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getPointCloudResponse>>(AsyncgetPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getPointCloudResponse>> PrepareAsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getPointCloudResponse>>(PrepareAsyncgetPointCloudRaw(context, request, cq));
    }
    ::grpc::Status getMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest& request, ::grpcIDenseMappingPipeline::getMeshResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getMeshResponse>> AsyncgetMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getMeshResponse>>(AsyncgetMeshRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getMeshResponse>> PrepareAsyncgetMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getMeshResponse>>(PrepareAsyncgetMeshRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void isAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest* request, ::grpcIDenseMappingPipeline::isAliveResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void isAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest* request, ::grpcIDenseMappingPipeline::isAliveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void isAlive(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest* request, ::grpcIDenseMappingPipeline::isAliveResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void init(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest* request, ::grpcIDenseMappingPipeline::initResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void init(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest* request, ::grpcIDenseMappingPipeline::initResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void init(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest* request, ::grpcIDenseMappingPipeline::initResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void start(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest* request, ::grpcIDenseMappingPipeline::startResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void start(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest* request, ::grpcIDenseMappingPipeline::startResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void start(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest* request, ::grpcIDenseMappingPipeline::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void stop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest* request, ::grpcIDenseMappingPipeline::stopResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void stop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest* request, ::grpcIDenseMappingPipeline::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void stop(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest* request, ::grpcIDenseMappingPipeline::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void denseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* request, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void denseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* request, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void denseMappingProcessRequest(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* request, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest* request, ::grpcIDenseMappingPipeline::getPointCloudResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest* request, ::grpcIDenseMappingPipeline::getPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest* request, ::grpcIDenseMappingPipeline::getPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest* request, ::grpcIDenseMappingPipeline::getMeshResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest* request, ::grpcIDenseMappingPipeline::getMeshResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getMesh(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest* request, ::grpcIDenseMappingPipeline::getMeshResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::isAliveResponse>* AsyncisAliveRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::isAliveResponse>* PrepareAsyncisAliveRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::initResponse>* AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::initResponse>* PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>* AsyncdenseMappingProcessRequestRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>* PrepareAsyncdenseMappingProcessRequestRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getPointCloudResponse>* AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getPointCloudResponse>* PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getMeshResponse>* AsyncgetMeshRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDenseMappingPipeline::getMeshResponse>* PrepareAsyncgetMeshRaw(::grpc::ClientContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_isAlive_;
    const ::grpc::internal::RpcMethod rpcmethod_init_;
    const ::grpc::internal::RpcMethod rpcmethod_start_;
    const ::grpc::internal::RpcMethod rpcmethod_stop_;
    const ::grpc::internal::RpcMethod rpcmethod_denseMappingProcessRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_getPointCloud_;
    const ::grpc::internal::RpcMethod rpcmethod_getMesh_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status isAlive(::grpc::ServerContext* context, const ::grpcIDenseMappingPipeline::isAliveRequest* request, ::grpcIDenseMappingPipeline::isAliveResponse* response);
    virtual ::grpc::Status init(::grpc::ServerContext* context, const ::grpcIDenseMappingPipeline::initRequest* request, ::grpcIDenseMappingPipeline::initResponse* response);
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::grpcIDenseMappingPipeline::startRequest* request, ::grpcIDenseMappingPipeline::startResponse* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::grpcIDenseMappingPipeline::stopRequest* request, ::grpcIDenseMappingPipeline::stopResponse* response);
    virtual ::grpc::Status denseMappingProcessRequest(::grpc::ServerContext* context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* request, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* response);
    virtual ::grpc::Status getPointCloud(::grpc::ServerContext* context, const ::grpcIDenseMappingPipeline::getPointCloudRequest* request, ::grpcIDenseMappingPipeline::getPointCloudResponse* response);
    virtual ::grpc::Status getMesh(::grpc::ServerContext* context, const ::grpcIDenseMappingPipeline::getMeshRequest* request, ::grpcIDenseMappingPipeline::getMeshResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isAlive() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::isAliveRequest* /*request*/, ::grpcIDenseMappingPipeline::isAliveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisAlive(::grpc::ServerContext* context, ::grpcIDenseMappingPipeline::isAliveRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDenseMappingPipeline::isAliveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::initRequest* /*request*/, ::grpcIDenseMappingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit(::grpc::ServerContext* context, ::grpcIDenseMappingPipeline::initRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDenseMappingPipeline::initResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::startRequest* /*request*/, ::grpcIDenseMappingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpcIDenseMappingPipeline::startRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDenseMappingPipeline::startResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::stopRequest* /*request*/, ::grpcIDenseMappingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpcIDenseMappingPipeline::stopRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDenseMappingPipeline::stopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_denseMappingProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_denseMappingProcessRequest() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_denseMappingProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status denseMappingProcessRequest(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* /*request*/, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdenseMappingProcessRequest(::grpc::ServerContext* context, ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPointCloud() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getPointCloudRequest* /*request*/, ::grpcIDenseMappingPipeline::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPointCloud(::grpc::ServerContext* context, ::grpcIDenseMappingPipeline::getPointCloudRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDenseMappingPipeline::getPointCloudResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMesh() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMesh(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getMeshRequest* /*request*/, ::grpcIDenseMappingPipeline::getMeshResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMesh(::grpc::ServerContext* context, ::grpcIDenseMappingPipeline::getMeshRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDenseMappingPipeline::getMeshResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_isAlive<WithAsyncMethod_init<WithAsyncMethod_start<WithAsyncMethod_stop<WithAsyncMethod_denseMappingProcessRequest<WithAsyncMethod_getPointCloud<WithAsyncMethod_getMesh<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_isAlive() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::isAliveRequest, ::grpcIDenseMappingPipeline::isAliveResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDenseMappingPipeline::isAliveRequest* request, ::grpcIDenseMappingPipeline::isAliveResponse* response) { return this->isAlive(context, request, response); }));}
    void SetMessageAllocatorFor_isAlive(
        ::grpc::experimental::MessageAllocator< ::grpcIDenseMappingPipeline::isAliveRequest, ::grpcIDenseMappingPipeline::isAliveResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::isAliveRequest, ::grpcIDenseMappingPipeline::isAliveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::isAliveRequest* /*request*/, ::grpcIDenseMappingPipeline::isAliveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isAlive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::isAliveRequest* /*request*/, ::grpcIDenseMappingPipeline::isAliveResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isAlive(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::isAliveRequest* /*request*/, ::grpcIDenseMappingPipeline::isAliveResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_init() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::initRequest, ::grpcIDenseMappingPipeline::initResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDenseMappingPipeline::initRequest* request, ::grpcIDenseMappingPipeline::initResponse* response) { return this->init(context, request, response); }));}
    void SetMessageAllocatorFor_init(
        ::grpc::experimental::MessageAllocator< ::grpcIDenseMappingPipeline::initRequest, ::grpcIDenseMappingPipeline::initResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::initRequest, ::grpcIDenseMappingPipeline::initResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::initRequest* /*request*/, ::grpcIDenseMappingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::initRequest* /*request*/, ::grpcIDenseMappingPipeline::initResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* init(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::initRequest* /*request*/, ::grpcIDenseMappingPipeline::initResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::startRequest, ::grpcIDenseMappingPipeline::startResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDenseMappingPipeline::startRequest* request, ::grpcIDenseMappingPipeline::startResponse* response) { return this->start(context, request, response); }));}
    void SetMessageAllocatorFor_start(
        ::grpc::experimental::MessageAllocator< ::grpcIDenseMappingPipeline::startRequest, ::grpcIDenseMappingPipeline::startResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::startRequest, ::grpcIDenseMappingPipeline::startResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::startRequest* /*request*/, ::grpcIDenseMappingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::startRequest* /*request*/, ::grpcIDenseMappingPipeline::startResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::startRequest* /*request*/, ::grpcIDenseMappingPipeline::startResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::stopRequest, ::grpcIDenseMappingPipeline::stopResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDenseMappingPipeline::stopRequest* request, ::grpcIDenseMappingPipeline::stopResponse* response) { return this->stop(context, request, response); }));}
    void SetMessageAllocatorFor_stop(
        ::grpc::experimental::MessageAllocator< ::grpcIDenseMappingPipeline::stopRequest, ::grpcIDenseMappingPipeline::stopResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::stopRequest, ::grpcIDenseMappingPipeline::stopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::stopRequest* /*request*/, ::grpcIDenseMappingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::stopRequest* /*request*/, ::grpcIDenseMappingPipeline::stopResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::stopRequest* /*request*/, ::grpcIDenseMappingPipeline::stopResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_denseMappingProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_denseMappingProcessRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* request, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* response) { return this->denseMappingProcessRequest(context, request, response); }));}
    void SetMessageAllocatorFor_denseMappingProcessRequest(
        ::grpc::experimental::MessageAllocator< ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_denseMappingProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status denseMappingProcessRequest(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* /*request*/, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* denseMappingProcessRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* /*request*/, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* denseMappingProcessRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* /*request*/, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::getPointCloudRequest, ::grpcIDenseMappingPipeline::getPointCloudResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDenseMappingPipeline::getPointCloudRequest* request, ::grpcIDenseMappingPipeline::getPointCloudResponse* response) { return this->getPointCloud(context, request, response); }));}
    void SetMessageAllocatorFor_getPointCloud(
        ::grpc::experimental::MessageAllocator< ::grpcIDenseMappingPipeline::getPointCloudRequest, ::grpcIDenseMappingPipeline::getPointCloudResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::getPointCloudRequest, ::grpcIDenseMappingPipeline::getPointCloudResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getPointCloudRequest* /*request*/, ::grpcIDenseMappingPipeline::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getPointCloudRequest* /*request*/, ::grpcIDenseMappingPipeline::getPointCloudResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getPointCloudRequest* /*request*/, ::grpcIDenseMappingPipeline::getPointCloudResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getMesh() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::getMeshRequest, ::grpcIDenseMappingPipeline::getMeshResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDenseMappingPipeline::getMeshRequest* request, ::grpcIDenseMappingPipeline::getMeshResponse* response) { return this->getMesh(context, request, response); }));}
    void SetMessageAllocatorFor_getMesh(
        ::grpc::experimental::MessageAllocator< ::grpcIDenseMappingPipeline::getMeshRequest, ::grpcIDenseMappingPipeline::getMeshResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDenseMappingPipeline::getMeshRequest, ::grpcIDenseMappingPipeline::getMeshResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMesh(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getMeshRequest* /*request*/, ::grpcIDenseMappingPipeline::getMeshResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getMesh(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getMeshRequest* /*request*/, ::grpcIDenseMappingPipeline::getMeshResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getMesh(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getMeshRequest* /*request*/, ::grpcIDenseMappingPipeline::getMeshResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_isAlive<ExperimentalWithCallbackMethod_init<ExperimentalWithCallbackMethod_start<ExperimentalWithCallbackMethod_stop<ExperimentalWithCallbackMethod_denseMappingProcessRequest<ExperimentalWithCallbackMethod_getPointCloud<ExperimentalWithCallbackMethod_getMesh<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_isAlive<ExperimentalWithCallbackMethod_init<ExperimentalWithCallbackMethod_start<ExperimentalWithCallbackMethod_stop<ExperimentalWithCallbackMethod_denseMappingProcessRequest<ExperimentalWithCallbackMethod_getPointCloud<ExperimentalWithCallbackMethod_getMesh<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isAlive() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::isAliveRequest* /*request*/, ::grpcIDenseMappingPipeline::isAliveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::initRequest* /*request*/, ::grpcIDenseMappingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::startRequest* /*request*/, ::grpcIDenseMappingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::stopRequest* /*request*/, ::grpcIDenseMappingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_denseMappingProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_denseMappingProcessRequest() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_denseMappingProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status denseMappingProcessRequest(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* /*request*/, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPointCloud() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getPointCloudRequest* /*request*/, ::grpcIDenseMappingPipeline::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMesh() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMesh(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getMeshRequest* /*request*/, ::grpcIDenseMappingPipeline::getMeshResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isAlive() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::isAliveRequest* /*request*/, ::grpcIDenseMappingPipeline::isAliveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisAlive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::initRequest* /*request*/, ::grpcIDenseMappingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::startRequest* /*request*/, ::grpcIDenseMappingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stop() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::stopRequest* /*request*/, ::grpcIDenseMappingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_denseMappingProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_denseMappingProcessRequest() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_denseMappingProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status denseMappingProcessRequest(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* /*request*/, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdenseMappingProcessRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPointCloud() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getPointCloudRequest* /*request*/, ::grpcIDenseMappingPipeline::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPointCloud(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMesh() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMesh(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getMeshRequest* /*request*/, ::grpcIDenseMappingPipeline::getMeshResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMesh(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_isAlive() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isAlive(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::isAliveRequest* /*request*/, ::grpcIDenseMappingPipeline::isAliveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isAlive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isAlive(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_init() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::initRequest* /*request*/, ::grpcIDenseMappingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* init(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::startRequest* /*request*/, ::grpcIDenseMappingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::stopRequest* /*request*/, ::grpcIDenseMappingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_denseMappingProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_denseMappingProcessRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->denseMappingProcessRequest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_denseMappingProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status denseMappingProcessRequest(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* /*request*/, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* denseMappingProcessRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* denseMappingProcessRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPointCloud(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getPointCloudRequest* /*request*/, ::grpcIDenseMappingPipeline::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getMesh() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMesh(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMesh(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getMeshRequest* /*request*/, ::grpcIDenseMappingPipeline::getMeshResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getMesh(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getMesh(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isAlive() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDenseMappingPipeline::isAliveRequest, ::grpcIDenseMappingPipeline::isAliveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDenseMappingPipeline::isAliveRequest, ::grpcIDenseMappingPipeline::isAliveResponse>* streamer) {
                       return this->StreamedisAlive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::isAliveRequest* /*request*/, ::grpcIDenseMappingPipeline::isAliveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisAlive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDenseMappingPipeline::isAliveRequest,::grpcIDenseMappingPipeline::isAliveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDenseMappingPipeline::initRequest, ::grpcIDenseMappingPipeline::initResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDenseMappingPipeline::initRequest, ::grpcIDenseMappingPipeline::initResponse>* streamer) {
                       return this->Streamedinit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::initRequest* /*request*/, ::grpcIDenseMappingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDenseMappingPipeline::initRequest,::grpcIDenseMappingPipeline::initResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDenseMappingPipeline::startRequest, ::grpcIDenseMappingPipeline::startResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDenseMappingPipeline::startRequest, ::grpcIDenseMappingPipeline::startResponse>* streamer) {
                       return this->Streamedstart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::startRequest* /*request*/, ::grpcIDenseMappingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDenseMappingPipeline::startRequest,::grpcIDenseMappingPipeline::startResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stop() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDenseMappingPipeline::stopRequest, ::grpcIDenseMappingPipeline::stopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDenseMappingPipeline::stopRequest, ::grpcIDenseMappingPipeline::stopResponse>* streamer) {
                       return this->Streamedstop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::stopRequest* /*request*/, ::grpcIDenseMappingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDenseMappingPipeline::stopRequest,::grpcIDenseMappingPipeline::stopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_denseMappingProcessRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_denseMappingProcessRequest() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>* streamer) {
                       return this->StreameddenseMappingProcessRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_denseMappingProcessRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status denseMappingProcessRequest(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* /*request*/, ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddenseMappingProcessRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest,::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPointCloud() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDenseMappingPipeline::getPointCloudRequest, ::grpcIDenseMappingPipeline::getPointCloudResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDenseMappingPipeline::getPointCloudRequest, ::grpcIDenseMappingPipeline::getPointCloudResponse>* streamer) {
                       return this->StreamedgetPointCloud(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getPointCloudRequest* /*request*/, ::grpcIDenseMappingPipeline::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPointCloud(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDenseMappingPipeline::getPointCloudRequest,::grpcIDenseMappingPipeline::getPointCloudResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMesh() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDenseMappingPipeline::getMeshRequest, ::grpcIDenseMappingPipeline::getMeshResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDenseMappingPipeline::getMeshRequest, ::grpcIDenseMappingPipeline::getMeshResponse>* streamer) {
                       return this->StreamedgetMesh(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMesh(::grpc::ServerContext* /*context*/, const ::grpcIDenseMappingPipeline::getMeshRequest* /*request*/, ::grpcIDenseMappingPipeline::getMeshResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMesh(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDenseMappingPipeline::getMeshRequest,::grpcIDenseMappingPipeline::getMeshResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_isAlive<WithStreamedUnaryMethod_init<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_denseMappingProcessRequest<WithStreamedUnaryMethod_getPointCloud<WithStreamedUnaryMethod_getMesh<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_isAlive<WithStreamedUnaryMethod_init<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_denseMappingProcessRequest<WithStreamedUnaryMethod_getPointCloud<WithStreamedUnaryMethod_getMesh<Service > > > > > > > StreamedService;
};

}  // namespace grpcIDenseMappingPipeline


#endif  // GRPC_grpcIDenseMappingPipelineService_2eproto__INCLUDED
