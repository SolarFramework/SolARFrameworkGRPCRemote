// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcILoopCorrectorService.proto

#include "grpcILoopCorrectorService.pb.h"
#include "grpcILoopCorrectorService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcILoopCorrector {

static const char* grpcILoopCorrectorService_method_names[] = {
  "/grpcILoopCorrector.grpcILoopCorrectorService/correct_grpc0",
  "/grpcILoopCorrector.grpcILoopCorrectorService/correct_grpc1",
};

std::unique_ptr< grpcILoopCorrectorService::Stub> grpcILoopCorrectorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcILoopCorrectorService::Stub> stub(new grpcILoopCorrectorService::Stub(channel, options));
  return stub;
}

grpcILoopCorrectorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_correct_grpc0_(grpcILoopCorrectorService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_correct_grpc1_(grpcILoopCorrectorService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcILoopCorrectorService::Stub::correct_grpc0(::grpc::ClientContext* context, const ::grpcILoopCorrector::correct_grpc0Request& request, ::grpcILoopCorrector::correct_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcILoopCorrector::correct_grpc0Request, ::grpcILoopCorrector::correct_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_correct_grpc0_, context, request, response);
}

void grpcILoopCorrectorService::Stub::async::correct_grpc0(::grpc::ClientContext* context, const ::grpcILoopCorrector::correct_grpc0Request* request, ::grpcILoopCorrector::correct_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcILoopCorrector::correct_grpc0Request, ::grpcILoopCorrector::correct_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_correct_grpc0_, context, request, response, std::move(f));
}

void grpcILoopCorrectorService::Stub::async::correct_grpc0(::grpc::ClientContext* context, const ::grpcILoopCorrector::correct_grpc0Request* request, ::grpcILoopCorrector::correct_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_correct_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcILoopCorrector::correct_grpc0Response>* grpcILoopCorrectorService::Stub::PrepareAsynccorrect_grpc0Raw(::grpc::ClientContext* context, const ::grpcILoopCorrector::correct_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcILoopCorrector::correct_grpc0Response, ::grpcILoopCorrector::correct_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_correct_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcILoopCorrector::correct_grpc0Response>* grpcILoopCorrectorService::Stub::Asynccorrect_grpc0Raw(::grpc::ClientContext* context, const ::grpcILoopCorrector::correct_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccorrect_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcILoopCorrectorService::Stub::correct_grpc1(::grpc::ClientContext* context, const ::grpcILoopCorrector::correct_grpc1Request& request, ::grpcILoopCorrector::correct_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcILoopCorrector::correct_grpc1Request, ::grpcILoopCorrector::correct_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_correct_grpc1_, context, request, response);
}

void grpcILoopCorrectorService::Stub::async::correct_grpc1(::grpc::ClientContext* context, const ::grpcILoopCorrector::correct_grpc1Request* request, ::grpcILoopCorrector::correct_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcILoopCorrector::correct_grpc1Request, ::grpcILoopCorrector::correct_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_correct_grpc1_, context, request, response, std::move(f));
}

void grpcILoopCorrectorService::Stub::async::correct_grpc1(::grpc::ClientContext* context, const ::grpcILoopCorrector::correct_grpc1Request* request, ::grpcILoopCorrector::correct_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_correct_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcILoopCorrector::correct_grpc1Response>* grpcILoopCorrectorService::Stub::PrepareAsynccorrect_grpc1Raw(::grpc::ClientContext* context, const ::grpcILoopCorrector::correct_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcILoopCorrector::correct_grpc1Response, ::grpcILoopCorrector::correct_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_correct_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcILoopCorrector::correct_grpc1Response>* grpcILoopCorrectorService::Stub::Asynccorrect_grpc1Raw(::grpc::ClientContext* context, const ::grpcILoopCorrector::correct_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccorrect_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

grpcILoopCorrectorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcILoopCorrectorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcILoopCorrectorService::Service, ::grpcILoopCorrector::correct_grpc0Request, ::grpcILoopCorrector::correct_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcILoopCorrectorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcILoopCorrector::correct_grpc0Request* req,
             ::grpcILoopCorrector::correct_grpc0Response* resp) {
               return service->correct_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcILoopCorrectorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcILoopCorrectorService::Service, ::grpcILoopCorrector::correct_grpc1Request, ::grpcILoopCorrector::correct_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcILoopCorrectorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcILoopCorrector::correct_grpc1Request* req,
             ::grpcILoopCorrector::correct_grpc1Response* resp) {
               return service->correct_grpc1(ctx, req, resp);
             }, this)));
}

grpcILoopCorrectorService::Service::~Service() {
}

::grpc::Status grpcILoopCorrectorService::Service::correct_grpc0(::grpc::ServerContext* context, const ::grpcILoopCorrector::correct_grpc0Request* request, ::grpcILoopCorrector::correct_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcILoopCorrectorService::Service::correct_grpc1(::grpc::ServerContext* context, const ::grpcILoopCorrector::correct_grpc1Request* request, ::grpcILoopCorrector::correct_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcILoopCorrector

