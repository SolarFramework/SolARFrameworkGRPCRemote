// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIHomographyValidationService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIHomographyValidationService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIHomographyValidationService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIHomographyValidationService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIHomographyValidationService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIHomographyValidationService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIHomographyValidationService_2eproto_metadata_getter(int index);
namespace grpcIHomographyValidation {
class isValidRequest;
struct isValidRequestDefaultTypeInternal;
extern isValidRequestDefaultTypeInternal _isValidRequest_default_instance_;
class isValidResponse;
struct isValidResponseDefaultTypeInternal;
extern isValidResponseDefaultTypeInternal _isValidResponse_default_instance_;
}  // namespace grpcIHomographyValidation
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIHomographyValidation::isValidRequest* Arena::CreateMaybeMessage<::grpcIHomographyValidation::isValidRequest>(Arena*);
template<> ::grpcIHomographyValidation::isValidResponse* Arena::CreateMaybeMessage<::grpcIHomographyValidation::isValidResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIHomographyValidation {

// ===================================================================

class isValidRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIHomographyValidation.isValidRequest) */ {
 public:
  inline isValidRequest() : isValidRequest(nullptr) {}
  virtual ~isValidRequest();
  explicit constexpr isValidRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isValidRequest(const isValidRequest& from);
  isValidRequest(isValidRequest&& from) noexcept
    : isValidRequest() {
    *this = ::std::move(from);
  }

  inline isValidRequest& operator=(const isValidRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline isValidRequest& operator=(isValidRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const isValidRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const isValidRequest* internal_default_instance() {
    return reinterpret_cast<const isValidRequest*>(
               &_isValidRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(isValidRequest& a, isValidRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(isValidRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isValidRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isValidRequest* New() const final {
    return CreateMaybeMessage<isValidRequest>(nullptr);
  }

  isValidRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isValidRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const isValidRequest& from);
  void MergeFrom(const isValidRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isValidRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIHomographyValidation.isValidRequest";
  }
  protected:
  explicit isValidRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIHomographyValidationService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRef2DSquaredMarkerCornersFieldNumber = 1,
    kProjected2DSquaredMarkerCornersFieldNumber = 2,
  };
  // bytes ref2DSquaredMarkerCorners = 1;
  void clear_ref2dsquaredmarkercorners();
  const std::string& ref2dsquaredmarkercorners() const;
  void set_ref2dsquaredmarkercorners(const std::string& value);
  void set_ref2dsquaredmarkercorners(std::string&& value);
  void set_ref2dsquaredmarkercorners(const char* value);
  void set_ref2dsquaredmarkercorners(const void* value, size_t size);
  std::string* mutable_ref2dsquaredmarkercorners();
  std::string* release_ref2dsquaredmarkercorners();
  void set_allocated_ref2dsquaredmarkercorners(std::string* ref2dsquaredmarkercorners);
  private:
  const std::string& _internal_ref2dsquaredmarkercorners() const;
  void _internal_set_ref2dsquaredmarkercorners(const std::string& value);
  std::string* _internal_mutable_ref2dsquaredmarkercorners();
  public:

  // bytes projected2DSquaredMarkerCorners = 2;
  void clear_projected2dsquaredmarkercorners();
  const std::string& projected2dsquaredmarkercorners() const;
  void set_projected2dsquaredmarkercorners(const std::string& value);
  void set_projected2dsquaredmarkercorners(std::string&& value);
  void set_projected2dsquaredmarkercorners(const char* value);
  void set_projected2dsquaredmarkercorners(const void* value, size_t size);
  std::string* mutable_projected2dsquaredmarkercorners();
  std::string* release_projected2dsquaredmarkercorners();
  void set_allocated_projected2dsquaredmarkercorners(std::string* projected2dsquaredmarkercorners);
  private:
  const std::string& _internal_projected2dsquaredmarkercorners() const;
  void _internal_set_projected2dsquaredmarkercorners(const std::string& value);
  std::string* _internal_mutable_projected2dsquaredmarkercorners();
  public:

  // @@protoc_insertion_point(class_scope:grpcIHomographyValidation.isValidRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref2dsquaredmarkercorners_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projected2dsquaredmarkercorners_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIHomographyValidationService_2eproto;
};
// -------------------------------------------------------------------

class isValidResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIHomographyValidation.isValidResponse) */ {
 public:
  inline isValidResponse() : isValidResponse(nullptr) {}
  virtual ~isValidResponse();
  explicit constexpr isValidResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isValidResponse(const isValidResponse& from);
  isValidResponse(isValidResponse&& from) noexcept
    : isValidResponse() {
    *this = ::std::move(from);
  }

  inline isValidResponse& operator=(const isValidResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline isValidResponse& operator=(isValidResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const isValidResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const isValidResponse* internal_default_instance() {
    return reinterpret_cast<const isValidResponse*>(
               &_isValidResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(isValidResponse& a, isValidResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(isValidResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isValidResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isValidResponse* New() const final {
    return CreateMaybeMessage<isValidResponse>(nullptr);
  }

  isValidResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isValidResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const isValidResponse& from);
  void MergeFrom(const isValidResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isValidResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIHomographyValidation.isValidResponse";
  }
  protected:
  explicit isValidResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIHomographyValidationService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIHomographyValidation.isValidResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIHomographyValidationService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// isValidRequest

// bytes ref2DSquaredMarkerCorners = 1;
inline void isValidRequest::clear_ref2dsquaredmarkercorners() {
  ref2dsquaredmarkercorners_.ClearToEmpty();
}
inline const std::string& isValidRequest::ref2dsquaredmarkercorners() const {
  // @@protoc_insertion_point(field_get:grpcIHomographyValidation.isValidRequest.ref2DSquaredMarkerCorners)
  return _internal_ref2dsquaredmarkercorners();
}
inline void isValidRequest::set_ref2dsquaredmarkercorners(const std::string& value) {
  _internal_set_ref2dsquaredmarkercorners(value);
  // @@protoc_insertion_point(field_set:grpcIHomographyValidation.isValidRequest.ref2DSquaredMarkerCorners)
}
inline std::string* isValidRequest::mutable_ref2dsquaredmarkercorners() {
  // @@protoc_insertion_point(field_mutable:grpcIHomographyValidation.isValidRequest.ref2DSquaredMarkerCorners)
  return _internal_mutable_ref2dsquaredmarkercorners();
}
inline const std::string& isValidRequest::_internal_ref2dsquaredmarkercorners() const {
  return ref2dsquaredmarkercorners_.Get();
}
inline void isValidRequest::_internal_set_ref2dsquaredmarkercorners(const std::string& value) {
  
  ref2dsquaredmarkercorners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void isValidRequest::set_ref2dsquaredmarkercorners(std::string&& value) {
  
  ref2dsquaredmarkercorners_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIHomographyValidation.isValidRequest.ref2DSquaredMarkerCorners)
}
inline void isValidRequest::set_ref2dsquaredmarkercorners(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref2dsquaredmarkercorners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIHomographyValidation.isValidRequest.ref2DSquaredMarkerCorners)
}
inline void isValidRequest::set_ref2dsquaredmarkercorners(const void* value,
    size_t size) {
  
  ref2dsquaredmarkercorners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIHomographyValidation.isValidRequest.ref2DSquaredMarkerCorners)
}
inline std::string* isValidRequest::_internal_mutable_ref2dsquaredmarkercorners() {
  
  return ref2dsquaredmarkercorners_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* isValidRequest::release_ref2dsquaredmarkercorners() {
  // @@protoc_insertion_point(field_release:grpcIHomographyValidation.isValidRequest.ref2DSquaredMarkerCorners)
  return ref2dsquaredmarkercorners_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void isValidRequest::set_allocated_ref2dsquaredmarkercorners(std::string* ref2dsquaredmarkercorners) {
  if (ref2dsquaredmarkercorners != nullptr) {
    
  } else {
    
  }
  ref2dsquaredmarkercorners_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref2dsquaredmarkercorners,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIHomographyValidation.isValidRequest.ref2DSquaredMarkerCorners)
}

// bytes projected2DSquaredMarkerCorners = 2;
inline void isValidRequest::clear_projected2dsquaredmarkercorners() {
  projected2dsquaredmarkercorners_.ClearToEmpty();
}
inline const std::string& isValidRequest::projected2dsquaredmarkercorners() const {
  // @@protoc_insertion_point(field_get:grpcIHomographyValidation.isValidRequest.projected2DSquaredMarkerCorners)
  return _internal_projected2dsquaredmarkercorners();
}
inline void isValidRequest::set_projected2dsquaredmarkercorners(const std::string& value) {
  _internal_set_projected2dsquaredmarkercorners(value);
  // @@protoc_insertion_point(field_set:grpcIHomographyValidation.isValidRequest.projected2DSquaredMarkerCorners)
}
inline std::string* isValidRequest::mutable_projected2dsquaredmarkercorners() {
  // @@protoc_insertion_point(field_mutable:grpcIHomographyValidation.isValidRequest.projected2DSquaredMarkerCorners)
  return _internal_mutable_projected2dsquaredmarkercorners();
}
inline const std::string& isValidRequest::_internal_projected2dsquaredmarkercorners() const {
  return projected2dsquaredmarkercorners_.Get();
}
inline void isValidRequest::_internal_set_projected2dsquaredmarkercorners(const std::string& value) {
  
  projected2dsquaredmarkercorners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void isValidRequest::set_projected2dsquaredmarkercorners(std::string&& value) {
  
  projected2dsquaredmarkercorners_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIHomographyValidation.isValidRequest.projected2DSquaredMarkerCorners)
}
inline void isValidRequest::set_projected2dsquaredmarkercorners(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  projected2dsquaredmarkercorners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIHomographyValidation.isValidRequest.projected2DSquaredMarkerCorners)
}
inline void isValidRequest::set_projected2dsquaredmarkercorners(const void* value,
    size_t size) {
  
  projected2dsquaredmarkercorners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIHomographyValidation.isValidRequest.projected2DSquaredMarkerCorners)
}
inline std::string* isValidRequest::_internal_mutable_projected2dsquaredmarkercorners() {
  
  return projected2dsquaredmarkercorners_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* isValidRequest::release_projected2dsquaredmarkercorners() {
  // @@protoc_insertion_point(field_release:grpcIHomographyValidation.isValidRequest.projected2DSquaredMarkerCorners)
  return projected2dsquaredmarkercorners_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void isValidRequest::set_allocated_projected2dsquaredmarkercorners(std::string* projected2dsquaredmarkercorners) {
  if (projected2dsquaredmarkercorners != nullptr) {
    
  } else {
    
  }
  projected2dsquaredmarkercorners_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), projected2dsquaredmarkercorners,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIHomographyValidation.isValidRequest.projected2DSquaredMarkerCorners)
}

// -------------------------------------------------------------------

// isValidResponse

// bool xpcfGrpcReturnValue = 1;
inline void isValidResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool isValidResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool isValidResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIHomographyValidation.isValidResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void isValidResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void isValidResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIHomographyValidation.isValidResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIHomographyValidation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIHomographyValidationService_2eproto
