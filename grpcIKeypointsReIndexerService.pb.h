// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIKeypointsReIndexerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIKeypointsReIndexerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIKeypointsReIndexerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIKeypointsReIndexerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIKeypointsReIndexerService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIKeypointsReIndexerService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIKeypointsReIndexerService_2eproto_metadata_getter(int index);
namespace grpcIKeypointsReIndexer {
class reindexRequest;
struct reindexRequestDefaultTypeInternal;
extern reindexRequestDefaultTypeInternal _reindexRequest_default_instance_;
class reindexResponse;
struct reindexResponseDefaultTypeInternal;
extern reindexResponseDefaultTypeInternal _reindexResponse_default_instance_;
}  // namespace grpcIKeypointsReIndexer
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIKeypointsReIndexer::reindexRequest* Arena::CreateMaybeMessage<::grpcIKeypointsReIndexer::reindexRequest>(Arena*);
template<> ::grpcIKeypointsReIndexer::reindexResponse* Arena::CreateMaybeMessage<::grpcIKeypointsReIndexer::reindexResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIKeypointsReIndexer {

// ===================================================================

class reindexRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeypointsReIndexer.reindexRequest) */ {
 public:
  inline reindexRequest() : reindexRequest(nullptr) {}
  virtual ~reindexRequest();
  explicit constexpr reindexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reindexRequest(const reindexRequest& from);
  reindexRequest(reindexRequest&& from) noexcept
    : reindexRequest() {
    *this = ::std::move(from);
  }

  inline reindexRequest& operator=(const reindexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline reindexRequest& operator=(reindexRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const reindexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const reindexRequest* internal_default_instance() {
    return reinterpret_cast<const reindexRequest*>(
               &_reindexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(reindexRequest& a, reindexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(reindexRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reindexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline reindexRequest* New() const final {
    return CreateMaybeMessage<reindexRequest>(nullptr);
  }

  reindexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<reindexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const reindexRequest& from);
  void MergeFrom(const reindexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reindexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeypointsReIndexer.reindexRequest";
  }
  protected:
  explicit reindexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeypointsReIndexerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypoints1FieldNumber = 1,
    kKeypoints2FieldNumber = 2,
    kMatchesFieldNumber = 3,
    kMatchedKeypoints1FieldNumber = 4,
    kMatchedKeypoints2FieldNumber = 5,
  };
  // bytes keypoints1 = 1;
  void clear_keypoints1();
  const std::string& keypoints1() const;
  void set_keypoints1(const std::string& value);
  void set_keypoints1(std::string&& value);
  void set_keypoints1(const char* value);
  void set_keypoints1(const void* value, size_t size);
  std::string* mutable_keypoints1();
  std::string* release_keypoints1();
  void set_allocated_keypoints1(std::string* keypoints1);
  private:
  const std::string& _internal_keypoints1() const;
  void _internal_set_keypoints1(const std::string& value);
  std::string* _internal_mutable_keypoints1();
  public:

  // bytes keypoints2 = 2;
  void clear_keypoints2();
  const std::string& keypoints2() const;
  void set_keypoints2(const std::string& value);
  void set_keypoints2(std::string&& value);
  void set_keypoints2(const char* value);
  void set_keypoints2(const void* value, size_t size);
  std::string* mutable_keypoints2();
  std::string* release_keypoints2();
  void set_allocated_keypoints2(std::string* keypoints2);
  private:
  const std::string& _internal_keypoints2() const;
  void _internal_set_keypoints2(const std::string& value);
  std::string* _internal_mutable_keypoints2();
  public:

  // bytes matches = 3;
  void clear_matches();
  const std::string& matches() const;
  void set_matches(const std::string& value);
  void set_matches(std::string&& value);
  void set_matches(const char* value);
  void set_matches(const void* value, size_t size);
  std::string* mutable_matches();
  std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes matchedKeypoints1 = 4;
  void clear_matchedkeypoints1();
  const std::string& matchedkeypoints1() const;
  void set_matchedkeypoints1(const std::string& value);
  void set_matchedkeypoints1(std::string&& value);
  void set_matchedkeypoints1(const char* value);
  void set_matchedkeypoints1(const void* value, size_t size);
  std::string* mutable_matchedkeypoints1();
  std::string* release_matchedkeypoints1();
  void set_allocated_matchedkeypoints1(std::string* matchedkeypoints1);
  private:
  const std::string& _internal_matchedkeypoints1() const;
  void _internal_set_matchedkeypoints1(const std::string& value);
  std::string* _internal_mutable_matchedkeypoints1();
  public:

  // bytes matchedKeypoints2 = 5;
  void clear_matchedkeypoints2();
  const std::string& matchedkeypoints2() const;
  void set_matchedkeypoints2(const std::string& value);
  void set_matchedkeypoints2(std::string&& value);
  void set_matchedkeypoints2(const char* value);
  void set_matchedkeypoints2(const void* value, size_t size);
  std::string* mutable_matchedkeypoints2();
  std::string* release_matchedkeypoints2();
  void set_allocated_matchedkeypoints2(std::string* matchedkeypoints2);
  private:
  const std::string& _internal_matchedkeypoints2() const;
  void _internal_set_matchedkeypoints2(const std::string& value);
  std::string* _internal_mutable_matchedkeypoints2();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeypointsReIndexer.reindexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoints1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoints2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchedkeypoints1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchedkeypoints2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeypointsReIndexerService_2eproto;
};
// -------------------------------------------------------------------

class reindexResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeypointsReIndexer.reindexResponse) */ {
 public:
  inline reindexResponse() : reindexResponse(nullptr) {}
  virtual ~reindexResponse();
  explicit constexpr reindexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reindexResponse(const reindexResponse& from);
  reindexResponse(reindexResponse&& from) noexcept
    : reindexResponse() {
    *this = ::std::move(from);
  }

  inline reindexResponse& operator=(const reindexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline reindexResponse& operator=(reindexResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const reindexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const reindexResponse* internal_default_instance() {
    return reinterpret_cast<const reindexResponse*>(
               &_reindexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(reindexResponse& a, reindexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(reindexResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reindexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline reindexResponse* New() const final {
    return CreateMaybeMessage<reindexResponse>(nullptr);
  }

  reindexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<reindexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const reindexResponse& from);
  void MergeFrom(const reindexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reindexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeypointsReIndexer.reindexResponse";
  }
  protected:
  explicit reindexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeypointsReIndexerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchedKeypoints1FieldNumber = 1,
    kMatchedKeypoints2FieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes matchedKeypoints1 = 1;
  void clear_matchedkeypoints1();
  const std::string& matchedkeypoints1() const;
  void set_matchedkeypoints1(const std::string& value);
  void set_matchedkeypoints1(std::string&& value);
  void set_matchedkeypoints1(const char* value);
  void set_matchedkeypoints1(const void* value, size_t size);
  std::string* mutable_matchedkeypoints1();
  std::string* release_matchedkeypoints1();
  void set_allocated_matchedkeypoints1(std::string* matchedkeypoints1);
  private:
  const std::string& _internal_matchedkeypoints1() const;
  void _internal_set_matchedkeypoints1(const std::string& value);
  std::string* _internal_mutable_matchedkeypoints1();
  public:

  // bytes matchedKeypoints2 = 2;
  void clear_matchedkeypoints2();
  const std::string& matchedkeypoints2() const;
  void set_matchedkeypoints2(const std::string& value);
  void set_matchedkeypoints2(std::string&& value);
  void set_matchedkeypoints2(const char* value);
  void set_matchedkeypoints2(const void* value, size_t size);
  std::string* mutable_matchedkeypoints2();
  std::string* release_matchedkeypoints2();
  void set_allocated_matchedkeypoints2(std::string* matchedkeypoints2);
  private:
  const std::string& _internal_matchedkeypoints2() const;
  void _internal_set_matchedkeypoints2(const std::string& value);
  std::string* _internal_mutable_matchedkeypoints2();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeypointsReIndexer.reindexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchedkeypoints1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchedkeypoints2_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeypointsReIndexerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// reindexRequest

// bytes keypoints1 = 1;
inline void reindexRequest::clear_keypoints1() {
  keypoints1_.ClearToEmpty();
}
inline const std::string& reindexRequest::keypoints1() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointsReIndexer.reindexRequest.keypoints1)
  return _internal_keypoints1();
}
inline void reindexRequest::set_keypoints1(const std::string& value) {
  _internal_set_keypoints1(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointsReIndexer.reindexRequest.keypoints1)
}
inline std::string* reindexRequest::mutable_keypoints1() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointsReIndexer.reindexRequest.keypoints1)
  return _internal_mutable_keypoints1();
}
inline const std::string& reindexRequest::_internal_keypoints1() const {
  return keypoints1_.Get();
}
inline void reindexRequest::_internal_set_keypoints1(const std::string& value) {
  
  keypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexRequest::set_keypoints1(std::string&& value) {
  
  keypoints1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointsReIndexer.reindexRequest.keypoints1)
}
inline void reindexRequest::set_keypoints1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointsReIndexer.reindexRequest.keypoints1)
}
inline void reindexRequest::set_keypoints1(const void* value,
    size_t size) {
  
  keypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointsReIndexer.reindexRequest.keypoints1)
}
inline std::string* reindexRequest::_internal_mutable_keypoints1() {
  
  return keypoints1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexRequest::release_keypoints1() {
  // @@protoc_insertion_point(field_release:grpcIKeypointsReIndexer.reindexRequest.keypoints1)
  return keypoints1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexRequest::set_allocated_keypoints1(std::string* keypoints1) {
  if (keypoints1 != nullptr) {
    
  } else {
    
  }
  keypoints1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keypoints1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointsReIndexer.reindexRequest.keypoints1)
}

// bytes keypoints2 = 2;
inline void reindexRequest::clear_keypoints2() {
  keypoints2_.ClearToEmpty();
}
inline const std::string& reindexRequest::keypoints2() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointsReIndexer.reindexRequest.keypoints2)
  return _internal_keypoints2();
}
inline void reindexRequest::set_keypoints2(const std::string& value) {
  _internal_set_keypoints2(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointsReIndexer.reindexRequest.keypoints2)
}
inline std::string* reindexRequest::mutable_keypoints2() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointsReIndexer.reindexRequest.keypoints2)
  return _internal_mutable_keypoints2();
}
inline const std::string& reindexRequest::_internal_keypoints2() const {
  return keypoints2_.Get();
}
inline void reindexRequest::_internal_set_keypoints2(const std::string& value) {
  
  keypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexRequest::set_keypoints2(std::string&& value) {
  
  keypoints2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointsReIndexer.reindexRequest.keypoints2)
}
inline void reindexRequest::set_keypoints2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointsReIndexer.reindexRequest.keypoints2)
}
inline void reindexRequest::set_keypoints2(const void* value,
    size_t size) {
  
  keypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointsReIndexer.reindexRequest.keypoints2)
}
inline std::string* reindexRequest::_internal_mutable_keypoints2() {
  
  return keypoints2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexRequest::release_keypoints2() {
  // @@protoc_insertion_point(field_release:grpcIKeypointsReIndexer.reindexRequest.keypoints2)
  return keypoints2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexRequest::set_allocated_keypoints2(std::string* keypoints2) {
  if (keypoints2 != nullptr) {
    
  } else {
    
  }
  keypoints2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keypoints2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointsReIndexer.reindexRequest.keypoints2)
}

// bytes matches = 3;
inline void reindexRequest::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& reindexRequest::matches() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointsReIndexer.reindexRequest.matches)
  return _internal_matches();
}
inline void reindexRequest::set_matches(const std::string& value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointsReIndexer.reindexRequest.matches)
}
inline std::string* reindexRequest::mutable_matches() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointsReIndexer.reindexRequest.matches)
  return _internal_mutable_matches();
}
inline const std::string& reindexRequest::_internal_matches() const {
  return matches_.Get();
}
inline void reindexRequest::_internal_set_matches(const std::string& value) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexRequest::set_matches(std::string&& value) {
  
  matches_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointsReIndexer.reindexRequest.matches)
}
inline void reindexRequest::set_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointsReIndexer.reindexRequest.matches)
}
inline void reindexRequest::set_matches(const void* value,
    size_t size) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointsReIndexer.reindexRequest.matches)
}
inline std::string* reindexRequest::_internal_mutable_matches() {
  
  return matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexRequest::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIKeypointsReIndexer.reindexRequest.matches)
  return matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexRequest::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointsReIndexer.reindexRequest.matches)
}

// bytes matchedKeypoints1 = 4;
inline void reindexRequest::clear_matchedkeypoints1() {
  matchedkeypoints1_.ClearToEmpty();
}
inline const std::string& reindexRequest::matchedkeypoints1() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints1)
  return _internal_matchedkeypoints1();
}
inline void reindexRequest::set_matchedkeypoints1(const std::string& value) {
  _internal_set_matchedkeypoints1(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints1)
}
inline std::string* reindexRequest::mutable_matchedkeypoints1() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints1)
  return _internal_mutable_matchedkeypoints1();
}
inline const std::string& reindexRequest::_internal_matchedkeypoints1() const {
  return matchedkeypoints1_.Get();
}
inline void reindexRequest::_internal_set_matchedkeypoints1(const std::string& value) {
  
  matchedkeypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexRequest::set_matchedkeypoints1(std::string&& value) {
  
  matchedkeypoints1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints1)
}
inline void reindexRequest::set_matchedkeypoints1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchedkeypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints1)
}
inline void reindexRequest::set_matchedkeypoints1(const void* value,
    size_t size) {
  
  matchedkeypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints1)
}
inline std::string* reindexRequest::_internal_mutable_matchedkeypoints1() {
  
  return matchedkeypoints1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexRequest::release_matchedkeypoints1() {
  // @@protoc_insertion_point(field_release:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints1)
  return matchedkeypoints1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexRequest::set_allocated_matchedkeypoints1(std::string* matchedkeypoints1) {
  if (matchedkeypoints1 != nullptr) {
    
  } else {
    
  }
  matchedkeypoints1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchedkeypoints1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints1)
}

// bytes matchedKeypoints2 = 5;
inline void reindexRequest::clear_matchedkeypoints2() {
  matchedkeypoints2_.ClearToEmpty();
}
inline const std::string& reindexRequest::matchedkeypoints2() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints2)
  return _internal_matchedkeypoints2();
}
inline void reindexRequest::set_matchedkeypoints2(const std::string& value) {
  _internal_set_matchedkeypoints2(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints2)
}
inline std::string* reindexRequest::mutable_matchedkeypoints2() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints2)
  return _internal_mutable_matchedkeypoints2();
}
inline const std::string& reindexRequest::_internal_matchedkeypoints2() const {
  return matchedkeypoints2_.Get();
}
inline void reindexRequest::_internal_set_matchedkeypoints2(const std::string& value) {
  
  matchedkeypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexRequest::set_matchedkeypoints2(std::string&& value) {
  
  matchedkeypoints2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints2)
}
inline void reindexRequest::set_matchedkeypoints2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchedkeypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints2)
}
inline void reindexRequest::set_matchedkeypoints2(const void* value,
    size_t size) {
  
  matchedkeypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints2)
}
inline std::string* reindexRequest::_internal_mutable_matchedkeypoints2() {
  
  return matchedkeypoints2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexRequest::release_matchedkeypoints2() {
  // @@protoc_insertion_point(field_release:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints2)
  return matchedkeypoints2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexRequest::set_allocated_matchedkeypoints2(std::string* matchedkeypoints2) {
  if (matchedkeypoints2 != nullptr) {
    
  } else {
    
  }
  matchedkeypoints2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchedkeypoints2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointsReIndexer.reindexRequest.matchedKeypoints2)
}

// -------------------------------------------------------------------

// reindexResponse

// bytes matchedKeypoints1 = 1;
inline void reindexResponse::clear_matchedkeypoints1() {
  matchedkeypoints1_.ClearToEmpty();
}
inline const std::string& reindexResponse::matchedkeypoints1() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints1)
  return _internal_matchedkeypoints1();
}
inline void reindexResponse::set_matchedkeypoints1(const std::string& value) {
  _internal_set_matchedkeypoints1(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints1)
}
inline std::string* reindexResponse::mutable_matchedkeypoints1() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints1)
  return _internal_mutable_matchedkeypoints1();
}
inline const std::string& reindexResponse::_internal_matchedkeypoints1() const {
  return matchedkeypoints1_.Get();
}
inline void reindexResponse::_internal_set_matchedkeypoints1(const std::string& value) {
  
  matchedkeypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexResponse::set_matchedkeypoints1(std::string&& value) {
  
  matchedkeypoints1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints1)
}
inline void reindexResponse::set_matchedkeypoints1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchedkeypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints1)
}
inline void reindexResponse::set_matchedkeypoints1(const void* value,
    size_t size) {
  
  matchedkeypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints1)
}
inline std::string* reindexResponse::_internal_mutable_matchedkeypoints1() {
  
  return matchedkeypoints1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexResponse::release_matchedkeypoints1() {
  // @@protoc_insertion_point(field_release:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints1)
  return matchedkeypoints1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexResponse::set_allocated_matchedkeypoints1(std::string* matchedkeypoints1) {
  if (matchedkeypoints1 != nullptr) {
    
  } else {
    
  }
  matchedkeypoints1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchedkeypoints1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints1)
}

// bytes matchedKeypoints2 = 2;
inline void reindexResponse::clear_matchedkeypoints2() {
  matchedkeypoints2_.ClearToEmpty();
}
inline const std::string& reindexResponse::matchedkeypoints2() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints2)
  return _internal_matchedkeypoints2();
}
inline void reindexResponse::set_matchedkeypoints2(const std::string& value) {
  _internal_set_matchedkeypoints2(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints2)
}
inline std::string* reindexResponse::mutable_matchedkeypoints2() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints2)
  return _internal_mutable_matchedkeypoints2();
}
inline const std::string& reindexResponse::_internal_matchedkeypoints2() const {
  return matchedkeypoints2_.Get();
}
inline void reindexResponse::_internal_set_matchedkeypoints2(const std::string& value) {
  
  matchedkeypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexResponse::set_matchedkeypoints2(std::string&& value) {
  
  matchedkeypoints2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints2)
}
inline void reindexResponse::set_matchedkeypoints2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchedkeypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints2)
}
inline void reindexResponse::set_matchedkeypoints2(const void* value,
    size_t size) {
  
  matchedkeypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints2)
}
inline std::string* reindexResponse::_internal_mutable_matchedkeypoints2() {
  
  return matchedkeypoints2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexResponse::release_matchedkeypoints2() {
  // @@protoc_insertion_point(field_release:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints2)
  return matchedkeypoints2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexResponse::set_allocated_matchedkeypoints2(std::string* matchedkeypoints2) {
  if (matchedkeypoints2 != nullptr) {
    
  } else {
    
  }
  matchedkeypoints2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchedkeypoints2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointsReIndexer.reindexResponse.matchedKeypoints2)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void reindexResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 reindexResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 reindexResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointsReIndexer.reindexResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void reindexResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void reindexResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointsReIndexer.reindexResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIKeypointsReIndexer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIKeypointsReIndexerService_2eproto
