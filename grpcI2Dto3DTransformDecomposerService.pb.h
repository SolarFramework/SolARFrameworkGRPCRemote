// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcI2Dto3DTransformDecomposerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcI2Dto3DTransformDecomposerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcI2Dto3DTransformDecomposerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcI2Dto3DTransformDecomposerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcI2Dto3DTransformDecomposerService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcI2Dto3DTransformDecomposerService_2eproto;
namespace grpcI2Dto3DTransformDecomposer {
class decomposeRequest;
struct decomposeRequestDefaultTypeInternal;
extern decomposeRequestDefaultTypeInternal _decomposeRequest_default_instance_;
class decomposeResponse;
struct decomposeResponseDefaultTypeInternal;
extern decomposeResponseDefaultTypeInternal _decomposeResponse_default_instance_;
}  // namespace grpcI2Dto3DTransformDecomposer
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcI2Dto3DTransformDecomposer::decomposeRequest* Arena::CreateMaybeMessage<::grpcI2Dto3DTransformDecomposer::decomposeRequest>(Arena*);
template<> ::grpcI2Dto3DTransformDecomposer::decomposeResponse* Arena::CreateMaybeMessage<::grpcI2Dto3DTransformDecomposer::decomposeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcI2Dto3DTransformDecomposer {

// ===================================================================

class decomposeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2Dto3DTransformDecomposer.decomposeRequest) */ {
 public:
  inline decomposeRequest() : decomposeRequest(nullptr) {}
  ~decomposeRequest() override;
  explicit PROTOBUF_CONSTEXPR decomposeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  decomposeRequest(const decomposeRequest& from);
  decomposeRequest(decomposeRequest&& from) noexcept
    : decomposeRequest() {
    *this = ::std::move(from);
  }

  inline decomposeRequest& operator=(const decomposeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline decomposeRequest& operator=(decomposeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const decomposeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const decomposeRequest* internal_default_instance() {
    return reinterpret_cast<const decomposeRequest*>(
               &_decomposeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(decomposeRequest& a, decomposeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(decomposeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(decomposeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  decomposeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<decomposeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const decomposeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const decomposeRequest& from) {
    decomposeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(decomposeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2Dto3DTransformDecomposer.decomposeRequest";
  }
  protected:
  explicit decomposeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFFieldNumber = 2,
    kCamParamsFieldNumber = 3,
    kDecomposedPosesFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes F = 2;
  void clear_f();
  const std::string& f() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_f(ArgT0&& arg0, ArgT... args);
  std::string* mutable_f();
  PROTOBUF_NODISCARD std::string* release_f();
  void set_allocated_f(std::string* f);
  private:
  const std::string& _internal_f() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f(const std::string& value);
  std::string* _internal_mutable_f();
  public:

  // bytes camParams = 3;
  void clear_camparams();
  const std::string& camparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams();
  PROTOBUF_NODISCARD std::string* release_camparams();
  void set_allocated_camparams(std::string* camparams);
  private:
  const std::string& _internal_camparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams(const std::string& value);
  std::string* _internal_mutable_camparams();
  public:

  // bytes decomposedPoses = 4;
  void clear_decomposedposes();
  const std::string& decomposedposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decomposedposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decomposedposes();
  PROTOBUF_NODISCARD std::string* release_decomposedposes();
  void set_allocated_decomposedposes(std::string* decomposedposes);
  private:
  const std::string& _internal_decomposedposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decomposedposes(const std::string& value);
  std::string* _internal_mutable_decomposedposes();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI2Dto3DTransformDecomposer.decomposeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decomposedposes_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcI2Dto3DTransformDecomposerService_2eproto;
};
// -------------------------------------------------------------------

class decomposeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2Dto3DTransformDecomposer.decomposeResponse) */ {
 public:
  inline decomposeResponse() : decomposeResponse(nullptr) {}
  ~decomposeResponse() override;
  explicit PROTOBUF_CONSTEXPR decomposeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  decomposeResponse(const decomposeResponse& from);
  decomposeResponse(decomposeResponse&& from) noexcept
    : decomposeResponse() {
    *this = ::std::move(from);
  }

  inline decomposeResponse& operator=(const decomposeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline decomposeResponse& operator=(decomposeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const decomposeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const decomposeResponse* internal_default_instance() {
    return reinterpret_cast<const decomposeResponse*>(
               &_decomposeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(decomposeResponse& a, decomposeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(decomposeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(decomposeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  decomposeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<decomposeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const decomposeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const decomposeResponse& from) {
    decomposeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(decomposeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2Dto3DTransformDecomposer.decomposeResponse";
  }
  protected:
  explicit decomposeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecomposedPosesFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes decomposedPoses = 1;
  void clear_decomposedposes();
  const std::string& decomposedposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decomposedposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decomposedposes();
  PROTOBUF_NODISCARD std::string* release_decomposedposes();
  void set_allocated_decomposedposes(std::string* decomposedposes);
  private:
  const std::string& _internal_decomposedposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decomposedposes(const std::string& value);
  std::string* _internal_mutable_decomposedposes();
  public:

  // bool xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI2Dto3DTransformDecomposer.decomposeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decomposedposes_;
    bool xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcI2Dto3DTransformDecomposerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// decomposeRequest

// int32 grpcServerCompressionFormat = 1;
inline void decomposeRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t decomposeRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t decomposeRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcI2Dto3DTransformDecomposer.decomposeRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void decomposeRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void decomposeRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcI2Dto3DTransformDecomposer.decomposeRequest.grpcServerCompressionFormat)
}

// bytes F = 2;
inline void decomposeRequest::clear_f() {
  _impl_.f_.ClearToEmpty();
}
inline const std::string& decomposeRequest::f() const {
  // @@protoc_insertion_point(field_get:grpcI2Dto3DTransformDecomposer.decomposeRequest.F)
  return _internal_f();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void decomposeRequest::set_f(ArgT0&& arg0, ArgT... args) {
 
 _impl_.f_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2Dto3DTransformDecomposer.decomposeRequest.F)
}
inline std::string* decomposeRequest::mutable_f() {
  std::string* _s = _internal_mutable_f();
  // @@protoc_insertion_point(field_mutable:grpcI2Dto3DTransformDecomposer.decomposeRequest.F)
  return _s;
}
inline const std::string& decomposeRequest::_internal_f() const {
  return _impl_.f_.Get();
}
inline void decomposeRequest::_internal_set_f(const std::string& value) {
  
  _impl_.f_.Set(value, GetArenaForAllocation());
}
inline std::string* decomposeRequest::_internal_mutable_f() {
  
  return _impl_.f_.Mutable(GetArenaForAllocation());
}
inline std::string* decomposeRequest::release_f() {
  // @@protoc_insertion_point(field_release:grpcI2Dto3DTransformDecomposer.decomposeRequest.F)
  return _impl_.f_.Release();
}
inline void decomposeRequest::set_allocated_f(std::string* f) {
  if (f != nullptr) {
    
  } else {
    
  }
  _impl_.f_.SetAllocated(f, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.f_.IsDefault()) {
    _impl_.f_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI2Dto3DTransformDecomposer.decomposeRequest.F)
}

// bytes camParams = 3;
inline void decomposeRequest::clear_camparams() {
  _impl_.camparams_.ClearToEmpty();
}
inline const std::string& decomposeRequest::camparams() const {
  // @@protoc_insertion_point(field_get:grpcI2Dto3DTransformDecomposer.decomposeRequest.camParams)
  return _internal_camparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void decomposeRequest::set_camparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.camparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2Dto3DTransformDecomposer.decomposeRequest.camParams)
}
inline std::string* decomposeRequest::mutable_camparams() {
  std::string* _s = _internal_mutable_camparams();
  // @@protoc_insertion_point(field_mutable:grpcI2Dto3DTransformDecomposer.decomposeRequest.camParams)
  return _s;
}
inline const std::string& decomposeRequest::_internal_camparams() const {
  return _impl_.camparams_.Get();
}
inline void decomposeRequest::_internal_set_camparams(const std::string& value) {
  
  _impl_.camparams_.Set(value, GetArenaForAllocation());
}
inline std::string* decomposeRequest::_internal_mutable_camparams() {
  
  return _impl_.camparams_.Mutable(GetArenaForAllocation());
}
inline std::string* decomposeRequest::release_camparams() {
  // @@protoc_insertion_point(field_release:grpcI2Dto3DTransformDecomposer.decomposeRequest.camParams)
  return _impl_.camparams_.Release();
}
inline void decomposeRequest::set_allocated_camparams(std::string* camparams) {
  if (camparams != nullptr) {
    
  } else {
    
  }
  _impl_.camparams_.SetAllocated(camparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camparams_.IsDefault()) {
    _impl_.camparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI2Dto3DTransformDecomposer.decomposeRequest.camParams)
}

// bytes decomposedPoses = 4;
inline void decomposeRequest::clear_decomposedposes() {
  _impl_.decomposedposes_.ClearToEmpty();
}
inline const std::string& decomposeRequest::decomposedposes() const {
  // @@protoc_insertion_point(field_get:grpcI2Dto3DTransformDecomposer.decomposeRequest.decomposedPoses)
  return _internal_decomposedposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void decomposeRequest::set_decomposedposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.decomposedposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2Dto3DTransformDecomposer.decomposeRequest.decomposedPoses)
}
inline std::string* decomposeRequest::mutable_decomposedposes() {
  std::string* _s = _internal_mutable_decomposedposes();
  // @@protoc_insertion_point(field_mutable:grpcI2Dto3DTransformDecomposer.decomposeRequest.decomposedPoses)
  return _s;
}
inline const std::string& decomposeRequest::_internal_decomposedposes() const {
  return _impl_.decomposedposes_.Get();
}
inline void decomposeRequest::_internal_set_decomposedposes(const std::string& value) {
  
  _impl_.decomposedposes_.Set(value, GetArenaForAllocation());
}
inline std::string* decomposeRequest::_internal_mutable_decomposedposes() {
  
  return _impl_.decomposedposes_.Mutable(GetArenaForAllocation());
}
inline std::string* decomposeRequest::release_decomposedposes() {
  // @@protoc_insertion_point(field_release:grpcI2Dto3DTransformDecomposer.decomposeRequest.decomposedPoses)
  return _impl_.decomposedposes_.Release();
}
inline void decomposeRequest::set_allocated_decomposedposes(std::string* decomposedposes) {
  if (decomposedposes != nullptr) {
    
  } else {
    
  }
  _impl_.decomposedposes_.SetAllocated(decomposedposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.decomposedposes_.IsDefault()) {
    _impl_.decomposedposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI2Dto3DTransformDecomposer.decomposeRequest.decomposedPoses)
}

// -------------------------------------------------------------------

// decomposeResponse

// bytes decomposedPoses = 1;
inline void decomposeResponse::clear_decomposedposes() {
  _impl_.decomposedposes_.ClearToEmpty();
}
inline const std::string& decomposeResponse::decomposedposes() const {
  // @@protoc_insertion_point(field_get:grpcI2Dto3DTransformDecomposer.decomposeResponse.decomposedPoses)
  return _internal_decomposedposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void decomposeResponse::set_decomposedposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.decomposedposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2Dto3DTransformDecomposer.decomposeResponse.decomposedPoses)
}
inline std::string* decomposeResponse::mutable_decomposedposes() {
  std::string* _s = _internal_mutable_decomposedposes();
  // @@protoc_insertion_point(field_mutable:grpcI2Dto3DTransformDecomposer.decomposeResponse.decomposedPoses)
  return _s;
}
inline const std::string& decomposeResponse::_internal_decomposedposes() const {
  return _impl_.decomposedposes_.Get();
}
inline void decomposeResponse::_internal_set_decomposedposes(const std::string& value) {
  
  _impl_.decomposedposes_.Set(value, GetArenaForAllocation());
}
inline std::string* decomposeResponse::_internal_mutable_decomposedposes() {
  
  return _impl_.decomposedposes_.Mutable(GetArenaForAllocation());
}
inline std::string* decomposeResponse::release_decomposedposes() {
  // @@protoc_insertion_point(field_release:grpcI2Dto3DTransformDecomposer.decomposeResponse.decomposedPoses)
  return _impl_.decomposedposes_.Release();
}
inline void decomposeResponse::set_allocated_decomposedposes(std::string* decomposedposes) {
  if (decomposedposes != nullptr) {
    
  } else {
    
  }
  _impl_.decomposedposes_.SetAllocated(decomposedposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.decomposedposes_.IsDefault()) {
    _impl_.decomposedposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI2Dto3DTransformDecomposer.decomposeResponse.decomposedPoses)
}

// bool xpcfGrpcReturnValue = 2;
inline void decomposeResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = false;
}
inline bool decomposeResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline bool decomposeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI2Dto3DTransformDecomposer.decomposeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void decomposeResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void decomposeResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI2Dto3DTransformDecomposer.decomposeResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcI2Dto3DTransformDecomposer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcI2Dto3DTransformDecomposerService_2eproto
