// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcI2D3DCorrespondencesFinderService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcI2D3DCorrespondencesFinderService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcI2D3DCorrespondencesFinderService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcI2D3DCorrespondencesFinderService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcI2D3DCorrespondencesFinderService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcI2D3DCorrespondencesFinderService_2eproto;
namespace grpcI2D3DCorrespondencesFinder {
class findRequest;
struct findRequestDefaultTypeInternal;
extern findRequestDefaultTypeInternal _findRequest_default_instance_;
class findResponse;
struct findResponseDefaultTypeInternal;
extern findResponseDefaultTypeInternal _findResponse_default_instance_;
}  // namespace grpcI2D3DCorrespondencesFinder
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcI2D3DCorrespondencesFinder::findRequest* Arena::CreateMaybeMessage<::grpcI2D3DCorrespondencesFinder::findRequest>(Arena*);
template<> ::grpcI2D3DCorrespondencesFinder::findResponse* Arena::CreateMaybeMessage<::grpcI2D3DCorrespondencesFinder::findResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcI2D3DCorrespondencesFinder {

// ===================================================================

class findRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2D3DCorrespondencesFinder.findRequest) */ {
 public:
  inline findRequest() : findRequest(nullptr) {}
  ~findRequest() override;
  explicit constexpr findRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  findRequest(const findRequest& from);
  findRequest(findRequest&& from) noexcept
    : findRequest() {
    *this = ::std::move(from);
  }

  inline findRequest& operator=(const findRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline findRequest& operator=(findRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const findRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const findRequest* internal_default_instance() {
    return reinterpret_cast<const findRequest*>(
               &_findRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(findRequest& a, findRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(findRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(findRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline findRequest* New() const final {
    return new findRequest();
  }

  findRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<findRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const findRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const findRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(findRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2D3DCorrespondencesFinder.findRequest";
  }
  protected:
  explicit findRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastFrameFieldNumber = 1,
    kCurrentFrameFieldNumber = 2,
    kCurrentMatchesFieldNumber = 3,
    kShared3DpointFieldNumber = 4,
    kShared2DpointFieldNumber = 5,
    kCorres2D3DFieldNumber = 6,
    kFoundMatchesFieldNumber = 7,
    kRemainingMatchesFieldNumber = 8,
  };
  // bytes lastFrame = 1;
  void clear_lastframe();
  const std::string& lastframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastframe();
  PROTOBUF_MUST_USE_RESULT std::string* release_lastframe();
  void set_allocated_lastframe(std::string* lastframe);
  private:
  const std::string& _internal_lastframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastframe(const std::string& value);
  std::string* _internal_mutable_lastframe();
  public:

  // bytes currentFrame = 2;
  void clear_currentframe();
  const std::string& currentframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currentframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currentframe();
  PROTOBUF_MUST_USE_RESULT std::string* release_currentframe();
  void set_allocated_currentframe(std::string* currentframe);
  private:
  const std::string& _internal_currentframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentframe(const std::string& value);
  std::string* _internal_mutable_currentframe();
  public:

  // bytes current_matches = 3;
  void clear_current_matches();
  const std::string& current_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_matches();
  PROTOBUF_MUST_USE_RESULT std::string* release_current_matches();
  void set_allocated_current_matches(std::string* current_matches);
  private:
  const std::string& _internal_current_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_matches(const std::string& value);
  std::string* _internal_mutable_current_matches();
  public:

  // bytes shared_3dpoint = 4;
  void clear_shared_3dpoint();
  const std::string& shared_3dpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shared_3dpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shared_3dpoint();
  PROTOBUF_MUST_USE_RESULT std::string* release_shared_3dpoint();
  void set_allocated_shared_3dpoint(std::string* shared_3dpoint);
  private:
  const std::string& _internal_shared_3dpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shared_3dpoint(const std::string& value);
  std::string* _internal_mutable_shared_3dpoint();
  public:

  // bytes shared_2dpoint = 5;
  void clear_shared_2dpoint();
  const std::string& shared_2dpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shared_2dpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shared_2dpoint();
  PROTOBUF_MUST_USE_RESULT std::string* release_shared_2dpoint();
  void set_allocated_shared_2dpoint(std::string* shared_2dpoint);
  private:
  const std::string& _internal_shared_2dpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shared_2dpoint(const std::string& value);
  std::string* _internal_mutable_shared_2dpoint();
  public:

  // bytes corres2D3D = 6;
  void clear_corres2d3d();
  const std::string& corres2d3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_corres2d3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_corres2d3d();
  PROTOBUF_MUST_USE_RESULT std::string* release_corres2d3d();
  void set_allocated_corres2d3d(std::string* corres2d3d);
  private:
  const std::string& _internal_corres2d3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_corres2d3d(const std::string& value);
  std::string* _internal_mutable_corres2d3d();
  public:

  // bytes found_matches = 7;
  void clear_found_matches();
  const std::string& found_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_found_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_found_matches();
  PROTOBUF_MUST_USE_RESULT std::string* release_found_matches();
  void set_allocated_found_matches(std::string* found_matches);
  private:
  const std::string& _internal_found_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_found_matches(const std::string& value);
  std::string* _internal_mutable_found_matches();
  public:

  // bytes remaining_matches = 8;
  void clear_remaining_matches();
  const std::string& remaining_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remaining_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remaining_matches();
  PROTOBUF_MUST_USE_RESULT std::string* release_remaining_matches();
  void set_allocated_remaining_matches(std::string* remaining_matches);
  private:
  const std::string& _internal_remaining_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remaining_matches(const std::string& value);
  std::string* _internal_mutable_remaining_matches();
  public:

  // @@protoc_insertion_point(class_scope:grpcI2D3DCorrespondencesFinder.findRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shared_3dpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shared_2dpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr corres2d3d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr found_matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remaining_matches_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2D3DCorrespondencesFinderService_2eproto;
};
// -------------------------------------------------------------------

class findResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2D3DCorrespondencesFinder.findResponse) */ {
 public:
  inline findResponse() : findResponse(nullptr) {}
  ~findResponse() override;
  explicit constexpr findResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  findResponse(const findResponse& from);
  findResponse(findResponse&& from) noexcept
    : findResponse() {
    *this = ::std::move(from);
  }

  inline findResponse& operator=(const findResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline findResponse& operator=(findResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const findResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const findResponse* internal_default_instance() {
    return reinterpret_cast<const findResponse*>(
               &_findResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(findResponse& a, findResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(findResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(findResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline findResponse* New() const final {
    return new findResponse();
  }

  findResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<findResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const findResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const findResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(findResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2D3DCorrespondencesFinder.findResponse";
  }
  protected:
  explicit findResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShared3DpointFieldNumber = 1,
    kShared2DpointFieldNumber = 2,
    kCorres2D3DFieldNumber = 3,
    kFoundMatchesFieldNumber = 4,
    kRemainingMatchesFieldNumber = 5,
    kXpcfGrpcReturnValueFieldNumber = 6,
  };
  // bytes shared_3dpoint = 1;
  void clear_shared_3dpoint();
  const std::string& shared_3dpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shared_3dpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shared_3dpoint();
  PROTOBUF_MUST_USE_RESULT std::string* release_shared_3dpoint();
  void set_allocated_shared_3dpoint(std::string* shared_3dpoint);
  private:
  const std::string& _internal_shared_3dpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shared_3dpoint(const std::string& value);
  std::string* _internal_mutable_shared_3dpoint();
  public:

  // bytes shared_2dpoint = 2;
  void clear_shared_2dpoint();
  const std::string& shared_2dpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shared_2dpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shared_2dpoint();
  PROTOBUF_MUST_USE_RESULT std::string* release_shared_2dpoint();
  void set_allocated_shared_2dpoint(std::string* shared_2dpoint);
  private:
  const std::string& _internal_shared_2dpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shared_2dpoint(const std::string& value);
  std::string* _internal_mutable_shared_2dpoint();
  public:

  // bytes corres2D3D = 3;
  void clear_corres2d3d();
  const std::string& corres2d3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_corres2d3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_corres2d3d();
  PROTOBUF_MUST_USE_RESULT std::string* release_corres2d3d();
  void set_allocated_corres2d3d(std::string* corres2d3d);
  private:
  const std::string& _internal_corres2d3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_corres2d3d(const std::string& value);
  std::string* _internal_mutable_corres2d3d();
  public:

  // bytes found_matches = 4;
  void clear_found_matches();
  const std::string& found_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_found_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_found_matches();
  PROTOBUF_MUST_USE_RESULT std::string* release_found_matches();
  void set_allocated_found_matches(std::string* found_matches);
  private:
  const std::string& _internal_found_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_found_matches(const std::string& value);
  std::string* _internal_mutable_found_matches();
  public:

  // bytes remaining_matches = 5;
  void clear_remaining_matches();
  const std::string& remaining_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remaining_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remaining_matches();
  PROTOBUF_MUST_USE_RESULT std::string* release_remaining_matches();
  void set_allocated_remaining_matches(std::string* remaining_matches);
  private:
  const std::string& _internal_remaining_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remaining_matches(const std::string& value);
  std::string* _internal_mutable_remaining_matches();
  public:

  // sint32 xpcfGrpcReturnValue = 6;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI2D3DCorrespondencesFinder.findResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shared_3dpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shared_2dpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr corres2d3d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr found_matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remaining_matches_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2D3DCorrespondencesFinderService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// findRequest

// bytes lastFrame = 1;
inline void findRequest::clear_lastframe() {
  lastframe_.ClearToEmpty();
}
inline const std::string& findRequest::lastframe() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findRequest.lastFrame)
  return _internal_lastframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findRequest::set_lastframe(ArgT0&& arg0, ArgT... args) {
 
 lastframe_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findRequest.lastFrame)
}
inline std::string* findRequest::mutable_lastframe() {
  std::string* _s = _internal_mutable_lastframe();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findRequest.lastFrame)
  return _s;
}
inline const std::string& findRequest::_internal_lastframe() const {
  return lastframe_.Get();
}
inline void findRequest::_internal_set_lastframe(const std::string& value) {
  
  lastframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findRequest::_internal_mutable_lastframe() {
  
  return lastframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findRequest::release_lastframe() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findRequest.lastFrame)
  return lastframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findRequest::set_allocated_lastframe(std::string* lastframe) {
  if (lastframe != nullptr) {
    
  } else {
    
  }
  lastframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastframe,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findRequest.lastFrame)
}

// bytes currentFrame = 2;
inline void findRequest::clear_currentframe() {
  currentframe_.ClearToEmpty();
}
inline const std::string& findRequest::currentframe() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findRequest.currentFrame)
  return _internal_currentframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findRequest::set_currentframe(ArgT0&& arg0, ArgT... args) {
 
 currentframe_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findRequest.currentFrame)
}
inline std::string* findRequest::mutable_currentframe() {
  std::string* _s = _internal_mutable_currentframe();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findRequest.currentFrame)
  return _s;
}
inline const std::string& findRequest::_internal_currentframe() const {
  return currentframe_.Get();
}
inline void findRequest::_internal_set_currentframe(const std::string& value) {
  
  currentframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findRequest::_internal_mutable_currentframe() {
  
  return currentframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findRequest::release_currentframe() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findRequest.currentFrame)
  return currentframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findRequest::set_allocated_currentframe(std::string* currentframe) {
  if (currentframe != nullptr) {
    
  } else {
    
  }
  currentframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentframe,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findRequest.currentFrame)
}

// bytes current_matches = 3;
inline void findRequest::clear_current_matches() {
  current_matches_.ClearToEmpty();
}
inline const std::string& findRequest::current_matches() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findRequest.current_matches)
  return _internal_current_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findRequest::set_current_matches(ArgT0&& arg0, ArgT... args) {
 
 current_matches_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findRequest.current_matches)
}
inline std::string* findRequest::mutable_current_matches() {
  std::string* _s = _internal_mutable_current_matches();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findRequest.current_matches)
  return _s;
}
inline const std::string& findRequest::_internal_current_matches() const {
  return current_matches_.Get();
}
inline void findRequest::_internal_set_current_matches(const std::string& value) {
  
  current_matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findRequest::_internal_mutable_current_matches() {
  
  return current_matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findRequest::release_current_matches() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findRequest.current_matches)
  return current_matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findRequest::set_allocated_current_matches(std::string* current_matches) {
  if (current_matches != nullptr) {
    
  } else {
    
  }
  current_matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_matches,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findRequest.current_matches)
}

// bytes shared_3dpoint = 4;
inline void findRequest::clear_shared_3dpoint() {
  shared_3dpoint_.ClearToEmpty();
}
inline const std::string& findRequest::shared_3dpoint() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findRequest.shared_3dpoint)
  return _internal_shared_3dpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findRequest::set_shared_3dpoint(ArgT0&& arg0, ArgT... args) {
 
 shared_3dpoint_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findRequest.shared_3dpoint)
}
inline std::string* findRequest::mutable_shared_3dpoint() {
  std::string* _s = _internal_mutable_shared_3dpoint();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findRequest.shared_3dpoint)
  return _s;
}
inline const std::string& findRequest::_internal_shared_3dpoint() const {
  return shared_3dpoint_.Get();
}
inline void findRequest::_internal_set_shared_3dpoint(const std::string& value) {
  
  shared_3dpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findRequest::_internal_mutable_shared_3dpoint() {
  
  return shared_3dpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findRequest::release_shared_3dpoint() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findRequest.shared_3dpoint)
  return shared_3dpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findRequest::set_allocated_shared_3dpoint(std::string* shared_3dpoint) {
  if (shared_3dpoint != nullptr) {
    
  } else {
    
  }
  shared_3dpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shared_3dpoint,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findRequest.shared_3dpoint)
}

// bytes shared_2dpoint = 5;
inline void findRequest::clear_shared_2dpoint() {
  shared_2dpoint_.ClearToEmpty();
}
inline const std::string& findRequest::shared_2dpoint() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findRequest.shared_2dpoint)
  return _internal_shared_2dpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findRequest::set_shared_2dpoint(ArgT0&& arg0, ArgT... args) {
 
 shared_2dpoint_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findRequest.shared_2dpoint)
}
inline std::string* findRequest::mutable_shared_2dpoint() {
  std::string* _s = _internal_mutable_shared_2dpoint();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findRequest.shared_2dpoint)
  return _s;
}
inline const std::string& findRequest::_internal_shared_2dpoint() const {
  return shared_2dpoint_.Get();
}
inline void findRequest::_internal_set_shared_2dpoint(const std::string& value) {
  
  shared_2dpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findRequest::_internal_mutable_shared_2dpoint() {
  
  return shared_2dpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findRequest::release_shared_2dpoint() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findRequest.shared_2dpoint)
  return shared_2dpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findRequest::set_allocated_shared_2dpoint(std::string* shared_2dpoint) {
  if (shared_2dpoint != nullptr) {
    
  } else {
    
  }
  shared_2dpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shared_2dpoint,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findRequest.shared_2dpoint)
}

// bytes corres2D3D = 6;
inline void findRequest::clear_corres2d3d() {
  corres2d3d_.ClearToEmpty();
}
inline const std::string& findRequest::corres2d3d() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findRequest.corres2D3D)
  return _internal_corres2d3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findRequest::set_corres2d3d(ArgT0&& arg0, ArgT... args) {
 
 corres2d3d_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findRequest.corres2D3D)
}
inline std::string* findRequest::mutable_corres2d3d() {
  std::string* _s = _internal_mutable_corres2d3d();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findRequest.corres2D3D)
  return _s;
}
inline const std::string& findRequest::_internal_corres2d3d() const {
  return corres2d3d_.Get();
}
inline void findRequest::_internal_set_corres2d3d(const std::string& value) {
  
  corres2d3d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findRequest::_internal_mutable_corres2d3d() {
  
  return corres2d3d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findRequest::release_corres2d3d() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findRequest.corres2D3D)
  return corres2d3d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findRequest::set_allocated_corres2d3d(std::string* corres2d3d) {
  if (corres2d3d != nullptr) {
    
  } else {
    
  }
  corres2d3d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), corres2d3d,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findRequest.corres2D3D)
}

// bytes found_matches = 7;
inline void findRequest::clear_found_matches() {
  found_matches_.ClearToEmpty();
}
inline const std::string& findRequest::found_matches() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findRequest.found_matches)
  return _internal_found_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findRequest::set_found_matches(ArgT0&& arg0, ArgT... args) {
 
 found_matches_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findRequest.found_matches)
}
inline std::string* findRequest::mutable_found_matches() {
  std::string* _s = _internal_mutable_found_matches();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findRequest.found_matches)
  return _s;
}
inline const std::string& findRequest::_internal_found_matches() const {
  return found_matches_.Get();
}
inline void findRequest::_internal_set_found_matches(const std::string& value) {
  
  found_matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findRequest::_internal_mutable_found_matches() {
  
  return found_matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findRequest::release_found_matches() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findRequest.found_matches)
  return found_matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findRequest::set_allocated_found_matches(std::string* found_matches) {
  if (found_matches != nullptr) {
    
  } else {
    
  }
  found_matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), found_matches,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findRequest.found_matches)
}

// bytes remaining_matches = 8;
inline void findRequest::clear_remaining_matches() {
  remaining_matches_.ClearToEmpty();
}
inline const std::string& findRequest::remaining_matches() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findRequest.remaining_matches)
  return _internal_remaining_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findRequest::set_remaining_matches(ArgT0&& arg0, ArgT... args) {
 
 remaining_matches_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findRequest.remaining_matches)
}
inline std::string* findRequest::mutable_remaining_matches() {
  std::string* _s = _internal_mutable_remaining_matches();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findRequest.remaining_matches)
  return _s;
}
inline const std::string& findRequest::_internal_remaining_matches() const {
  return remaining_matches_.Get();
}
inline void findRequest::_internal_set_remaining_matches(const std::string& value) {
  
  remaining_matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findRequest::_internal_mutable_remaining_matches() {
  
  return remaining_matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findRequest::release_remaining_matches() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findRequest.remaining_matches)
  return remaining_matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findRequest::set_allocated_remaining_matches(std::string* remaining_matches) {
  if (remaining_matches != nullptr) {
    
  } else {
    
  }
  remaining_matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remaining_matches,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findRequest.remaining_matches)
}

// -------------------------------------------------------------------

// findResponse

// bytes shared_3dpoint = 1;
inline void findResponse::clear_shared_3dpoint() {
  shared_3dpoint_.ClearToEmpty();
}
inline const std::string& findResponse::shared_3dpoint() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findResponse.shared_3dpoint)
  return _internal_shared_3dpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findResponse::set_shared_3dpoint(ArgT0&& arg0, ArgT... args) {
 
 shared_3dpoint_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findResponse.shared_3dpoint)
}
inline std::string* findResponse::mutable_shared_3dpoint() {
  std::string* _s = _internal_mutable_shared_3dpoint();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findResponse.shared_3dpoint)
  return _s;
}
inline const std::string& findResponse::_internal_shared_3dpoint() const {
  return shared_3dpoint_.Get();
}
inline void findResponse::_internal_set_shared_3dpoint(const std::string& value) {
  
  shared_3dpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findResponse::_internal_mutable_shared_3dpoint() {
  
  return shared_3dpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findResponse::release_shared_3dpoint() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findResponse.shared_3dpoint)
  return shared_3dpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findResponse::set_allocated_shared_3dpoint(std::string* shared_3dpoint) {
  if (shared_3dpoint != nullptr) {
    
  } else {
    
  }
  shared_3dpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shared_3dpoint,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findResponse.shared_3dpoint)
}

// bytes shared_2dpoint = 2;
inline void findResponse::clear_shared_2dpoint() {
  shared_2dpoint_.ClearToEmpty();
}
inline const std::string& findResponse::shared_2dpoint() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findResponse.shared_2dpoint)
  return _internal_shared_2dpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findResponse::set_shared_2dpoint(ArgT0&& arg0, ArgT... args) {
 
 shared_2dpoint_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findResponse.shared_2dpoint)
}
inline std::string* findResponse::mutable_shared_2dpoint() {
  std::string* _s = _internal_mutable_shared_2dpoint();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findResponse.shared_2dpoint)
  return _s;
}
inline const std::string& findResponse::_internal_shared_2dpoint() const {
  return shared_2dpoint_.Get();
}
inline void findResponse::_internal_set_shared_2dpoint(const std::string& value) {
  
  shared_2dpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findResponse::_internal_mutable_shared_2dpoint() {
  
  return shared_2dpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findResponse::release_shared_2dpoint() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findResponse.shared_2dpoint)
  return shared_2dpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findResponse::set_allocated_shared_2dpoint(std::string* shared_2dpoint) {
  if (shared_2dpoint != nullptr) {
    
  } else {
    
  }
  shared_2dpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shared_2dpoint,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findResponse.shared_2dpoint)
}

// bytes corres2D3D = 3;
inline void findResponse::clear_corres2d3d() {
  corres2d3d_.ClearToEmpty();
}
inline const std::string& findResponse::corres2d3d() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findResponse.corres2D3D)
  return _internal_corres2d3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findResponse::set_corres2d3d(ArgT0&& arg0, ArgT... args) {
 
 corres2d3d_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findResponse.corres2D3D)
}
inline std::string* findResponse::mutable_corres2d3d() {
  std::string* _s = _internal_mutable_corres2d3d();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findResponse.corres2D3D)
  return _s;
}
inline const std::string& findResponse::_internal_corres2d3d() const {
  return corres2d3d_.Get();
}
inline void findResponse::_internal_set_corres2d3d(const std::string& value) {
  
  corres2d3d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findResponse::_internal_mutable_corres2d3d() {
  
  return corres2d3d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findResponse::release_corres2d3d() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findResponse.corres2D3D)
  return corres2d3d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findResponse::set_allocated_corres2d3d(std::string* corres2d3d) {
  if (corres2d3d != nullptr) {
    
  } else {
    
  }
  corres2d3d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), corres2d3d,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findResponse.corres2D3D)
}

// bytes found_matches = 4;
inline void findResponse::clear_found_matches() {
  found_matches_.ClearToEmpty();
}
inline const std::string& findResponse::found_matches() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findResponse.found_matches)
  return _internal_found_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findResponse::set_found_matches(ArgT0&& arg0, ArgT... args) {
 
 found_matches_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findResponse.found_matches)
}
inline std::string* findResponse::mutable_found_matches() {
  std::string* _s = _internal_mutable_found_matches();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findResponse.found_matches)
  return _s;
}
inline const std::string& findResponse::_internal_found_matches() const {
  return found_matches_.Get();
}
inline void findResponse::_internal_set_found_matches(const std::string& value) {
  
  found_matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findResponse::_internal_mutable_found_matches() {
  
  return found_matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findResponse::release_found_matches() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findResponse.found_matches)
  return found_matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findResponse::set_allocated_found_matches(std::string* found_matches) {
  if (found_matches != nullptr) {
    
  } else {
    
  }
  found_matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), found_matches,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findResponse.found_matches)
}

// bytes remaining_matches = 5;
inline void findResponse::clear_remaining_matches() {
  remaining_matches_.ClearToEmpty();
}
inline const std::string& findResponse::remaining_matches() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findResponse.remaining_matches)
  return _internal_remaining_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findResponse::set_remaining_matches(ArgT0&& arg0, ArgT... args) {
 
 remaining_matches_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findResponse.remaining_matches)
}
inline std::string* findResponse::mutable_remaining_matches() {
  std::string* _s = _internal_mutable_remaining_matches();
  // @@protoc_insertion_point(field_mutable:grpcI2D3DCorrespondencesFinder.findResponse.remaining_matches)
  return _s;
}
inline const std::string& findResponse::_internal_remaining_matches() const {
  return remaining_matches_.Get();
}
inline void findResponse::_internal_set_remaining_matches(const std::string& value) {
  
  remaining_matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* findResponse::_internal_mutable_remaining_matches() {
  
  return remaining_matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* findResponse::release_remaining_matches() {
  // @@protoc_insertion_point(field_release:grpcI2D3DCorrespondencesFinder.findResponse.remaining_matches)
  return remaining_matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void findResponse::set_allocated_remaining_matches(std::string* remaining_matches) {
  if (remaining_matches != nullptr) {
    
  } else {
    
  }
  remaining_matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remaining_matches,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI2D3DCorrespondencesFinder.findResponse.remaining_matches)
}

// sint32 xpcfGrpcReturnValue = 6;
inline void findResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 findResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 findResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI2D3DCorrespondencesFinder.findResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void findResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void findResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI2D3DCorrespondencesFinder.findResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcI2D3DCorrespondencesFinder

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcI2D3DCorrespondencesFinderService_2eproto
