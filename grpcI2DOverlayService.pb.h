// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcI2DOverlayService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcI2DOverlayService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcI2DOverlayService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcI2DOverlayService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcI2DOverlayService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcI2DOverlayService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcI2DOverlayService_2eproto_metadata_getter(int index);
namespace grpcI2DOverlay {
class drawCircleRequest;
struct drawCircleRequestDefaultTypeInternal;
extern drawCircleRequestDefaultTypeInternal _drawCircleRequest_default_instance_;
class drawCircles_grpc0Request;
struct drawCircles_grpc0RequestDefaultTypeInternal;
extern drawCircles_grpc0RequestDefaultTypeInternal _drawCircles_grpc0Request_default_instance_;
class drawCircles_grpc1Request;
struct drawCircles_grpc1RequestDefaultTypeInternal;
extern drawCircles_grpc1RequestDefaultTypeInternal _drawCircles_grpc1Request_default_instance_;
class drawContourRequest;
struct drawContourRequestDefaultTypeInternal;
extern drawContourRequestDefaultTypeInternal _drawContourRequest_default_instance_;
class drawContoursRequest;
struct drawContoursRequestDefaultTypeInternal;
extern drawContoursRequestDefaultTypeInternal _drawContoursRequest_default_instance_;
class drawSBPatternRequest;
struct drawSBPatternRequestDefaultTypeInternal;
extern drawSBPatternRequestDefaultTypeInternal _drawSBPatternRequest_default_instance_;
}  // namespace grpcI2DOverlay
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcI2DOverlay::drawCircleRequest* Arena::CreateMaybeMessage<::grpcI2DOverlay::drawCircleRequest>(Arena*);
template<> ::grpcI2DOverlay::drawCircles_grpc0Request* Arena::CreateMaybeMessage<::grpcI2DOverlay::drawCircles_grpc0Request>(Arena*);
template<> ::grpcI2DOverlay::drawCircles_grpc1Request* Arena::CreateMaybeMessage<::grpcI2DOverlay::drawCircles_grpc1Request>(Arena*);
template<> ::grpcI2DOverlay::drawContourRequest* Arena::CreateMaybeMessage<::grpcI2DOverlay::drawContourRequest>(Arena*);
template<> ::grpcI2DOverlay::drawContoursRequest* Arena::CreateMaybeMessage<::grpcI2DOverlay::drawContoursRequest>(Arena*);
template<> ::grpcI2DOverlay::drawSBPatternRequest* Arena::CreateMaybeMessage<::grpcI2DOverlay::drawSBPatternRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcI2DOverlay {

// ===================================================================

class drawCircleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DOverlay.drawCircleRequest) */ {
 public:
  inline drawCircleRequest() : drawCircleRequest(nullptr) {}
  virtual ~drawCircleRequest();
  explicit constexpr drawCircleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  drawCircleRequest(const drawCircleRequest& from);
  drawCircleRequest(drawCircleRequest&& from) noexcept
    : drawCircleRequest() {
    *this = ::std::move(from);
  }

  inline drawCircleRequest& operator=(const drawCircleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline drawCircleRequest& operator=(drawCircleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const drawCircleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const drawCircleRequest* internal_default_instance() {
    return reinterpret_cast<const drawCircleRequest*>(
               &_drawCircleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(drawCircleRequest& a, drawCircleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(drawCircleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(drawCircleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline drawCircleRequest* New() const final {
    return CreateMaybeMessage<drawCircleRequest>(nullptr);
  }

  drawCircleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<drawCircleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const drawCircleRequest& from);
  void MergeFrom(const drawCircleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(drawCircleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DOverlay.drawCircleRequest";
  }
  protected:
  explicit drawCircleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcI2DOverlayService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kDisplayImageFieldNumber = 2,
  };
  // bytes point = 1;
  void clear_point();
  const std::string& point() const;
  void set_point(const std::string& value);
  void set_point(std::string&& value);
  void set_point(const char* value);
  void set_point(const void* value, size_t size);
  std::string* mutable_point();
  std::string* release_point();
  void set_allocated_point(std::string* point);
  private:
  const std::string& _internal_point() const;
  void _internal_set_point(const std::string& value);
  std::string* _internal_mutable_point();
  public:

  // bytes displayImage = 2;
  void clear_displayimage();
  const std::string& displayimage() const;
  void set_displayimage(const std::string& value);
  void set_displayimage(std::string&& value);
  void set_displayimage(const char* value);
  void set_displayimage(const void* value, size_t size);
  std::string* mutable_displayimage();
  std::string* release_displayimage();
  void set_allocated_displayimage(std::string* displayimage);
  private:
  const std::string& _internal_displayimage() const;
  void _internal_set_displayimage(const std::string& value);
  std::string* _internal_mutable_displayimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DOverlay.drawCircleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DOverlayService_2eproto;
};
// -------------------------------------------------------------------

class drawCircles_grpc0Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DOverlay.drawCircles_grpc0Request) */ {
 public:
  inline drawCircles_grpc0Request() : drawCircles_grpc0Request(nullptr) {}
  virtual ~drawCircles_grpc0Request();
  explicit constexpr drawCircles_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  drawCircles_grpc0Request(const drawCircles_grpc0Request& from);
  drawCircles_grpc0Request(drawCircles_grpc0Request&& from) noexcept
    : drawCircles_grpc0Request() {
    *this = ::std::move(from);
  }

  inline drawCircles_grpc0Request& operator=(const drawCircles_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline drawCircles_grpc0Request& operator=(drawCircles_grpc0Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const drawCircles_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const drawCircles_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const drawCircles_grpc0Request*>(
               &_drawCircles_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(drawCircles_grpc0Request& a, drawCircles_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(drawCircles_grpc0Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(drawCircles_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline drawCircles_grpc0Request* New() const final {
    return CreateMaybeMessage<drawCircles_grpc0Request>(nullptr);
  }

  drawCircles_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<drawCircles_grpc0Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const drawCircles_grpc0Request& from);
  void MergeFrom(const drawCircles_grpc0Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(drawCircles_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DOverlay.drawCircles_grpc0Request";
  }
  protected:
  explicit drawCircles_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcI2DOverlayService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kDisplayImageFieldNumber = 2,
  };
  // bytes points = 1;
  void clear_points();
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // bytes displayImage = 2;
  void clear_displayimage();
  const std::string& displayimage() const;
  void set_displayimage(const std::string& value);
  void set_displayimage(std::string&& value);
  void set_displayimage(const char* value);
  void set_displayimage(const void* value, size_t size);
  std::string* mutable_displayimage();
  std::string* release_displayimage();
  void set_allocated_displayimage(std::string* displayimage);
  private:
  const std::string& _internal_displayimage() const;
  void _internal_set_displayimage(const std::string& value);
  std::string* _internal_mutable_displayimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DOverlay.drawCircles_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DOverlayService_2eproto;
};
// -------------------------------------------------------------------

class drawCircles_grpc1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DOverlay.drawCircles_grpc1Request) */ {
 public:
  inline drawCircles_grpc1Request() : drawCircles_grpc1Request(nullptr) {}
  virtual ~drawCircles_grpc1Request();
  explicit constexpr drawCircles_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  drawCircles_grpc1Request(const drawCircles_grpc1Request& from);
  drawCircles_grpc1Request(drawCircles_grpc1Request&& from) noexcept
    : drawCircles_grpc1Request() {
    *this = ::std::move(from);
  }

  inline drawCircles_grpc1Request& operator=(const drawCircles_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline drawCircles_grpc1Request& operator=(drawCircles_grpc1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const drawCircles_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const drawCircles_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const drawCircles_grpc1Request*>(
               &_drawCircles_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(drawCircles_grpc1Request& a, drawCircles_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(drawCircles_grpc1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(drawCircles_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline drawCircles_grpc1Request* New() const final {
    return CreateMaybeMessage<drawCircles_grpc1Request>(nullptr);
  }

  drawCircles_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<drawCircles_grpc1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const drawCircles_grpc1Request& from);
  void MergeFrom(const drawCircles_grpc1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(drawCircles_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DOverlay.drawCircles_grpc1Request";
  }
  protected:
  explicit drawCircles_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcI2DOverlayService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointsFieldNumber = 1,
    kDisplayImageFieldNumber = 2,
  };
  // bytes keypoints = 1;
  void clear_keypoints();
  const std::string& keypoints() const;
  void set_keypoints(const std::string& value);
  void set_keypoints(std::string&& value);
  void set_keypoints(const char* value);
  void set_keypoints(const void* value, size_t size);
  std::string* mutable_keypoints();
  std::string* release_keypoints();
  void set_allocated_keypoints(std::string* keypoints);
  private:
  const std::string& _internal_keypoints() const;
  void _internal_set_keypoints(const std::string& value);
  std::string* _internal_mutable_keypoints();
  public:

  // bytes displayImage = 2;
  void clear_displayimage();
  const std::string& displayimage() const;
  void set_displayimage(const std::string& value);
  void set_displayimage(std::string&& value);
  void set_displayimage(const char* value);
  void set_displayimage(const void* value, size_t size);
  std::string* mutable_displayimage();
  std::string* release_displayimage();
  void set_allocated_displayimage(std::string* displayimage);
  private:
  const std::string& _internal_displayimage() const;
  void _internal_set_displayimage(const std::string& value);
  std::string* _internal_mutable_displayimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DOverlay.drawCircles_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DOverlayService_2eproto;
};
// -------------------------------------------------------------------

class drawContourRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DOverlay.drawContourRequest) */ {
 public:
  inline drawContourRequest() : drawContourRequest(nullptr) {}
  virtual ~drawContourRequest();
  explicit constexpr drawContourRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  drawContourRequest(const drawContourRequest& from);
  drawContourRequest(drawContourRequest&& from) noexcept
    : drawContourRequest() {
    *this = ::std::move(from);
  }

  inline drawContourRequest& operator=(const drawContourRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline drawContourRequest& operator=(drawContourRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const drawContourRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const drawContourRequest* internal_default_instance() {
    return reinterpret_cast<const drawContourRequest*>(
               &_drawContourRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(drawContourRequest& a, drawContourRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(drawContourRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(drawContourRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline drawContourRequest* New() const final {
    return CreateMaybeMessage<drawContourRequest>(nullptr);
  }

  drawContourRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<drawContourRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const drawContourRequest& from);
  void MergeFrom(const drawContourRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(drawContourRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DOverlay.drawContourRequest";
  }
  protected:
  explicit drawContourRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcI2DOverlayService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContoursFieldNumber = 1,
    kDisplayImageFieldNumber = 2,
  };
  // bytes contours = 1;
  void clear_contours();
  const std::string& contours() const;
  void set_contours(const std::string& value);
  void set_contours(std::string&& value);
  void set_contours(const char* value);
  void set_contours(const void* value, size_t size);
  std::string* mutable_contours();
  std::string* release_contours();
  void set_allocated_contours(std::string* contours);
  private:
  const std::string& _internal_contours() const;
  void _internal_set_contours(const std::string& value);
  std::string* _internal_mutable_contours();
  public:

  // bytes displayImage = 2;
  void clear_displayimage();
  const std::string& displayimage() const;
  void set_displayimage(const std::string& value);
  void set_displayimage(std::string&& value);
  void set_displayimage(const char* value);
  void set_displayimage(const void* value, size_t size);
  std::string* mutable_displayimage();
  std::string* release_displayimage();
  void set_allocated_displayimage(std::string* displayimage);
  private:
  const std::string& _internal_displayimage() const;
  void _internal_set_displayimage(const std::string& value);
  std::string* _internal_mutable_displayimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DOverlay.drawContourRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DOverlayService_2eproto;
};
// -------------------------------------------------------------------

class drawContoursRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DOverlay.drawContoursRequest) */ {
 public:
  inline drawContoursRequest() : drawContoursRequest(nullptr) {}
  virtual ~drawContoursRequest();
  explicit constexpr drawContoursRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  drawContoursRequest(const drawContoursRequest& from);
  drawContoursRequest(drawContoursRequest&& from) noexcept
    : drawContoursRequest() {
    *this = ::std::move(from);
  }

  inline drawContoursRequest& operator=(const drawContoursRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline drawContoursRequest& operator=(drawContoursRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const drawContoursRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const drawContoursRequest* internal_default_instance() {
    return reinterpret_cast<const drawContoursRequest*>(
               &_drawContoursRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(drawContoursRequest& a, drawContoursRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(drawContoursRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(drawContoursRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline drawContoursRequest* New() const final {
    return CreateMaybeMessage<drawContoursRequest>(nullptr);
  }

  drawContoursRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<drawContoursRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const drawContoursRequest& from);
  void MergeFrom(const drawContoursRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(drawContoursRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DOverlay.drawContoursRequest";
  }
  protected:
  explicit drawContoursRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcI2DOverlayService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContoursFieldNumber = 1,
    kDisplayImageFieldNumber = 2,
  };
  // bytes contours = 1;
  void clear_contours();
  const std::string& contours() const;
  void set_contours(const std::string& value);
  void set_contours(std::string&& value);
  void set_contours(const char* value);
  void set_contours(const void* value, size_t size);
  std::string* mutable_contours();
  std::string* release_contours();
  void set_allocated_contours(std::string* contours);
  private:
  const std::string& _internal_contours() const;
  void _internal_set_contours(const std::string& value);
  std::string* _internal_mutable_contours();
  public:

  // bytes displayImage = 2;
  void clear_displayimage();
  const std::string& displayimage() const;
  void set_displayimage(const std::string& value);
  void set_displayimage(std::string&& value);
  void set_displayimage(const char* value);
  void set_displayimage(const void* value, size_t size);
  std::string* mutable_displayimage();
  std::string* release_displayimage();
  void set_allocated_displayimage(std::string* displayimage);
  private:
  const std::string& _internal_displayimage() const;
  void _internal_set_displayimage(const std::string& value);
  std::string* _internal_mutable_displayimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DOverlay.drawContoursRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DOverlayService_2eproto;
};
// -------------------------------------------------------------------

class drawSBPatternRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DOverlay.drawSBPatternRequest) */ {
 public:
  inline drawSBPatternRequest() : drawSBPatternRequest(nullptr) {}
  virtual ~drawSBPatternRequest();
  explicit constexpr drawSBPatternRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  drawSBPatternRequest(const drawSBPatternRequest& from);
  drawSBPatternRequest(drawSBPatternRequest&& from) noexcept
    : drawSBPatternRequest() {
    *this = ::std::move(from);
  }

  inline drawSBPatternRequest& operator=(const drawSBPatternRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline drawSBPatternRequest& operator=(drawSBPatternRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const drawSBPatternRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const drawSBPatternRequest* internal_default_instance() {
    return reinterpret_cast<const drawSBPatternRequest*>(
               &_drawSBPatternRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(drawSBPatternRequest& a, drawSBPatternRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(drawSBPatternRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(drawSBPatternRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline drawSBPatternRequest* New() const final {
    return CreateMaybeMessage<drawSBPatternRequest>(nullptr);
  }

  drawSBPatternRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<drawSBPatternRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const drawSBPatternRequest& from);
  void MergeFrom(const drawSBPatternRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(drawSBPatternRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DOverlay.drawSBPatternRequest";
  }
  protected:
  explicit drawSBPatternRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcI2DOverlayService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternFieldNumber = 1,
    kDisplayImageFieldNumber = 2,
  };
  // bytes pattern = 1;
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const void* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // bytes displayImage = 2;
  void clear_displayimage();
  const std::string& displayimage() const;
  void set_displayimage(const std::string& value);
  void set_displayimage(std::string&& value);
  void set_displayimage(const char* value);
  void set_displayimage(const void* value, size_t size);
  std::string* mutable_displayimage();
  std::string* release_displayimage();
  void set_allocated_displayimage(std::string* displayimage);
  private:
  const std::string& _internal_displayimage() const;
  void _internal_set_displayimage(const std::string& value);
  std::string* _internal_mutable_displayimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DOverlay.drawSBPatternRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DOverlayService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// drawCircleRequest

// bytes point = 1;
inline void drawCircleRequest::clear_point() {
  point_.ClearToEmpty();
}
inline const std::string& drawCircleRequest::point() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawCircleRequest.point)
  return _internal_point();
}
inline void drawCircleRequest::set_point(const std::string& value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawCircleRequest.point)
}
inline std::string* drawCircleRequest::mutable_point() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawCircleRequest.point)
  return _internal_mutable_point();
}
inline const std::string& drawCircleRequest::_internal_point() const {
  return point_.Get();
}
inline void drawCircleRequest::_internal_set_point(const std::string& value) {
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawCircleRequest::set_point(std::string&& value) {
  
  point_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawCircleRequest.point)
}
inline void drawCircleRequest::set_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawCircleRequest.point)
}
inline void drawCircleRequest::set_point(const void* value,
    size_t size) {
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawCircleRequest.point)
}
inline std::string* drawCircleRequest::_internal_mutable_point() {
  
  return point_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawCircleRequest::release_point() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawCircleRequest.point)
  return point_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawCircleRequest::set_allocated_point(std::string* point) {
  if (point != nullptr) {
    
  } else {
    
  }
  point_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), point,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawCircleRequest.point)
}

// bytes displayImage = 2;
inline void drawCircleRequest::clear_displayimage() {
  displayimage_.ClearToEmpty();
}
inline const std::string& drawCircleRequest::displayimage() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawCircleRequest.displayImage)
  return _internal_displayimage();
}
inline void drawCircleRequest::set_displayimage(const std::string& value) {
  _internal_set_displayimage(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawCircleRequest.displayImage)
}
inline std::string* drawCircleRequest::mutable_displayimage() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawCircleRequest.displayImage)
  return _internal_mutable_displayimage();
}
inline const std::string& drawCircleRequest::_internal_displayimage() const {
  return displayimage_.Get();
}
inline void drawCircleRequest::_internal_set_displayimage(const std::string& value) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawCircleRequest::set_displayimage(std::string&& value) {
  
  displayimage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawCircleRequest.displayImage)
}
inline void drawCircleRequest::set_displayimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawCircleRequest.displayImage)
}
inline void drawCircleRequest::set_displayimage(const void* value,
    size_t size) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawCircleRequest.displayImage)
}
inline std::string* drawCircleRequest::_internal_mutable_displayimage() {
  
  return displayimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawCircleRequest::release_displayimage() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawCircleRequest.displayImage)
  return displayimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawCircleRequest::set_allocated_displayimage(std::string* displayimage) {
  if (displayimage != nullptr) {
    
  } else {
    
  }
  displayimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawCircleRequest.displayImage)
}

// -------------------------------------------------------------------

// drawCircles_grpc0Request

// bytes points = 1;
inline void drawCircles_grpc0Request::clear_points() {
  points_.ClearToEmpty();
}
inline const std::string& drawCircles_grpc0Request::points() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawCircles_grpc0Request.points)
  return _internal_points();
}
inline void drawCircles_grpc0Request::set_points(const std::string& value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawCircles_grpc0Request.points)
}
inline std::string* drawCircles_grpc0Request::mutable_points() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawCircles_grpc0Request.points)
  return _internal_mutable_points();
}
inline const std::string& drawCircles_grpc0Request::_internal_points() const {
  return points_.Get();
}
inline void drawCircles_grpc0Request::_internal_set_points(const std::string& value) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawCircles_grpc0Request::set_points(std::string&& value) {
  
  points_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawCircles_grpc0Request.points)
}
inline void drawCircles_grpc0Request::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawCircles_grpc0Request.points)
}
inline void drawCircles_grpc0Request::set_points(const void* value,
    size_t size) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawCircles_grpc0Request.points)
}
inline std::string* drawCircles_grpc0Request::_internal_mutable_points() {
  
  return points_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawCircles_grpc0Request::release_points() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawCircles_grpc0Request.points)
  return points_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawCircles_grpc0Request::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawCircles_grpc0Request.points)
}

// bytes displayImage = 2;
inline void drawCircles_grpc0Request::clear_displayimage() {
  displayimage_.ClearToEmpty();
}
inline const std::string& drawCircles_grpc0Request::displayimage() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawCircles_grpc0Request.displayImage)
  return _internal_displayimage();
}
inline void drawCircles_grpc0Request::set_displayimage(const std::string& value) {
  _internal_set_displayimage(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawCircles_grpc0Request.displayImage)
}
inline std::string* drawCircles_grpc0Request::mutable_displayimage() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawCircles_grpc0Request.displayImage)
  return _internal_mutable_displayimage();
}
inline const std::string& drawCircles_grpc0Request::_internal_displayimage() const {
  return displayimage_.Get();
}
inline void drawCircles_grpc0Request::_internal_set_displayimage(const std::string& value) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawCircles_grpc0Request::set_displayimage(std::string&& value) {
  
  displayimage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawCircles_grpc0Request.displayImage)
}
inline void drawCircles_grpc0Request::set_displayimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawCircles_grpc0Request.displayImage)
}
inline void drawCircles_grpc0Request::set_displayimage(const void* value,
    size_t size) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawCircles_grpc0Request.displayImage)
}
inline std::string* drawCircles_grpc0Request::_internal_mutable_displayimage() {
  
  return displayimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawCircles_grpc0Request::release_displayimage() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawCircles_grpc0Request.displayImage)
  return displayimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawCircles_grpc0Request::set_allocated_displayimage(std::string* displayimage) {
  if (displayimage != nullptr) {
    
  } else {
    
  }
  displayimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawCircles_grpc0Request.displayImage)
}

// -------------------------------------------------------------------

// drawCircles_grpc1Request

// bytes keypoints = 1;
inline void drawCircles_grpc1Request::clear_keypoints() {
  keypoints_.ClearToEmpty();
}
inline const std::string& drawCircles_grpc1Request::keypoints() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawCircles_grpc1Request.keypoints)
  return _internal_keypoints();
}
inline void drawCircles_grpc1Request::set_keypoints(const std::string& value) {
  _internal_set_keypoints(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawCircles_grpc1Request.keypoints)
}
inline std::string* drawCircles_grpc1Request::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawCircles_grpc1Request.keypoints)
  return _internal_mutable_keypoints();
}
inline const std::string& drawCircles_grpc1Request::_internal_keypoints() const {
  return keypoints_.Get();
}
inline void drawCircles_grpc1Request::_internal_set_keypoints(const std::string& value) {
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawCircles_grpc1Request::set_keypoints(std::string&& value) {
  
  keypoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawCircles_grpc1Request.keypoints)
}
inline void drawCircles_grpc1Request::set_keypoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawCircles_grpc1Request.keypoints)
}
inline void drawCircles_grpc1Request::set_keypoints(const void* value,
    size_t size) {
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawCircles_grpc1Request.keypoints)
}
inline std::string* drawCircles_grpc1Request::_internal_mutable_keypoints() {
  
  return keypoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawCircles_grpc1Request::release_keypoints() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawCircles_grpc1Request.keypoints)
  return keypoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawCircles_grpc1Request::set_allocated_keypoints(std::string* keypoints) {
  if (keypoints != nullptr) {
    
  } else {
    
  }
  keypoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keypoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawCircles_grpc1Request.keypoints)
}

// bytes displayImage = 2;
inline void drawCircles_grpc1Request::clear_displayimage() {
  displayimage_.ClearToEmpty();
}
inline const std::string& drawCircles_grpc1Request::displayimage() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawCircles_grpc1Request.displayImage)
  return _internal_displayimage();
}
inline void drawCircles_grpc1Request::set_displayimage(const std::string& value) {
  _internal_set_displayimage(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawCircles_grpc1Request.displayImage)
}
inline std::string* drawCircles_grpc1Request::mutable_displayimage() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawCircles_grpc1Request.displayImage)
  return _internal_mutable_displayimage();
}
inline const std::string& drawCircles_grpc1Request::_internal_displayimage() const {
  return displayimage_.Get();
}
inline void drawCircles_grpc1Request::_internal_set_displayimage(const std::string& value) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawCircles_grpc1Request::set_displayimage(std::string&& value) {
  
  displayimage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawCircles_grpc1Request.displayImage)
}
inline void drawCircles_grpc1Request::set_displayimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawCircles_grpc1Request.displayImage)
}
inline void drawCircles_grpc1Request::set_displayimage(const void* value,
    size_t size) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawCircles_grpc1Request.displayImage)
}
inline std::string* drawCircles_grpc1Request::_internal_mutable_displayimage() {
  
  return displayimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawCircles_grpc1Request::release_displayimage() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawCircles_grpc1Request.displayImage)
  return displayimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawCircles_grpc1Request::set_allocated_displayimage(std::string* displayimage) {
  if (displayimage != nullptr) {
    
  } else {
    
  }
  displayimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawCircles_grpc1Request.displayImage)
}

// -------------------------------------------------------------------

// drawContourRequest

// bytes contours = 1;
inline void drawContourRequest::clear_contours() {
  contours_.ClearToEmpty();
}
inline const std::string& drawContourRequest::contours() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawContourRequest.contours)
  return _internal_contours();
}
inline void drawContourRequest::set_contours(const std::string& value) {
  _internal_set_contours(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawContourRequest.contours)
}
inline std::string* drawContourRequest::mutable_contours() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawContourRequest.contours)
  return _internal_mutable_contours();
}
inline const std::string& drawContourRequest::_internal_contours() const {
  return contours_.Get();
}
inline void drawContourRequest::_internal_set_contours(const std::string& value) {
  
  contours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawContourRequest::set_contours(std::string&& value) {
  
  contours_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawContourRequest.contours)
}
inline void drawContourRequest::set_contours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawContourRequest.contours)
}
inline void drawContourRequest::set_contours(const void* value,
    size_t size) {
  
  contours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawContourRequest.contours)
}
inline std::string* drawContourRequest::_internal_mutable_contours() {
  
  return contours_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawContourRequest::release_contours() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawContourRequest.contours)
  return contours_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawContourRequest::set_allocated_contours(std::string* contours) {
  if (contours != nullptr) {
    
  } else {
    
  }
  contours_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contours,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawContourRequest.contours)
}

// bytes displayImage = 2;
inline void drawContourRequest::clear_displayimage() {
  displayimage_.ClearToEmpty();
}
inline const std::string& drawContourRequest::displayimage() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawContourRequest.displayImage)
  return _internal_displayimage();
}
inline void drawContourRequest::set_displayimage(const std::string& value) {
  _internal_set_displayimage(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawContourRequest.displayImage)
}
inline std::string* drawContourRequest::mutable_displayimage() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawContourRequest.displayImage)
  return _internal_mutable_displayimage();
}
inline const std::string& drawContourRequest::_internal_displayimage() const {
  return displayimage_.Get();
}
inline void drawContourRequest::_internal_set_displayimage(const std::string& value) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawContourRequest::set_displayimage(std::string&& value) {
  
  displayimage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawContourRequest.displayImage)
}
inline void drawContourRequest::set_displayimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawContourRequest.displayImage)
}
inline void drawContourRequest::set_displayimage(const void* value,
    size_t size) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawContourRequest.displayImage)
}
inline std::string* drawContourRequest::_internal_mutable_displayimage() {
  
  return displayimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawContourRequest::release_displayimage() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawContourRequest.displayImage)
  return displayimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawContourRequest::set_allocated_displayimage(std::string* displayimage) {
  if (displayimage != nullptr) {
    
  } else {
    
  }
  displayimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawContourRequest.displayImage)
}

// -------------------------------------------------------------------

// drawContoursRequest

// bytes contours = 1;
inline void drawContoursRequest::clear_contours() {
  contours_.ClearToEmpty();
}
inline const std::string& drawContoursRequest::contours() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawContoursRequest.contours)
  return _internal_contours();
}
inline void drawContoursRequest::set_contours(const std::string& value) {
  _internal_set_contours(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawContoursRequest.contours)
}
inline std::string* drawContoursRequest::mutable_contours() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawContoursRequest.contours)
  return _internal_mutable_contours();
}
inline const std::string& drawContoursRequest::_internal_contours() const {
  return contours_.Get();
}
inline void drawContoursRequest::_internal_set_contours(const std::string& value) {
  
  contours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawContoursRequest::set_contours(std::string&& value) {
  
  contours_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawContoursRequest.contours)
}
inline void drawContoursRequest::set_contours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawContoursRequest.contours)
}
inline void drawContoursRequest::set_contours(const void* value,
    size_t size) {
  
  contours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawContoursRequest.contours)
}
inline std::string* drawContoursRequest::_internal_mutable_contours() {
  
  return contours_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawContoursRequest::release_contours() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawContoursRequest.contours)
  return contours_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawContoursRequest::set_allocated_contours(std::string* contours) {
  if (contours != nullptr) {
    
  } else {
    
  }
  contours_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contours,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawContoursRequest.contours)
}

// bytes displayImage = 2;
inline void drawContoursRequest::clear_displayimage() {
  displayimage_.ClearToEmpty();
}
inline const std::string& drawContoursRequest::displayimage() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawContoursRequest.displayImage)
  return _internal_displayimage();
}
inline void drawContoursRequest::set_displayimage(const std::string& value) {
  _internal_set_displayimage(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawContoursRequest.displayImage)
}
inline std::string* drawContoursRequest::mutable_displayimage() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawContoursRequest.displayImage)
  return _internal_mutable_displayimage();
}
inline const std::string& drawContoursRequest::_internal_displayimage() const {
  return displayimage_.Get();
}
inline void drawContoursRequest::_internal_set_displayimage(const std::string& value) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawContoursRequest::set_displayimage(std::string&& value) {
  
  displayimage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawContoursRequest.displayImage)
}
inline void drawContoursRequest::set_displayimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawContoursRequest.displayImage)
}
inline void drawContoursRequest::set_displayimage(const void* value,
    size_t size) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawContoursRequest.displayImage)
}
inline std::string* drawContoursRequest::_internal_mutable_displayimage() {
  
  return displayimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawContoursRequest::release_displayimage() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawContoursRequest.displayImage)
  return displayimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawContoursRequest::set_allocated_displayimage(std::string* displayimage) {
  if (displayimage != nullptr) {
    
  } else {
    
  }
  displayimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawContoursRequest.displayImage)
}

// -------------------------------------------------------------------

// drawSBPatternRequest

// bytes pattern = 1;
inline void drawSBPatternRequest::clear_pattern() {
  pattern_.ClearToEmpty();
}
inline const std::string& drawSBPatternRequest::pattern() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawSBPatternRequest.pattern)
  return _internal_pattern();
}
inline void drawSBPatternRequest::set_pattern(const std::string& value) {
  _internal_set_pattern(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawSBPatternRequest.pattern)
}
inline std::string* drawSBPatternRequest::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawSBPatternRequest.pattern)
  return _internal_mutable_pattern();
}
inline const std::string& drawSBPatternRequest::_internal_pattern() const {
  return pattern_.Get();
}
inline void drawSBPatternRequest::_internal_set_pattern(const std::string& value) {
  
  pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawSBPatternRequest::set_pattern(std::string&& value) {
  
  pattern_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawSBPatternRequest.pattern)
}
inline void drawSBPatternRequest::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawSBPatternRequest.pattern)
}
inline void drawSBPatternRequest::set_pattern(const void* value,
    size_t size) {
  
  pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawSBPatternRequest.pattern)
}
inline std::string* drawSBPatternRequest::_internal_mutable_pattern() {
  
  return pattern_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawSBPatternRequest::release_pattern() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawSBPatternRequest.pattern)
  return pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawSBPatternRequest::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawSBPatternRequest.pattern)
}

// bytes displayImage = 2;
inline void drawSBPatternRequest::clear_displayimage() {
  displayimage_.ClearToEmpty();
}
inline const std::string& drawSBPatternRequest::displayimage() const {
  // @@protoc_insertion_point(field_get:grpcI2DOverlay.drawSBPatternRequest.displayImage)
  return _internal_displayimage();
}
inline void drawSBPatternRequest::set_displayimage(const std::string& value) {
  _internal_set_displayimage(value);
  // @@protoc_insertion_point(field_set:grpcI2DOverlay.drawSBPatternRequest.displayImage)
}
inline std::string* drawSBPatternRequest::mutable_displayimage() {
  // @@protoc_insertion_point(field_mutable:grpcI2DOverlay.drawSBPatternRequest.displayImage)
  return _internal_mutable_displayimage();
}
inline const std::string& drawSBPatternRequest::_internal_displayimage() const {
  return displayimage_.Get();
}
inline void drawSBPatternRequest::_internal_set_displayimage(const std::string& value) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void drawSBPatternRequest::set_displayimage(std::string&& value) {
  
  displayimage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DOverlay.drawSBPatternRequest.displayImage)
}
inline void drawSBPatternRequest::set_displayimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DOverlay.drawSBPatternRequest.displayImage)
}
inline void drawSBPatternRequest::set_displayimage(const void* value,
    size_t size) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DOverlay.drawSBPatternRequest.displayImage)
}
inline std::string* drawSBPatternRequest::_internal_mutable_displayimage() {
  
  return displayimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* drawSBPatternRequest::release_displayimage() {
  // @@protoc_insertion_point(field_release:grpcI2DOverlay.drawSBPatternRequest.displayImage)
  return displayimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void drawSBPatternRequest::set_allocated_displayimage(std::string* displayimage) {
  if (displayimage != nullptr) {
    
  } else {
    
  }
  displayimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DOverlay.drawSBPatternRequest.displayImage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcI2DOverlay

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcI2DOverlayService_2eproto
