// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIRelocalizerService.proto
#ifndef GRPC_grpcIRelocalizerService_2eproto__INCLUDED
#define GRPC_grpcIRelocalizerService_2eproto__INCLUDED

#include "grpcIRelocalizerService.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIRelocalizer {

class grpcIRelocalizerService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIRelocalizer.grpcIRelocalizerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status addKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpcIRelocalizer::addKeyframeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::addKeyframeResponse>> AsyncaddKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::addKeyframeResponse>>(AsyncaddKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::addKeyframeResponse>> PrepareAsyncaddKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::addKeyframeResponse>>(PrepareAsyncaddKeyframeRaw(context, request, cq));
    }
    virtual ::grpc::Status relocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpcIRelocalizer::relocalizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::relocalizeResponse>> Asyncrelocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::relocalizeResponse>>(AsyncrelocalizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::relocalizeResponse>> PrepareAsyncrelocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::relocalizeResponse>>(PrepareAsyncrelocalizeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void addKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest* request, ::grpcIRelocalizer::addKeyframeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest* request, ::grpcIRelocalizer::addKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void relocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest* request, ::grpcIRelocalizer::relocalizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void relocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest* request, ::grpcIRelocalizer::relocalizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::addKeyframeResponse>* AsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::addKeyframeResponse>* PrepareAsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::relocalizeResponse>* AsyncrelocalizeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizer::relocalizeResponse>* PrepareAsyncrelocalizeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status addKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpcIRelocalizer::addKeyframeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::addKeyframeResponse>> AsyncaddKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::addKeyframeResponse>>(AsyncaddKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::addKeyframeResponse>> PrepareAsyncaddKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::addKeyframeResponse>>(PrepareAsyncaddKeyframeRaw(context, request, cq));
    }
    ::grpc::Status relocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpcIRelocalizer::relocalizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::relocalizeResponse>> Asyncrelocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::relocalizeResponse>>(AsyncrelocalizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::relocalizeResponse>> PrepareAsyncrelocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::relocalizeResponse>>(PrepareAsyncrelocalizeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void addKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest* request, ::grpcIRelocalizer::addKeyframeResponse* response, std::function<void(::grpc::Status)>) override;
      void addKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest* request, ::grpcIRelocalizer::addKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void relocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest* request, ::grpcIRelocalizer::relocalizeResponse* response, std::function<void(::grpc::Status)>) override;
      void relocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest* request, ::grpcIRelocalizer::relocalizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::addKeyframeResponse>* AsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::addKeyframeResponse>* PrepareAsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::relocalizeResponse>* AsyncrelocalizeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::relocalizeResponse>* PrepareAsyncrelocalizeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_addKeyframe_;
    const ::grpc::internal::RpcMethod rpcmethod_relocalize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status addKeyframe(::grpc::ServerContext* context, const ::grpcIRelocalizer::addKeyframeRequest* request, ::grpcIRelocalizer::addKeyframeResponse* response);
    virtual ::grpc::Status relocalize(::grpc::ServerContext* context, const ::grpcIRelocalizer::relocalizeRequest* request, ::grpcIRelocalizer::relocalizeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addKeyframe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::addKeyframeRequest* /*request*/, ::grpcIRelocalizer::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddKeyframe(::grpc::ServerContext* context, ::grpcIRelocalizer::addKeyframeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizer::addKeyframeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_relocalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_relocalize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_relocalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalize(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::relocalizeRequest* /*request*/, ::grpcIRelocalizer::relocalizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrelocalize(::grpc::ServerContext* context, ::grpcIRelocalizer::relocalizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizer::relocalizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_addKeyframe<WithAsyncMethod_relocalize<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addKeyframe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizer::addKeyframeRequest, ::grpcIRelocalizer::addKeyframeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizer::addKeyframeRequest* request, ::grpcIRelocalizer::addKeyframeResponse* response) { return this->addKeyframe(context, request, response); }));}
    void SetMessageAllocatorFor_addKeyframe(
        ::grpc::MessageAllocator< ::grpcIRelocalizer::addKeyframeRequest, ::grpcIRelocalizer::addKeyframeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizer::addKeyframeRequest, ::grpcIRelocalizer::addKeyframeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::addKeyframeRequest* /*request*/, ::grpcIRelocalizer::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizer::addKeyframeRequest* /*request*/, ::grpcIRelocalizer::addKeyframeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_relocalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_relocalize() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizer::relocalizeRequest, ::grpcIRelocalizer::relocalizeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizer::relocalizeRequest* request, ::grpcIRelocalizer::relocalizeResponse* response) { return this->relocalize(context, request, response); }));}
    void SetMessageAllocatorFor_relocalize(
        ::grpc::MessageAllocator< ::grpcIRelocalizer::relocalizeRequest, ::grpcIRelocalizer::relocalizeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizer::relocalizeRequest, ::grpcIRelocalizer::relocalizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_relocalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalize(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::relocalizeRequest* /*request*/, ::grpcIRelocalizer::relocalizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizer::relocalizeRequest* /*request*/, ::grpcIRelocalizer::relocalizeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_addKeyframe<WithCallbackMethod_relocalize<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addKeyframe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::addKeyframeRequest* /*request*/, ::grpcIRelocalizer::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_relocalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_relocalize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_relocalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalize(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::relocalizeRequest* /*request*/, ::grpcIRelocalizer::relocalizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addKeyframe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::addKeyframeRequest* /*request*/, ::grpcIRelocalizer::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddKeyframe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_relocalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_relocalize() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_relocalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalize(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::relocalizeRequest* /*request*/, ::grpcIRelocalizer::relocalizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrelocalize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addKeyframe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addKeyframe(context, request, response); }));
    }
    ~WithRawCallbackMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::addKeyframeRequest* /*request*/, ::grpcIRelocalizer::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_relocalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_relocalize() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->relocalize(context, request, response); }));
    }
    ~WithRawCallbackMethod_relocalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalize(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::relocalizeRequest* /*request*/, ::grpcIRelocalizer::relocalizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addKeyframe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizer::addKeyframeRequest, ::grpcIRelocalizer::addKeyframeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizer::addKeyframeRequest, ::grpcIRelocalizer::addKeyframeResponse>* streamer) {
                       return this->StreamedaddKeyframe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::addKeyframeRequest* /*request*/, ::grpcIRelocalizer::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddKeyframe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizer::addKeyframeRequest,::grpcIRelocalizer::addKeyframeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_relocalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_relocalize() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizer::relocalizeRequest, ::grpcIRelocalizer::relocalizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizer::relocalizeRequest, ::grpcIRelocalizer::relocalizeResponse>* streamer) {
                       return this->Streamedrelocalize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_relocalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status relocalize(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizer::relocalizeRequest* /*request*/, ::grpcIRelocalizer::relocalizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrelocalize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizer::relocalizeRequest,::grpcIRelocalizer::relocalizeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_addKeyframe<WithStreamedUnaryMethod_relocalize<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_addKeyframe<WithStreamedUnaryMethod_relocalize<Service > > StreamedService;
};

}  // namespace grpcIRelocalizer


#endif  // GRPC_grpcIRelocalizerService_2eproto__INCLUDED
