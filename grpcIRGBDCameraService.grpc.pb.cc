// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIRGBDCameraService.proto

#include "grpcIRGBDCameraService.pb.h"
#include "grpcIRGBDCameraService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIRGBDCamera {

static const char* grpcIRGBDCameraService_method_names[] = {
  "/grpcIRGBDCamera.grpcIRGBDCameraService/start",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/stop",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getNextImage",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/setResolution",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/setIntrinsicParameters",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/setDistortionParameters",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/setParameters",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getResolution",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getIntrinsicsParameters",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getParameters",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getDistortionParameters",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getNextDepthFrame",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getPointCloud",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/setDepthResolution",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/setIntrinsicDepthParameters",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/setDistortionDepthParameters",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getDepthResolution",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getDepthMinDistance",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getIntrinsicsDepthParameters",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getDistortionDepthParameters",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getNextRGBDFrame",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/alignDepthToColor",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/alignColorToDepth",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getPixelToWorld",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getWorldToPixel",
  "/grpcIRGBDCamera.grpcIRGBDCameraService/getWorldToPixels",
};

std::unique_ptr< grpcIRGBDCameraService::Stub> grpcIRGBDCameraService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIRGBDCameraService::Stub> stub(new grpcIRGBDCameraService::Stub(channel));
  return stub;
}

grpcIRGBDCameraService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_start_(grpcIRGBDCameraService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcIRGBDCameraService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNextImage_(grpcIRGBDCameraService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setResolution_(grpcIRGBDCameraService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setIntrinsicParameters_(grpcIRGBDCameraService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDistortionParameters_(grpcIRGBDCameraService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setParameters_(grpcIRGBDCameraService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getResolution_(grpcIRGBDCameraService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getIntrinsicsParameters_(grpcIRGBDCameraService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getParameters_(grpcIRGBDCameraService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDistortionParameters_(grpcIRGBDCameraService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNextDepthFrame_(grpcIRGBDCameraService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPointCloud_(grpcIRGBDCameraService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDepthResolution_(grpcIRGBDCameraService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setIntrinsicDepthParameters_(grpcIRGBDCameraService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDistortionDepthParameters_(grpcIRGBDCameraService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDepthResolution_(grpcIRGBDCameraService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDepthMinDistance_(grpcIRGBDCameraService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getIntrinsicsDepthParameters_(grpcIRGBDCameraService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDistortionDepthParameters_(grpcIRGBDCameraService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNextRGBDFrame_(grpcIRGBDCameraService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_alignDepthToColor_(grpcIRGBDCameraService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_alignColorToDepth_(grpcIRGBDCameraService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPixelToWorld_(grpcIRGBDCameraService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldToPixel_(grpcIRGBDCameraService_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldToPixels_(grpcIRGBDCameraService_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIRGBDCameraService::Stub::start(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRGBDCamera::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::startResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::startResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::startResponse>* grpcIRGBDCameraService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::stop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRGBDCamera::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::stopResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::stopResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::stopResponse>* grpcIRGBDCameraService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpcIRGBDCamera::getNextImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::getNextImageRequest, ::grpcIRGBDCamera::getNextImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNextImage_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::getNextImageRequest, ::grpcIRGBDCamera::getNextImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNextImage_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNextImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextImageResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getNextImageResponse, ::grpcIRGBDCamera::getNextImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNextImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextImageResponse>* grpcIRGBDCameraService::Stub::AsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNextImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::setResolutionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setResolution_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::setResolutionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setResolution_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIRGBDCameraService::Stub::PrepareAsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIRGBDCamera::setResolutionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIRGBDCameraService::Stub::AsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::setIntrinsicParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setIntrinsicParameters_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::setIntrinsicParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setIntrinsicParameters_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setIntrinsicParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIRGBDCameraService::Stub::PrepareAsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIRGBDCamera::setIntrinsicParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setIntrinsicParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIRGBDCameraService::Stub::AsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetIntrinsicParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::setDistortionParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDistortionParameters_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::setDistortionParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDistortionParameters_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDistortionParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIRGBDCameraService::Stub::PrepareAsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIRGBDCamera::setDistortionParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDistortionParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIRGBDCameraService::Stub::AsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDistortionParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::setParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setParameters_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::setParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setParameters_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIRGBDCameraService::Stub::PrepareAsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIRGBDCamera::setParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIRGBDCameraService::Stub::AsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRGBDCamera::getResolutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getResolution_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getResolutionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getResolution_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getResolutionResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetResolutionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getResolutionResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getResolutionResponse>* grpcIRGBDCameraService::Stub::AsyncgetResolutionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getIntrinsicsParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getIntrinsicsParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getIntrinsicsParameters_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getIntrinsicsParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getIntrinsicsParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getIntrinsicsParameters_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getIntrinsicsParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getIntrinsicsParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getIntrinsicsParametersResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getIntrinsicsParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>* grpcIRGBDCameraService::Stub::AsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetIntrinsicsParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRGBDCamera::getParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getParameters_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getParameters_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getParametersResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getParametersResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getParametersResponse>* grpcIRGBDCameraService::Stub::AsyncgetParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getDistortionParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRGBDCamera::getDistortionParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getDistortionParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDistortionParameters_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getDistortionParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getDistortionParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDistortionParameters_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getDistortionParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDistortionParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionParametersResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getDistortionParametersResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDistortionParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionParametersResponse>* grpcIRGBDCameraService::Stub::AsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDistortionParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::getNextDepthFrameRequest, ::grpcIRGBDCamera::getNextDepthFrameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNextDepthFrame_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::getNextDepthFrameRequest, ::grpcIRGBDCamera::getNextDepthFrameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNextDepthFrame_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNextDepthFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextDepthFrameResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getNextDepthFrameResponse, ::grpcIRGBDCamera::getNextDepthFrameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNextDepthFrame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextDepthFrameResponse>* grpcIRGBDCameraService::Stub::AsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNextDepthFrameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpcIRGBDCamera::getPointCloudResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::getPointCloudRequest, ::grpcIRGBDCamera::getPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPointCloud_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::getPointCloudRequest, ::grpcIRGBDCamera::getPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPointCloud_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPointCloud_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPointCloudResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getPointCloudResponse, ::grpcIRGBDCamera::getPointCloudRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPointCloud_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPointCloudResponse>* grpcIRGBDCameraService::Stub::AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPointCloudRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpcIRGBDCamera::setDepthResolutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::setDepthResolutionRequest, ::grpcIRGBDCamera::setDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDepthResolution_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::setDepthResolutionRequest, ::grpcIRGBDCamera::setDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDepthResolution_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDepthResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDepthResolutionResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::setDepthResolutionResponse, ::grpcIRGBDCamera::setDepthResolutionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDepthResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDepthResolutionResponse>* grpcIRGBDCameraService::Stub::AsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDepthResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setIntrinsicDepthParameters_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setIntrinsicDepthParameters_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setIntrinsicDepthParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse, ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setIntrinsicDepthParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>* grpcIRGBDCameraService::Stub::AsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetIntrinsicDepthParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::setDistortionDepthParametersRequest, ::grpcIRGBDCamera::setDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDistortionDepthParameters_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::setDistortionDepthParametersRequest, ::grpcIRGBDCamera::setDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDistortionDepthParameters_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDistortionDepthParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::setDistortionDepthParametersResponse, ::grpcIRGBDCamera::setDistortionDepthParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDistortionDepthParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>* grpcIRGBDCameraService::Stub::AsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDistortionDepthParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRGBDCamera::getDepthResolutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDepthResolution_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDepthResolution_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDepthResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthResolutionResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getDepthResolutionResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDepthResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthResolutionResponse>* grpcIRGBDCameraService::Stub::AsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDepthResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getDepthMinDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDepthMinDistance_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getDepthMinDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDepthMinDistance_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDepthMinDistance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthMinDistanceResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getDepthMinDistanceResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDepthMinDistance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthMinDistanceResponse>* grpcIRGBDCameraService::Stub::AsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDepthMinDistanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getIntrinsicsDepthParameters_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getIntrinsicsDepthParameters_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getIntrinsicsDepthParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getIntrinsicsDepthParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>* grpcIRGBDCameraService::Stub::AsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetIntrinsicsDepthParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDistortionDepthParameters_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRGBDCamera::getDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDistortionDepthParameters_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDistortionDepthParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getDistortionDepthParametersResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDistortionDepthParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>* grpcIRGBDCameraService::Stub::AsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDistortionDepthParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::getNextRGBDFrameRequest, ::grpcIRGBDCamera::getNextRGBDFrameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNextRGBDFrame_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::getNextRGBDFrameRequest, ::grpcIRGBDCamera::getNextRGBDFrameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNextRGBDFrame_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNextRGBDFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextRGBDFrameResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetNextRGBDFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getNextRGBDFrameResponse, ::grpcIRGBDCamera::getNextRGBDFrameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNextRGBDFrame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextRGBDFrameResponse>* grpcIRGBDCameraService::Stub::AsyncgetNextRGBDFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNextRGBDFrameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpcIRGBDCamera::alignDepthToColorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::alignDepthToColorRequest, ::grpcIRGBDCamera::alignDepthToColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_alignDepthToColor_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::alignDepthToColorRequest, ::grpcIRGBDCamera::alignDepthToColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_alignDepthToColor_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_alignDepthToColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignDepthToColorResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncalignDepthToColorRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::alignDepthToColorResponse, ::grpcIRGBDCamera::alignDepthToColorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_alignDepthToColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignDepthToColorResponse>* grpcIRGBDCameraService::Stub::AsyncalignDepthToColorRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncalignDepthToColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpcIRGBDCamera::alignColorToDepthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::alignColorToDepthRequest, ::grpcIRGBDCamera::alignColorToDepthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_alignColorToDepth_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::alignColorToDepthRequest, ::grpcIRGBDCamera::alignColorToDepthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_alignColorToDepth_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_alignColorToDepth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignColorToDepthResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncalignColorToDepthRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::alignColorToDepthResponse, ::grpcIRGBDCamera::alignColorToDepthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_alignColorToDepth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignColorToDepthResponse>* grpcIRGBDCameraService::Stub::AsyncalignColorToDepthRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncalignColorToDepthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpcIRGBDCamera::getPixelToWorldResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::getPixelToWorldRequest, ::grpcIRGBDCamera::getPixelToWorldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPixelToWorld_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::getPixelToWorldRequest, ::grpcIRGBDCamera::getPixelToWorldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPixelToWorld_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPixelToWorld_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPixelToWorldResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetPixelToWorldRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getPixelToWorldResponse, ::grpcIRGBDCamera::getPixelToWorldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPixelToWorld_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPixelToWorldResponse>* grpcIRGBDCameraService::Stub::AsyncgetPixelToWorldRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPixelToWorldRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpcIRGBDCamera::getWorldToPixelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::getWorldToPixelRequest, ::grpcIRGBDCamera::getWorldToPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldToPixel_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::getWorldToPixelRequest, ::grpcIRGBDCamera::getWorldToPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldToPixel_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldToPixel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetWorldToPixelRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getWorldToPixelResponse, ::grpcIRGBDCamera::getWorldToPixelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldToPixel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelResponse>* grpcIRGBDCameraService::Stub::AsyncgetWorldToPixelRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldToPixelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRGBDCameraService::Stub::getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRGBDCamera::getWorldToPixelsRequest, ::grpcIRGBDCamera::getWorldToPixelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldToPixels_, context, request, response);
}

void grpcIRGBDCameraService::Stub::experimental_async::getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRGBDCamera::getWorldToPixelsRequest, ::grpcIRGBDCamera::getWorldToPixelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldToPixels_, context, request, response, std::move(f));
}

void grpcIRGBDCameraService::Stub::experimental_async::getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldToPixels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelsResponse>* grpcIRGBDCameraService::Stub::PrepareAsyncgetWorldToPixelsRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRGBDCamera::getWorldToPixelsResponse, ::grpcIRGBDCamera::getWorldToPixelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldToPixels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelsResponse>* grpcIRGBDCameraService::Stub::AsyncgetWorldToPixelsRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldToPixelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIRGBDCameraService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::google::protobuf::Empty, ::grpcIRGBDCamera::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRGBDCamera::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::google::protobuf::Empty, ::grpcIRGBDCamera::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRGBDCamera::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::getNextImageRequest, ::grpcIRGBDCamera::getNextImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::getNextImageRequest* req,
             ::grpcIRGBDCamera::getNextImageResponse* resp) {
               return service->getNextImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::setResolutionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::setResolutionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::setIntrinsicParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::setIntrinsicParametersRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setIntrinsicParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::setDistortionParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::setDistortionParametersRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setDistortionParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::setParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::setParametersRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::google::protobuf::Empty, ::grpcIRGBDCamera::getResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRGBDCamera::getResolutionResponse* resp) {
               return service->getResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::google::protobuf::Empty, ::grpcIRGBDCamera::getIntrinsicsParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRGBDCamera::getIntrinsicsParametersResponse* resp) {
               return service->getIntrinsicsParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::google::protobuf::Empty, ::grpcIRGBDCamera::getParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRGBDCamera::getParametersResponse* resp) {
               return service->getParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::google::protobuf::Empty, ::grpcIRGBDCamera::getDistortionParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRGBDCamera::getDistortionParametersResponse* resp) {
               return service->getDistortionParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::getNextDepthFrameRequest, ::grpcIRGBDCamera::getNextDepthFrameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::getNextDepthFrameRequest* req,
             ::grpcIRGBDCamera::getNextDepthFrameResponse* resp) {
               return service->getNextDepthFrame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::getPointCloudRequest, ::grpcIRGBDCamera::getPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::getPointCloudRequest* req,
             ::grpcIRGBDCamera::getPointCloudResponse* resp) {
               return service->getPointCloud(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::setDepthResolutionRequest, ::grpcIRGBDCamera::setDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::setDepthResolutionRequest* req,
             ::grpcIRGBDCamera::setDepthResolutionResponse* resp) {
               return service->setDepthResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* req,
             ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* resp) {
               return service->setIntrinsicDepthParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::setDistortionDepthParametersRequest, ::grpcIRGBDCamera::setDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* req,
             ::grpcIRGBDCamera::setDistortionDepthParametersResponse* resp) {
               return service->setDistortionDepthParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::google::protobuf::Empty, ::grpcIRGBDCamera::getDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRGBDCamera::getDepthResolutionResponse* resp) {
               return service->getDepthResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::google::protobuf::Empty, ::grpcIRGBDCamera::getDepthMinDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRGBDCamera::getDepthMinDistanceResponse* resp) {
               return service->getDepthMinDistance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::google::protobuf::Empty, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* resp) {
               return service->getIntrinsicsDepthParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::google::protobuf::Empty, ::grpcIRGBDCamera::getDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRGBDCamera::getDistortionDepthParametersResponse* resp) {
               return service->getDistortionDepthParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::getNextRGBDFrameRequest, ::grpcIRGBDCamera::getNextRGBDFrameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::getNextRGBDFrameRequest* req,
             ::grpcIRGBDCamera::getNextRGBDFrameResponse* resp) {
               return service->getNextRGBDFrame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::alignDepthToColorRequest, ::grpcIRGBDCamera::alignDepthToColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::alignDepthToColorRequest* req,
             ::grpcIRGBDCamera::alignDepthToColorResponse* resp) {
               return service->alignDepthToColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::alignColorToDepthRequest, ::grpcIRGBDCamera::alignColorToDepthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::alignColorToDepthRequest* req,
             ::grpcIRGBDCamera::alignColorToDepthResponse* resp) {
               return service->alignColorToDepth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::getPixelToWorldRequest, ::grpcIRGBDCamera::getPixelToWorldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::getPixelToWorldRequest* req,
             ::grpcIRGBDCamera::getPixelToWorldResponse* resp) {
               return service->getPixelToWorld(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::getWorldToPixelRequest, ::grpcIRGBDCamera::getWorldToPixelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::getWorldToPixelRequest* req,
             ::grpcIRGBDCamera::getWorldToPixelResponse* resp) {
               return service->getWorldToPixel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRGBDCameraService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRGBDCameraService::Service, ::grpcIRGBDCamera::getWorldToPixelsRequest, ::grpcIRGBDCamera::getWorldToPixelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRGBDCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRGBDCamera::getWorldToPixelsRequest* req,
             ::grpcIRGBDCamera::getWorldToPixelsResponse* resp) {
               return service->getWorldToPixels(ctx, req, resp);
             }, this)));
}

grpcIRGBDCameraService::Service::~Service() {
}

::grpc::Status grpcIRGBDCameraService::Service::start(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::stop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getNextImage(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::setResolution(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::setIntrinsicParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::setDistortionParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::setParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getResolution(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getResolutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getIntrinsicsParameters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getParameters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getDistortionParameters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getNextDepthFrame(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getPointCloud(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::setDepthResolution(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::setIntrinsicDepthParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::setDistortionDepthParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getDepthResolution(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getDepthMinDistance(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getIntrinsicsDepthParameters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getDistortionDepthParameters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getNextRGBDFrame(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::alignDepthToColor(::grpc::ServerContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::alignColorToDepth(::grpc::ServerContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getPixelToWorld(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getWorldToPixel(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRGBDCameraService::Service::getWorldToPixels(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIRGBDCamera

