// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIStereoCameraCalibrationService.proto

#include "grpcIStereoCameraCalibrationService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIStereoCameraCalibration {
PROTOBUF_CONSTEXPR calibrateRequest::calibrateRequest(
    ::_pbi::ConstantInitialized)
  : images1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , images2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , camparams1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , camparams2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , transformation_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rectparams1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rectparams2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct calibrateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR calibrateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~calibrateRequestDefaultTypeInternal() {}
  union {
    calibrateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 calibrateRequestDefaultTypeInternal _calibrateRequest_default_instance_;
PROTOBUF_CONSTEXPR calibrateResponse::calibrateResponse(
    ::_pbi::ConstantInitialized)
  : transformation_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rectparams1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rectparams2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , xpcfgrpcreturnvalue_(0){}
struct calibrateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR calibrateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~calibrateResponseDefaultTypeInternal() {}
  union {
    calibrateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 calibrateResponseDefaultTypeInternal _calibrateResponse_default_instance_;
}  // namespace grpcIStereoCameraCalibration
static ::_pb::Metadata file_level_metadata_grpcIStereoCameraCalibrationService_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIStereoCameraCalibrationService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIStereoCameraCalibrationService_2eproto = nullptr;

const uint32_t TableStruct_grpcIStereoCameraCalibrationService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateRequest, images1_),
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateRequest, images2_),
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateRequest, camparams1_),
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateRequest, camparams2_),
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateRequest, transformation_),
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateRequest, rectparams1_),
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateRequest, rectparams2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateResponse, transformation_),
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateResponse, rectparams1_),
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateResponse, rectparams2_),
  PROTOBUF_FIELD_OFFSET(::grpcIStereoCameraCalibration::calibrateResponse, xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIStereoCameraCalibration::calibrateRequest)},
  { 14, -1, -1, sizeof(::grpcIStereoCameraCalibration::calibrateResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIStereoCameraCalibration::_calibrateRequest_default_instance_._instance,
  &::grpcIStereoCameraCalibration::_calibrateResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIStereoCameraCalibrationService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)grpcIStereoCameraCalibrationService.pr"
  "oto\022\034grpcIStereoCameraCalibration\032\033googl"
  "e/protobuf/empty.proto\"\303\001\n\020calibrateRequ"
  "est\022#\n\033grpcServerCompressionFormat\030\001 \001(\005"
  "\022\017\n\007images1\030\002 \001(\014\022\017\n\007images2\030\003 \001(\014\022\022\n\nca"
  "mParams1\030\004 \001(\014\022\022\n\ncamParams2\030\005 \001(\014\022\026\n\016tr"
  "ansformation\030\006 \001(\014\022\023\n\013rectParams1\030\007 \001(\014\022"
  "\023\n\013rectParams2\030\010 \001(\014\"r\n\021calibrateRespons"
  "e\022\026\n\016transformation\030\001 \001(\014\022\023\n\013rectParams1"
  "\030\002 \001(\014\022\023\n\013rectParams2\030\003 \001(\014\022\033\n\023xpcfGrpcR"
  "eturnValue\030\004 \001(\0212\225\001\n#grpcIStereoCameraCa"
  "librationService\022n\n\tcalibrate\022..grpcISte"
  "reoCameraCalibration.calibrateRequest\032/."
  "grpcIStereoCameraCalibration.calibrateRe"
  "sponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIStereoCameraCalibrationService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIStereoCameraCalibrationService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIStereoCameraCalibrationService_2eproto = {
    false, false, 576, descriptor_table_protodef_grpcIStereoCameraCalibrationService_2eproto,
    "grpcIStereoCameraCalibrationService.proto",
    &descriptor_table_grpcIStereoCameraCalibrationService_2eproto_once, descriptor_table_grpcIStereoCameraCalibrationService_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_grpcIStereoCameraCalibrationService_2eproto::offsets,
    file_level_metadata_grpcIStereoCameraCalibrationService_2eproto, file_level_enum_descriptors_grpcIStereoCameraCalibrationService_2eproto,
    file_level_service_descriptors_grpcIStereoCameraCalibrationService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIStereoCameraCalibrationService_2eproto_getter() {
  return &descriptor_table_grpcIStereoCameraCalibrationService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIStereoCameraCalibrationService_2eproto(&descriptor_table_grpcIStereoCameraCalibrationService_2eproto);
namespace grpcIStereoCameraCalibration {

// ===================================================================

class calibrateRequest::_Internal {
 public:
};

calibrateRequest::calibrateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIStereoCameraCalibration.calibrateRequest)
}
calibrateRequest::calibrateRequest(const calibrateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  images1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    images1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_images1().empty()) {
    images1_.Set(from._internal_images1(), 
      GetArenaForAllocation());
  }
  images2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    images2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_images2().empty()) {
    images2_.Set(from._internal_images2(), 
      GetArenaForAllocation());
  }
  camparams1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    camparams1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camparams1().empty()) {
    camparams1_.Set(from._internal_camparams1(), 
      GetArenaForAllocation());
  }
  camparams2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    camparams2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camparams2().empty()) {
    camparams2_.Set(from._internal_camparams2(), 
      GetArenaForAllocation());
  }
  transformation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transformation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transformation().empty()) {
    transformation_.Set(from._internal_transformation(), 
      GetArenaForAllocation());
  }
  rectparams1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rectparams1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rectparams1().empty()) {
    rectparams1_.Set(from._internal_rectparams1(), 
      GetArenaForAllocation());
  }
  rectparams2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rectparams2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rectparams2().empty()) {
    rectparams2_.Set(from._internal_rectparams2(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIStereoCameraCalibration.calibrateRequest)
}

inline void calibrateRequest::SharedCtor() {
images1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  images1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
images2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  images2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
camparams1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  camparams1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
camparams2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  camparams2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
transformation_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transformation_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rectparams1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rectparams1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rectparams2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rectparams2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

calibrateRequest::~calibrateRequest() {
  // @@protoc_insertion_point(destructor:grpcIStereoCameraCalibration.calibrateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void calibrateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  images1_.Destroy();
  images2_.Destroy();
  camparams1_.Destroy();
  camparams2_.Destroy();
  transformation_.Destroy();
  rectparams1_.Destroy();
  rectparams2_.Destroy();
}

void calibrateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void calibrateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIStereoCameraCalibration.calibrateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images1_.ClearToEmpty();
  images2_.ClearToEmpty();
  camparams1_.ClearToEmpty();
  camparams2_.ClearToEmpty();
  transformation_.ClearToEmpty();
  rectparams1_.ClearToEmpty();
  rectparams2_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* calibrateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes images1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_images1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes images2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_images2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes camParams1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_camparams1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes camParams2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_camparams2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transformation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_transformation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rectParams1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_rectparams1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rectParams2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_rectparams2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* calibrateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIStereoCameraCalibration.calibrateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes images1 = 2;
  if (!this->_internal_images1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_images1(), target);
  }

  // bytes images2 = 3;
  if (!this->_internal_images2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_images2(), target);
  }

  // bytes camParams1 = 4;
  if (!this->_internal_camparams1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_camparams1(), target);
  }

  // bytes camParams2 = 5;
  if (!this->_internal_camparams2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_camparams2(), target);
  }

  // bytes transformation = 6;
  if (!this->_internal_transformation().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_transformation(), target);
  }

  // bytes rectParams1 = 7;
  if (!this->_internal_rectparams1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_rectparams1(), target);
  }

  // bytes rectParams2 = 8;
  if (!this->_internal_rectparams2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_rectparams2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIStereoCameraCalibration.calibrateRequest)
  return target;
}

size_t calibrateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIStereoCameraCalibration.calibrateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes images1 = 2;
  if (!this->_internal_images1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_images1());
  }

  // bytes images2 = 3;
  if (!this->_internal_images2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_images2());
  }

  // bytes camParams1 = 4;
  if (!this->_internal_camparams1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_camparams1());
  }

  // bytes camParams2 = 5;
  if (!this->_internal_camparams2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_camparams2());
  }

  // bytes transformation = 6;
  if (!this->_internal_transformation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transformation());
  }

  // bytes rectParams1 = 7;
  if (!this->_internal_rectparams1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rectparams1());
  }

  // bytes rectParams2 = 8;
  if (!this->_internal_rectparams2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rectparams2());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData calibrateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    calibrateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*calibrateRequest::GetClassData() const { return &_class_data_; }

void calibrateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<calibrateRequest *>(to)->MergeFrom(
      static_cast<const calibrateRequest &>(from));
}


void calibrateRequest::MergeFrom(const calibrateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIStereoCameraCalibration.calibrateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_images1().empty()) {
    _internal_set_images1(from._internal_images1());
  }
  if (!from._internal_images2().empty()) {
    _internal_set_images2(from._internal_images2());
  }
  if (!from._internal_camparams1().empty()) {
    _internal_set_camparams1(from._internal_camparams1());
  }
  if (!from._internal_camparams2().empty()) {
    _internal_set_camparams2(from._internal_camparams2());
  }
  if (!from._internal_transformation().empty()) {
    _internal_set_transformation(from._internal_transformation());
  }
  if (!from._internal_rectparams1().empty()) {
    _internal_set_rectparams1(from._internal_rectparams1());
  }
  if (!from._internal_rectparams2().empty()) {
    _internal_set_rectparams2(from._internal_rectparams2());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void calibrateRequest::CopyFrom(const calibrateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIStereoCameraCalibration.calibrateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool calibrateRequest::IsInitialized() const {
  return true;
}

void calibrateRequest::InternalSwap(calibrateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &images1_, lhs_arena,
      &other->images1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &images2_, lhs_arena,
      &other->images2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camparams1_, lhs_arena,
      &other->camparams1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camparams2_, lhs_arena,
      &other->camparams2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &transformation_, lhs_arena,
      &other->transformation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rectparams1_, lhs_arena,
      &other->rectparams1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rectparams2_, lhs_arena,
      &other->rectparams2_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata calibrateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIStereoCameraCalibrationService_2eproto_getter, &descriptor_table_grpcIStereoCameraCalibrationService_2eproto_once,
      file_level_metadata_grpcIStereoCameraCalibrationService_2eproto[0]);
}

// ===================================================================

class calibrateResponse::_Internal {
 public:
};

calibrateResponse::calibrateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIStereoCameraCalibration.calibrateResponse)
}
calibrateResponse::calibrateResponse(const calibrateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transformation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transformation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transformation().empty()) {
    transformation_.Set(from._internal_transformation(), 
      GetArenaForAllocation());
  }
  rectparams1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rectparams1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rectparams1().empty()) {
    rectparams1_.Set(from._internal_rectparams1(), 
      GetArenaForAllocation());
  }
  rectparams2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rectparams2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rectparams2().empty()) {
    rectparams2_.Set(from._internal_rectparams2(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIStereoCameraCalibration.calibrateResponse)
}

inline void calibrateResponse::SharedCtor() {
transformation_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transformation_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rectparams1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rectparams1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rectparams2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rectparams2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
xpcfgrpcreturnvalue_ = 0;
}

calibrateResponse::~calibrateResponse() {
  // @@protoc_insertion_point(destructor:grpcIStereoCameraCalibration.calibrateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void calibrateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transformation_.Destroy();
  rectparams1_.Destroy();
  rectparams2_.Destroy();
}

void calibrateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void calibrateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIStereoCameraCalibration.calibrateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transformation_.ClearToEmpty();
  rectparams1_.ClearToEmpty();
  rectparams2_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* calibrateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transformation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transformation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rectParams1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rectparams1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rectParams2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rectparams2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* calibrateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIStereoCameraCalibration.calibrateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transformation = 1;
  if (!this->_internal_transformation().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transformation(), target);
  }

  // bytes rectParams1 = 2;
  if (!this->_internal_rectparams1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rectparams1(), target);
  }

  // bytes rectParams2 = 3;
  if (!this->_internal_rectparams2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rectparams2(), target);
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIStereoCameraCalibration.calibrateResponse)
  return target;
}

size_t calibrateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIStereoCameraCalibration.calibrateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transformation = 1;
  if (!this->_internal_transformation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transformation());
  }

  // bytes rectParams1 = 2;
  if (!this->_internal_rectparams1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rectparams1());
  }

  // bytes rectParams2 = 3;
  if (!this->_internal_rectparams2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rectparams2());
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData calibrateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    calibrateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*calibrateResponse::GetClassData() const { return &_class_data_; }

void calibrateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<calibrateResponse *>(to)->MergeFrom(
      static_cast<const calibrateResponse &>(from));
}


void calibrateResponse::MergeFrom(const calibrateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIStereoCameraCalibration.calibrateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transformation().empty()) {
    _internal_set_transformation(from._internal_transformation());
  }
  if (!from._internal_rectparams1().empty()) {
    _internal_set_rectparams1(from._internal_rectparams1());
  }
  if (!from._internal_rectparams2().empty()) {
    _internal_set_rectparams2(from._internal_rectparams2());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void calibrateResponse::CopyFrom(const calibrateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIStereoCameraCalibration.calibrateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool calibrateResponse::IsInitialized() const {
  return true;
}

void calibrateResponse::InternalSwap(calibrateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &transformation_, lhs_arena,
      &other->transformation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rectparams1_, lhs_arena,
      &other->rectparams1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rectparams2_, lhs_arena,
      &other->rectparams2_, rhs_arena
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata calibrateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIStereoCameraCalibrationService_2eproto_getter, &descriptor_table_grpcIStereoCameraCalibrationService_2eproto_once,
      file_level_metadata_grpcIStereoCameraCalibrationService_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIStereoCameraCalibration
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIStereoCameraCalibration::calibrateRequest*
Arena::CreateMaybeMessage< ::grpcIStereoCameraCalibration::calibrateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIStereoCameraCalibration::calibrateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIStereoCameraCalibration::calibrateResponse*
Arena::CreateMaybeMessage< ::grpcIStereoCameraCalibration::calibrateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIStereoCameraCalibration::calibrateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
