// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIImageConvertorService.proto

#include "grpcIImageConvertorService.pb.h"
#include "grpcIImageConvertorService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIImageConvertor {

static const char* grpcIImageConvertorService_method_names[] = {
  "/grpcIImageConvertor.grpcIImageConvertorService/convert_grpc0",
  "/grpcIImageConvertor.grpcIImageConvertorService/convert_grpc1",
  "/grpcIImageConvertor.grpcIImageConvertorService/convertLookUpTable",
};

std::unique_ptr< grpcIImageConvertorService::Stub> grpcIImageConvertorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIImageConvertorService::Stub> stub(new grpcIImageConvertorService::Stub(channel, options));
  return stub;
}

grpcIImageConvertorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_convert_grpc0_(grpcIImageConvertorService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_convert_grpc1_(grpcIImageConvertorService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_convertLookUpTable_(grpcIImageConvertorService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIImageConvertorService::Stub::convert_grpc0(::grpc::ClientContext* context, const ::grpcIImageConvertor::convert_grpc0Request& request, ::grpcIImageConvertor::convert_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIImageConvertor::convert_grpc0Request, ::grpcIImageConvertor::convert_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_convert_grpc0_, context, request, response);
}

void grpcIImageConvertorService::Stub::async::convert_grpc0(::grpc::ClientContext* context, const ::grpcIImageConvertor::convert_grpc0Request* request, ::grpcIImageConvertor::convert_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIImageConvertor::convert_grpc0Request, ::grpcIImageConvertor::convert_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convert_grpc0_, context, request, response, std::move(f));
}

void grpcIImageConvertorService::Stub::async::convert_grpc0(::grpc::ClientContext* context, const ::grpcIImageConvertor::convert_grpc0Request* request, ::grpcIImageConvertor::convert_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convert_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIImageConvertor::convert_grpc0Response>* grpcIImageConvertorService::Stub::PrepareAsyncconvert_grpc0Raw(::grpc::ClientContext* context, const ::grpcIImageConvertor::convert_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIImageConvertor::convert_grpc0Response, ::grpcIImageConvertor::convert_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_convert_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIImageConvertor::convert_grpc0Response>* grpcIImageConvertorService::Stub::Asyncconvert_grpc0Raw(::grpc::ClientContext* context, const ::grpcIImageConvertor::convert_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconvert_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIImageConvertorService::Stub::convert_grpc1(::grpc::ClientContext* context, const ::grpcIImageConvertor::convert_grpc1Request& request, ::grpcIImageConvertor::convert_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIImageConvertor::convert_grpc1Request, ::grpcIImageConvertor::convert_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_convert_grpc1_, context, request, response);
}

void grpcIImageConvertorService::Stub::async::convert_grpc1(::grpc::ClientContext* context, const ::grpcIImageConvertor::convert_grpc1Request* request, ::grpcIImageConvertor::convert_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIImageConvertor::convert_grpc1Request, ::grpcIImageConvertor::convert_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convert_grpc1_, context, request, response, std::move(f));
}

void grpcIImageConvertorService::Stub::async::convert_grpc1(::grpc::ClientContext* context, const ::grpcIImageConvertor::convert_grpc1Request* request, ::grpcIImageConvertor::convert_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convert_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIImageConvertor::convert_grpc1Response>* grpcIImageConvertorService::Stub::PrepareAsyncconvert_grpc1Raw(::grpc::ClientContext* context, const ::grpcIImageConvertor::convert_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIImageConvertor::convert_grpc1Response, ::grpcIImageConvertor::convert_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_convert_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIImageConvertor::convert_grpc1Response>* grpcIImageConvertorService::Stub::Asyncconvert_grpc1Raw(::grpc::ClientContext* context, const ::grpcIImageConvertor::convert_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconvert_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIImageConvertorService::Stub::convertLookUpTable(::grpc::ClientContext* context, const ::grpcIImageConvertor::convertLookUpTableRequest& request, ::grpcIImageConvertor::convertLookUpTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIImageConvertor::convertLookUpTableRequest, ::grpcIImageConvertor::convertLookUpTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_convertLookUpTable_, context, request, response);
}

void grpcIImageConvertorService::Stub::async::convertLookUpTable(::grpc::ClientContext* context, const ::grpcIImageConvertor::convertLookUpTableRequest* request, ::grpcIImageConvertor::convertLookUpTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIImageConvertor::convertLookUpTableRequest, ::grpcIImageConvertor::convertLookUpTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convertLookUpTable_, context, request, response, std::move(f));
}

void grpcIImageConvertorService::Stub::async::convertLookUpTable(::grpc::ClientContext* context, const ::grpcIImageConvertor::convertLookUpTableRequest* request, ::grpcIImageConvertor::convertLookUpTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_convertLookUpTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIImageConvertor::convertLookUpTableResponse>* grpcIImageConvertorService::Stub::PrepareAsyncconvertLookUpTableRaw(::grpc::ClientContext* context, const ::grpcIImageConvertor::convertLookUpTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIImageConvertor::convertLookUpTableResponse, ::grpcIImageConvertor::convertLookUpTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_convertLookUpTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIImageConvertor::convertLookUpTableResponse>* grpcIImageConvertorService::Stub::AsyncconvertLookUpTableRaw(::grpc::ClientContext* context, const ::grpcIImageConvertor::convertLookUpTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconvertLookUpTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIImageConvertorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIImageConvertorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIImageConvertorService::Service, ::grpcIImageConvertor::convert_grpc0Request, ::grpcIImageConvertor::convert_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIImageConvertorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIImageConvertor::convert_grpc0Request* req,
             ::grpcIImageConvertor::convert_grpc0Response* resp) {
               return service->convert_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIImageConvertorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIImageConvertorService::Service, ::grpcIImageConvertor::convert_grpc1Request, ::grpcIImageConvertor::convert_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIImageConvertorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIImageConvertor::convert_grpc1Request* req,
             ::grpcIImageConvertor::convert_grpc1Response* resp) {
               return service->convert_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIImageConvertorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIImageConvertorService::Service, ::grpcIImageConvertor::convertLookUpTableRequest, ::grpcIImageConvertor::convertLookUpTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIImageConvertorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIImageConvertor::convertLookUpTableRequest* req,
             ::grpcIImageConvertor::convertLookUpTableResponse* resp) {
               return service->convertLookUpTable(ctx, req, resp);
             }, this)));
}

grpcIImageConvertorService::Service::~Service() {
}

::grpc::Status grpcIImageConvertorService::Service::convert_grpc0(::grpc::ServerContext* context, const ::grpcIImageConvertor::convert_grpc0Request* request, ::grpcIImageConvertor::convert_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIImageConvertorService::Service::convert_grpc1(::grpc::ServerContext* context, const ::grpcIImageConvertor::convert_grpc1Request* request, ::grpcIImageConvertor::convert_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIImageConvertorService::Service::convertLookUpTable(::grpc::ServerContext* context, const ::grpcIImageConvertor::convertLookUpTableRequest* request, ::grpcIImageConvertor::convertLookUpTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIImageConvertor

