// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMeshingService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIMeshingService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIMeshingService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIMeshingService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIMeshingService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMeshingService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIMeshingService_2eproto_metadata_getter(int index);
namespace grpcIMeshing {
class createMeshRequest;
struct createMeshRequestDefaultTypeInternal;
extern createMeshRequestDefaultTypeInternal _createMeshRequest_default_instance_;
class createMeshResponse;
struct createMeshResponseDefaultTypeInternal;
extern createMeshResponseDefaultTypeInternal _createMeshResponse_default_instance_;
}  // namespace grpcIMeshing
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIMeshing::createMeshRequest* Arena::CreateMaybeMessage<::grpcIMeshing::createMeshRequest>(Arena*);
template<> ::grpcIMeshing::createMeshResponse* Arena::CreateMaybeMessage<::grpcIMeshing::createMeshResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIMeshing {

// ===================================================================

class createMeshRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMeshing.createMeshRequest) */ {
 public:
  inline createMeshRequest() : createMeshRequest(nullptr) {}
  virtual ~createMeshRequest();
  explicit constexpr createMeshRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  createMeshRequest(const createMeshRequest& from);
  createMeshRequest(createMeshRequest&& from) noexcept
    : createMeshRequest() {
    *this = ::std::move(from);
  }

  inline createMeshRequest& operator=(const createMeshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline createMeshRequest& operator=(createMeshRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const createMeshRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const createMeshRequest* internal_default_instance() {
    return reinterpret_cast<const createMeshRequest*>(
               &_createMeshRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(createMeshRequest& a, createMeshRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(createMeshRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(createMeshRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline createMeshRequest* New() const final {
    return CreateMaybeMessage<createMeshRequest>(nullptr);
  }

  createMeshRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<createMeshRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const createMeshRequest& from);
  void MergeFrom(const createMeshRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createMeshRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMeshing.createMeshRequest";
  }
  protected:
  explicit createMeshRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMeshingService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 2,
    kMeshFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes map = 2;
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const void* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // bytes mesh = 3;
  void clear_mesh();
  const std::string& mesh() const;
  void set_mesh(const std::string& value);
  void set_mesh(std::string&& value);
  void set_mesh(const char* value);
  void set_mesh(const void* value, size_t size);
  std::string* mutable_mesh();
  std::string* release_mesh();
  void set_allocated_mesh(std::string* mesh);
  private:
  const std::string& _internal_mesh() const;
  void _internal_set_mesh(const std::string& value);
  std::string* _internal_mutable_mesh();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMeshing.createMeshRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mesh_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMeshingService_2eproto;
};
// -------------------------------------------------------------------

class createMeshResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMeshing.createMeshResponse) */ {
 public:
  inline createMeshResponse() : createMeshResponse(nullptr) {}
  virtual ~createMeshResponse();
  explicit constexpr createMeshResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  createMeshResponse(const createMeshResponse& from);
  createMeshResponse(createMeshResponse&& from) noexcept
    : createMeshResponse() {
    *this = ::std::move(from);
  }

  inline createMeshResponse& operator=(const createMeshResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline createMeshResponse& operator=(createMeshResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const createMeshResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const createMeshResponse* internal_default_instance() {
    return reinterpret_cast<const createMeshResponse*>(
               &_createMeshResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(createMeshResponse& a, createMeshResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(createMeshResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(createMeshResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline createMeshResponse* New() const final {
    return CreateMaybeMessage<createMeshResponse>(nullptr);
  }

  createMeshResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<createMeshResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const createMeshResponse& from);
  void MergeFrom(const createMeshResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createMeshResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMeshing.createMeshResponse";
  }
  protected:
  explicit createMeshResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMeshingService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes mesh = 1;
  void clear_mesh();
  const std::string& mesh() const;
  void set_mesh(const std::string& value);
  void set_mesh(std::string&& value);
  void set_mesh(const char* value);
  void set_mesh(const void* value, size_t size);
  std::string* mutable_mesh();
  std::string* release_mesh();
  void set_allocated_mesh(std::string* mesh);
  private:
  const std::string& _internal_mesh() const;
  void _internal_set_mesh(const std::string& value);
  std::string* _internal_mutable_mesh();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMeshing.createMeshResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mesh_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMeshingService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// createMeshRequest

// int32 grpcServerCompressionFormat = 1;
inline void createMeshRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 createMeshRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 createMeshRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMeshing.createMeshRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void createMeshRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void createMeshRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMeshing.createMeshRequest.grpcServerCompressionFormat)
}

// bytes map = 2;
inline void createMeshRequest::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& createMeshRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIMeshing.createMeshRequest.map)
  return _internal_map();
}
inline void createMeshRequest::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:grpcIMeshing.createMeshRequest.map)
}
inline std::string* createMeshRequest::mutable_map() {
  // @@protoc_insertion_point(field_mutable:grpcIMeshing.createMeshRequest.map)
  return _internal_mutable_map();
}
inline const std::string& createMeshRequest::_internal_map() const {
  return map_.Get();
}
inline void createMeshRequest::_internal_set_map(const std::string& value) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void createMeshRequest::set_map(std::string&& value) {
  
  map_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMeshing.createMeshRequest.map)
}
inline void createMeshRequest::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMeshing.createMeshRequest.map)
}
inline void createMeshRequest::set_map(const void* value,
    size_t size) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMeshing.createMeshRequest.map)
}
inline std::string* createMeshRequest::_internal_mutable_map() {
  
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* createMeshRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIMeshing.createMeshRequest.map)
  return map_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void createMeshRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMeshing.createMeshRequest.map)
}

// bytes mesh = 3;
inline void createMeshRequest::clear_mesh() {
  mesh_.ClearToEmpty();
}
inline const std::string& createMeshRequest::mesh() const {
  // @@protoc_insertion_point(field_get:grpcIMeshing.createMeshRequest.mesh)
  return _internal_mesh();
}
inline void createMeshRequest::set_mesh(const std::string& value) {
  _internal_set_mesh(value);
  // @@protoc_insertion_point(field_set:grpcIMeshing.createMeshRequest.mesh)
}
inline std::string* createMeshRequest::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:grpcIMeshing.createMeshRequest.mesh)
  return _internal_mutable_mesh();
}
inline const std::string& createMeshRequest::_internal_mesh() const {
  return mesh_.Get();
}
inline void createMeshRequest::_internal_set_mesh(const std::string& value) {
  
  mesh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void createMeshRequest::set_mesh(std::string&& value) {
  
  mesh_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMeshing.createMeshRequest.mesh)
}
inline void createMeshRequest::set_mesh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mesh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMeshing.createMeshRequest.mesh)
}
inline void createMeshRequest::set_mesh(const void* value,
    size_t size) {
  
  mesh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMeshing.createMeshRequest.mesh)
}
inline std::string* createMeshRequest::_internal_mutable_mesh() {
  
  return mesh_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* createMeshRequest::release_mesh() {
  // @@protoc_insertion_point(field_release:grpcIMeshing.createMeshRequest.mesh)
  return mesh_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void createMeshRequest::set_allocated_mesh(std::string* mesh) {
  if (mesh != nullptr) {
    
  } else {
    
  }
  mesh_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mesh,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMeshing.createMeshRequest.mesh)
}

// -------------------------------------------------------------------

// createMeshResponse

// bytes mesh = 1;
inline void createMeshResponse::clear_mesh() {
  mesh_.ClearToEmpty();
}
inline const std::string& createMeshResponse::mesh() const {
  // @@protoc_insertion_point(field_get:grpcIMeshing.createMeshResponse.mesh)
  return _internal_mesh();
}
inline void createMeshResponse::set_mesh(const std::string& value) {
  _internal_set_mesh(value);
  // @@protoc_insertion_point(field_set:grpcIMeshing.createMeshResponse.mesh)
}
inline std::string* createMeshResponse::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:grpcIMeshing.createMeshResponse.mesh)
  return _internal_mutable_mesh();
}
inline const std::string& createMeshResponse::_internal_mesh() const {
  return mesh_.Get();
}
inline void createMeshResponse::_internal_set_mesh(const std::string& value) {
  
  mesh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void createMeshResponse::set_mesh(std::string&& value) {
  
  mesh_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMeshing.createMeshResponse.mesh)
}
inline void createMeshResponse::set_mesh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mesh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMeshing.createMeshResponse.mesh)
}
inline void createMeshResponse::set_mesh(const void* value,
    size_t size) {
  
  mesh_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMeshing.createMeshResponse.mesh)
}
inline std::string* createMeshResponse::_internal_mutable_mesh() {
  
  return mesh_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* createMeshResponse::release_mesh() {
  // @@protoc_insertion_point(field_release:grpcIMeshing.createMeshResponse.mesh)
  return mesh_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void createMeshResponse::set_allocated_mesh(std::string* mesh) {
  if (mesh != nullptr) {
    
  } else {
    
  }
  mesh_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mesh,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMeshing.createMeshResponse.mesh)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void createMeshResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 createMeshResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 createMeshResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMeshing.createMeshResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void createMeshResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void createMeshResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMeshing.createMeshResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIMeshing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIMeshingService_2eproto
