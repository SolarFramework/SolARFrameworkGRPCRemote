// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIReprojectionStereoService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIReprojectionStereoService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIReprojectionStereoService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIReprojectionStereoService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIReprojectionStereoService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIReprojectionStereoService_2eproto;
namespace grpcIReprojectionStereo {
class reprojectToCloudPoints_grpc0Request;
struct reprojectToCloudPoints_grpc0RequestDefaultTypeInternal;
extern reprojectToCloudPoints_grpc0RequestDefaultTypeInternal _reprojectToCloudPoints_grpc0Request_default_instance_;
class reprojectToCloudPoints_grpc0Response;
struct reprojectToCloudPoints_grpc0ResponseDefaultTypeInternal;
extern reprojectToCloudPoints_grpc0ResponseDefaultTypeInternal _reprojectToCloudPoints_grpc0Response_default_instance_;
class reprojectToCloudPoints_grpc1Request;
struct reprojectToCloudPoints_grpc1RequestDefaultTypeInternal;
extern reprojectToCloudPoints_grpc1RequestDefaultTypeInternal _reprojectToCloudPoints_grpc1Request_default_instance_;
class reprojectToCloudPoints_grpc1Response;
struct reprojectToCloudPoints_grpc1ResponseDefaultTypeInternal;
extern reprojectToCloudPoints_grpc1ResponseDefaultTypeInternal _reprojectToCloudPoints_grpc1Response_default_instance_;
class reprojectToUnrectificationRequest;
struct reprojectToUnrectificationRequestDefaultTypeInternal;
extern reprojectToUnrectificationRequestDefaultTypeInternal _reprojectToUnrectificationRequest_default_instance_;
class reprojectToUnrectificationResponse;
struct reprojectToUnrectificationResponseDefaultTypeInternal;
extern reprojectToUnrectificationResponseDefaultTypeInternal _reprojectToUnrectificationResponse_default_instance_;
}  // namespace grpcIReprojectionStereo
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request* Arena::CreateMaybeMessage<::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request>(Arena*);
template<> ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response* Arena::CreateMaybeMessage<::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response>(Arena*);
template<> ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request* Arena::CreateMaybeMessage<::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request>(Arena*);
template<> ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response* Arena::CreateMaybeMessage<::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response>(Arena*);
template<> ::grpcIReprojectionStereo::reprojectToUnrectificationRequest* Arena::CreateMaybeMessage<::grpcIReprojectionStereo::reprojectToUnrectificationRequest>(Arena*);
template<> ::grpcIReprojectionStereo::reprojectToUnrectificationResponse* Arena::CreateMaybeMessage<::grpcIReprojectionStereo::reprojectToUnrectificationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIReprojectionStereo {

// ===================================================================

class reprojectToUnrectificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIReprojectionStereo.reprojectToUnrectificationRequest) */ {
 public:
  inline reprojectToUnrectificationRequest() : reprojectToUnrectificationRequest(nullptr) {}
  ~reprojectToUnrectificationRequest() override;
  explicit PROTOBUF_CONSTEXPR reprojectToUnrectificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reprojectToUnrectificationRequest(const reprojectToUnrectificationRequest& from);
  reprojectToUnrectificationRequest(reprojectToUnrectificationRequest&& from) noexcept
    : reprojectToUnrectificationRequest() {
    *this = ::std::move(from);
  }

  inline reprojectToUnrectificationRequest& operator=(const reprojectToUnrectificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline reprojectToUnrectificationRequest& operator=(reprojectToUnrectificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reprojectToUnrectificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const reprojectToUnrectificationRequest* internal_default_instance() {
    return reinterpret_cast<const reprojectToUnrectificationRequest*>(
               &_reprojectToUnrectificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(reprojectToUnrectificationRequest& a, reprojectToUnrectificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(reprojectToUnrectificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reprojectToUnrectificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reprojectToUnrectificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reprojectToUnrectificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const reprojectToUnrectificationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const reprojectToUnrectificationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reprojectToUnrectificationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIReprojectionStereo.reprojectToUnrectificationRequest";
  }
  protected:
  explicit reprojectToUnrectificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectifiedKeypointsFieldNumber = 2,
    kRectParamsFieldNumber = 3,
    kUnrectifiedKeypointsFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes rectifiedKeypoints = 2;
  void clear_rectifiedkeypoints();
  const std::string& rectifiedkeypoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectifiedkeypoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectifiedkeypoints();
  PROTOBUF_NODISCARD std::string* release_rectifiedkeypoints();
  void set_allocated_rectifiedkeypoints(std::string* rectifiedkeypoints);
  private:
  const std::string& _internal_rectifiedkeypoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectifiedkeypoints(const std::string& value);
  std::string* _internal_mutable_rectifiedkeypoints();
  public:

  // bytes rectParams = 3;
  void clear_rectparams();
  const std::string& rectparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectparams();
  PROTOBUF_NODISCARD std::string* release_rectparams();
  void set_allocated_rectparams(std::string* rectparams);
  private:
  const std::string& _internal_rectparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectparams(const std::string& value);
  std::string* _internal_mutable_rectparams();
  public:

  // bytes unrectifiedKeypoints = 4;
  void clear_unrectifiedkeypoints();
  const std::string& unrectifiedkeypoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unrectifiedkeypoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unrectifiedkeypoints();
  PROTOBUF_NODISCARD std::string* release_unrectifiedkeypoints();
  void set_allocated_unrectifiedkeypoints(std::string* unrectifiedkeypoints);
  private:
  const std::string& _internal_unrectifiedkeypoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unrectifiedkeypoints(const std::string& value);
  std::string* _internal_mutable_unrectifiedkeypoints();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIReprojectionStereo.reprojectToUnrectificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectifiedkeypoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unrectifiedkeypoints_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIReprojectionStereoService_2eproto;
};
// -------------------------------------------------------------------

class reprojectToUnrectificationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIReprojectionStereo.reprojectToUnrectificationResponse) */ {
 public:
  inline reprojectToUnrectificationResponse() : reprojectToUnrectificationResponse(nullptr) {}
  ~reprojectToUnrectificationResponse() override;
  explicit PROTOBUF_CONSTEXPR reprojectToUnrectificationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reprojectToUnrectificationResponse(const reprojectToUnrectificationResponse& from);
  reprojectToUnrectificationResponse(reprojectToUnrectificationResponse&& from) noexcept
    : reprojectToUnrectificationResponse() {
    *this = ::std::move(from);
  }

  inline reprojectToUnrectificationResponse& operator=(const reprojectToUnrectificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline reprojectToUnrectificationResponse& operator=(reprojectToUnrectificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reprojectToUnrectificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const reprojectToUnrectificationResponse* internal_default_instance() {
    return reinterpret_cast<const reprojectToUnrectificationResponse*>(
               &_reprojectToUnrectificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(reprojectToUnrectificationResponse& a, reprojectToUnrectificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(reprojectToUnrectificationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reprojectToUnrectificationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reprojectToUnrectificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reprojectToUnrectificationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const reprojectToUnrectificationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const reprojectToUnrectificationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reprojectToUnrectificationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIReprojectionStereo.reprojectToUnrectificationResponse";
  }
  protected:
  explicit reprojectToUnrectificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnrectifiedKeypointsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes unrectifiedKeypoints = 1;
  void clear_unrectifiedkeypoints();
  const std::string& unrectifiedkeypoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unrectifiedkeypoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unrectifiedkeypoints();
  PROTOBUF_NODISCARD std::string* release_unrectifiedkeypoints();
  void set_allocated_unrectifiedkeypoints(std::string* unrectifiedkeypoints);
  private:
  const std::string& _internal_unrectifiedkeypoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unrectifiedkeypoints(const std::string& value);
  std::string* _internal_mutable_unrectifiedkeypoints();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIReprojectionStereo.reprojectToUnrectificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unrectifiedkeypoints_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIReprojectionStereoService_2eproto;
};
// -------------------------------------------------------------------

class reprojectToCloudPoints_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request) */ {
 public:
  inline reprojectToCloudPoints_grpc0Request() : reprojectToCloudPoints_grpc0Request(nullptr) {}
  ~reprojectToCloudPoints_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR reprojectToCloudPoints_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reprojectToCloudPoints_grpc0Request(const reprojectToCloudPoints_grpc0Request& from);
  reprojectToCloudPoints_grpc0Request(reprojectToCloudPoints_grpc0Request&& from) noexcept
    : reprojectToCloudPoints_grpc0Request() {
    *this = ::std::move(from);
  }

  inline reprojectToCloudPoints_grpc0Request& operator=(const reprojectToCloudPoints_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline reprojectToCloudPoints_grpc0Request& operator=(reprojectToCloudPoints_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reprojectToCloudPoints_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const reprojectToCloudPoints_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const reprojectToCloudPoints_grpc0Request*>(
               &_reprojectToCloudPoints_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(reprojectToCloudPoints_grpc0Request& a, reprojectToCloudPoints_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(reprojectToCloudPoints_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reprojectToCloudPoints_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reprojectToCloudPoints_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reprojectToCloudPoints_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const reprojectToCloudPoints_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const reprojectToCloudPoints_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reprojectToCloudPoints_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request";
  }
  protected:
  explicit reprojectToCloudPoints_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUndistortedKeypointsFieldNumber = 2,
    kDescriptorsFieldNumber = 3,
    kPoseFieldNumber = 4,
    kIntrinsicParamsFieldNumber = 5,
    kCloudPointsFieldNumber = 6,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes undistortedKeypoints = 2;
  void clear_undistortedkeypoints();
  const std::string& undistortedkeypoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_undistortedkeypoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_undistortedkeypoints();
  PROTOBUF_NODISCARD std::string* release_undistortedkeypoints();
  void set_allocated_undistortedkeypoints(std::string* undistortedkeypoints);
  private:
  const std::string& _internal_undistortedkeypoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_undistortedkeypoints(const std::string& value);
  std::string* _internal_mutable_undistortedkeypoints();
  public:

  // bytes descriptors = 3;
  void clear_descriptors();
  const std::string& descriptors() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptors(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptors();
  PROTOBUF_NODISCARD std::string* release_descriptors();
  void set_allocated_descriptors(std::string* descriptors);
  private:
  const std::string& _internal_descriptors() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptors(const std::string& value);
  std::string* _internal_mutable_descriptors();
  public:

  // bytes pose = 4;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes intrinsicParams = 5;
  void clear_intrinsicparams();
  const std::string& intrinsicparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intrinsicparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intrinsicparams();
  PROTOBUF_NODISCARD std::string* release_intrinsicparams();
  void set_allocated_intrinsicparams(std::string* intrinsicparams);
  private:
  const std::string& _internal_intrinsicparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intrinsicparams(const std::string& value);
  std::string* _internal_mutable_intrinsicparams();
  public:

  // bytes cloudPoints = 6;
  void clear_cloudpoints();
  const std::string& cloudpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cloudpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cloudpoints();
  PROTOBUF_NODISCARD std::string* release_cloudpoints();
  void set_allocated_cloudpoints(std::string* cloudpoints);
  private:
  const std::string& _internal_cloudpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cloudpoints(const std::string& value);
  std::string* _internal_mutable_cloudpoints();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr undistortedkeypoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intrinsicparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudpoints_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIReprojectionStereoService_2eproto;
};
// -------------------------------------------------------------------

class reprojectToCloudPoints_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Response) */ {
 public:
  inline reprojectToCloudPoints_grpc0Response() : reprojectToCloudPoints_grpc0Response(nullptr) {}
  ~reprojectToCloudPoints_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR reprojectToCloudPoints_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reprojectToCloudPoints_grpc0Response(const reprojectToCloudPoints_grpc0Response& from);
  reprojectToCloudPoints_grpc0Response(reprojectToCloudPoints_grpc0Response&& from) noexcept
    : reprojectToCloudPoints_grpc0Response() {
    *this = ::std::move(from);
  }

  inline reprojectToCloudPoints_grpc0Response& operator=(const reprojectToCloudPoints_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline reprojectToCloudPoints_grpc0Response& operator=(reprojectToCloudPoints_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reprojectToCloudPoints_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const reprojectToCloudPoints_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const reprojectToCloudPoints_grpc0Response*>(
               &_reprojectToCloudPoints_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(reprojectToCloudPoints_grpc0Response& a, reprojectToCloudPoints_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(reprojectToCloudPoints_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reprojectToCloudPoints_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reprojectToCloudPoints_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reprojectToCloudPoints_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const reprojectToCloudPoints_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const reprojectToCloudPoints_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reprojectToCloudPoints_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Response";
  }
  protected:
  explicit reprojectToCloudPoints_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudPointsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes cloudPoints = 1;
  void clear_cloudpoints();
  const std::string& cloudpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cloudpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cloudpoints();
  PROTOBUF_NODISCARD std::string* release_cloudpoints();
  void set_allocated_cloudpoints(std::string* cloudpoints);
  private:
  const std::string& _internal_cloudpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cloudpoints(const std::string& value);
  std::string* _internal_mutable_cloudpoints();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudpoints_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIReprojectionStereoService_2eproto;
};
// -------------------------------------------------------------------

class reprojectToCloudPoints_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request) */ {
 public:
  inline reprojectToCloudPoints_grpc1Request() : reprojectToCloudPoints_grpc1Request(nullptr) {}
  ~reprojectToCloudPoints_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR reprojectToCloudPoints_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reprojectToCloudPoints_grpc1Request(const reprojectToCloudPoints_grpc1Request& from);
  reprojectToCloudPoints_grpc1Request(reprojectToCloudPoints_grpc1Request&& from) noexcept
    : reprojectToCloudPoints_grpc1Request() {
    *this = ::std::move(from);
  }

  inline reprojectToCloudPoints_grpc1Request& operator=(const reprojectToCloudPoints_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline reprojectToCloudPoints_grpc1Request& operator=(reprojectToCloudPoints_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reprojectToCloudPoints_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const reprojectToCloudPoints_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const reprojectToCloudPoints_grpc1Request*>(
               &_reprojectToCloudPoints_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(reprojectToCloudPoints_grpc1Request& a, reprojectToCloudPoints_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(reprojectToCloudPoints_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reprojectToCloudPoints_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reprojectToCloudPoints_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reprojectToCloudPoints_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const reprojectToCloudPoints_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const reprojectToCloudPoints_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reprojectToCloudPoints_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request";
  }
  protected:
  explicit reprojectToCloudPoints_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kIntrinsicParamsFieldNumber = 3,
    kCloudPointsFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes frame = 2;
  void clear_frame();
  const std::string& frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame();
  PROTOBUF_NODISCARD std::string* release_frame();
  void set_allocated_frame(std::string* frame);
  private:
  const std::string& _internal_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame(const std::string& value);
  std::string* _internal_mutable_frame();
  public:

  // bytes intrinsicParams = 3;
  void clear_intrinsicparams();
  const std::string& intrinsicparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intrinsicparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intrinsicparams();
  PROTOBUF_NODISCARD std::string* release_intrinsicparams();
  void set_allocated_intrinsicparams(std::string* intrinsicparams);
  private:
  const std::string& _internal_intrinsicparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intrinsicparams(const std::string& value);
  std::string* _internal_mutable_intrinsicparams();
  public:

  // bytes cloudPoints = 4;
  void clear_cloudpoints();
  const std::string& cloudpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cloudpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cloudpoints();
  PROTOBUF_NODISCARD std::string* release_cloudpoints();
  void set_allocated_cloudpoints(std::string* cloudpoints);
  private:
  const std::string& _internal_cloudpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cloudpoints(const std::string& value);
  std::string* _internal_mutable_cloudpoints();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intrinsicparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudpoints_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIReprojectionStereoService_2eproto;
};
// -------------------------------------------------------------------

class reprojectToCloudPoints_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Response) */ {
 public:
  inline reprojectToCloudPoints_grpc1Response() : reprojectToCloudPoints_grpc1Response(nullptr) {}
  ~reprojectToCloudPoints_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR reprojectToCloudPoints_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reprojectToCloudPoints_grpc1Response(const reprojectToCloudPoints_grpc1Response& from);
  reprojectToCloudPoints_grpc1Response(reprojectToCloudPoints_grpc1Response&& from) noexcept
    : reprojectToCloudPoints_grpc1Response() {
    *this = ::std::move(from);
  }

  inline reprojectToCloudPoints_grpc1Response& operator=(const reprojectToCloudPoints_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline reprojectToCloudPoints_grpc1Response& operator=(reprojectToCloudPoints_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reprojectToCloudPoints_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const reprojectToCloudPoints_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const reprojectToCloudPoints_grpc1Response*>(
               &_reprojectToCloudPoints_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(reprojectToCloudPoints_grpc1Response& a, reprojectToCloudPoints_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(reprojectToCloudPoints_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reprojectToCloudPoints_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reprojectToCloudPoints_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reprojectToCloudPoints_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const reprojectToCloudPoints_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const reprojectToCloudPoints_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reprojectToCloudPoints_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Response";
  }
  protected:
  explicit reprojectToCloudPoints_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudPointsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes cloudPoints = 1;
  void clear_cloudpoints();
  const std::string& cloudpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cloudpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cloudpoints();
  PROTOBUF_NODISCARD std::string* release_cloudpoints();
  void set_allocated_cloudpoints(std::string* cloudpoints);
  private:
  const std::string& _internal_cloudpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cloudpoints(const std::string& value);
  std::string* _internal_mutable_cloudpoints();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudpoints_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIReprojectionStereoService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// reprojectToUnrectificationRequest

// int32 grpcServerCompressionFormat = 1;
inline void reprojectToUnrectificationRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t reprojectToUnrectificationRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t reprojectToUnrectificationRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToUnrectificationRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void reprojectToUnrectificationRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void reprojectToUnrectificationRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToUnrectificationRequest.grpcServerCompressionFormat)
}

// bytes rectifiedKeypoints = 2;
inline void reprojectToUnrectificationRequest::clear_rectifiedkeypoints() {
  rectifiedkeypoints_.ClearToEmpty();
}
inline const std::string& reprojectToUnrectificationRequest::rectifiedkeypoints() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToUnrectificationRequest.rectifiedKeypoints)
  return _internal_rectifiedkeypoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToUnrectificationRequest::set_rectifiedkeypoints(ArgT0&& arg0, ArgT... args) {
 
 rectifiedkeypoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToUnrectificationRequest.rectifiedKeypoints)
}
inline std::string* reprojectToUnrectificationRequest::mutable_rectifiedkeypoints() {
  std::string* _s = _internal_mutable_rectifiedkeypoints();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToUnrectificationRequest.rectifiedKeypoints)
  return _s;
}
inline const std::string& reprojectToUnrectificationRequest::_internal_rectifiedkeypoints() const {
  return rectifiedkeypoints_.Get();
}
inline void reprojectToUnrectificationRequest::_internal_set_rectifiedkeypoints(const std::string& value) {
  
  rectifiedkeypoints_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToUnrectificationRequest::_internal_mutable_rectifiedkeypoints() {
  
  return rectifiedkeypoints_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToUnrectificationRequest::release_rectifiedkeypoints() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToUnrectificationRequest.rectifiedKeypoints)
  return rectifiedkeypoints_.Release();
}
inline void reprojectToUnrectificationRequest::set_allocated_rectifiedkeypoints(std::string* rectifiedkeypoints) {
  if (rectifiedkeypoints != nullptr) {
    
  } else {
    
  }
  rectifiedkeypoints_.SetAllocated(rectifiedkeypoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectifiedkeypoints_.IsDefault()) {
    rectifiedkeypoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToUnrectificationRequest.rectifiedKeypoints)
}

// bytes rectParams = 3;
inline void reprojectToUnrectificationRequest::clear_rectparams() {
  rectparams_.ClearToEmpty();
}
inline const std::string& reprojectToUnrectificationRequest::rectparams() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToUnrectificationRequest.rectParams)
  return _internal_rectparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToUnrectificationRequest::set_rectparams(ArgT0&& arg0, ArgT... args) {
 
 rectparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToUnrectificationRequest.rectParams)
}
inline std::string* reprojectToUnrectificationRequest::mutable_rectparams() {
  std::string* _s = _internal_mutable_rectparams();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToUnrectificationRequest.rectParams)
  return _s;
}
inline const std::string& reprojectToUnrectificationRequest::_internal_rectparams() const {
  return rectparams_.Get();
}
inline void reprojectToUnrectificationRequest::_internal_set_rectparams(const std::string& value) {
  
  rectparams_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToUnrectificationRequest::_internal_mutable_rectparams() {
  
  return rectparams_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToUnrectificationRequest::release_rectparams() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToUnrectificationRequest.rectParams)
  return rectparams_.Release();
}
inline void reprojectToUnrectificationRequest::set_allocated_rectparams(std::string* rectparams) {
  if (rectparams != nullptr) {
    
  } else {
    
  }
  rectparams_.SetAllocated(rectparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectparams_.IsDefault()) {
    rectparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToUnrectificationRequest.rectParams)
}

// bytes unrectifiedKeypoints = 4;
inline void reprojectToUnrectificationRequest::clear_unrectifiedkeypoints() {
  unrectifiedkeypoints_.ClearToEmpty();
}
inline const std::string& reprojectToUnrectificationRequest::unrectifiedkeypoints() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToUnrectificationRequest.unrectifiedKeypoints)
  return _internal_unrectifiedkeypoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToUnrectificationRequest::set_unrectifiedkeypoints(ArgT0&& arg0, ArgT... args) {
 
 unrectifiedkeypoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToUnrectificationRequest.unrectifiedKeypoints)
}
inline std::string* reprojectToUnrectificationRequest::mutable_unrectifiedkeypoints() {
  std::string* _s = _internal_mutable_unrectifiedkeypoints();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToUnrectificationRequest.unrectifiedKeypoints)
  return _s;
}
inline const std::string& reprojectToUnrectificationRequest::_internal_unrectifiedkeypoints() const {
  return unrectifiedkeypoints_.Get();
}
inline void reprojectToUnrectificationRequest::_internal_set_unrectifiedkeypoints(const std::string& value) {
  
  unrectifiedkeypoints_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToUnrectificationRequest::_internal_mutable_unrectifiedkeypoints() {
  
  return unrectifiedkeypoints_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToUnrectificationRequest::release_unrectifiedkeypoints() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToUnrectificationRequest.unrectifiedKeypoints)
  return unrectifiedkeypoints_.Release();
}
inline void reprojectToUnrectificationRequest::set_allocated_unrectifiedkeypoints(std::string* unrectifiedkeypoints) {
  if (unrectifiedkeypoints != nullptr) {
    
  } else {
    
  }
  unrectifiedkeypoints_.SetAllocated(unrectifiedkeypoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unrectifiedkeypoints_.IsDefault()) {
    unrectifiedkeypoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToUnrectificationRequest.unrectifiedKeypoints)
}

// -------------------------------------------------------------------

// reprojectToUnrectificationResponse

// bytes unrectifiedKeypoints = 1;
inline void reprojectToUnrectificationResponse::clear_unrectifiedkeypoints() {
  unrectifiedkeypoints_.ClearToEmpty();
}
inline const std::string& reprojectToUnrectificationResponse::unrectifiedkeypoints() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToUnrectificationResponse.unrectifiedKeypoints)
  return _internal_unrectifiedkeypoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToUnrectificationResponse::set_unrectifiedkeypoints(ArgT0&& arg0, ArgT... args) {
 
 unrectifiedkeypoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToUnrectificationResponse.unrectifiedKeypoints)
}
inline std::string* reprojectToUnrectificationResponse::mutable_unrectifiedkeypoints() {
  std::string* _s = _internal_mutable_unrectifiedkeypoints();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToUnrectificationResponse.unrectifiedKeypoints)
  return _s;
}
inline const std::string& reprojectToUnrectificationResponse::_internal_unrectifiedkeypoints() const {
  return unrectifiedkeypoints_.Get();
}
inline void reprojectToUnrectificationResponse::_internal_set_unrectifiedkeypoints(const std::string& value) {
  
  unrectifiedkeypoints_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToUnrectificationResponse::_internal_mutable_unrectifiedkeypoints() {
  
  return unrectifiedkeypoints_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToUnrectificationResponse::release_unrectifiedkeypoints() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToUnrectificationResponse.unrectifiedKeypoints)
  return unrectifiedkeypoints_.Release();
}
inline void reprojectToUnrectificationResponse::set_allocated_unrectifiedkeypoints(std::string* unrectifiedkeypoints) {
  if (unrectifiedkeypoints != nullptr) {
    
  } else {
    
  }
  unrectifiedkeypoints_.SetAllocated(unrectifiedkeypoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (unrectifiedkeypoints_.IsDefault()) {
    unrectifiedkeypoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToUnrectificationResponse.unrectifiedKeypoints)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void reprojectToUnrectificationResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t reprojectToUnrectificationResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t reprojectToUnrectificationResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToUnrectificationResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void reprojectToUnrectificationResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void reprojectToUnrectificationResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToUnrectificationResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// reprojectToCloudPoints_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void reprojectToCloudPoints_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t reprojectToCloudPoints_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t reprojectToCloudPoints_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void reprojectToCloudPoints_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void reprojectToCloudPoints_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.grpcServerCompressionFormat)
}

// bytes undistortedKeypoints = 2;
inline void reprojectToCloudPoints_grpc0Request::clear_undistortedkeypoints() {
  undistortedkeypoints_.ClearToEmpty();
}
inline const std::string& reprojectToCloudPoints_grpc0Request::undistortedkeypoints() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.undistortedKeypoints)
  return _internal_undistortedkeypoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToCloudPoints_grpc0Request::set_undistortedkeypoints(ArgT0&& arg0, ArgT... args) {
 
 undistortedkeypoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.undistortedKeypoints)
}
inline std::string* reprojectToCloudPoints_grpc0Request::mutable_undistortedkeypoints() {
  std::string* _s = _internal_mutable_undistortedkeypoints();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.undistortedKeypoints)
  return _s;
}
inline const std::string& reprojectToCloudPoints_grpc0Request::_internal_undistortedkeypoints() const {
  return undistortedkeypoints_.Get();
}
inline void reprojectToCloudPoints_grpc0Request::_internal_set_undistortedkeypoints(const std::string& value) {
  
  undistortedkeypoints_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Request::_internal_mutable_undistortedkeypoints() {
  
  return undistortedkeypoints_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Request::release_undistortedkeypoints() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.undistortedKeypoints)
  return undistortedkeypoints_.Release();
}
inline void reprojectToCloudPoints_grpc0Request::set_allocated_undistortedkeypoints(std::string* undistortedkeypoints) {
  if (undistortedkeypoints != nullptr) {
    
  } else {
    
  }
  undistortedkeypoints_.SetAllocated(undistortedkeypoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (undistortedkeypoints_.IsDefault()) {
    undistortedkeypoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.undistortedKeypoints)
}

// bytes descriptors = 3;
inline void reprojectToCloudPoints_grpc0Request::clear_descriptors() {
  descriptors_.ClearToEmpty();
}
inline const std::string& reprojectToCloudPoints_grpc0Request::descriptors() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.descriptors)
  return _internal_descriptors();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToCloudPoints_grpc0Request::set_descriptors(ArgT0&& arg0, ArgT... args) {
 
 descriptors_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.descriptors)
}
inline std::string* reprojectToCloudPoints_grpc0Request::mutable_descriptors() {
  std::string* _s = _internal_mutable_descriptors();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.descriptors)
  return _s;
}
inline const std::string& reprojectToCloudPoints_grpc0Request::_internal_descriptors() const {
  return descriptors_.Get();
}
inline void reprojectToCloudPoints_grpc0Request::_internal_set_descriptors(const std::string& value) {
  
  descriptors_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Request::_internal_mutable_descriptors() {
  
  return descriptors_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Request::release_descriptors() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.descriptors)
  return descriptors_.Release();
}
inline void reprojectToCloudPoints_grpc0Request::set_allocated_descriptors(std::string* descriptors) {
  if (descriptors != nullptr) {
    
  } else {
    
  }
  descriptors_.SetAllocated(descriptors, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (descriptors_.IsDefault()) {
    descriptors_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.descriptors)
}

// bytes pose = 4;
inline void reprojectToCloudPoints_grpc0Request::clear_pose() {
  pose_.ClearToEmpty();
}
inline const std::string& reprojectToCloudPoints_grpc0Request::pose() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToCloudPoints_grpc0Request::set_pose(ArgT0&& arg0, ArgT... args) {
 
 pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.pose)
}
inline std::string* reprojectToCloudPoints_grpc0Request::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.pose)
  return _s;
}
inline const std::string& reprojectToCloudPoints_grpc0Request::_internal_pose() const {
  return pose_.Get();
}
inline void reprojectToCloudPoints_grpc0Request::_internal_set_pose(const std::string& value) {
  
  pose_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Request::_internal_mutable_pose() {
  
  return pose_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Request::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.pose)
  return pose_.Release();
}
inline void reprojectToCloudPoints_grpc0Request::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pose_.IsDefault()) {
    pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.pose)
}

// bytes intrinsicParams = 5;
inline void reprojectToCloudPoints_grpc0Request::clear_intrinsicparams() {
  intrinsicparams_.ClearToEmpty();
}
inline const std::string& reprojectToCloudPoints_grpc0Request::intrinsicparams() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.intrinsicParams)
  return _internal_intrinsicparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToCloudPoints_grpc0Request::set_intrinsicparams(ArgT0&& arg0, ArgT... args) {
 
 intrinsicparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.intrinsicParams)
}
inline std::string* reprojectToCloudPoints_grpc0Request::mutable_intrinsicparams() {
  std::string* _s = _internal_mutable_intrinsicparams();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.intrinsicParams)
  return _s;
}
inline const std::string& reprojectToCloudPoints_grpc0Request::_internal_intrinsicparams() const {
  return intrinsicparams_.Get();
}
inline void reprojectToCloudPoints_grpc0Request::_internal_set_intrinsicparams(const std::string& value) {
  
  intrinsicparams_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Request::_internal_mutable_intrinsicparams() {
  
  return intrinsicparams_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Request::release_intrinsicparams() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.intrinsicParams)
  return intrinsicparams_.Release();
}
inline void reprojectToCloudPoints_grpc0Request::set_allocated_intrinsicparams(std::string* intrinsicparams) {
  if (intrinsicparams != nullptr) {
    
  } else {
    
  }
  intrinsicparams_.SetAllocated(intrinsicparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (intrinsicparams_.IsDefault()) {
    intrinsicparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.intrinsicParams)
}

// bytes cloudPoints = 6;
inline void reprojectToCloudPoints_grpc0Request::clear_cloudpoints() {
  cloudpoints_.ClearToEmpty();
}
inline const std::string& reprojectToCloudPoints_grpc0Request::cloudpoints() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.cloudPoints)
  return _internal_cloudpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToCloudPoints_grpc0Request::set_cloudpoints(ArgT0&& arg0, ArgT... args) {
 
 cloudpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.cloudPoints)
}
inline std::string* reprojectToCloudPoints_grpc0Request::mutable_cloudpoints() {
  std::string* _s = _internal_mutable_cloudpoints();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.cloudPoints)
  return _s;
}
inline const std::string& reprojectToCloudPoints_grpc0Request::_internal_cloudpoints() const {
  return cloudpoints_.Get();
}
inline void reprojectToCloudPoints_grpc0Request::_internal_set_cloudpoints(const std::string& value) {
  
  cloudpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Request::_internal_mutable_cloudpoints() {
  
  return cloudpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Request::release_cloudpoints() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.cloudPoints)
  return cloudpoints_.Release();
}
inline void reprojectToCloudPoints_grpc0Request::set_allocated_cloudpoints(std::string* cloudpoints) {
  if (cloudpoints != nullptr) {
    
  } else {
    
  }
  cloudpoints_.SetAllocated(cloudpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cloudpoints_.IsDefault()) {
    cloudpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Request.cloudPoints)
}

// -------------------------------------------------------------------

// reprojectToCloudPoints_grpc0Response

// bytes cloudPoints = 1;
inline void reprojectToCloudPoints_grpc0Response::clear_cloudpoints() {
  cloudpoints_.ClearToEmpty();
}
inline const std::string& reprojectToCloudPoints_grpc0Response::cloudpoints() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Response.cloudPoints)
  return _internal_cloudpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToCloudPoints_grpc0Response::set_cloudpoints(ArgT0&& arg0, ArgT... args) {
 
 cloudpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Response.cloudPoints)
}
inline std::string* reprojectToCloudPoints_grpc0Response::mutable_cloudpoints() {
  std::string* _s = _internal_mutable_cloudpoints();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Response.cloudPoints)
  return _s;
}
inline const std::string& reprojectToCloudPoints_grpc0Response::_internal_cloudpoints() const {
  return cloudpoints_.Get();
}
inline void reprojectToCloudPoints_grpc0Response::_internal_set_cloudpoints(const std::string& value) {
  
  cloudpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Response::_internal_mutable_cloudpoints() {
  
  return cloudpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc0Response::release_cloudpoints() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Response.cloudPoints)
  return cloudpoints_.Release();
}
inline void reprojectToCloudPoints_grpc0Response::set_allocated_cloudpoints(std::string* cloudpoints) {
  if (cloudpoints != nullptr) {
    
  } else {
    
  }
  cloudpoints_.SetAllocated(cloudpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cloudpoints_.IsDefault()) {
    cloudpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Response.cloudPoints)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void reprojectToCloudPoints_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t reprojectToCloudPoints_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t reprojectToCloudPoints_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void reprojectToCloudPoints_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void reprojectToCloudPoints_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// reprojectToCloudPoints_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void reprojectToCloudPoints_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t reprojectToCloudPoints_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t reprojectToCloudPoints_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void reprojectToCloudPoints_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void reprojectToCloudPoints_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.grpcServerCompressionFormat)
}

// bytes frame = 2;
inline void reprojectToCloudPoints_grpc1Request::clear_frame() {
  frame_.ClearToEmpty();
}
inline const std::string& reprojectToCloudPoints_grpc1Request::frame() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.frame)
  return _internal_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToCloudPoints_grpc1Request::set_frame(ArgT0&& arg0, ArgT... args) {
 
 frame_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.frame)
}
inline std::string* reprojectToCloudPoints_grpc1Request::mutable_frame() {
  std::string* _s = _internal_mutable_frame();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.frame)
  return _s;
}
inline const std::string& reprojectToCloudPoints_grpc1Request::_internal_frame() const {
  return frame_.Get();
}
inline void reprojectToCloudPoints_grpc1Request::_internal_set_frame(const std::string& value) {
  
  frame_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc1Request::_internal_mutable_frame() {
  
  return frame_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc1Request::release_frame() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.frame)
  return frame_.Release();
}
inline void reprojectToCloudPoints_grpc1Request::set_allocated_frame(std::string* frame) {
  if (frame != nullptr) {
    
  } else {
    
  }
  frame_.SetAllocated(frame, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_.IsDefault()) {
    frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.frame)
}

// bytes intrinsicParams = 3;
inline void reprojectToCloudPoints_grpc1Request::clear_intrinsicparams() {
  intrinsicparams_.ClearToEmpty();
}
inline const std::string& reprojectToCloudPoints_grpc1Request::intrinsicparams() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.intrinsicParams)
  return _internal_intrinsicparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToCloudPoints_grpc1Request::set_intrinsicparams(ArgT0&& arg0, ArgT... args) {
 
 intrinsicparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.intrinsicParams)
}
inline std::string* reprojectToCloudPoints_grpc1Request::mutable_intrinsicparams() {
  std::string* _s = _internal_mutable_intrinsicparams();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.intrinsicParams)
  return _s;
}
inline const std::string& reprojectToCloudPoints_grpc1Request::_internal_intrinsicparams() const {
  return intrinsicparams_.Get();
}
inline void reprojectToCloudPoints_grpc1Request::_internal_set_intrinsicparams(const std::string& value) {
  
  intrinsicparams_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc1Request::_internal_mutable_intrinsicparams() {
  
  return intrinsicparams_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc1Request::release_intrinsicparams() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.intrinsicParams)
  return intrinsicparams_.Release();
}
inline void reprojectToCloudPoints_grpc1Request::set_allocated_intrinsicparams(std::string* intrinsicparams) {
  if (intrinsicparams != nullptr) {
    
  } else {
    
  }
  intrinsicparams_.SetAllocated(intrinsicparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (intrinsicparams_.IsDefault()) {
    intrinsicparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.intrinsicParams)
}

// bytes cloudPoints = 4;
inline void reprojectToCloudPoints_grpc1Request::clear_cloudpoints() {
  cloudpoints_.ClearToEmpty();
}
inline const std::string& reprojectToCloudPoints_grpc1Request::cloudpoints() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.cloudPoints)
  return _internal_cloudpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToCloudPoints_grpc1Request::set_cloudpoints(ArgT0&& arg0, ArgT... args) {
 
 cloudpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.cloudPoints)
}
inline std::string* reprojectToCloudPoints_grpc1Request::mutable_cloudpoints() {
  std::string* _s = _internal_mutable_cloudpoints();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.cloudPoints)
  return _s;
}
inline const std::string& reprojectToCloudPoints_grpc1Request::_internal_cloudpoints() const {
  return cloudpoints_.Get();
}
inline void reprojectToCloudPoints_grpc1Request::_internal_set_cloudpoints(const std::string& value) {
  
  cloudpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc1Request::_internal_mutable_cloudpoints() {
  
  return cloudpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc1Request::release_cloudpoints() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.cloudPoints)
  return cloudpoints_.Release();
}
inline void reprojectToCloudPoints_grpc1Request::set_allocated_cloudpoints(std::string* cloudpoints) {
  if (cloudpoints != nullptr) {
    
  } else {
    
  }
  cloudpoints_.SetAllocated(cloudpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cloudpoints_.IsDefault()) {
    cloudpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Request.cloudPoints)
}

// -------------------------------------------------------------------

// reprojectToCloudPoints_grpc1Response

// bytes cloudPoints = 1;
inline void reprojectToCloudPoints_grpc1Response::clear_cloudpoints() {
  cloudpoints_.ClearToEmpty();
}
inline const std::string& reprojectToCloudPoints_grpc1Response::cloudpoints() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Response.cloudPoints)
  return _internal_cloudpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void reprojectToCloudPoints_grpc1Response::set_cloudpoints(ArgT0&& arg0, ArgT... args) {
 
 cloudpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Response.cloudPoints)
}
inline std::string* reprojectToCloudPoints_grpc1Response::mutable_cloudpoints() {
  std::string* _s = _internal_mutable_cloudpoints();
  // @@protoc_insertion_point(field_mutable:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Response.cloudPoints)
  return _s;
}
inline const std::string& reprojectToCloudPoints_grpc1Response::_internal_cloudpoints() const {
  return cloudpoints_.Get();
}
inline void reprojectToCloudPoints_grpc1Response::_internal_set_cloudpoints(const std::string& value) {
  
  cloudpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc1Response::_internal_mutable_cloudpoints() {
  
  return cloudpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* reprojectToCloudPoints_grpc1Response::release_cloudpoints() {
  // @@protoc_insertion_point(field_release:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Response.cloudPoints)
  return cloudpoints_.Release();
}
inline void reprojectToCloudPoints_grpc1Response::set_allocated_cloudpoints(std::string* cloudpoints) {
  if (cloudpoints != nullptr) {
    
  } else {
    
  }
  cloudpoints_.SetAllocated(cloudpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cloudpoints_.IsDefault()) {
    cloudpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Response.cloudPoints)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void reprojectToCloudPoints_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t reprojectToCloudPoints_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t reprojectToCloudPoints_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void reprojectToCloudPoints_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void reprojectToCloudPoints_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIReprojectionStereo.reprojectToCloudPoints_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIReprojectionStereo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIReprojectionStereoService_2eproto
