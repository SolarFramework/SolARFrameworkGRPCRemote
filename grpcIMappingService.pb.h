// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMappingService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIMappingService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIMappingService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIMappingService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIMappingService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMappingService_2eproto;
namespace grpcIMapping {
class idleRequest;
struct idleRequestDefaultTypeInternal;
extern idleRequestDefaultTypeInternal _idleRequest_default_instance_;
class idleResponse;
struct idleResponseDefaultTypeInternal;
extern idleResponseDefaultTypeInternal _idleResponse_default_instance_;
class processRequest;
struct processRequestDefaultTypeInternal;
extern processRequestDefaultTypeInternal _processRequest_default_instance_;
class processResponse;
struct processResponseDefaultTypeInternal;
extern processResponseDefaultTypeInternal _processResponse_default_instance_;
}  // namespace grpcIMapping
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIMapping::idleRequest* Arena::CreateMaybeMessage<::grpcIMapping::idleRequest>(Arena*);
template<> ::grpcIMapping::idleResponse* Arena::CreateMaybeMessage<::grpcIMapping::idleResponse>(Arena*);
template<> ::grpcIMapping::processRequest* Arena::CreateMaybeMessage<::grpcIMapping::processRequest>(Arena*);
template<> ::grpcIMapping::processResponse* Arena::CreateMaybeMessage<::grpcIMapping::processResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIMapping {

// ===================================================================

class idleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapping.idleRequest) */ {
 public:
  inline idleRequest() : idleRequest(nullptr) {}
  ~idleRequest() override;
  explicit PROTOBUF_CONSTEXPR idleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  idleRequest(const idleRequest& from);
  idleRequest(idleRequest&& from) noexcept
    : idleRequest() {
    *this = ::std::move(from);
  }

  inline idleRequest& operator=(const idleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline idleRequest& operator=(idleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const idleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const idleRequest* internal_default_instance() {
    return reinterpret_cast<const idleRequest*>(
               &_idleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(idleRequest& a, idleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(idleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(idleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  idleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<idleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const idleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const idleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(idleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapping.idleRequest";
  }
  protected:
  explicit idleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapping.idleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingService_2eproto;
};
// -------------------------------------------------------------------

class idleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapping.idleResponse) */ {
 public:
  inline idleResponse() : idleResponse(nullptr) {}
  ~idleResponse() override;
  explicit PROTOBUF_CONSTEXPR idleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  idleResponse(const idleResponse& from);
  idleResponse(idleResponse&& from) noexcept
    : idleResponse() {
    *this = ::std::move(from);
  }

  inline idleResponse& operator=(const idleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline idleResponse& operator=(idleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const idleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const idleResponse* internal_default_instance() {
    return reinterpret_cast<const idleResponse*>(
               &_idleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(idleResponse& a, idleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(idleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(idleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  idleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<idleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const idleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const idleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(idleResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapping.idleResponse";
  }
  protected:
  explicit idleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapping.idleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingService_2eproto;
};
// -------------------------------------------------------------------

class processRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapping.processRequest) */ {
 public:
  inline processRequest() : processRequest(nullptr) {}
  ~processRequest() override;
  explicit PROTOBUF_CONSTEXPR processRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  processRequest(const processRequest& from);
  processRequest(processRequest&& from) noexcept
    : processRequest() {
    *this = ::std::move(from);
  }

  inline processRequest& operator=(const processRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline processRequest& operator=(processRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const processRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const processRequest* internal_default_instance() {
    return reinterpret_cast<const processRequest*>(
               &_processRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(processRequest& a, processRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(processRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(processRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  processRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<processRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const processRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const processRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(processRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapping.processRequest";
  }
  protected:
  explicit processRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kKeyframeFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes frame = 2;
  void clear_frame();
  const std::string& frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame();
  PROTOBUF_NODISCARD std::string* release_frame();
  void set_allocated_frame(std::string* frame);
  private:
  const std::string& _internal_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame(const std::string& value);
  std::string* _internal_mutable_frame();
  public:

  // bytes keyframe = 3;
  void clear_keyframe();
  const std::string& keyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframe();
  PROTOBUF_NODISCARD std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapping.processRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingService_2eproto;
};
// -------------------------------------------------------------------

class processResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapping.processResponse) */ {
 public:
  inline processResponse() : processResponse(nullptr) {}
  ~processResponse() override;
  explicit PROTOBUF_CONSTEXPR processResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  processResponse(const processResponse& from);
  processResponse(processResponse&& from) noexcept
    : processResponse() {
    *this = ::std::move(from);
  }

  inline processResponse& operator=(const processResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline processResponse& operator=(processResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const processResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const processResponse* internal_default_instance() {
    return reinterpret_cast<const processResponse*>(
               &_processResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(processResponse& a, processResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(processResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(processResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  processResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<processResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const processResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const processResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(processResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapping.processResponse";
  }
  protected:
  explicit processResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes keyframe = 1;
  void clear_keyframe();
  const std::string& keyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframe();
  PROTOBUF_NODISCARD std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapping.processResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMappingService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// idleRequest

// int32 grpcServerCompressionFormat = 1;
inline void idleRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t idleRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t idleRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapping.idleRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void idleRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void idleRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapping.idleRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// idleResponse

// bool xpcfGrpcReturnValue = 1;
inline void idleResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool idleResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool idleResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapping.idleResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void idleResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void idleResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapping.idleResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// processRequest

// int32 grpcServerCompressionFormat = 1;
inline void processRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t processRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t processRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapping.processRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void processRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void processRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapping.processRequest.grpcServerCompressionFormat)
}

// bytes frame = 2;
inline void processRequest::clear_frame() {
  frame_.ClearToEmpty();
}
inline const std::string& processRequest::frame() const {
  // @@protoc_insertion_point(field_get:grpcIMapping.processRequest.frame)
  return _internal_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void processRequest::set_frame(ArgT0&& arg0, ArgT... args) {
 
 frame_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapping.processRequest.frame)
}
inline std::string* processRequest::mutable_frame() {
  std::string* _s = _internal_mutable_frame();
  // @@protoc_insertion_point(field_mutable:grpcIMapping.processRequest.frame)
  return _s;
}
inline const std::string& processRequest::_internal_frame() const {
  return frame_.Get();
}
inline void processRequest::_internal_set_frame(const std::string& value) {
  
  frame_.Set(value, GetArenaForAllocation());
}
inline std::string* processRequest::_internal_mutable_frame() {
  
  return frame_.Mutable(GetArenaForAllocation());
}
inline std::string* processRequest::release_frame() {
  // @@protoc_insertion_point(field_release:grpcIMapping.processRequest.frame)
  return frame_.Release();
}
inline void processRequest::set_allocated_frame(std::string* frame) {
  if (frame != nullptr) {
    
  } else {
    
  }
  frame_.SetAllocated(frame, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_.IsDefault()) {
    frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapping.processRequest.frame)
}

// bytes keyframe = 3;
inline void processRequest::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& processRequest::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIMapping.processRequest.keyframe)
  return _internal_keyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void processRequest::set_keyframe(ArgT0&& arg0, ArgT... args) {
 
 keyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapping.processRequest.keyframe)
}
inline std::string* processRequest::mutable_keyframe() {
  std::string* _s = _internal_mutable_keyframe();
  // @@protoc_insertion_point(field_mutable:grpcIMapping.processRequest.keyframe)
  return _s;
}
inline const std::string& processRequest::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void processRequest::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* processRequest::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* processRequest::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIMapping.processRequest.keyframe)
  return keyframe_.Release();
}
inline void processRequest::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(keyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframe_.IsDefault()) {
    keyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapping.processRequest.keyframe)
}

// -------------------------------------------------------------------

// processResponse

// bytes keyframe = 1;
inline void processResponse::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& processResponse::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIMapping.processResponse.keyframe)
  return _internal_keyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void processResponse::set_keyframe(ArgT0&& arg0, ArgT... args) {
 
 keyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapping.processResponse.keyframe)
}
inline std::string* processResponse::mutable_keyframe() {
  std::string* _s = _internal_mutable_keyframe();
  // @@protoc_insertion_point(field_mutable:grpcIMapping.processResponse.keyframe)
  return _s;
}
inline const std::string& processResponse::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void processResponse::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* processResponse::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* processResponse::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIMapping.processResponse.keyframe)
  return keyframe_.Release();
}
inline void processResponse::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(keyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframe_.IsDefault()) {
    keyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapping.processResponse.keyframe)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void processResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t processResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t processResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapping.processResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void processResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void processResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapping.processResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIMapping

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIMappingService_2eproto
