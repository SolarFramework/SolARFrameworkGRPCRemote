// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcITriangulatorService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcITriangulatorService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcITriangulatorService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcITriangulatorService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcITriangulatorService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcITriangulatorService_2eproto;
namespace grpcITriangulator {
class triangulate_grpc0Request;
struct triangulate_grpc0RequestDefaultTypeInternal;
extern triangulate_grpc0RequestDefaultTypeInternal _triangulate_grpc0Request_default_instance_;
class triangulate_grpc0Response;
struct triangulate_grpc0ResponseDefaultTypeInternal;
extern triangulate_grpc0ResponseDefaultTypeInternal _triangulate_grpc0Response_default_instance_;
class triangulate_grpc1Request;
struct triangulate_grpc1RequestDefaultTypeInternal;
extern triangulate_grpc1RequestDefaultTypeInternal _triangulate_grpc1Request_default_instance_;
class triangulate_grpc1Response;
struct triangulate_grpc1ResponseDefaultTypeInternal;
extern triangulate_grpc1ResponseDefaultTypeInternal _triangulate_grpc1Response_default_instance_;
class triangulate_grpc2Request;
struct triangulate_grpc2RequestDefaultTypeInternal;
extern triangulate_grpc2RequestDefaultTypeInternal _triangulate_grpc2Request_default_instance_;
class triangulate_grpc2Response;
struct triangulate_grpc2ResponseDefaultTypeInternal;
extern triangulate_grpc2ResponseDefaultTypeInternal _triangulate_grpc2Response_default_instance_;
class triangulate_grpc3Request;
struct triangulate_grpc3RequestDefaultTypeInternal;
extern triangulate_grpc3RequestDefaultTypeInternal _triangulate_grpc3Request_default_instance_;
class triangulate_grpc3Response;
struct triangulate_grpc3ResponseDefaultTypeInternal;
extern triangulate_grpc3ResponseDefaultTypeInternal _triangulate_grpc3Response_default_instance_;
}  // namespace grpcITriangulator
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcITriangulator::triangulate_grpc0Request* Arena::CreateMaybeMessage<::grpcITriangulator::triangulate_grpc0Request>(Arena*);
template<> ::grpcITriangulator::triangulate_grpc0Response* Arena::CreateMaybeMessage<::grpcITriangulator::triangulate_grpc0Response>(Arena*);
template<> ::grpcITriangulator::triangulate_grpc1Request* Arena::CreateMaybeMessage<::grpcITriangulator::triangulate_grpc1Request>(Arena*);
template<> ::grpcITriangulator::triangulate_grpc1Response* Arena::CreateMaybeMessage<::grpcITriangulator::triangulate_grpc1Response>(Arena*);
template<> ::grpcITriangulator::triangulate_grpc2Request* Arena::CreateMaybeMessage<::grpcITriangulator::triangulate_grpc2Request>(Arena*);
template<> ::grpcITriangulator::triangulate_grpc2Response* Arena::CreateMaybeMessage<::grpcITriangulator::triangulate_grpc2Response>(Arena*);
template<> ::grpcITriangulator::triangulate_grpc3Request* Arena::CreateMaybeMessage<::grpcITriangulator::triangulate_grpc3Request>(Arena*);
template<> ::grpcITriangulator::triangulate_grpc3Response* Arena::CreateMaybeMessage<::grpcITriangulator::triangulate_grpc3Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcITriangulator {

// ===================================================================

class triangulate_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITriangulator.triangulate_grpc0Request) */ {
 public:
  inline triangulate_grpc0Request() : triangulate_grpc0Request(nullptr) {}
  ~triangulate_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR triangulate_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  triangulate_grpc0Request(const triangulate_grpc0Request& from);
  triangulate_grpc0Request(triangulate_grpc0Request&& from) noexcept
    : triangulate_grpc0Request() {
    *this = ::std::move(from);
  }

  inline triangulate_grpc0Request& operator=(const triangulate_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline triangulate_grpc0Request& operator=(triangulate_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const triangulate_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const triangulate_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const triangulate_grpc0Request*>(
               &_triangulate_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(triangulate_grpc0Request& a, triangulate_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(triangulate_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(triangulate_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  triangulate_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<triangulate_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const triangulate_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const triangulate_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(triangulate_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITriangulator.triangulate_grpc0Request";
  }
  protected:
  explicit triangulate_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsView1FieldNumber = 2,
    kPointView2FieldNumber = 3,
    kMatchesFieldNumber = 4,
    kWorkingViewsFieldNumber = 5,
    kPoseView1FieldNumber = 6,
    kPoseView2FieldNumber = 7,
    kCamParams1FieldNumber = 8,
    kCamParams2FieldNumber = 9,
    kPcloudFieldNumber = 10,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes pointsView1 = 2;
  void clear_pointsview1();
  const std::string& pointsview1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointsview1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointsview1();
  PROTOBUF_NODISCARD std::string* release_pointsview1();
  void set_allocated_pointsview1(std::string* pointsview1);
  private:
  const std::string& _internal_pointsview1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointsview1(const std::string& value);
  std::string* _internal_mutable_pointsview1();
  public:

  // bytes pointView2 = 3;
  void clear_pointview2();
  const std::string& pointview2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointview2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointview2();
  PROTOBUF_NODISCARD std::string* release_pointview2();
  void set_allocated_pointview2(std::string* pointview2);
  private:
  const std::string& _internal_pointview2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointview2(const std::string& value);
  std::string* _internal_mutable_pointview2();
  public:

  // bytes matches = 4;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes working_views = 5;
  void clear_working_views();
  const std::string& working_views() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_working_views(ArgT0&& arg0, ArgT... args);
  std::string* mutable_working_views();
  PROTOBUF_NODISCARD std::string* release_working_views();
  void set_allocated_working_views(std::string* working_views);
  private:
  const std::string& _internal_working_views() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_working_views(const std::string& value);
  std::string* _internal_mutable_working_views();
  public:

  // bytes poseView1 = 6;
  void clear_poseview1();
  const std::string& poseview1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poseview1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poseview1();
  PROTOBUF_NODISCARD std::string* release_poseview1();
  void set_allocated_poseview1(std::string* poseview1);
  private:
  const std::string& _internal_poseview1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poseview1(const std::string& value);
  std::string* _internal_mutable_poseview1();
  public:

  // bytes poseView2 = 7;
  void clear_poseview2();
  const std::string& poseview2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poseview2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poseview2();
  PROTOBUF_NODISCARD std::string* release_poseview2();
  void set_allocated_poseview2(std::string* poseview2);
  private:
  const std::string& _internal_poseview2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poseview2(const std::string& value);
  std::string* _internal_mutable_poseview2();
  public:

  // bytes camParams1 = 8;
  void clear_camparams1();
  const std::string& camparams1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams1();
  PROTOBUF_NODISCARD std::string* release_camparams1();
  void set_allocated_camparams1(std::string* camparams1);
  private:
  const std::string& _internal_camparams1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams1(const std::string& value);
  std::string* _internal_mutable_camparams1();
  public:

  // bytes camParams2 = 9;
  void clear_camparams2();
  const std::string& camparams2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams2();
  PROTOBUF_NODISCARD std::string* release_camparams2();
  void set_allocated_camparams2(std::string* camparams2);
  private:
  const std::string& _internal_camparams2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams2(const std::string& value);
  std::string* _internal_mutable_camparams2();
  public:

  // bytes pcloud = 10;
  void clear_pcloud();
  const std::string& pcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcloud();
  PROTOBUF_NODISCARD std::string* release_pcloud();
  void set_allocated_pcloud(std::string* pcloud);
  private:
  const std::string& _internal_pcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcloud(const std::string& value);
  std::string* _internal_mutable_pcloud();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITriangulator.triangulate_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointsview1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointview2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_views_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poseview1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poseview2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcloud_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITriangulatorService_2eproto;
};
// -------------------------------------------------------------------

class triangulate_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITriangulator.triangulate_grpc0Response) */ {
 public:
  inline triangulate_grpc0Response() : triangulate_grpc0Response(nullptr) {}
  ~triangulate_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR triangulate_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  triangulate_grpc0Response(const triangulate_grpc0Response& from);
  triangulate_grpc0Response(triangulate_grpc0Response&& from) noexcept
    : triangulate_grpc0Response() {
    *this = ::std::move(from);
  }

  inline triangulate_grpc0Response& operator=(const triangulate_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline triangulate_grpc0Response& operator=(triangulate_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const triangulate_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const triangulate_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const triangulate_grpc0Response*>(
               &_triangulate_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(triangulate_grpc0Response& a, triangulate_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(triangulate_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(triangulate_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  triangulate_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<triangulate_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const triangulate_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const triangulate_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(triangulate_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITriangulator.triangulate_grpc0Response";
  }
  protected:
  explicit triangulate_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pcloud = 1;
  void clear_pcloud();
  const std::string& pcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcloud();
  PROTOBUF_NODISCARD std::string* release_pcloud();
  void set_allocated_pcloud(std::string* pcloud);
  private:
  const std::string& _internal_pcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcloud(const std::string& value);
  std::string* _internal_mutable_pcloud();
  public:

  // double xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  double xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(double value);
  private:
  double _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITriangulator.triangulate_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcloud_;
  double xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITriangulatorService_2eproto;
};
// -------------------------------------------------------------------

class triangulate_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITriangulator.triangulate_grpc1Request) */ {
 public:
  inline triangulate_grpc1Request() : triangulate_grpc1Request(nullptr) {}
  ~triangulate_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR triangulate_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  triangulate_grpc1Request(const triangulate_grpc1Request& from);
  triangulate_grpc1Request(triangulate_grpc1Request&& from) noexcept
    : triangulate_grpc1Request() {
    *this = ::std::move(from);
  }

  inline triangulate_grpc1Request& operator=(const triangulate_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline triangulate_grpc1Request& operator=(triangulate_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const triangulate_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const triangulate_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const triangulate_grpc1Request*>(
               &_triangulate_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(triangulate_grpc1Request& a, triangulate_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(triangulate_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(triangulate_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  triangulate_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<triangulate_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const triangulate_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const triangulate_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(triangulate_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITriangulator.triangulate_grpc1Request";
  }
  protected:
  explicit triangulate_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointsView1FieldNumber = 2,
    kKeypointsView2FieldNumber = 3,
    kMatchesFieldNumber = 4,
    kWorkingViewsFieldNumber = 5,
    kPoseView1FieldNumber = 6,
    kPoseView2FieldNumber = 7,
    kCamParams1FieldNumber = 8,
    kCamParams2FieldNumber = 9,
    kPcloudFieldNumber = 10,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes keypointsView1 = 2;
  void clear_keypointsview1();
  const std::string& keypointsview1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keypointsview1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keypointsview1();
  PROTOBUF_NODISCARD std::string* release_keypointsview1();
  void set_allocated_keypointsview1(std::string* keypointsview1);
  private:
  const std::string& _internal_keypointsview1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keypointsview1(const std::string& value);
  std::string* _internal_mutable_keypointsview1();
  public:

  // bytes keypointsView2 = 3;
  void clear_keypointsview2();
  const std::string& keypointsview2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keypointsview2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keypointsview2();
  PROTOBUF_NODISCARD std::string* release_keypointsview2();
  void set_allocated_keypointsview2(std::string* keypointsview2);
  private:
  const std::string& _internal_keypointsview2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keypointsview2(const std::string& value);
  std::string* _internal_mutable_keypointsview2();
  public:

  // bytes matches = 4;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes working_views = 5;
  void clear_working_views();
  const std::string& working_views() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_working_views(ArgT0&& arg0, ArgT... args);
  std::string* mutable_working_views();
  PROTOBUF_NODISCARD std::string* release_working_views();
  void set_allocated_working_views(std::string* working_views);
  private:
  const std::string& _internal_working_views() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_working_views(const std::string& value);
  std::string* _internal_mutable_working_views();
  public:

  // bytes poseView1 = 6;
  void clear_poseview1();
  const std::string& poseview1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poseview1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poseview1();
  PROTOBUF_NODISCARD std::string* release_poseview1();
  void set_allocated_poseview1(std::string* poseview1);
  private:
  const std::string& _internal_poseview1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poseview1(const std::string& value);
  std::string* _internal_mutable_poseview1();
  public:

  // bytes poseView2 = 7;
  void clear_poseview2();
  const std::string& poseview2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poseview2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poseview2();
  PROTOBUF_NODISCARD std::string* release_poseview2();
  void set_allocated_poseview2(std::string* poseview2);
  private:
  const std::string& _internal_poseview2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poseview2(const std::string& value);
  std::string* _internal_mutable_poseview2();
  public:

  // bytes camParams1 = 8;
  void clear_camparams1();
  const std::string& camparams1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams1();
  PROTOBUF_NODISCARD std::string* release_camparams1();
  void set_allocated_camparams1(std::string* camparams1);
  private:
  const std::string& _internal_camparams1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams1(const std::string& value);
  std::string* _internal_mutable_camparams1();
  public:

  // bytes camParams2 = 9;
  void clear_camparams2();
  const std::string& camparams2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams2();
  PROTOBUF_NODISCARD std::string* release_camparams2();
  void set_allocated_camparams2(std::string* camparams2);
  private:
  const std::string& _internal_camparams2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams2(const std::string& value);
  std::string* _internal_mutable_camparams2();
  public:

  // bytes pcloud = 10;
  void clear_pcloud();
  const std::string& pcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcloud();
  PROTOBUF_NODISCARD std::string* release_pcloud();
  void set_allocated_pcloud(std::string* pcloud);
  private:
  const std::string& _internal_pcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcloud(const std::string& value);
  std::string* _internal_mutable_pcloud();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITriangulator.triangulate_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypointsview1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypointsview2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_views_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poseview1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poseview2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcloud_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITriangulatorService_2eproto;
};
// -------------------------------------------------------------------

class triangulate_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITriangulator.triangulate_grpc1Response) */ {
 public:
  inline triangulate_grpc1Response() : triangulate_grpc1Response(nullptr) {}
  ~triangulate_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR triangulate_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  triangulate_grpc1Response(const triangulate_grpc1Response& from);
  triangulate_grpc1Response(triangulate_grpc1Response&& from) noexcept
    : triangulate_grpc1Response() {
    *this = ::std::move(from);
  }

  inline triangulate_grpc1Response& operator=(const triangulate_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline triangulate_grpc1Response& operator=(triangulate_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const triangulate_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const triangulate_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const triangulate_grpc1Response*>(
               &_triangulate_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(triangulate_grpc1Response& a, triangulate_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(triangulate_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(triangulate_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  triangulate_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<triangulate_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const triangulate_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const triangulate_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(triangulate_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITriangulator.triangulate_grpc1Response";
  }
  protected:
  explicit triangulate_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pcloud = 1;
  void clear_pcloud();
  const std::string& pcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcloud();
  PROTOBUF_NODISCARD std::string* release_pcloud();
  void set_allocated_pcloud(std::string* pcloud);
  private:
  const std::string& _internal_pcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcloud(const std::string& value);
  std::string* _internal_mutable_pcloud();
  public:

  // double xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  double xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(double value);
  private:
  double _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITriangulator.triangulate_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcloud_;
  double xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITriangulatorService_2eproto;
};
// -------------------------------------------------------------------

class triangulate_grpc2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITriangulator.triangulate_grpc2Request) */ {
 public:
  inline triangulate_grpc2Request() : triangulate_grpc2Request(nullptr) {}
  ~triangulate_grpc2Request() override;
  explicit PROTOBUF_CONSTEXPR triangulate_grpc2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  triangulate_grpc2Request(const triangulate_grpc2Request& from);
  triangulate_grpc2Request(triangulate_grpc2Request&& from) noexcept
    : triangulate_grpc2Request() {
    *this = ::std::move(from);
  }

  inline triangulate_grpc2Request& operator=(const triangulate_grpc2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline triangulate_grpc2Request& operator=(triangulate_grpc2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const triangulate_grpc2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const triangulate_grpc2Request* internal_default_instance() {
    return reinterpret_cast<const triangulate_grpc2Request*>(
               &_triangulate_grpc2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(triangulate_grpc2Request& a, triangulate_grpc2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(triangulate_grpc2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(triangulate_grpc2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  triangulate_grpc2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<triangulate_grpc2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const triangulate_grpc2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const triangulate_grpc2Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(triangulate_grpc2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITriangulator.triangulate_grpc2Request";
  }
  protected:
  explicit triangulate_grpc2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointsView1FieldNumber = 2,
    kKeypointsView2FieldNumber = 3,
    kDescriptor1FieldNumber = 4,
    kDescriptor2FieldNumber = 5,
    kMatchesFieldNumber = 6,
    kWorkingViewsFieldNumber = 7,
    kPoseView1FieldNumber = 8,
    kPoseView2FieldNumber = 9,
    kCamParams1FieldNumber = 10,
    kCamParams2FieldNumber = 11,
    kPcloudFieldNumber = 12,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes keypointsView1 = 2;
  void clear_keypointsview1();
  const std::string& keypointsview1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keypointsview1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keypointsview1();
  PROTOBUF_NODISCARD std::string* release_keypointsview1();
  void set_allocated_keypointsview1(std::string* keypointsview1);
  private:
  const std::string& _internal_keypointsview1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keypointsview1(const std::string& value);
  std::string* _internal_mutable_keypointsview1();
  public:

  // bytes keypointsView2 = 3;
  void clear_keypointsview2();
  const std::string& keypointsview2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keypointsview2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keypointsview2();
  PROTOBUF_NODISCARD std::string* release_keypointsview2();
  void set_allocated_keypointsview2(std::string* keypointsview2);
  private:
  const std::string& _internal_keypointsview2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keypointsview2(const std::string& value);
  std::string* _internal_mutable_keypointsview2();
  public:

  // bytes descriptor1 = 4;
  void clear_descriptor1();
  const std::string& descriptor1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptor1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptor1();
  PROTOBUF_NODISCARD std::string* release_descriptor1();
  void set_allocated_descriptor1(std::string* descriptor1);
  private:
  const std::string& _internal_descriptor1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptor1(const std::string& value);
  std::string* _internal_mutable_descriptor1();
  public:

  // bytes descriptor2 = 5;
  void clear_descriptor2();
  const std::string& descriptor2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptor2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptor2();
  PROTOBUF_NODISCARD std::string* release_descriptor2();
  void set_allocated_descriptor2(std::string* descriptor2);
  private:
  const std::string& _internal_descriptor2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptor2(const std::string& value);
  std::string* _internal_mutable_descriptor2();
  public:

  // bytes matches = 6;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes working_views = 7;
  void clear_working_views();
  const std::string& working_views() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_working_views(ArgT0&& arg0, ArgT... args);
  std::string* mutable_working_views();
  PROTOBUF_NODISCARD std::string* release_working_views();
  void set_allocated_working_views(std::string* working_views);
  private:
  const std::string& _internal_working_views() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_working_views(const std::string& value);
  std::string* _internal_mutable_working_views();
  public:

  // bytes poseView1 = 8;
  void clear_poseview1();
  const std::string& poseview1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poseview1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poseview1();
  PROTOBUF_NODISCARD std::string* release_poseview1();
  void set_allocated_poseview1(std::string* poseview1);
  private:
  const std::string& _internal_poseview1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poseview1(const std::string& value);
  std::string* _internal_mutable_poseview1();
  public:

  // bytes poseView2 = 9;
  void clear_poseview2();
  const std::string& poseview2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poseview2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poseview2();
  PROTOBUF_NODISCARD std::string* release_poseview2();
  void set_allocated_poseview2(std::string* poseview2);
  private:
  const std::string& _internal_poseview2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poseview2(const std::string& value);
  std::string* _internal_mutable_poseview2();
  public:

  // bytes camParams1 = 10;
  void clear_camparams1();
  const std::string& camparams1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams1();
  PROTOBUF_NODISCARD std::string* release_camparams1();
  void set_allocated_camparams1(std::string* camparams1);
  private:
  const std::string& _internal_camparams1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams1(const std::string& value);
  std::string* _internal_mutable_camparams1();
  public:

  // bytes camParams2 = 11;
  void clear_camparams2();
  const std::string& camparams2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams2();
  PROTOBUF_NODISCARD std::string* release_camparams2();
  void set_allocated_camparams2(std::string* camparams2);
  private:
  const std::string& _internal_camparams2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams2(const std::string& value);
  std::string* _internal_mutable_camparams2();
  public:

  // bytes pcloud = 12;
  void clear_pcloud();
  const std::string& pcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcloud();
  PROTOBUF_NODISCARD std::string* release_pcloud();
  void set_allocated_pcloud(std::string* pcloud);
  private:
  const std::string& _internal_pcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcloud(const std::string& value);
  std::string* _internal_mutable_pcloud();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITriangulator.triangulate_grpc2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypointsview1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypointsview2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptor1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptor2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_views_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poseview1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poseview2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcloud_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITriangulatorService_2eproto;
};
// -------------------------------------------------------------------

class triangulate_grpc2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITriangulator.triangulate_grpc2Response) */ {
 public:
  inline triangulate_grpc2Response() : triangulate_grpc2Response(nullptr) {}
  ~triangulate_grpc2Response() override;
  explicit PROTOBUF_CONSTEXPR triangulate_grpc2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  triangulate_grpc2Response(const triangulate_grpc2Response& from);
  triangulate_grpc2Response(triangulate_grpc2Response&& from) noexcept
    : triangulate_grpc2Response() {
    *this = ::std::move(from);
  }

  inline triangulate_grpc2Response& operator=(const triangulate_grpc2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline triangulate_grpc2Response& operator=(triangulate_grpc2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const triangulate_grpc2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const triangulate_grpc2Response* internal_default_instance() {
    return reinterpret_cast<const triangulate_grpc2Response*>(
               &_triangulate_grpc2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(triangulate_grpc2Response& a, triangulate_grpc2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(triangulate_grpc2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(triangulate_grpc2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  triangulate_grpc2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<triangulate_grpc2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const triangulate_grpc2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const triangulate_grpc2Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(triangulate_grpc2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITriangulator.triangulate_grpc2Response";
  }
  protected:
  explicit triangulate_grpc2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pcloud = 1;
  void clear_pcloud();
  const std::string& pcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcloud();
  PROTOBUF_NODISCARD std::string* release_pcloud();
  void set_allocated_pcloud(std::string* pcloud);
  private:
  const std::string& _internal_pcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcloud(const std::string& value);
  std::string* _internal_mutable_pcloud();
  public:

  // double xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  double xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(double value);
  private:
  double _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITriangulator.triangulate_grpc2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcloud_;
  double xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITriangulatorService_2eproto;
};
// -------------------------------------------------------------------

class triangulate_grpc3Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITriangulator.triangulate_grpc3Request) */ {
 public:
  inline triangulate_grpc3Request() : triangulate_grpc3Request(nullptr) {}
  ~triangulate_grpc3Request() override;
  explicit PROTOBUF_CONSTEXPR triangulate_grpc3Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  triangulate_grpc3Request(const triangulate_grpc3Request& from);
  triangulate_grpc3Request(triangulate_grpc3Request&& from) noexcept
    : triangulate_grpc3Request() {
    *this = ::std::move(from);
  }

  inline triangulate_grpc3Request& operator=(const triangulate_grpc3Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline triangulate_grpc3Request& operator=(triangulate_grpc3Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const triangulate_grpc3Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const triangulate_grpc3Request* internal_default_instance() {
    return reinterpret_cast<const triangulate_grpc3Request*>(
               &_triangulate_grpc3Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(triangulate_grpc3Request& a, triangulate_grpc3Request& b) {
    a.Swap(&b);
  }
  inline void Swap(triangulate_grpc3Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(triangulate_grpc3Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  triangulate_grpc3Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<triangulate_grpc3Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const triangulate_grpc3Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const triangulate_grpc3Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(triangulate_grpc3Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITriangulator.triangulate_grpc3Request";
  }
  protected:
  explicit triangulate_grpc3Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrame1FieldNumber = 2,
    kFrame2FieldNumber = 3,
    kMatchesFieldNumber = 4,
    kWorkingViewsFieldNumber = 5,
    kCamParams1FieldNumber = 6,
    kCamParams2FieldNumber = 7,
    kPcloudFieldNumber = 9,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kOnlyDepthFieldNumber = 8,
  };
  // bytes frame1 = 2;
  void clear_frame1();
  const std::string& frame1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame1();
  PROTOBUF_NODISCARD std::string* release_frame1();
  void set_allocated_frame1(std::string* frame1);
  private:
  const std::string& _internal_frame1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame1(const std::string& value);
  std::string* _internal_mutable_frame1();
  public:

  // bytes frame2 = 3;
  void clear_frame2();
  const std::string& frame2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame2();
  PROTOBUF_NODISCARD std::string* release_frame2();
  void set_allocated_frame2(std::string* frame2);
  private:
  const std::string& _internal_frame2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame2(const std::string& value);
  std::string* _internal_mutable_frame2();
  public:

  // bytes matches = 4;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes working_views = 5;
  void clear_working_views();
  const std::string& working_views() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_working_views(ArgT0&& arg0, ArgT... args);
  std::string* mutable_working_views();
  PROTOBUF_NODISCARD std::string* release_working_views();
  void set_allocated_working_views(std::string* working_views);
  private:
  const std::string& _internal_working_views() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_working_views(const std::string& value);
  std::string* _internal_mutable_working_views();
  public:

  // bytes camParams1 = 6;
  void clear_camparams1();
  const std::string& camparams1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams1();
  PROTOBUF_NODISCARD std::string* release_camparams1();
  void set_allocated_camparams1(std::string* camparams1);
  private:
  const std::string& _internal_camparams1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams1(const std::string& value);
  std::string* _internal_mutable_camparams1();
  public:

  // bytes camParams2 = 7;
  void clear_camparams2();
  const std::string& camparams2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camparams2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camparams2();
  PROTOBUF_NODISCARD std::string* release_camparams2();
  void set_allocated_camparams2(std::string* camparams2);
  private:
  const std::string& _internal_camparams2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camparams2(const std::string& value);
  std::string* _internal_mutable_camparams2();
  public:

  // bytes pcloud = 9;
  void clear_pcloud();
  const std::string& pcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcloud();
  PROTOBUF_NODISCARD std::string* release_pcloud();
  void set_allocated_pcloud(std::string* pcloud);
  private:
  const std::string& _internal_pcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcloud(const std::string& value);
  std::string* _internal_mutable_pcloud();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // bool onlyDepth = 8;
  void clear_onlydepth();
  bool onlydepth() const;
  void set_onlydepth(bool value);
  private:
  bool _internal_onlydepth() const;
  void _internal_set_onlydepth(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITriangulator.triangulate_grpc3Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_views_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcloud_;
  int32_t grpcservercompressionformat_;
  bool onlydepth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITriangulatorService_2eproto;
};
// -------------------------------------------------------------------

class triangulate_grpc3Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITriangulator.triangulate_grpc3Response) */ {
 public:
  inline triangulate_grpc3Response() : triangulate_grpc3Response(nullptr) {}
  ~triangulate_grpc3Response() override;
  explicit PROTOBUF_CONSTEXPR triangulate_grpc3Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  triangulate_grpc3Response(const triangulate_grpc3Response& from);
  triangulate_grpc3Response(triangulate_grpc3Response&& from) noexcept
    : triangulate_grpc3Response() {
    *this = ::std::move(from);
  }

  inline triangulate_grpc3Response& operator=(const triangulate_grpc3Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline triangulate_grpc3Response& operator=(triangulate_grpc3Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const triangulate_grpc3Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const triangulate_grpc3Response* internal_default_instance() {
    return reinterpret_cast<const triangulate_grpc3Response*>(
               &_triangulate_grpc3Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(triangulate_grpc3Response& a, triangulate_grpc3Response& b) {
    a.Swap(&b);
  }
  inline void Swap(triangulate_grpc3Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(triangulate_grpc3Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  triangulate_grpc3Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<triangulate_grpc3Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const triangulate_grpc3Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const triangulate_grpc3Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(triangulate_grpc3Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITriangulator.triangulate_grpc3Response";
  }
  protected:
  explicit triangulate_grpc3Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pcloud = 1;
  void clear_pcloud();
  const std::string& pcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pcloud();
  PROTOBUF_NODISCARD std::string* release_pcloud();
  void set_allocated_pcloud(std::string* pcloud);
  private:
  const std::string& _internal_pcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pcloud(const std::string& value);
  std::string* _internal_mutable_pcloud();
  public:

  // double xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  double xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(double value);
  private:
  double _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITriangulator.triangulate_grpc3Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pcloud_;
  double xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITriangulatorService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// triangulate_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void triangulate_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t triangulate_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t triangulate_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void triangulate_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void triangulate_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Request.grpcServerCompressionFormat)
}

// bytes pointsView1 = 2;
inline void triangulate_grpc0Request::clear_pointsview1() {
  pointsview1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc0Request::pointsview1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Request.pointsView1)
  return _internal_pointsview1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc0Request::set_pointsview1(ArgT0&& arg0, ArgT... args) {
 
 pointsview1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Request.pointsView1)
}
inline std::string* triangulate_grpc0Request::mutable_pointsview1() {
  std::string* _s = _internal_mutable_pointsview1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc0Request.pointsView1)
  return _s;
}
inline const std::string& triangulate_grpc0Request::_internal_pointsview1() const {
  return pointsview1_.Get();
}
inline void triangulate_grpc0Request::_internal_set_pointsview1(const std::string& value) {
  
  pointsview1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::_internal_mutable_pointsview1() {
  
  return pointsview1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::release_pointsview1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc0Request.pointsView1)
  return pointsview1_.Release();
}
inline void triangulate_grpc0Request::set_allocated_pointsview1(std::string* pointsview1) {
  if (pointsview1 != nullptr) {
    
  } else {
    
  }
  pointsview1_.SetAllocated(pointsview1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pointsview1_.IsDefault()) {
    pointsview1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc0Request.pointsView1)
}

// bytes pointView2 = 3;
inline void triangulate_grpc0Request::clear_pointview2() {
  pointview2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc0Request::pointview2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Request.pointView2)
  return _internal_pointview2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc0Request::set_pointview2(ArgT0&& arg0, ArgT... args) {
 
 pointview2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Request.pointView2)
}
inline std::string* triangulate_grpc0Request::mutable_pointview2() {
  std::string* _s = _internal_mutable_pointview2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc0Request.pointView2)
  return _s;
}
inline const std::string& triangulate_grpc0Request::_internal_pointview2() const {
  return pointview2_.Get();
}
inline void triangulate_grpc0Request::_internal_set_pointview2(const std::string& value) {
  
  pointview2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::_internal_mutable_pointview2() {
  
  return pointview2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::release_pointview2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc0Request.pointView2)
  return pointview2_.Release();
}
inline void triangulate_grpc0Request::set_allocated_pointview2(std::string* pointview2) {
  if (pointview2 != nullptr) {
    
  } else {
    
  }
  pointview2_.SetAllocated(pointview2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pointview2_.IsDefault()) {
    pointview2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc0Request.pointView2)
}

// bytes matches = 4;
inline void triangulate_grpc0Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& triangulate_grpc0Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Request.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc0Request::set_matches(ArgT0&& arg0, ArgT... args) {
 
 matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Request.matches)
}
inline std::string* triangulate_grpc0Request::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc0Request.matches)
  return _s;
}
inline const std::string& triangulate_grpc0Request::_internal_matches() const {
  return matches_.Get();
}
inline void triangulate_grpc0Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::_internal_mutable_matches() {
  
  return matches_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc0Request.matches)
  return matches_.Release();
}
inline void triangulate_grpc0Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (matches_.IsDefault()) {
    matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc0Request.matches)
}

// bytes working_views = 5;
inline void triangulate_grpc0Request::clear_working_views() {
  working_views_.ClearToEmpty();
}
inline const std::string& triangulate_grpc0Request::working_views() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Request.working_views)
  return _internal_working_views();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc0Request::set_working_views(ArgT0&& arg0, ArgT... args) {
 
 working_views_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Request.working_views)
}
inline std::string* triangulate_grpc0Request::mutable_working_views() {
  std::string* _s = _internal_mutable_working_views();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc0Request.working_views)
  return _s;
}
inline const std::string& triangulate_grpc0Request::_internal_working_views() const {
  return working_views_.Get();
}
inline void triangulate_grpc0Request::_internal_set_working_views(const std::string& value) {
  
  working_views_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::_internal_mutable_working_views() {
  
  return working_views_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::release_working_views() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc0Request.working_views)
  return working_views_.Release();
}
inline void triangulate_grpc0Request::set_allocated_working_views(std::string* working_views) {
  if (working_views != nullptr) {
    
  } else {
    
  }
  working_views_.SetAllocated(working_views, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (working_views_.IsDefault()) {
    working_views_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc0Request.working_views)
}

// bytes poseView1 = 6;
inline void triangulate_grpc0Request::clear_poseview1() {
  poseview1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc0Request::poseview1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Request.poseView1)
  return _internal_poseview1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc0Request::set_poseview1(ArgT0&& arg0, ArgT... args) {
 
 poseview1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Request.poseView1)
}
inline std::string* triangulate_grpc0Request::mutable_poseview1() {
  std::string* _s = _internal_mutable_poseview1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc0Request.poseView1)
  return _s;
}
inline const std::string& triangulate_grpc0Request::_internal_poseview1() const {
  return poseview1_.Get();
}
inline void triangulate_grpc0Request::_internal_set_poseview1(const std::string& value) {
  
  poseview1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::_internal_mutable_poseview1() {
  
  return poseview1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::release_poseview1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc0Request.poseView1)
  return poseview1_.Release();
}
inline void triangulate_grpc0Request::set_allocated_poseview1(std::string* poseview1) {
  if (poseview1 != nullptr) {
    
  } else {
    
  }
  poseview1_.SetAllocated(poseview1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (poseview1_.IsDefault()) {
    poseview1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc0Request.poseView1)
}

// bytes poseView2 = 7;
inline void triangulate_grpc0Request::clear_poseview2() {
  poseview2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc0Request::poseview2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Request.poseView2)
  return _internal_poseview2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc0Request::set_poseview2(ArgT0&& arg0, ArgT... args) {
 
 poseview2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Request.poseView2)
}
inline std::string* triangulate_grpc0Request::mutable_poseview2() {
  std::string* _s = _internal_mutable_poseview2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc0Request.poseView2)
  return _s;
}
inline const std::string& triangulate_grpc0Request::_internal_poseview2() const {
  return poseview2_.Get();
}
inline void triangulate_grpc0Request::_internal_set_poseview2(const std::string& value) {
  
  poseview2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::_internal_mutable_poseview2() {
  
  return poseview2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::release_poseview2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc0Request.poseView2)
  return poseview2_.Release();
}
inline void triangulate_grpc0Request::set_allocated_poseview2(std::string* poseview2) {
  if (poseview2 != nullptr) {
    
  } else {
    
  }
  poseview2_.SetAllocated(poseview2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (poseview2_.IsDefault()) {
    poseview2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc0Request.poseView2)
}

// bytes camParams1 = 8;
inline void triangulate_grpc0Request::clear_camparams1() {
  camparams1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc0Request::camparams1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Request.camParams1)
  return _internal_camparams1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc0Request::set_camparams1(ArgT0&& arg0, ArgT... args) {
 
 camparams1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Request.camParams1)
}
inline std::string* triangulate_grpc0Request::mutable_camparams1() {
  std::string* _s = _internal_mutable_camparams1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc0Request.camParams1)
  return _s;
}
inline const std::string& triangulate_grpc0Request::_internal_camparams1() const {
  return camparams1_.Get();
}
inline void triangulate_grpc0Request::_internal_set_camparams1(const std::string& value) {
  
  camparams1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::_internal_mutable_camparams1() {
  
  return camparams1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::release_camparams1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc0Request.camParams1)
  return camparams1_.Release();
}
inline void triangulate_grpc0Request::set_allocated_camparams1(std::string* camparams1) {
  if (camparams1 != nullptr) {
    
  } else {
    
  }
  camparams1_.SetAllocated(camparams1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams1_.IsDefault()) {
    camparams1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc0Request.camParams1)
}

// bytes camParams2 = 9;
inline void triangulate_grpc0Request::clear_camparams2() {
  camparams2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc0Request::camparams2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Request.camParams2)
  return _internal_camparams2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc0Request::set_camparams2(ArgT0&& arg0, ArgT... args) {
 
 camparams2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Request.camParams2)
}
inline std::string* triangulate_grpc0Request::mutable_camparams2() {
  std::string* _s = _internal_mutable_camparams2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc0Request.camParams2)
  return _s;
}
inline const std::string& triangulate_grpc0Request::_internal_camparams2() const {
  return camparams2_.Get();
}
inline void triangulate_grpc0Request::_internal_set_camparams2(const std::string& value) {
  
  camparams2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::_internal_mutable_camparams2() {
  
  return camparams2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::release_camparams2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc0Request.camParams2)
  return camparams2_.Release();
}
inline void triangulate_grpc0Request::set_allocated_camparams2(std::string* camparams2) {
  if (camparams2 != nullptr) {
    
  } else {
    
  }
  camparams2_.SetAllocated(camparams2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams2_.IsDefault()) {
    camparams2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc0Request.camParams2)
}

// bytes pcloud = 10;
inline void triangulate_grpc0Request::clear_pcloud() {
  pcloud_.ClearToEmpty();
}
inline const std::string& triangulate_grpc0Request::pcloud() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Request.pcloud)
  return _internal_pcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc0Request::set_pcloud(ArgT0&& arg0, ArgT... args) {
 
 pcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Request.pcloud)
}
inline std::string* triangulate_grpc0Request::mutable_pcloud() {
  std::string* _s = _internal_mutable_pcloud();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc0Request.pcloud)
  return _s;
}
inline const std::string& triangulate_grpc0Request::_internal_pcloud() const {
  return pcloud_.Get();
}
inline void triangulate_grpc0Request::_internal_set_pcloud(const std::string& value) {
  
  pcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::_internal_mutable_pcloud() {
  
  return pcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Request::release_pcloud() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc0Request.pcloud)
  return pcloud_.Release();
}
inline void triangulate_grpc0Request::set_allocated_pcloud(std::string* pcloud) {
  if (pcloud != nullptr) {
    
  } else {
    
  }
  pcloud_.SetAllocated(pcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pcloud_.IsDefault()) {
    pcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc0Request.pcloud)
}

// -------------------------------------------------------------------

// triangulate_grpc0Response

// bytes pcloud = 1;
inline void triangulate_grpc0Response::clear_pcloud() {
  pcloud_.ClearToEmpty();
}
inline const std::string& triangulate_grpc0Response::pcloud() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Response.pcloud)
  return _internal_pcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc0Response::set_pcloud(ArgT0&& arg0, ArgT... args) {
 
 pcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Response.pcloud)
}
inline std::string* triangulate_grpc0Response::mutable_pcloud() {
  std::string* _s = _internal_mutable_pcloud();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc0Response.pcloud)
  return _s;
}
inline const std::string& triangulate_grpc0Response::_internal_pcloud() const {
  return pcloud_.Get();
}
inline void triangulate_grpc0Response::_internal_set_pcloud(const std::string& value) {
  
  pcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Response::_internal_mutable_pcloud() {
  
  return pcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc0Response::release_pcloud() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc0Response.pcloud)
  return pcloud_.Release();
}
inline void triangulate_grpc0Response::set_allocated_pcloud(std::string* pcloud) {
  if (pcloud != nullptr) {
    
  } else {
    
  }
  pcloud_.SetAllocated(pcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pcloud_.IsDefault()) {
    pcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc0Response.pcloud)
}

// double xpcfGrpcReturnValue = 2;
inline void triangulate_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline double triangulate_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline double triangulate_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void triangulate_grpc0Response::_internal_set_xpcfgrpcreturnvalue(double value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void triangulate_grpc0Response::set_xpcfgrpcreturnvalue(double value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// triangulate_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void triangulate_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t triangulate_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t triangulate_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void triangulate_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void triangulate_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Request.grpcServerCompressionFormat)
}

// bytes keypointsView1 = 2;
inline void triangulate_grpc1Request::clear_keypointsview1() {
  keypointsview1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc1Request::keypointsview1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Request.keypointsView1)
  return _internal_keypointsview1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc1Request::set_keypointsview1(ArgT0&& arg0, ArgT... args) {
 
 keypointsview1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Request.keypointsView1)
}
inline std::string* triangulate_grpc1Request::mutable_keypointsview1() {
  std::string* _s = _internal_mutable_keypointsview1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc1Request.keypointsView1)
  return _s;
}
inline const std::string& triangulate_grpc1Request::_internal_keypointsview1() const {
  return keypointsview1_.Get();
}
inline void triangulate_grpc1Request::_internal_set_keypointsview1(const std::string& value) {
  
  keypointsview1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::_internal_mutable_keypointsview1() {
  
  return keypointsview1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::release_keypointsview1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc1Request.keypointsView1)
  return keypointsview1_.Release();
}
inline void triangulate_grpc1Request::set_allocated_keypointsview1(std::string* keypointsview1) {
  if (keypointsview1 != nullptr) {
    
  } else {
    
  }
  keypointsview1_.SetAllocated(keypointsview1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keypointsview1_.IsDefault()) {
    keypointsview1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc1Request.keypointsView1)
}

// bytes keypointsView2 = 3;
inline void triangulate_grpc1Request::clear_keypointsview2() {
  keypointsview2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc1Request::keypointsview2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Request.keypointsView2)
  return _internal_keypointsview2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc1Request::set_keypointsview2(ArgT0&& arg0, ArgT... args) {
 
 keypointsview2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Request.keypointsView2)
}
inline std::string* triangulate_grpc1Request::mutable_keypointsview2() {
  std::string* _s = _internal_mutable_keypointsview2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc1Request.keypointsView2)
  return _s;
}
inline const std::string& triangulate_grpc1Request::_internal_keypointsview2() const {
  return keypointsview2_.Get();
}
inline void triangulate_grpc1Request::_internal_set_keypointsview2(const std::string& value) {
  
  keypointsview2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::_internal_mutable_keypointsview2() {
  
  return keypointsview2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::release_keypointsview2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc1Request.keypointsView2)
  return keypointsview2_.Release();
}
inline void triangulate_grpc1Request::set_allocated_keypointsview2(std::string* keypointsview2) {
  if (keypointsview2 != nullptr) {
    
  } else {
    
  }
  keypointsview2_.SetAllocated(keypointsview2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keypointsview2_.IsDefault()) {
    keypointsview2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc1Request.keypointsView2)
}

// bytes matches = 4;
inline void triangulate_grpc1Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& triangulate_grpc1Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Request.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc1Request::set_matches(ArgT0&& arg0, ArgT... args) {
 
 matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Request.matches)
}
inline std::string* triangulate_grpc1Request::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc1Request.matches)
  return _s;
}
inline const std::string& triangulate_grpc1Request::_internal_matches() const {
  return matches_.Get();
}
inline void triangulate_grpc1Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::_internal_mutable_matches() {
  
  return matches_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc1Request.matches)
  return matches_.Release();
}
inline void triangulate_grpc1Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (matches_.IsDefault()) {
    matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc1Request.matches)
}

// bytes working_views = 5;
inline void triangulate_grpc1Request::clear_working_views() {
  working_views_.ClearToEmpty();
}
inline const std::string& triangulate_grpc1Request::working_views() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Request.working_views)
  return _internal_working_views();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc1Request::set_working_views(ArgT0&& arg0, ArgT... args) {
 
 working_views_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Request.working_views)
}
inline std::string* triangulate_grpc1Request::mutable_working_views() {
  std::string* _s = _internal_mutable_working_views();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc1Request.working_views)
  return _s;
}
inline const std::string& triangulate_grpc1Request::_internal_working_views() const {
  return working_views_.Get();
}
inline void triangulate_grpc1Request::_internal_set_working_views(const std::string& value) {
  
  working_views_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::_internal_mutable_working_views() {
  
  return working_views_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::release_working_views() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc1Request.working_views)
  return working_views_.Release();
}
inline void triangulate_grpc1Request::set_allocated_working_views(std::string* working_views) {
  if (working_views != nullptr) {
    
  } else {
    
  }
  working_views_.SetAllocated(working_views, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (working_views_.IsDefault()) {
    working_views_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc1Request.working_views)
}

// bytes poseView1 = 6;
inline void triangulate_grpc1Request::clear_poseview1() {
  poseview1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc1Request::poseview1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Request.poseView1)
  return _internal_poseview1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc1Request::set_poseview1(ArgT0&& arg0, ArgT... args) {
 
 poseview1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Request.poseView1)
}
inline std::string* triangulate_grpc1Request::mutable_poseview1() {
  std::string* _s = _internal_mutable_poseview1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc1Request.poseView1)
  return _s;
}
inline const std::string& triangulate_grpc1Request::_internal_poseview1() const {
  return poseview1_.Get();
}
inline void triangulate_grpc1Request::_internal_set_poseview1(const std::string& value) {
  
  poseview1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::_internal_mutable_poseview1() {
  
  return poseview1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::release_poseview1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc1Request.poseView1)
  return poseview1_.Release();
}
inline void triangulate_grpc1Request::set_allocated_poseview1(std::string* poseview1) {
  if (poseview1 != nullptr) {
    
  } else {
    
  }
  poseview1_.SetAllocated(poseview1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (poseview1_.IsDefault()) {
    poseview1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc1Request.poseView1)
}

// bytes poseView2 = 7;
inline void triangulate_grpc1Request::clear_poseview2() {
  poseview2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc1Request::poseview2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Request.poseView2)
  return _internal_poseview2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc1Request::set_poseview2(ArgT0&& arg0, ArgT... args) {
 
 poseview2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Request.poseView2)
}
inline std::string* triangulate_grpc1Request::mutable_poseview2() {
  std::string* _s = _internal_mutable_poseview2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc1Request.poseView2)
  return _s;
}
inline const std::string& triangulate_grpc1Request::_internal_poseview2() const {
  return poseview2_.Get();
}
inline void triangulate_grpc1Request::_internal_set_poseview2(const std::string& value) {
  
  poseview2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::_internal_mutable_poseview2() {
  
  return poseview2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::release_poseview2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc1Request.poseView2)
  return poseview2_.Release();
}
inline void triangulate_grpc1Request::set_allocated_poseview2(std::string* poseview2) {
  if (poseview2 != nullptr) {
    
  } else {
    
  }
  poseview2_.SetAllocated(poseview2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (poseview2_.IsDefault()) {
    poseview2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc1Request.poseView2)
}

// bytes camParams1 = 8;
inline void triangulate_grpc1Request::clear_camparams1() {
  camparams1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc1Request::camparams1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Request.camParams1)
  return _internal_camparams1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc1Request::set_camparams1(ArgT0&& arg0, ArgT... args) {
 
 camparams1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Request.camParams1)
}
inline std::string* triangulate_grpc1Request::mutable_camparams1() {
  std::string* _s = _internal_mutable_camparams1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc1Request.camParams1)
  return _s;
}
inline const std::string& triangulate_grpc1Request::_internal_camparams1() const {
  return camparams1_.Get();
}
inline void triangulate_grpc1Request::_internal_set_camparams1(const std::string& value) {
  
  camparams1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::_internal_mutable_camparams1() {
  
  return camparams1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::release_camparams1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc1Request.camParams1)
  return camparams1_.Release();
}
inline void triangulate_grpc1Request::set_allocated_camparams1(std::string* camparams1) {
  if (camparams1 != nullptr) {
    
  } else {
    
  }
  camparams1_.SetAllocated(camparams1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams1_.IsDefault()) {
    camparams1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc1Request.camParams1)
}

// bytes camParams2 = 9;
inline void triangulate_grpc1Request::clear_camparams2() {
  camparams2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc1Request::camparams2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Request.camParams2)
  return _internal_camparams2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc1Request::set_camparams2(ArgT0&& arg0, ArgT... args) {
 
 camparams2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Request.camParams2)
}
inline std::string* triangulate_grpc1Request::mutable_camparams2() {
  std::string* _s = _internal_mutable_camparams2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc1Request.camParams2)
  return _s;
}
inline const std::string& triangulate_grpc1Request::_internal_camparams2() const {
  return camparams2_.Get();
}
inline void triangulate_grpc1Request::_internal_set_camparams2(const std::string& value) {
  
  camparams2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::_internal_mutable_camparams2() {
  
  return camparams2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::release_camparams2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc1Request.camParams2)
  return camparams2_.Release();
}
inline void triangulate_grpc1Request::set_allocated_camparams2(std::string* camparams2) {
  if (camparams2 != nullptr) {
    
  } else {
    
  }
  camparams2_.SetAllocated(camparams2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams2_.IsDefault()) {
    camparams2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc1Request.camParams2)
}

// bytes pcloud = 10;
inline void triangulate_grpc1Request::clear_pcloud() {
  pcloud_.ClearToEmpty();
}
inline const std::string& triangulate_grpc1Request::pcloud() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Request.pcloud)
  return _internal_pcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc1Request::set_pcloud(ArgT0&& arg0, ArgT... args) {
 
 pcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Request.pcloud)
}
inline std::string* triangulate_grpc1Request::mutable_pcloud() {
  std::string* _s = _internal_mutable_pcloud();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc1Request.pcloud)
  return _s;
}
inline const std::string& triangulate_grpc1Request::_internal_pcloud() const {
  return pcloud_.Get();
}
inline void triangulate_grpc1Request::_internal_set_pcloud(const std::string& value) {
  
  pcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::_internal_mutable_pcloud() {
  
  return pcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Request::release_pcloud() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc1Request.pcloud)
  return pcloud_.Release();
}
inline void triangulate_grpc1Request::set_allocated_pcloud(std::string* pcloud) {
  if (pcloud != nullptr) {
    
  } else {
    
  }
  pcloud_.SetAllocated(pcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pcloud_.IsDefault()) {
    pcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc1Request.pcloud)
}

// -------------------------------------------------------------------

// triangulate_grpc1Response

// bytes pcloud = 1;
inline void triangulate_grpc1Response::clear_pcloud() {
  pcloud_.ClearToEmpty();
}
inline const std::string& triangulate_grpc1Response::pcloud() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Response.pcloud)
  return _internal_pcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc1Response::set_pcloud(ArgT0&& arg0, ArgT... args) {
 
 pcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Response.pcloud)
}
inline std::string* triangulate_grpc1Response::mutable_pcloud() {
  std::string* _s = _internal_mutable_pcloud();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc1Response.pcloud)
  return _s;
}
inline const std::string& triangulate_grpc1Response::_internal_pcloud() const {
  return pcloud_.Get();
}
inline void triangulate_grpc1Response::_internal_set_pcloud(const std::string& value) {
  
  pcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Response::_internal_mutable_pcloud() {
  
  return pcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc1Response::release_pcloud() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc1Response.pcloud)
  return pcloud_.Release();
}
inline void triangulate_grpc1Response::set_allocated_pcloud(std::string* pcloud) {
  if (pcloud != nullptr) {
    
  } else {
    
  }
  pcloud_.SetAllocated(pcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pcloud_.IsDefault()) {
    pcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc1Response.pcloud)
}

// double xpcfGrpcReturnValue = 2;
inline void triangulate_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline double triangulate_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline double triangulate_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void triangulate_grpc1Response::_internal_set_xpcfgrpcreturnvalue(double value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void triangulate_grpc1Response::set_xpcfgrpcreturnvalue(double value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// triangulate_grpc2Request

// int32 grpcServerCompressionFormat = 1;
inline void triangulate_grpc2Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t triangulate_grpc2Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t triangulate_grpc2Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void triangulate_grpc2Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void triangulate_grpc2Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.grpcServerCompressionFormat)
}

// bytes keypointsView1 = 2;
inline void triangulate_grpc2Request::clear_keypointsview1() {
  keypointsview1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::keypointsview1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.keypointsView1)
  return _internal_keypointsview1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_keypointsview1(ArgT0&& arg0, ArgT... args) {
 
 keypointsview1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.keypointsView1)
}
inline std::string* triangulate_grpc2Request::mutable_keypointsview1() {
  std::string* _s = _internal_mutable_keypointsview1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.keypointsView1)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_keypointsview1() const {
  return keypointsview1_.Get();
}
inline void triangulate_grpc2Request::_internal_set_keypointsview1(const std::string& value) {
  
  keypointsview1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_keypointsview1() {
  
  return keypointsview1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_keypointsview1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.keypointsView1)
  return keypointsview1_.Release();
}
inline void triangulate_grpc2Request::set_allocated_keypointsview1(std::string* keypointsview1) {
  if (keypointsview1 != nullptr) {
    
  } else {
    
  }
  keypointsview1_.SetAllocated(keypointsview1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keypointsview1_.IsDefault()) {
    keypointsview1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.keypointsView1)
}

// bytes keypointsView2 = 3;
inline void triangulate_grpc2Request::clear_keypointsview2() {
  keypointsview2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::keypointsview2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.keypointsView2)
  return _internal_keypointsview2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_keypointsview2(ArgT0&& arg0, ArgT... args) {
 
 keypointsview2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.keypointsView2)
}
inline std::string* triangulate_grpc2Request::mutable_keypointsview2() {
  std::string* _s = _internal_mutable_keypointsview2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.keypointsView2)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_keypointsview2() const {
  return keypointsview2_.Get();
}
inline void triangulate_grpc2Request::_internal_set_keypointsview2(const std::string& value) {
  
  keypointsview2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_keypointsview2() {
  
  return keypointsview2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_keypointsview2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.keypointsView2)
  return keypointsview2_.Release();
}
inline void triangulate_grpc2Request::set_allocated_keypointsview2(std::string* keypointsview2) {
  if (keypointsview2 != nullptr) {
    
  } else {
    
  }
  keypointsview2_.SetAllocated(keypointsview2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keypointsview2_.IsDefault()) {
    keypointsview2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.keypointsView2)
}

// bytes descriptor1 = 4;
inline void triangulate_grpc2Request::clear_descriptor1() {
  descriptor1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::descriptor1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.descriptor1)
  return _internal_descriptor1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_descriptor1(ArgT0&& arg0, ArgT... args) {
 
 descriptor1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.descriptor1)
}
inline std::string* triangulate_grpc2Request::mutable_descriptor1() {
  std::string* _s = _internal_mutable_descriptor1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.descriptor1)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_descriptor1() const {
  return descriptor1_.Get();
}
inline void triangulate_grpc2Request::_internal_set_descriptor1(const std::string& value) {
  
  descriptor1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_descriptor1() {
  
  return descriptor1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_descriptor1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.descriptor1)
  return descriptor1_.Release();
}
inline void triangulate_grpc2Request::set_allocated_descriptor1(std::string* descriptor1) {
  if (descriptor1 != nullptr) {
    
  } else {
    
  }
  descriptor1_.SetAllocated(descriptor1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (descriptor1_.IsDefault()) {
    descriptor1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.descriptor1)
}

// bytes descriptor2 = 5;
inline void triangulate_grpc2Request::clear_descriptor2() {
  descriptor2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::descriptor2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.descriptor2)
  return _internal_descriptor2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_descriptor2(ArgT0&& arg0, ArgT... args) {
 
 descriptor2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.descriptor2)
}
inline std::string* triangulate_grpc2Request::mutable_descriptor2() {
  std::string* _s = _internal_mutable_descriptor2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.descriptor2)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_descriptor2() const {
  return descriptor2_.Get();
}
inline void triangulate_grpc2Request::_internal_set_descriptor2(const std::string& value) {
  
  descriptor2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_descriptor2() {
  
  return descriptor2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_descriptor2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.descriptor2)
  return descriptor2_.Release();
}
inline void triangulate_grpc2Request::set_allocated_descriptor2(std::string* descriptor2) {
  if (descriptor2 != nullptr) {
    
  } else {
    
  }
  descriptor2_.SetAllocated(descriptor2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (descriptor2_.IsDefault()) {
    descriptor2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.descriptor2)
}

// bytes matches = 6;
inline void triangulate_grpc2Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_matches(ArgT0&& arg0, ArgT... args) {
 
 matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.matches)
}
inline std::string* triangulate_grpc2Request::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.matches)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_matches() const {
  return matches_.Get();
}
inline void triangulate_grpc2Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_matches() {
  
  return matches_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.matches)
  return matches_.Release();
}
inline void triangulate_grpc2Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (matches_.IsDefault()) {
    matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.matches)
}

// bytes working_views = 7;
inline void triangulate_grpc2Request::clear_working_views() {
  working_views_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::working_views() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.working_views)
  return _internal_working_views();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_working_views(ArgT0&& arg0, ArgT... args) {
 
 working_views_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.working_views)
}
inline std::string* triangulate_grpc2Request::mutable_working_views() {
  std::string* _s = _internal_mutable_working_views();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.working_views)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_working_views() const {
  return working_views_.Get();
}
inline void triangulate_grpc2Request::_internal_set_working_views(const std::string& value) {
  
  working_views_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_working_views() {
  
  return working_views_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_working_views() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.working_views)
  return working_views_.Release();
}
inline void triangulate_grpc2Request::set_allocated_working_views(std::string* working_views) {
  if (working_views != nullptr) {
    
  } else {
    
  }
  working_views_.SetAllocated(working_views, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (working_views_.IsDefault()) {
    working_views_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.working_views)
}

// bytes poseView1 = 8;
inline void triangulate_grpc2Request::clear_poseview1() {
  poseview1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::poseview1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.poseView1)
  return _internal_poseview1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_poseview1(ArgT0&& arg0, ArgT... args) {
 
 poseview1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.poseView1)
}
inline std::string* triangulate_grpc2Request::mutable_poseview1() {
  std::string* _s = _internal_mutable_poseview1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.poseView1)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_poseview1() const {
  return poseview1_.Get();
}
inline void triangulate_grpc2Request::_internal_set_poseview1(const std::string& value) {
  
  poseview1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_poseview1() {
  
  return poseview1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_poseview1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.poseView1)
  return poseview1_.Release();
}
inline void triangulate_grpc2Request::set_allocated_poseview1(std::string* poseview1) {
  if (poseview1 != nullptr) {
    
  } else {
    
  }
  poseview1_.SetAllocated(poseview1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (poseview1_.IsDefault()) {
    poseview1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.poseView1)
}

// bytes poseView2 = 9;
inline void triangulate_grpc2Request::clear_poseview2() {
  poseview2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::poseview2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.poseView2)
  return _internal_poseview2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_poseview2(ArgT0&& arg0, ArgT... args) {
 
 poseview2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.poseView2)
}
inline std::string* triangulate_grpc2Request::mutable_poseview2() {
  std::string* _s = _internal_mutable_poseview2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.poseView2)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_poseview2() const {
  return poseview2_.Get();
}
inline void triangulate_grpc2Request::_internal_set_poseview2(const std::string& value) {
  
  poseview2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_poseview2() {
  
  return poseview2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_poseview2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.poseView2)
  return poseview2_.Release();
}
inline void triangulate_grpc2Request::set_allocated_poseview2(std::string* poseview2) {
  if (poseview2 != nullptr) {
    
  } else {
    
  }
  poseview2_.SetAllocated(poseview2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (poseview2_.IsDefault()) {
    poseview2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.poseView2)
}

// bytes camParams1 = 10;
inline void triangulate_grpc2Request::clear_camparams1() {
  camparams1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::camparams1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.camParams1)
  return _internal_camparams1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_camparams1(ArgT0&& arg0, ArgT... args) {
 
 camparams1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.camParams1)
}
inline std::string* triangulate_grpc2Request::mutable_camparams1() {
  std::string* _s = _internal_mutable_camparams1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.camParams1)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_camparams1() const {
  return camparams1_.Get();
}
inline void triangulate_grpc2Request::_internal_set_camparams1(const std::string& value) {
  
  camparams1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_camparams1() {
  
  return camparams1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_camparams1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.camParams1)
  return camparams1_.Release();
}
inline void triangulate_grpc2Request::set_allocated_camparams1(std::string* camparams1) {
  if (camparams1 != nullptr) {
    
  } else {
    
  }
  camparams1_.SetAllocated(camparams1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams1_.IsDefault()) {
    camparams1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.camParams1)
}

// bytes camParams2 = 11;
inline void triangulate_grpc2Request::clear_camparams2() {
  camparams2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::camparams2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.camParams2)
  return _internal_camparams2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_camparams2(ArgT0&& arg0, ArgT... args) {
 
 camparams2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.camParams2)
}
inline std::string* triangulate_grpc2Request::mutable_camparams2() {
  std::string* _s = _internal_mutable_camparams2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.camParams2)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_camparams2() const {
  return camparams2_.Get();
}
inline void triangulate_grpc2Request::_internal_set_camparams2(const std::string& value) {
  
  camparams2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_camparams2() {
  
  return camparams2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_camparams2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.camParams2)
  return camparams2_.Release();
}
inline void triangulate_grpc2Request::set_allocated_camparams2(std::string* camparams2) {
  if (camparams2 != nullptr) {
    
  } else {
    
  }
  camparams2_.SetAllocated(camparams2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams2_.IsDefault()) {
    camparams2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.camParams2)
}

// bytes pcloud = 12;
inline void triangulate_grpc2Request::clear_pcloud() {
  pcloud_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Request::pcloud() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Request.pcloud)
  return _internal_pcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Request::set_pcloud(ArgT0&& arg0, ArgT... args) {
 
 pcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Request.pcloud)
}
inline std::string* triangulate_grpc2Request::mutable_pcloud() {
  std::string* _s = _internal_mutable_pcloud();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Request.pcloud)
  return _s;
}
inline const std::string& triangulate_grpc2Request::_internal_pcloud() const {
  return pcloud_.Get();
}
inline void triangulate_grpc2Request::_internal_set_pcloud(const std::string& value) {
  
  pcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::_internal_mutable_pcloud() {
  
  return pcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Request::release_pcloud() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Request.pcloud)
  return pcloud_.Release();
}
inline void triangulate_grpc2Request::set_allocated_pcloud(std::string* pcloud) {
  if (pcloud != nullptr) {
    
  } else {
    
  }
  pcloud_.SetAllocated(pcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pcloud_.IsDefault()) {
    pcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Request.pcloud)
}

// -------------------------------------------------------------------

// triangulate_grpc2Response

// bytes pcloud = 1;
inline void triangulate_grpc2Response::clear_pcloud() {
  pcloud_.ClearToEmpty();
}
inline const std::string& triangulate_grpc2Response::pcloud() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Response.pcloud)
  return _internal_pcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc2Response::set_pcloud(ArgT0&& arg0, ArgT... args) {
 
 pcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Response.pcloud)
}
inline std::string* triangulate_grpc2Response::mutable_pcloud() {
  std::string* _s = _internal_mutable_pcloud();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc2Response.pcloud)
  return _s;
}
inline const std::string& triangulate_grpc2Response::_internal_pcloud() const {
  return pcloud_.Get();
}
inline void triangulate_grpc2Response::_internal_set_pcloud(const std::string& value) {
  
  pcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Response::_internal_mutable_pcloud() {
  
  return pcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc2Response::release_pcloud() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc2Response.pcloud)
  return pcloud_.Release();
}
inline void triangulate_grpc2Response::set_allocated_pcloud(std::string* pcloud) {
  if (pcloud != nullptr) {
    
  } else {
    
  }
  pcloud_.SetAllocated(pcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pcloud_.IsDefault()) {
    pcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc2Response.pcloud)
}

// double xpcfGrpcReturnValue = 2;
inline void triangulate_grpc2Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline double triangulate_grpc2Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline double triangulate_grpc2Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc2Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void triangulate_grpc2Response::_internal_set_xpcfgrpcreturnvalue(double value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void triangulate_grpc2Response::set_xpcfgrpcreturnvalue(double value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc2Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// triangulate_grpc3Request

// int32 grpcServerCompressionFormat = 1;
inline void triangulate_grpc3Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t triangulate_grpc3Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t triangulate_grpc3Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void triangulate_grpc3Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void triangulate_grpc3Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Request.grpcServerCompressionFormat)
}

// bytes frame1 = 2;
inline void triangulate_grpc3Request::clear_frame1() {
  frame1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc3Request::frame1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Request.frame1)
  return _internal_frame1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc3Request::set_frame1(ArgT0&& arg0, ArgT... args) {
 
 frame1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Request.frame1)
}
inline std::string* triangulate_grpc3Request::mutable_frame1() {
  std::string* _s = _internal_mutable_frame1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc3Request.frame1)
  return _s;
}
inline const std::string& triangulate_grpc3Request::_internal_frame1() const {
  return frame1_.Get();
}
inline void triangulate_grpc3Request::_internal_set_frame1(const std::string& value) {
  
  frame1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::_internal_mutable_frame1() {
  
  return frame1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::release_frame1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc3Request.frame1)
  return frame1_.Release();
}
inline void triangulate_grpc3Request::set_allocated_frame1(std::string* frame1) {
  if (frame1 != nullptr) {
    
  } else {
    
  }
  frame1_.SetAllocated(frame1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame1_.IsDefault()) {
    frame1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc3Request.frame1)
}

// bytes frame2 = 3;
inline void triangulate_grpc3Request::clear_frame2() {
  frame2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc3Request::frame2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Request.frame2)
  return _internal_frame2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc3Request::set_frame2(ArgT0&& arg0, ArgT... args) {
 
 frame2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Request.frame2)
}
inline std::string* triangulate_grpc3Request::mutable_frame2() {
  std::string* _s = _internal_mutable_frame2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc3Request.frame2)
  return _s;
}
inline const std::string& triangulate_grpc3Request::_internal_frame2() const {
  return frame2_.Get();
}
inline void triangulate_grpc3Request::_internal_set_frame2(const std::string& value) {
  
  frame2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::_internal_mutable_frame2() {
  
  return frame2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::release_frame2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc3Request.frame2)
  return frame2_.Release();
}
inline void triangulate_grpc3Request::set_allocated_frame2(std::string* frame2) {
  if (frame2 != nullptr) {
    
  } else {
    
  }
  frame2_.SetAllocated(frame2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame2_.IsDefault()) {
    frame2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc3Request.frame2)
}

// bytes matches = 4;
inline void triangulate_grpc3Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& triangulate_grpc3Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Request.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc3Request::set_matches(ArgT0&& arg0, ArgT... args) {
 
 matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Request.matches)
}
inline std::string* triangulate_grpc3Request::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc3Request.matches)
  return _s;
}
inline const std::string& triangulate_grpc3Request::_internal_matches() const {
  return matches_.Get();
}
inline void triangulate_grpc3Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::_internal_mutable_matches() {
  
  return matches_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc3Request.matches)
  return matches_.Release();
}
inline void triangulate_grpc3Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (matches_.IsDefault()) {
    matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc3Request.matches)
}

// bytes working_views = 5;
inline void triangulate_grpc3Request::clear_working_views() {
  working_views_.ClearToEmpty();
}
inline const std::string& triangulate_grpc3Request::working_views() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Request.working_views)
  return _internal_working_views();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc3Request::set_working_views(ArgT0&& arg0, ArgT... args) {
 
 working_views_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Request.working_views)
}
inline std::string* triangulate_grpc3Request::mutable_working_views() {
  std::string* _s = _internal_mutable_working_views();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc3Request.working_views)
  return _s;
}
inline const std::string& triangulate_grpc3Request::_internal_working_views() const {
  return working_views_.Get();
}
inline void triangulate_grpc3Request::_internal_set_working_views(const std::string& value) {
  
  working_views_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::_internal_mutable_working_views() {
  
  return working_views_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::release_working_views() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc3Request.working_views)
  return working_views_.Release();
}
inline void triangulate_grpc3Request::set_allocated_working_views(std::string* working_views) {
  if (working_views != nullptr) {
    
  } else {
    
  }
  working_views_.SetAllocated(working_views, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (working_views_.IsDefault()) {
    working_views_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc3Request.working_views)
}

// bytes camParams1 = 6;
inline void triangulate_grpc3Request::clear_camparams1() {
  camparams1_.ClearToEmpty();
}
inline const std::string& triangulate_grpc3Request::camparams1() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Request.camParams1)
  return _internal_camparams1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc3Request::set_camparams1(ArgT0&& arg0, ArgT... args) {
 
 camparams1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Request.camParams1)
}
inline std::string* triangulate_grpc3Request::mutable_camparams1() {
  std::string* _s = _internal_mutable_camparams1();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc3Request.camParams1)
  return _s;
}
inline const std::string& triangulate_grpc3Request::_internal_camparams1() const {
  return camparams1_.Get();
}
inline void triangulate_grpc3Request::_internal_set_camparams1(const std::string& value) {
  
  camparams1_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::_internal_mutable_camparams1() {
  
  return camparams1_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::release_camparams1() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc3Request.camParams1)
  return camparams1_.Release();
}
inline void triangulate_grpc3Request::set_allocated_camparams1(std::string* camparams1) {
  if (camparams1 != nullptr) {
    
  } else {
    
  }
  camparams1_.SetAllocated(camparams1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams1_.IsDefault()) {
    camparams1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc3Request.camParams1)
}

// bytes camParams2 = 7;
inline void triangulate_grpc3Request::clear_camparams2() {
  camparams2_.ClearToEmpty();
}
inline const std::string& triangulate_grpc3Request::camparams2() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Request.camParams2)
  return _internal_camparams2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc3Request::set_camparams2(ArgT0&& arg0, ArgT... args) {
 
 camparams2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Request.camParams2)
}
inline std::string* triangulate_grpc3Request::mutable_camparams2() {
  std::string* _s = _internal_mutable_camparams2();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc3Request.camParams2)
  return _s;
}
inline const std::string& triangulate_grpc3Request::_internal_camparams2() const {
  return camparams2_.Get();
}
inline void triangulate_grpc3Request::_internal_set_camparams2(const std::string& value) {
  
  camparams2_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::_internal_mutable_camparams2() {
  
  return camparams2_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::release_camparams2() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc3Request.camParams2)
  return camparams2_.Release();
}
inline void triangulate_grpc3Request::set_allocated_camparams2(std::string* camparams2) {
  if (camparams2 != nullptr) {
    
  } else {
    
  }
  camparams2_.SetAllocated(camparams2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camparams2_.IsDefault()) {
    camparams2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc3Request.camParams2)
}

// bool onlyDepth = 8;
inline void triangulate_grpc3Request::clear_onlydepth() {
  onlydepth_ = false;
}
inline bool triangulate_grpc3Request::_internal_onlydepth() const {
  return onlydepth_;
}
inline bool triangulate_grpc3Request::onlydepth() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Request.onlyDepth)
  return _internal_onlydepth();
}
inline void triangulate_grpc3Request::_internal_set_onlydepth(bool value) {
  
  onlydepth_ = value;
}
inline void triangulate_grpc3Request::set_onlydepth(bool value) {
  _internal_set_onlydepth(value);
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Request.onlyDepth)
}

// bytes pcloud = 9;
inline void triangulate_grpc3Request::clear_pcloud() {
  pcloud_.ClearToEmpty();
}
inline const std::string& triangulate_grpc3Request::pcloud() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Request.pcloud)
  return _internal_pcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc3Request::set_pcloud(ArgT0&& arg0, ArgT... args) {
 
 pcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Request.pcloud)
}
inline std::string* triangulate_grpc3Request::mutable_pcloud() {
  std::string* _s = _internal_mutable_pcloud();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc3Request.pcloud)
  return _s;
}
inline const std::string& triangulate_grpc3Request::_internal_pcloud() const {
  return pcloud_.Get();
}
inline void triangulate_grpc3Request::_internal_set_pcloud(const std::string& value) {
  
  pcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::_internal_mutable_pcloud() {
  
  return pcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Request::release_pcloud() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc3Request.pcloud)
  return pcloud_.Release();
}
inline void triangulate_grpc3Request::set_allocated_pcloud(std::string* pcloud) {
  if (pcloud != nullptr) {
    
  } else {
    
  }
  pcloud_.SetAllocated(pcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pcloud_.IsDefault()) {
    pcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc3Request.pcloud)
}

// -------------------------------------------------------------------

// triangulate_grpc3Response

// bytes pcloud = 1;
inline void triangulate_grpc3Response::clear_pcloud() {
  pcloud_.ClearToEmpty();
}
inline const std::string& triangulate_grpc3Response::pcloud() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Response.pcloud)
  return _internal_pcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void triangulate_grpc3Response::set_pcloud(ArgT0&& arg0, ArgT... args) {
 
 pcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Response.pcloud)
}
inline std::string* triangulate_grpc3Response::mutable_pcloud() {
  std::string* _s = _internal_mutable_pcloud();
  // @@protoc_insertion_point(field_mutable:grpcITriangulator.triangulate_grpc3Response.pcloud)
  return _s;
}
inline const std::string& triangulate_grpc3Response::_internal_pcloud() const {
  return pcloud_.Get();
}
inline void triangulate_grpc3Response::_internal_set_pcloud(const std::string& value) {
  
  pcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Response::_internal_mutable_pcloud() {
  
  return pcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* triangulate_grpc3Response::release_pcloud() {
  // @@protoc_insertion_point(field_release:grpcITriangulator.triangulate_grpc3Response.pcloud)
  return pcloud_.Release();
}
inline void triangulate_grpc3Response::set_allocated_pcloud(std::string* pcloud) {
  if (pcloud != nullptr) {
    
  } else {
    
  }
  pcloud_.SetAllocated(pcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pcloud_.IsDefault()) {
    pcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITriangulator.triangulate_grpc3Response.pcloud)
}

// double xpcfGrpcReturnValue = 2;
inline void triangulate_grpc3Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline double triangulate_grpc3Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline double triangulate_grpc3Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcITriangulator.triangulate_grpc3Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void triangulate_grpc3Response::_internal_set_xpcfgrpcreturnvalue(double value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void triangulate_grpc3Response::set_xpcfgrpcreturnvalue(double value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcITriangulator.triangulate_grpc3Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcITriangulator

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcITriangulatorService_2eproto
