// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcITrackablePoseService.proto

#include "grpcITrackablePoseService.pb.h"
#include "grpcITrackablePoseService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcITrackablePose {

static const char* grpcITrackablePoseService_method_names[] = {
  "/grpcITrackablePose.grpcITrackablePoseService/setCameraParameters",
  "/grpcITrackablePose.grpcITrackablePoseService/setTrackable",
  "/grpcITrackablePose.grpcITrackablePoseService/estimate",
};

std::unique_ptr< grpcITrackablePoseService::Stub> grpcITrackablePoseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcITrackablePoseService::Stub> stub(new grpcITrackablePoseService::Stub(channel, options));
  return stub;
}

grpcITrackablePoseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_setCameraParameters_(grpcITrackablePoseService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setTrackable_(grpcITrackablePoseService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_estimate_(grpcITrackablePoseService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcITrackablePoseService::Stub::setCameraParameters(::grpc::ClientContext* context, const ::grpcITrackablePose::setCameraParametersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcITrackablePose::setCameraParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setCameraParameters_, context, request, response);
}

void grpcITrackablePoseService::Stub::async::setCameraParameters(::grpc::ClientContext* context, const ::grpcITrackablePose::setCameraParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcITrackablePose::setCameraParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_, context, request, response, std::move(f));
}

void grpcITrackablePoseService::Stub::async::setCameraParameters(::grpc::ClientContext* context, const ::grpcITrackablePose::setCameraParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcITrackablePoseService::Stub::PrepareAsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcITrackablePose::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcITrackablePose::setCameraParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcITrackablePoseService::Stub::AsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcITrackablePose::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcITrackablePoseService::Stub::setTrackable(::grpc::ClientContext* context, const ::grpcITrackablePose::setTrackableRequest& request, ::grpcITrackablePose::setTrackableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcITrackablePose::setTrackableRequest, ::grpcITrackablePose::setTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setTrackable_, context, request, response);
}

void grpcITrackablePoseService::Stub::async::setTrackable(::grpc::ClientContext* context, const ::grpcITrackablePose::setTrackableRequest* request, ::grpcITrackablePose::setTrackableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcITrackablePose::setTrackableRequest, ::grpcITrackablePose::setTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setTrackable_, context, request, response, std::move(f));
}

void grpcITrackablePoseService::Stub::async::setTrackable(::grpc::ClientContext* context, const ::grpcITrackablePose::setTrackableRequest* request, ::grpcITrackablePose::setTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setTrackable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcITrackablePose::setTrackableResponse>* grpcITrackablePoseService::Stub::PrepareAsyncsetTrackableRaw(::grpc::ClientContext* context, const ::grpcITrackablePose::setTrackableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcITrackablePose::setTrackableResponse, ::grpcITrackablePose::setTrackableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setTrackable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcITrackablePose::setTrackableResponse>* grpcITrackablePoseService::Stub::AsyncsetTrackableRaw(::grpc::ClientContext* context, const ::grpcITrackablePose::setTrackableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetTrackableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcITrackablePoseService::Stub::estimate(::grpc::ClientContext* context, const ::grpcITrackablePose::estimateRequest& request, ::grpcITrackablePose::estimateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcITrackablePose::estimateRequest, ::grpcITrackablePose::estimateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_estimate_, context, request, response);
}

void grpcITrackablePoseService::Stub::async::estimate(::grpc::ClientContext* context, const ::grpcITrackablePose::estimateRequest* request, ::grpcITrackablePose::estimateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcITrackablePose::estimateRequest, ::grpcITrackablePose::estimateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_estimate_, context, request, response, std::move(f));
}

void grpcITrackablePoseService::Stub::async::estimate(::grpc::ClientContext* context, const ::grpcITrackablePose::estimateRequest* request, ::grpcITrackablePose::estimateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_estimate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcITrackablePose::estimateResponse>* grpcITrackablePoseService::Stub::PrepareAsyncestimateRaw(::grpc::ClientContext* context, const ::grpcITrackablePose::estimateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcITrackablePose::estimateResponse, ::grpcITrackablePose::estimateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_estimate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcITrackablePose::estimateResponse>* grpcITrackablePoseService::Stub::AsyncestimateRaw(::grpc::ClientContext* context, const ::grpcITrackablePose::estimateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncestimateRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcITrackablePoseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcITrackablePoseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcITrackablePoseService::Service, ::grpcITrackablePose::setCameraParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcITrackablePoseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcITrackablePose::setCameraParametersRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setCameraParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcITrackablePoseService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcITrackablePoseService::Service, ::grpcITrackablePose::setTrackableRequest, ::grpcITrackablePose::setTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcITrackablePoseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcITrackablePose::setTrackableRequest* req,
             ::grpcITrackablePose::setTrackableResponse* resp) {
               return service->setTrackable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcITrackablePoseService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcITrackablePoseService::Service, ::grpcITrackablePose::estimateRequest, ::grpcITrackablePose::estimateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcITrackablePoseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcITrackablePose::estimateRequest* req,
             ::grpcITrackablePose::estimateResponse* resp) {
               return service->estimate(ctx, req, resp);
             }, this)));
}

grpcITrackablePoseService::Service::~Service() {
}

::grpc::Status grpcITrackablePoseService::Service::setCameraParameters(::grpc::ServerContext* context, const ::grpcITrackablePose::setCameraParametersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcITrackablePoseService::Service::setTrackable(::grpc::ServerContext* context, const ::grpcITrackablePose::setTrackableRequest* request, ::grpcITrackablePose::setTrackableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcITrackablePoseService::Service::estimate(::grpc::ServerContext* context, const ::grpcITrackablePose::estimateRequest* request, ::grpcITrackablePose::estimateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcITrackablePose

