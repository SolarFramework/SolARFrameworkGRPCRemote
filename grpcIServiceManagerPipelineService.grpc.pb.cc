// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIServiceManagerPipelineService.proto

#include "grpcIServiceManagerPipelineService.pb.h"
#include "grpcIServiceManagerPipelineService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIServiceManagerPipeline {

static const char* grpcIServiceManagerPipelineService_method_names[] = {
  "/grpcIServiceManagerPipeline.grpcIServiceManagerPipelineService/init",
  "/grpcIServiceManagerPipeline.grpcIServiceManagerPipelineService/start",
  "/grpcIServiceManagerPipeline.grpcIServiceManagerPipelineService/stop",
  "/grpcIServiceManagerPipeline.grpcIServiceManagerPipelineService/test",
};

std::unique_ptr< grpcIServiceManagerPipelineService::Stub> grpcIServiceManagerPipelineService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIServiceManagerPipelineService::Stub> stub(new grpcIServiceManagerPipelineService::Stub(channel));
  return stub;
}

grpcIServiceManagerPipelineService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_init_(grpcIServiceManagerPipelineService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_(grpcIServiceManagerPipelineService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcIServiceManagerPipelineService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_test_(grpcIServiceManagerPipelineService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIServiceManagerPipelineService::Stub::init(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::initRequest& request, ::grpcIServiceManagerPipeline::initResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceManagerPipeline::initRequest, ::grpcIServiceManagerPipeline::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_, context, request, response);
}

void grpcIServiceManagerPipelineService::Stub::experimental_async::init(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::initRequest* request, ::grpcIServiceManagerPipeline::initResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceManagerPipeline::initRequest, ::grpcIServiceManagerPipeline::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, std::move(f));
}

void grpcIServiceManagerPipelineService::Stub::experimental_async::init(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::initRequest* request, ::grpcIServiceManagerPipeline::initResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManagerPipeline::initResponse>* grpcIServiceManagerPipelineService::Stub::PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceManagerPipeline::initResponse, ::grpcIServiceManagerPipeline::initRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManagerPipeline::initResponse>* grpcIServiceManagerPipelineService::Stub::AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIServiceManagerPipelineService::Stub::start(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::startRequest& request, ::grpcIServiceManagerPipeline::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceManagerPipeline::startRequest, ::grpcIServiceManagerPipeline::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcIServiceManagerPipelineService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::startRequest* request, ::grpcIServiceManagerPipeline::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceManagerPipeline::startRequest, ::grpcIServiceManagerPipeline::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcIServiceManagerPipelineService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::startRequest* request, ::grpcIServiceManagerPipeline::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManagerPipeline::startResponse>* grpcIServiceManagerPipelineService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceManagerPipeline::startResponse, ::grpcIServiceManagerPipeline::startRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManagerPipeline::startResponse>* grpcIServiceManagerPipelineService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIServiceManagerPipelineService::Stub::stop(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::stopRequest& request, ::grpcIServiceManagerPipeline::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceManagerPipeline::stopRequest, ::grpcIServiceManagerPipeline::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcIServiceManagerPipelineService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::stopRequest* request, ::grpcIServiceManagerPipeline::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceManagerPipeline::stopRequest, ::grpcIServiceManagerPipeline::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcIServiceManagerPipelineService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::stopRequest* request, ::grpcIServiceManagerPipeline::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManagerPipeline::stopResponse>* grpcIServiceManagerPipelineService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceManagerPipeline::stopResponse, ::grpcIServiceManagerPipeline::stopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManagerPipeline::stopResponse>* grpcIServiceManagerPipelineService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIServiceManagerPipelineService::Stub::test(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::testRequest& request, ::grpcIServiceManagerPipeline::testResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceManagerPipeline::testRequest, ::grpcIServiceManagerPipeline::testResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_test_, context, request, response);
}

void grpcIServiceManagerPipelineService::Stub::experimental_async::test(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::testRequest* request, ::grpcIServiceManagerPipeline::testResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceManagerPipeline::testRequest, ::grpcIServiceManagerPipeline::testResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_test_, context, request, response, std::move(f));
}

void grpcIServiceManagerPipelineService::Stub::experimental_async::test(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::testRequest* request, ::grpcIServiceManagerPipeline::testResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_test_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManagerPipeline::testResponse>* grpcIServiceManagerPipelineService::Stub::PrepareAsynctestRaw(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::testRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceManagerPipeline::testResponse, ::grpcIServiceManagerPipeline::testRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_test_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManagerPipeline::testResponse>* grpcIServiceManagerPipelineService::Stub::AsynctestRaw(::grpc::ClientContext* context, const ::grpcIServiceManagerPipeline::testRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctestRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIServiceManagerPipelineService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceManagerPipelineService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceManagerPipelineService::Service, ::grpcIServiceManagerPipeline::initRequest, ::grpcIServiceManagerPipeline::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceManagerPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceManagerPipeline::initRequest* req,
             ::grpcIServiceManagerPipeline::initResponse* resp) {
               return service->init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceManagerPipelineService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceManagerPipelineService::Service, ::grpcIServiceManagerPipeline::startRequest, ::grpcIServiceManagerPipeline::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceManagerPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceManagerPipeline::startRequest* req,
             ::grpcIServiceManagerPipeline::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceManagerPipelineService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceManagerPipelineService::Service, ::grpcIServiceManagerPipeline::stopRequest, ::grpcIServiceManagerPipeline::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceManagerPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceManagerPipeline::stopRequest* req,
             ::grpcIServiceManagerPipeline::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceManagerPipelineService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceManagerPipelineService::Service, ::grpcIServiceManagerPipeline::testRequest, ::grpcIServiceManagerPipeline::testResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceManagerPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceManagerPipeline::testRequest* req,
             ::grpcIServiceManagerPipeline::testResponse* resp) {
               return service->test(ctx, req, resp);
             }, this)));
}

grpcIServiceManagerPipelineService::Service::~Service() {
}

::grpc::Status grpcIServiceManagerPipelineService::Service::init(::grpc::ServerContext* context, const ::grpcIServiceManagerPipeline::initRequest* request, ::grpcIServiceManagerPipeline::initResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIServiceManagerPipelineService::Service::start(::grpc::ServerContext* context, const ::grpcIServiceManagerPipeline::startRequest* request, ::grpcIServiceManagerPipeline::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIServiceManagerPipelineService::Service::stop(::grpc::ServerContext* context, const ::grpcIServiceManagerPipeline::stopRequest* request, ::grpcIServiceManagerPipeline::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIServiceManagerPipelineService::Service::test(::grpc::ServerContext* context, const ::grpcIServiceManagerPipeline::testRequest* request, ::grpcIServiceManagerPipeline::testResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIServiceManagerPipeline

