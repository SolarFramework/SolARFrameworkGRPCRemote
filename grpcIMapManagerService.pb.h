// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMapManagerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIMapManagerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIMapManagerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIMapManagerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIMapManagerService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMapManagerService_2eproto;
namespace grpcIMapManager {
class addCameraParametersRequest;
struct addCameraParametersRequestDefaultTypeInternal;
extern addCameraParametersRequestDefaultTypeInternal _addCameraParametersRequest_default_instance_;
class addCameraParametersResponse;
struct addCameraParametersResponseDefaultTypeInternal;
extern addCameraParametersResponseDefaultTypeInternal _addCameraParametersResponse_default_instance_;
class addCloudPointRequest;
struct addCloudPointRequestDefaultTypeInternal;
extern addCloudPointRequestDefaultTypeInternal _addCloudPointRequest_default_instance_;
class addCloudPointResponse;
struct addCloudPointResponseDefaultTypeInternal;
extern addCloudPointResponseDefaultTypeInternal _addCloudPointResponse_default_instance_;
class addKeyframeRequest;
struct addKeyframeRequestDefaultTypeInternal;
extern addKeyframeRequestDefaultTypeInternal _addKeyframeRequest_default_instance_;
class addKeyframeResponse;
struct addKeyframeResponseDefaultTypeInternal;
extern addKeyframeResponseDefaultTypeInternal _addKeyframeResponse_default_instance_;
class deleteFileRequest;
struct deleteFileRequestDefaultTypeInternal;
extern deleteFileRequestDefaultTypeInternal _deleteFileRequest_default_instance_;
class deleteFileResponse;
struct deleteFileResponseDefaultTypeInternal;
extern deleteFileResponseDefaultTypeInternal _deleteFileResponse_default_instance_;
class getCameraParameters_grpc0Request;
struct getCameraParameters_grpc0RequestDefaultTypeInternal;
extern getCameraParameters_grpc0RequestDefaultTypeInternal _getCameraParameters_grpc0Request_default_instance_;
class getCameraParameters_grpc0Response;
struct getCameraParameters_grpc0ResponseDefaultTypeInternal;
extern getCameraParameters_grpc0ResponseDefaultTypeInternal _getCameraParameters_grpc0Response_default_instance_;
class getCameraParameters_grpc1Request;
struct getCameraParameters_grpc1RequestDefaultTypeInternal;
extern getCameraParameters_grpc1RequestDefaultTypeInternal _getCameraParameters_grpc1Request_default_instance_;
class getCameraParameters_grpc1Response;
struct getCameraParameters_grpc1ResponseDefaultTypeInternal;
extern getCameraParameters_grpc1ResponseDefaultTypeInternal _getCameraParameters_grpc1Response_default_instance_;
class getLocalPointCloud_grpc0Request;
struct getLocalPointCloud_grpc0RequestDefaultTypeInternal;
extern getLocalPointCloud_grpc0RequestDefaultTypeInternal _getLocalPointCloud_grpc0Request_default_instance_;
class getLocalPointCloud_grpc0Response;
struct getLocalPointCloud_grpc0ResponseDefaultTypeInternal;
extern getLocalPointCloud_grpc0ResponseDefaultTypeInternal _getLocalPointCloud_grpc0Response_default_instance_;
class getLocalPointCloud_grpc1Request;
struct getLocalPointCloud_grpc1RequestDefaultTypeInternal;
extern getLocalPointCloud_grpc1RequestDefaultTypeInternal _getLocalPointCloud_grpc1Request_default_instance_;
class getLocalPointCloud_grpc1Response;
struct getLocalPointCloud_grpc1ResponseDefaultTypeInternal;
extern getLocalPointCloud_grpc1ResponseDefaultTypeInternal _getLocalPointCloud_grpc1Response_default_instance_;
class getMapRequest;
struct getMapRequestDefaultTypeInternal;
extern getMapRequestDefaultTypeInternal _getMapRequest_default_instance_;
class getMapResponse;
struct getMapResponseDefaultTypeInternal;
extern getMapResponseDefaultTypeInternal _getMapResponse_default_instance_;
class getSubmapRequest;
struct getSubmapRequestDefaultTypeInternal;
extern getSubmapRequestDefaultTypeInternal _getSubmapRequest_default_instance_;
class getSubmapResponse;
struct getSubmapResponseDefaultTypeInternal;
extern getSubmapResponseDefaultTypeInternal _getSubmapResponse_default_instance_;
class keyframePruningRequest;
struct keyframePruningRequestDefaultTypeInternal;
extern keyframePruningRequestDefaultTypeInternal _keyframePruningRequest_default_instance_;
class keyframePruningResponse;
struct keyframePruningResponseDefaultTypeInternal;
extern keyframePruningResponseDefaultTypeInternal _keyframePruningResponse_default_instance_;
class loadFromFileRequest;
struct loadFromFileRequestDefaultTypeInternal;
extern loadFromFileRequestDefaultTypeInternal _loadFromFileRequest_default_instance_;
class loadFromFileResponse;
struct loadFromFileResponseDefaultTypeInternal;
extern loadFromFileResponseDefaultTypeInternal _loadFromFileResponse_default_instance_;
class pointCloudPruningRequest;
struct pointCloudPruningRequestDefaultTypeInternal;
extern pointCloudPruningRequestDefaultTypeInternal _pointCloudPruningRequest_default_instance_;
class pointCloudPruningResponse;
struct pointCloudPruningResponseDefaultTypeInternal;
extern pointCloudPruningResponseDefaultTypeInternal _pointCloudPruningResponse_default_instance_;
class removeCameraParametersRequest;
struct removeCameraParametersRequestDefaultTypeInternal;
extern removeCameraParametersRequestDefaultTypeInternal _removeCameraParametersRequest_default_instance_;
class removeCameraParametersResponse;
struct removeCameraParametersResponseDefaultTypeInternal;
extern removeCameraParametersResponseDefaultTypeInternal _removeCameraParametersResponse_default_instance_;
class removeCloudPointRequest;
struct removeCloudPointRequestDefaultTypeInternal;
extern removeCloudPointRequestDefaultTypeInternal _removeCloudPointRequest_default_instance_;
class removeCloudPointResponse;
struct removeCloudPointResponseDefaultTypeInternal;
extern removeCloudPointResponseDefaultTypeInternal _removeCloudPointResponse_default_instance_;
class removeKeyframeRequest;
struct removeKeyframeRequestDefaultTypeInternal;
extern removeKeyframeRequestDefaultTypeInternal _removeKeyframeRequest_default_instance_;
class removeKeyframeResponse;
struct removeKeyframeResponseDefaultTypeInternal;
extern removeKeyframeResponseDefaultTypeInternal _removeKeyframeResponse_default_instance_;
class saveToFileRequest;
struct saveToFileRequestDefaultTypeInternal;
extern saveToFileRequestDefaultTypeInternal _saveToFileRequest_default_instance_;
class saveToFileResponse;
struct saveToFileResponseDefaultTypeInternal;
extern saveToFileResponseDefaultTypeInternal _saveToFileResponse_default_instance_;
class setMapRequest;
struct setMapRequestDefaultTypeInternal;
extern setMapRequestDefaultTypeInternal _setMapRequest_default_instance_;
class setMapResponse;
struct setMapResponseDefaultTypeInternal;
extern setMapResponseDefaultTypeInternal _setMapResponse_default_instance_;
class visibilityPruningRequest;
struct visibilityPruningRequestDefaultTypeInternal;
extern visibilityPruningRequestDefaultTypeInternal _visibilityPruningRequest_default_instance_;
class visibilityPruningResponse;
struct visibilityPruningResponseDefaultTypeInternal;
extern visibilityPruningResponseDefaultTypeInternal _visibilityPruningResponse_default_instance_;
}  // namespace grpcIMapManager
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIMapManager::addCameraParametersRequest* Arena::CreateMaybeMessage<::grpcIMapManager::addCameraParametersRequest>(Arena*);
template<> ::grpcIMapManager::addCameraParametersResponse* Arena::CreateMaybeMessage<::grpcIMapManager::addCameraParametersResponse>(Arena*);
template<> ::grpcIMapManager::addCloudPointRequest* Arena::CreateMaybeMessage<::grpcIMapManager::addCloudPointRequest>(Arena*);
template<> ::grpcIMapManager::addCloudPointResponse* Arena::CreateMaybeMessage<::grpcIMapManager::addCloudPointResponse>(Arena*);
template<> ::grpcIMapManager::addKeyframeRequest* Arena::CreateMaybeMessage<::grpcIMapManager::addKeyframeRequest>(Arena*);
template<> ::grpcIMapManager::addKeyframeResponse* Arena::CreateMaybeMessage<::grpcIMapManager::addKeyframeResponse>(Arena*);
template<> ::grpcIMapManager::deleteFileRequest* Arena::CreateMaybeMessage<::grpcIMapManager::deleteFileRequest>(Arena*);
template<> ::grpcIMapManager::deleteFileResponse* Arena::CreateMaybeMessage<::grpcIMapManager::deleteFileResponse>(Arena*);
template<> ::grpcIMapManager::getCameraParameters_grpc0Request* Arena::CreateMaybeMessage<::grpcIMapManager::getCameraParameters_grpc0Request>(Arena*);
template<> ::grpcIMapManager::getCameraParameters_grpc0Response* Arena::CreateMaybeMessage<::grpcIMapManager::getCameraParameters_grpc0Response>(Arena*);
template<> ::grpcIMapManager::getCameraParameters_grpc1Request* Arena::CreateMaybeMessage<::grpcIMapManager::getCameraParameters_grpc1Request>(Arena*);
template<> ::grpcIMapManager::getCameraParameters_grpc1Response* Arena::CreateMaybeMessage<::grpcIMapManager::getCameraParameters_grpc1Response>(Arena*);
template<> ::grpcIMapManager::getLocalPointCloud_grpc0Request* Arena::CreateMaybeMessage<::grpcIMapManager::getLocalPointCloud_grpc0Request>(Arena*);
template<> ::grpcIMapManager::getLocalPointCloud_grpc0Response* Arena::CreateMaybeMessage<::grpcIMapManager::getLocalPointCloud_grpc0Response>(Arena*);
template<> ::grpcIMapManager::getLocalPointCloud_grpc1Request* Arena::CreateMaybeMessage<::grpcIMapManager::getLocalPointCloud_grpc1Request>(Arena*);
template<> ::grpcIMapManager::getLocalPointCloud_grpc1Response* Arena::CreateMaybeMessage<::grpcIMapManager::getLocalPointCloud_grpc1Response>(Arena*);
template<> ::grpcIMapManager::getMapRequest* Arena::CreateMaybeMessage<::grpcIMapManager::getMapRequest>(Arena*);
template<> ::grpcIMapManager::getMapResponse* Arena::CreateMaybeMessage<::grpcIMapManager::getMapResponse>(Arena*);
template<> ::grpcIMapManager::getSubmapRequest* Arena::CreateMaybeMessage<::grpcIMapManager::getSubmapRequest>(Arena*);
template<> ::grpcIMapManager::getSubmapResponse* Arena::CreateMaybeMessage<::grpcIMapManager::getSubmapResponse>(Arena*);
template<> ::grpcIMapManager::keyframePruningRequest* Arena::CreateMaybeMessage<::grpcIMapManager::keyframePruningRequest>(Arena*);
template<> ::grpcIMapManager::keyframePruningResponse* Arena::CreateMaybeMessage<::grpcIMapManager::keyframePruningResponse>(Arena*);
template<> ::grpcIMapManager::loadFromFileRequest* Arena::CreateMaybeMessage<::grpcIMapManager::loadFromFileRequest>(Arena*);
template<> ::grpcIMapManager::loadFromFileResponse* Arena::CreateMaybeMessage<::grpcIMapManager::loadFromFileResponse>(Arena*);
template<> ::grpcIMapManager::pointCloudPruningRequest* Arena::CreateMaybeMessage<::grpcIMapManager::pointCloudPruningRequest>(Arena*);
template<> ::grpcIMapManager::pointCloudPruningResponse* Arena::CreateMaybeMessage<::grpcIMapManager::pointCloudPruningResponse>(Arena*);
template<> ::grpcIMapManager::removeCameraParametersRequest* Arena::CreateMaybeMessage<::grpcIMapManager::removeCameraParametersRequest>(Arena*);
template<> ::grpcIMapManager::removeCameraParametersResponse* Arena::CreateMaybeMessage<::grpcIMapManager::removeCameraParametersResponse>(Arena*);
template<> ::grpcIMapManager::removeCloudPointRequest* Arena::CreateMaybeMessage<::grpcIMapManager::removeCloudPointRequest>(Arena*);
template<> ::grpcIMapManager::removeCloudPointResponse* Arena::CreateMaybeMessage<::grpcIMapManager::removeCloudPointResponse>(Arena*);
template<> ::grpcIMapManager::removeKeyframeRequest* Arena::CreateMaybeMessage<::grpcIMapManager::removeKeyframeRequest>(Arena*);
template<> ::grpcIMapManager::removeKeyframeResponse* Arena::CreateMaybeMessage<::grpcIMapManager::removeKeyframeResponse>(Arena*);
template<> ::grpcIMapManager::saveToFileRequest* Arena::CreateMaybeMessage<::grpcIMapManager::saveToFileRequest>(Arena*);
template<> ::grpcIMapManager::saveToFileResponse* Arena::CreateMaybeMessage<::grpcIMapManager::saveToFileResponse>(Arena*);
template<> ::grpcIMapManager::setMapRequest* Arena::CreateMaybeMessage<::grpcIMapManager::setMapRequest>(Arena*);
template<> ::grpcIMapManager::setMapResponse* Arena::CreateMaybeMessage<::grpcIMapManager::setMapResponse>(Arena*);
template<> ::grpcIMapManager::visibilityPruningRequest* Arena::CreateMaybeMessage<::grpcIMapManager::visibilityPruningRequest>(Arena*);
template<> ::grpcIMapManager::visibilityPruningResponse* Arena::CreateMaybeMessage<::grpcIMapManager::visibilityPruningResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIMapManager {

// ===================================================================

class setMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.setMapRequest) */ {
 public:
  inline setMapRequest() : setMapRequest(nullptr) {}
  ~setMapRequest() override;
  explicit PROTOBUF_CONSTEXPR setMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapRequest(const setMapRequest& from);
  setMapRequest(setMapRequest&& from) noexcept
    : setMapRequest() {
    *this = ::std::move(from);
  }

  inline setMapRequest& operator=(const setMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapRequest& operator=(setMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapRequest* internal_default_instance() {
    return reinterpret_cast<const setMapRequest*>(
               &_setMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setMapRequest& a, setMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setMapRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.setMapRequest";
  }
  protected:
  explicit setMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes map = 2;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.setMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class setMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.setMapResponse) */ {
 public:
  inline setMapResponse() : setMapResponse(nullptr) {}
  ~setMapResponse() override;
  explicit PROTOBUF_CONSTEXPR setMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapResponse(const setMapResponse& from);
  setMapResponse(setMapResponse&& from) noexcept
    : setMapResponse() {
    *this = ::std::move(from);
  }

  inline setMapResponse& operator=(const setMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapResponse& operator=(setMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapResponse* internal_default_instance() {
    return reinterpret_cast<const setMapResponse*>(
               &_setMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(setMapResponse& a, setMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setMapResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.setMapResponse";
  }
  protected:
  explicit setMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.setMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getMapRequest) */ {
 public:
  inline getMapRequest() : getMapRequest(nullptr) {}
  ~getMapRequest() override;
  explicit PROTOBUF_CONSTEXPR getMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapRequest(const getMapRequest& from);
  getMapRequest(getMapRequest&& from) noexcept
    : getMapRequest() {
    *this = ::std::move(from);
  }

  inline getMapRequest& operator=(const getMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapRequest& operator=(getMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapRequest* internal_default_instance() {
    return reinterpret_cast<const getMapRequest*>(
               &_getMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(getMapRequest& a, getMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getMapRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getMapRequest";
  }
  protected:
  explicit getMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes map = 2;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getMapResponse) */ {
 public:
  inline getMapResponse() : getMapResponse(nullptr) {}
  ~getMapResponse() override;
  explicit PROTOBUF_CONSTEXPR getMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapResponse(const getMapResponse& from);
  getMapResponse(getMapResponse&& from) noexcept
    : getMapResponse() {
    *this = ::std::move(from);
  }

  inline getMapResponse& operator=(const getMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapResponse& operator=(getMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapResponse* internal_default_instance() {
    return reinterpret_cast<const getMapResponse*>(
               &_getMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(getMapResponse& a, getMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getMapResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getMapResponse";
  }
  protected:
  explicit getMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes map = 1;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getSubmapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getSubmapRequest) */ {
 public:
  inline getSubmapRequest() : getSubmapRequest(nullptr) {}
  ~getSubmapRequest() override;
  explicit PROTOBUF_CONSTEXPR getSubmapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getSubmapRequest(const getSubmapRequest& from);
  getSubmapRequest(getSubmapRequest&& from) noexcept
    : getSubmapRequest() {
    *this = ::std::move(from);
  }

  inline getSubmapRequest& operator=(const getSubmapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getSubmapRequest& operator=(getSubmapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getSubmapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getSubmapRequest* internal_default_instance() {
    return reinterpret_cast<const getSubmapRequest*>(
               &_getSubmapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getSubmapRequest& a, getSubmapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getSubmapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getSubmapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getSubmapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getSubmapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getSubmapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getSubmapRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getSubmapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getSubmapRequest";
  }
  protected:
  explicit getSubmapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmapFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kIdCenteredKeyframeFieldNumber = 2,
    kNbKeyframesFieldNumber = 3,
  };
  // bytes submap = 4;
  void clear_submap();
  const std::string& submap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_submap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_submap();
  PROTOBUF_NODISCARD std::string* release_submap();
  void set_allocated_submap(std::string* submap);
  private:
  const std::string& _internal_submap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_submap(const std::string& value);
  std::string* _internal_mutable_submap();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // uint32 idCenteredKeyframe = 2;
  void clear_idcenteredkeyframe();
  uint32_t idcenteredkeyframe() const;
  void set_idcenteredkeyframe(uint32_t value);
  private:
  uint32_t _internal_idcenteredkeyframe() const;
  void _internal_set_idcenteredkeyframe(uint32_t value);
  public:

  // uint32 nbKeyframes = 3;
  void clear_nbkeyframes();
  uint32_t nbkeyframes() const;
  void set_nbkeyframes(uint32_t value);
  private:
  uint32_t _internal_nbkeyframes() const;
  void _internal_set_nbkeyframes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getSubmapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submap_;
  int32_t grpcservercompressionformat_;
  uint32_t idcenteredkeyframe_;
  uint32_t nbkeyframes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getSubmapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getSubmapResponse) */ {
 public:
  inline getSubmapResponse() : getSubmapResponse(nullptr) {}
  ~getSubmapResponse() override;
  explicit PROTOBUF_CONSTEXPR getSubmapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getSubmapResponse(const getSubmapResponse& from);
  getSubmapResponse(getSubmapResponse&& from) noexcept
    : getSubmapResponse() {
    *this = ::std::move(from);
  }

  inline getSubmapResponse& operator=(const getSubmapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getSubmapResponse& operator=(getSubmapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getSubmapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getSubmapResponse* internal_default_instance() {
    return reinterpret_cast<const getSubmapResponse*>(
               &_getSubmapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getSubmapResponse& a, getSubmapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getSubmapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getSubmapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getSubmapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getSubmapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getSubmapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getSubmapResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getSubmapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getSubmapResponse";
  }
  protected:
  explicit getSubmapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmapFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes submap = 1;
  void clear_submap();
  const std::string& submap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_submap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_submap();
  PROTOBUF_NODISCARD std::string* release_submap();
  void set_allocated_submap(std::string* submap);
  private:
  const std::string& _internal_submap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_submap(const std::string& value);
  std::string* _internal_mutable_submap();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getSubmapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submap_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getLocalPointCloud_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getLocalPointCloud_grpc0Request) */ {
 public:
  inline getLocalPointCloud_grpc0Request() : getLocalPointCloud_grpc0Request(nullptr) {}
  ~getLocalPointCloud_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR getLocalPointCloud_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getLocalPointCloud_grpc0Request(const getLocalPointCloud_grpc0Request& from);
  getLocalPointCloud_grpc0Request(getLocalPointCloud_grpc0Request&& from) noexcept
    : getLocalPointCloud_grpc0Request() {
    *this = ::std::move(from);
  }

  inline getLocalPointCloud_grpc0Request& operator=(const getLocalPointCloud_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline getLocalPointCloud_grpc0Request& operator=(getLocalPointCloud_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getLocalPointCloud_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const getLocalPointCloud_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const getLocalPointCloud_grpc0Request*>(
               &_getLocalPointCloud_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(getLocalPointCloud_grpc0Request& a, getLocalPointCloud_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(getLocalPointCloud_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getLocalPointCloud_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getLocalPointCloud_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getLocalPointCloud_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getLocalPointCloud_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getLocalPointCloud_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getLocalPointCloud_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getLocalPointCloud_grpc0Request";
  }
  protected:
  explicit getLocalPointCloud_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 2,
    kLocalPointCloudFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes keyframes = 2;
  void clear_keyframes();
  const std::string& keyframes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframes();
  PROTOBUF_NODISCARD std::string* release_keyframes();
  void set_allocated_keyframes(std::string* keyframes);
  private:
  const std::string& _internal_keyframes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframes(const std::string& value);
  std::string* _internal_mutable_keyframes();
  public:

  // bytes localPointCloud = 3;
  void clear_localpointcloud();
  const std::string& localpointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localpointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localpointcloud();
  PROTOBUF_NODISCARD std::string* release_localpointcloud();
  void set_allocated_localpointcloud(std::string* localpointcloud);
  private:
  const std::string& _internal_localpointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localpointcloud(const std::string& value);
  std::string* _internal_mutable_localpointcloud();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getLocalPointCloud_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localpointcloud_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getLocalPointCloud_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getLocalPointCloud_grpc0Response) */ {
 public:
  inline getLocalPointCloud_grpc0Response() : getLocalPointCloud_grpc0Response(nullptr) {}
  ~getLocalPointCloud_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR getLocalPointCloud_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getLocalPointCloud_grpc0Response(const getLocalPointCloud_grpc0Response& from);
  getLocalPointCloud_grpc0Response(getLocalPointCloud_grpc0Response&& from) noexcept
    : getLocalPointCloud_grpc0Response() {
    *this = ::std::move(from);
  }

  inline getLocalPointCloud_grpc0Response& operator=(const getLocalPointCloud_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline getLocalPointCloud_grpc0Response& operator=(getLocalPointCloud_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getLocalPointCloud_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const getLocalPointCloud_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const getLocalPointCloud_grpc0Response*>(
               &_getLocalPointCloud_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(getLocalPointCloud_grpc0Response& a, getLocalPointCloud_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(getLocalPointCloud_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getLocalPointCloud_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getLocalPointCloud_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getLocalPointCloud_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getLocalPointCloud_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getLocalPointCloud_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getLocalPointCloud_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getLocalPointCloud_grpc0Response";
  }
  protected:
  explicit getLocalPointCloud_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalPointCloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes localPointCloud = 1;
  void clear_localpointcloud();
  const std::string& localpointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localpointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localpointcloud();
  PROTOBUF_NODISCARD std::string* release_localpointcloud();
  void set_allocated_localpointcloud(std::string* localpointcloud);
  private:
  const std::string& _internal_localpointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localpointcloud(const std::string& value);
  std::string* _internal_mutable_localpointcloud();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getLocalPointCloud_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localpointcloud_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getLocalPointCloud_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getLocalPointCloud_grpc1Request) */ {
 public:
  inline getLocalPointCloud_grpc1Request() : getLocalPointCloud_grpc1Request(nullptr) {}
  ~getLocalPointCloud_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR getLocalPointCloud_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getLocalPointCloud_grpc1Request(const getLocalPointCloud_grpc1Request& from);
  getLocalPointCloud_grpc1Request(getLocalPointCloud_grpc1Request&& from) noexcept
    : getLocalPointCloud_grpc1Request() {
    *this = ::std::move(from);
  }

  inline getLocalPointCloud_grpc1Request& operator=(const getLocalPointCloud_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline getLocalPointCloud_grpc1Request& operator=(getLocalPointCloud_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getLocalPointCloud_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const getLocalPointCloud_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const getLocalPointCloud_grpc1Request*>(
               &_getLocalPointCloud_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(getLocalPointCloud_grpc1Request& a, getLocalPointCloud_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(getLocalPointCloud_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getLocalPointCloud_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getLocalPointCloud_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getLocalPointCloud_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getLocalPointCloud_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getLocalPointCloud_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getLocalPointCloud_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getLocalPointCloud_grpc1Request";
  }
  protected:
  explicit getLocalPointCloud_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 2,
    kLocalPointCloudFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kMinWeightNeighborFieldNumber = 3,
  };
  // bytes keyframe = 2;
  void clear_keyframe();
  const std::string& keyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframe();
  PROTOBUF_NODISCARD std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // bytes localPointCloud = 4;
  void clear_localpointcloud();
  const std::string& localpointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localpointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localpointcloud();
  PROTOBUF_NODISCARD std::string* release_localpointcloud();
  void set_allocated_localpointcloud(std::string* localpointcloud);
  private:
  const std::string& _internal_localpointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localpointcloud(const std::string& value);
  std::string* _internal_mutable_localpointcloud();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // float minWeightNeighbor = 3;
  void clear_minweightneighbor();
  float minweightneighbor() const;
  void set_minweightneighbor(float value);
  private:
  float _internal_minweightneighbor() const;
  void _internal_set_minweightneighbor(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getLocalPointCloud_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localpointcloud_;
  int32_t grpcservercompressionformat_;
  float minweightneighbor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getLocalPointCloud_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getLocalPointCloud_grpc1Response) */ {
 public:
  inline getLocalPointCloud_grpc1Response() : getLocalPointCloud_grpc1Response(nullptr) {}
  ~getLocalPointCloud_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR getLocalPointCloud_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getLocalPointCloud_grpc1Response(const getLocalPointCloud_grpc1Response& from);
  getLocalPointCloud_grpc1Response(getLocalPointCloud_grpc1Response&& from) noexcept
    : getLocalPointCloud_grpc1Response() {
    *this = ::std::move(from);
  }

  inline getLocalPointCloud_grpc1Response& operator=(const getLocalPointCloud_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline getLocalPointCloud_grpc1Response& operator=(getLocalPointCloud_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getLocalPointCloud_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const getLocalPointCloud_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const getLocalPointCloud_grpc1Response*>(
               &_getLocalPointCloud_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(getLocalPointCloud_grpc1Response& a, getLocalPointCloud_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(getLocalPointCloud_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getLocalPointCloud_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getLocalPointCloud_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getLocalPointCloud_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getLocalPointCloud_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getLocalPointCloud_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getLocalPointCloud_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getLocalPointCloud_grpc1Response";
  }
  protected:
  explicit getLocalPointCloud_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalPointCloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes localPointCloud = 1;
  void clear_localpointcloud();
  const std::string& localpointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localpointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localpointcloud();
  PROTOBUF_NODISCARD std::string* release_localpointcloud();
  void set_allocated_localpointcloud(std::string* localpointcloud);
  private:
  const std::string& _internal_localpointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localpointcloud(const std::string& value);
  std::string* _internal_mutable_localpointcloud();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getLocalPointCloud_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localpointcloud_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class addCloudPointRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.addCloudPointRequest) */ {
 public:
  inline addCloudPointRequest() : addCloudPointRequest(nullptr) {}
  ~addCloudPointRequest() override;
  explicit PROTOBUF_CONSTEXPR addCloudPointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addCloudPointRequest(const addCloudPointRequest& from);
  addCloudPointRequest(addCloudPointRequest&& from) noexcept
    : addCloudPointRequest() {
    *this = ::std::move(from);
  }

  inline addCloudPointRequest& operator=(const addCloudPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addCloudPointRequest& operator=(addCloudPointRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addCloudPointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addCloudPointRequest* internal_default_instance() {
    return reinterpret_cast<const addCloudPointRequest*>(
               &_addCloudPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(addCloudPointRequest& a, addCloudPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addCloudPointRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addCloudPointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addCloudPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addCloudPointRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addCloudPointRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addCloudPointRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addCloudPointRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.addCloudPointRequest";
  }
  protected:
  explicit addCloudPointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudPointFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes cloudPoint = 2;
  void clear_cloudpoint();
  const std::string& cloudpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cloudpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cloudpoint();
  PROTOBUF_NODISCARD std::string* release_cloudpoint();
  void set_allocated_cloudpoint(std::string* cloudpoint);
  private:
  const std::string& _internal_cloudpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cloudpoint(const std::string& value);
  std::string* _internal_mutable_cloudpoint();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.addCloudPointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudpoint_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class addCloudPointResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.addCloudPointResponse) */ {
 public:
  inline addCloudPointResponse() : addCloudPointResponse(nullptr) {}
  ~addCloudPointResponse() override;
  explicit PROTOBUF_CONSTEXPR addCloudPointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addCloudPointResponse(const addCloudPointResponse& from);
  addCloudPointResponse(addCloudPointResponse&& from) noexcept
    : addCloudPointResponse() {
    *this = ::std::move(from);
  }

  inline addCloudPointResponse& operator=(const addCloudPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addCloudPointResponse& operator=(addCloudPointResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addCloudPointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const addCloudPointResponse* internal_default_instance() {
    return reinterpret_cast<const addCloudPointResponse*>(
               &_addCloudPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(addCloudPointResponse& a, addCloudPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addCloudPointResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addCloudPointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addCloudPointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addCloudPointResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addCloudPointResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addCloudPointResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addCloudPointResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.addCloudPointResponse";
  }
  protected:
  explicit addCloudPointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.addCloudPointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeCloudPointRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.removeCloudPointRequest) */ {
 public:
  inline removeCloudPointRequest() : removeCloudPointRequest(nullptr) {}
  ~removeCloudPointRequest() override;
  explicit PROTOBUF_CONSTEXPR removeCloudPointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeCloudPointRequest(const removeCloudPointRequest& from);
  removeCloudPointRequest(removeCloudPointRequest&& from) noexcept
    : removeCloudPointRequest() {
    *this = ::std::move(from);
  }

  inline removeCloudPointRequest& operator=(const removeCloudPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeCloudPointRequest& operator=(removeCloudPointRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeCloudPointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeCloudPointRequest* internal_default_instance() {
    return reinterpret_cast<const removeCloudPointRequest*>(
               &_removeCloudPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(removeCloudPointRequest& a, removeCloudPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(removeCloudPointRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeCloudPointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeCloudPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeCloudPointRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeCloudPointRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const removeCloudPointRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeCloudPointRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.removeCloudPointRequest";
  }
  protected:
  explicit removeCloudPointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudPointFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes cloudPoint = 2;
  void clear_cloudpoint();
  const std::string& cloudpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cloudpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cloudpoint();
  PROTOBUF_NODISCARD std::string* release_cloudpoint();
  void set_allocated_cloudpoint(std::string* cloudpoint);
  private:
  const std::string& _internal_cloudpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cloudpoint(const std::string& value);
  std::string* _internal_mutable_cloudpoint();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.removeCloudPointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudpoint_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeCloudPointResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.removeCloudPointResponse) */ {
 public:
  inline removeCloudPointResponse() : removeCloudPointResponse(nullptr) {}
  ~removeCloudPointResponse() override;
  explicit PROTOBUF_CONSTEXPR removeCloudPointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeCloudPointResponse(const removeCloudPointResponse& from);
  removeCloudPointResponse(removeCloudPointResponse&& from) noexcept
    : removeCloudPointResponse() {
    *this = ::std::move(from);
  }

  inline removeCloudPointResponse& operator=(const removeCloudPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeCloudPointResponse& operator=(removeCloudPointResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeCloudPointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeCloudPointResponse* internal_default_instance() {
    return reinterpret_cast<const removeCloudPointResponse*>(
               &_removeCloudPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(removeCloudPointResponse& a, removeCloudPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(removeCloudPointResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeCloudPointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeCloudPointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeCloudPointResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeCloudPointResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const removeCloudPointResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeCloudPointResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.removeCloudPointResponse";
  }
  protected:
  explicit removeCloudPointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.removeCloudPointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class addKeyframeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.addKeyframeRequest) */ {
 public:
  inline addKeyframeRequest() : addKeyframeRequest(nullptr) {}
  ~addKeyframeRequest() override;
  explicit PROTOBUF_CONSTEXPR addKeyframeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addKeyframeRequest(const addKeyframeRequest& from);
  addKeyframeRequest(addKeyframeRequest&& from) noexcept
    : addKeyframeRequest() {
    *this = ::std::move(from);
  }

  inline addKeyframeRequest& operator=(const addKeyframeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addKeyframeRequest& operator=(addKeyframeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addKeyframeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addKeyframeRequest* internal_default_instance() {
    return reinterpret_cast<const addKeyframeRequest*>(
               &_addKeyframeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(addKeyframeRequest& a, addKeyframeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addKeyframeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addKeyframeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addKeyframeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addKeyframeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addKeyframeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addKeyframeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addKeyframeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.addKeyframeRequest";
  }
  protected:
  explicit addKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes keyframe = 2;
  void clear_keyframe();
  const std::string& keyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframe();
  PROTOBUF_NODISCARD std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.addKeyframeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class addKeyframeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.addKeyframeResponse) */ {
 public:
  inline addKeyframeResponse() : addKeyframeResponse(nullptr) {}
  ~addKeyframeResponse() override;
  explicit PROTOBUF_CONSTEXPR addKeyframeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addKeyframeResponse(const addKeyframeResponse& from);
  addKeyframeResponse(addKeyframeResponse&& from) noexcept
    : addKeyframeResponse() {
    *this = ::std::move(from);
  }

  inline addKeyframeResponse& operator=(const addKeyframeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addKeyframeResponse& operator=(addKeyframeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addKeyframeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const addKeyframeResponse* internal_default_instance() {
    return reinterpret_cast<const addKeyframeResponse*>(
               &_addKeyframeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(addKeyframeResponse& a, addKeyframeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addKeyframeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addKeyframeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addKeyframeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addKeyframeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addKeyframeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addKeyframeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addKeyframeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.addKeyframeResponse";
  }
  protected:
  explicit addKeyframeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.addKeyframeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeKeyframeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.removeKeyframeRequest) */ {
 public:
  inline removeKeyframeRequest() : removeKeyframeRequest(nullptr) {}
  ~removeKeyframeRequest() override;
  explicit PROTOBUF_CONSTEXPR removeKeyframeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeKeyframeRequest(const removeKeyframeRequest& from);
  removeKeyframeRequest(removeKeyframeRequest&& from) noexcept
    : removeKeyframeRequest() {
    *this = ::std::move(from);
  }

  inline removeKeyframeRequest& operator=(const removeKeyframeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeKeyframeRequest& operator=(removeKeyframeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeKeyframeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeKeyframeRequest* internal_default_instance() {
    return reinterpret_cast<const removeKeyframeRequest*>(
               &_removeKeyframeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(removeKeyframeRequest& a, removeKeyframeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(removeKeyframeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeKeyframeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeKeyframeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeKeyframeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeKeyframeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const removeKeyframeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeKeyframeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.removeKeyframeRequest";
  }
  protected:
  explicit removeKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes keyframe = 2;
  void clear_keyframe();
  const std::string& keyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframe();
  PROTOBUF_NODISCARD std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.removeKeyframeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeKeyframeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.removeKeyframeResponse) */ {
 public:
  inline removeKeyframeResponse() : removeKeyframeResponse(nullptr) {}
  ~removeKeyframeResponse() override;
  explicit PROTOBUF_CONSTEXPR removeKeyframeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeKeyframeResponse(const removeKeyframeResponse& from);
  removeKeyframeResponse(removeKeyframeResponse&& from) noexcept
    : removeKeyframeResponse() {
    *this = ::std::move(from);
  }

  inline removeKeyframeResponse& operator=(const removeKeyframeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeKeyframeResponse& operator=(removeKeyframeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeKeyframeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeKeyframeResponse* internal_default_instance() {
    return reinterpret_cast<const removeKeyframeResponse*>(
               &_removeKeyframeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(removeKeyframeResponse& a, removeKeyframeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(removeKeyframeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeKeyframeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeKeyframeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeKeyframeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeKeyframeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const removeKeyframeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeKeyframeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.removeKeyframeResponse";
  }
  protected:
  explicit removeKeyframeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.removeKeyframeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class addCameraParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.addCameraParametersRequest) */ {
 public:
  inline addCameraParametersRequest() : addCameraParametersRequest(nullptr) {}
  ~addCameraParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR addCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addCameraParametersRequest(const addCameraParametersRequest& from);
  addCameraParametersRequest(addCameraParametersRequest&& from) noexcept
    : addCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline addCameraParametersRequest& operator=(const addCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addCameraParametersRequest& operator=(addCameraParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const addCameraParametersRequest*>(
               &_addCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(addCameraParametersRequest& a, addCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addCameraParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addCameraParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addCameraParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addCameraParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addCameraParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.addCameraParametersRequest";
  }
  protected:
  explicit addCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParametersFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes cameraParameters = 2;
  void clear_cameraparameters();
  const std::string& cameraparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparameters();
  PROTOBUF_NODISCARD std::string* release_cameraparameters();
  void set_allocated_cameraparameters(std::string* cameraparameters);
  private:
  const std::string& _internal_cameraparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparameters(const std::string& value);
  std::string* _internal_mutable_cameraparameters();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.addCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparameters_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class addCameraParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.addCameraParametersResponse) */ {
 public:
  inline addCameraParametersResponse() : addCameraParametersResponse(nullptr) {}
  ~addCameraParametersResponse() override;
  explicit PROTOBUF_CONSTEXPR addCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addCameraParametersResponse(const addCameraParametersResponse& from);
  addCameraParametersResponse(addCameraParametersResponse&& from) noexcept
    : addCameraParametersResponse() {
    *this = ::std::move(from);
  }

  inline addCameraParametersResponse& operator=(const addCameraParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addCameraParametersResponse& operator=(addCameraParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addCameraParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const addCameraParametersResponse* internal_default_instance() {
    return reinterpret_cast<const addCameraParametersResponse*>(
               &_addCameraParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(addCameraParametersResponse& a, addCameraParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addCameraParametersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addCameraParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addCameraParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addCameraParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addCameraParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addCameraParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addCameraParametersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.addCameraParametersResponse";
  }
  protected:
  explicit addCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.addCameraParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeCameraParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.removeCameraParametersRequest) */ {
 public:
  inline removeCameraParametersRequest() : removeCameraParametersRequest(nullptr) {}
  ~removeCameraParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR removeCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeCameraParametersRequest(const removeCameraParametersRequest& from);
  removeCameraParametersRequest(removeCameraParametersRequest&& from) noexcept
    : removeCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline removeCameraParametersRequest& operator=(const removeCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeCameraParametersRequest& operator=(removeCameraParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const removeCameraParametersRequest*>(
               &_removeCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(removeCameraParametersRequest& a, removeCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(removeCameraParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeCameraParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeCameraParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const removeCameraParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeCameraParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.removeCameraParametersRequest";
  }
  protected:
  explicit removeCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParametersFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes cameraParameters = 2;
  void clear_cameraparameters();
  const std::string& cameraparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparameters();
  PROTOBUF_NODISCARD std::string* release_cameraparameters();
  void set_allocated_cameraparameters(std::string* cameraparameters);
  private:
  const std::string& _internal_cameraparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparameters(const std::string& value);
  std::string* _internal_mutable_cameraparameters();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.removeCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparameters_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeCameraParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.removeCameraParametersResponse) */ {
 public:
  inline removeCameraParametersResponse() : removeCameraParametersResponse(nullptr) {}
  ~removeCameraParametersResponse() override;
  explicit PROTOBUF_CONSTEXPR removeCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeCameraParametersResponse(const removeCameraParametersResponse& from);
  removeCameraParametersResponse(removeCameraParametersResponse&& from) noexcept
    : removeCameraParametersResponse() {
    *this = ::std::move(from);
  }

  inline removeCameraParametersResponse& operator=(const removeCameraParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeCameraParametersResponse& operator=(removeCameraParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeCameraParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeCameraParametersResponse* internal_default_instance() {
    return reinterpret_cast<const removeCameraParametersResponse*>(
               &_removeCameraParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(removeCameraParametersResponse& a, removeCameraParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(removeCameraParametersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeCameraParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeCameraParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeCameraParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeCameraParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const removeCameraParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeCameraParametersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.removeCameraParametersResponse";
  }
  protected:
  explicit removeCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.removeCameraParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParameters_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getCameraParameters_grpc0Request) */ {
 public:
  inline getCameraParameters_grpc0Request() : getCameraParameters_grpc0Request(nullptr) {}
  ~getCameraParameters_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR getCameraParameters_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParameters_grpc0Request(const getCameraParameters_grpc0Request& from);
  getCameraParameters_grpc0Request(getCameraParameters_grpc0Request&& from) noexcept
    : getCameraParameters_grpc0Request() {
    *this = ::std::move(from);
  }

  inline getCameraParameters_grpc0Request& operator=(const getCameraParameters_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParameters_grpc0Request& operator=(getCameraParameters_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCameraParameters_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParameters_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const getCameraParameters_grpc0Request*>(
               &_getCameraParameters_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(getCameraParameters_grpc0Request& a, getCameraParameters_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParameters_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParameters_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getCameraParameters_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getCameraParameters_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCameraParameters_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getCameraParameters_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParameters_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getCameraParameters_grpc0Request";
  }
  protected:
  explicit getCameraParameters_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParametersFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // bytes cameraParameters = 3;
  void clear_cameraparameters();
  const std::string& cameraparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparameters();
  PROTOBUF_NODISCARD std::string* release_cameraparameters();
  void set_allocated_cameraparameters(std::string* cameraparameters);
  private:
  const std::string& _internal_cameraparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparameters(const std::string& value);
  std::string* _internal_mutable_cameraparameters();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // uint32 id = 2;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getCameraParameters_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparameters_;
  int32_t grpcservercompressionformat_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParameters_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getCameraParameters_grpc0Response) */ {
 public:
  inline getCameraParameters_grpc0Response() : getCameraParameters_grpc0Response(nullptr) {}
  ~getCameraParameters_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR getCameraParameters_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParameters_grpc0Response(const getCameraParameters_grpc0Response& from);
  getCameraParameters_grpc0Response(getCameraParameters_grpc0Response&& from) noexcept
    : getCameraParameters_grpc0Response() {
    *this = ::std::move(from);
  }

  inline getCameraParameters_grpc0Response& operator=(const getCameraParameters_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParameters_grpc0Response& operator=(getCameraParameters_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCameraParameters_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParameters_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const getCameraParameters_grpc0Response*>(
               &_getCameraParameters_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(getCameraParameters_grpc0Response& a, getCameraParameters_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParameters_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParameters_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getCameraParameters_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getCameraParameters_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCameraParameters_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getCameraParameters_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParameters_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getCameraParameters_grpc0Response";
  }
  protected:
  explicit getCameraParameters_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParametersFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes cameraParameters = 1;
  void clear_cameraparameters();
  const std::string& cameraparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparameters();
  PROTOBUF_NODISCARD std::string* release_cameraparameters();
  void set_allocated_cameraparameters(std::string* cameraparameters);
  private:
  const std::string& _internal_cameraparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparameters(const std::string& value);
  std::string* _internal_mutable_cameraparameters();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getCameraParameters_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparameters_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParameters_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getCameraParameters_grpc1Request) */ {
 public:
  inline getCameraParameters_grpc1Request() : getCameraParameters_grpc1Request(nullptr) {}
  ~getCameraParameters_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR getCameraParameters_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParameters_grpc1Request(const getCameraParameters_grpc1Request& from);
  getCameraParameters_grpc1Request(getCameraParameters_grpc1Request&& from) noexcept
    : getCameraParameters_grpc1Request() {
    *this = ::std::move(from);
  }

  inline getCameraParameters_grpc1Request& operator=(const getCameraParameters_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParameters_grpc1Request& operator=(getCameraParameters_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCameraParameters_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParameters_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const getCameraParameters_grpc1Request*>(
               &_getCameraParameters_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(getCameraParameters_grpc1Request& a, getCameraParameters_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParameters_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParameters_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getCameraParameters_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getCameraParameters_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCameraParameters_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getCameraParameters_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParameters_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getCameraParameters_grpc1Request";
  }
  protected:
  explicit getCameraParameters_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParametersFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // bytes cameraParameters = 3;
  void clear_cameraparameters();
  const std::string& cameraparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparameters();
  PROTOBUF_NODISCARD std::string* release_cameraparameters();
  void set_allocated_cameraparameters(std::string* cameraparameters);
  private:
  const std::string& _internal_cameraparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparameters(const std::string& value);
  std::string* _internal_mutable_cameraparameters();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // uint32 id = 2;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getCameraParameters_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparameters_;
  int32_t grpcservercompressionformat_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParameters_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getCameraParameters_grpc1Response) */ {
 public:
  inline getCameraParameters_grpc1Response() : getCameraParameters_grpc1Response(nullptr) {}
  ~getCameraParameters_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR getCameraParameters_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParameters_grpc1Response(const getCameraParameters_grpc1Response& from);
  getCameraParameters_grpc1Response(getCameraParameters_grpc1Response&& from) noexcept
    : getCameraParameters_grpc1Response() {
    *this = ::std::move(from);
  }

  inline getCameraParameters_grpc1Response& operator=(const getCameraParameters_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParameters_grpc1Response& operator=(getCameraParameters_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCameraParameters_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParameters_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const getCameraParameters_grpc1Response*>(
               &_getCameraParameters_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(getCameraParameters_grpc1Response& a, getCameraParameters_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParameters_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParameters_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getCameraParameters_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getCameraParameters_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCameraParameters_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getCameraParameters_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParameters_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getCameraParameters_grpc1Response";
  }
  protected:
  explicit getCameraParameters_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParametersFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes cameraParameters = 1;
  void clear_cameraparameters();
  const std::string& cameraparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparameters();
  PROTOBUF_NODISCARD std::string* release_cameraparameters();
  void set_allocated_cameraparameters(std::string* cameraparameters);
  private:
  const std::string& _internal_cameraparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparameters(const std::string& value);
  std::string* _internal_mutable_cameraparameters();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getCameraParameters_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparameters_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class pointCloudPruningRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.pointCloudPruningRequest) */ {
 public:
  inline pointCloudPruningRequest() : pointCloudPruningRequest(nullptr) {}
  ~pointCloudPruningRequest() override;
  explicit PROTOBUF_CONSTEXPR pointCloudPruningRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pointCloudPruningRequest(const pointCloudPruningRequest& from);
  pointCloudPruningRequest(pointCloudPruningRequest&& from) noexcept
    : pointCloudPruningRequest() {
    *this = ::std::move(from);
  }

  inline pointCloudPruningRequest& operator=(const pointCloudPruningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline pointCloudPruningRequest& operator=(pointCloudPruningRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pointCloudPruningRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const pointCloudPruningRequest* internal_default_instance() {
    return reinterpret_cast<const pointCloudPruningRequest*>(
               &_pointCloudPruningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(pointCloudPruningRequest& a, pointCloudPruningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(pointCloudPruningRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pointCloudPruningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pointCloudPruningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pointCloudPruningRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pointCloudPruningRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const pointCloudPruningRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pointCloudPruningRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.pointCloudPruningRequest";
  }
  protected:
  explicit pointCloudPruningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudPointsFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes cloudPoints = 2;
  void clear_cloudpoints();
  const std::string& cloudpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cloudpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cloudpoints();
  PROTOBUF_NODISCARD std::string* release_cloudpoints();
  void set_allocated_cloudpoints(std::string* cloudpoints);
  private:
  const std::string& _internal_cloudpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cloudpoints(const std::string& value);
  std::string* _internal_mutable_cloudpoints();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.pointCloudPruningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudpoints_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class pointCloudPruningResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.pointCloudPruningResponse) */ {
 public:
  inline pointCloudPruningResponse() : pointCloudPruningResponse(nullptr) {}
  ~pointCloudPruningResponse() override;
  explicit PROTOBUF_CONSTEXPR pointCloudPruningResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pointCloudPruningResponse(const pointCloudPruningResponse& from);
  pointCloudPruningResponse(pointCloudPruningResponse&& from) noexcept
    : pointCloudPruningResponse() {
    *this = ::std::move(from);
  }

  inline pointCloudPruningResponse& operator=(const pointCloudPruningResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline pointCloudPruningResponse& operator=(pointCloudPruningResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pointCloudPruningResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const pointCloudPruningResponse* internal_default_instance() {
    return reinterpret_cast<const pointCloudPruningResponse*>(
               &_pointCloudPruningResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(pointCloudPruningResponse& a, pointCloudPruningResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(pointCloudPruningResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pointCloudPruningResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pointCloudPruningResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pointCloudPruningResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pointCloudPruningResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const pointCloudPruningResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pointCloudPruningResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.pointCloudPruningResponse";
  }
  protected:
  explicit pointCloudPruningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.pointCloudPruningResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class keyframePruningRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.keyframePruningRequest) */ {
 public:
  inline keyframePruningRequest() : keyframePruningRequest(nullptr) {}
  ~keyframePruningRequest() override;
  explicit PROTOBUF_CONSTEXPR keyframePruningRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  keyframePruningRequest(const keyframePruningRequest& from);
  keyframePruningRequest(keyframePruningRequest&& from) noexcept
    : keyframePruningRequest() {
    *this = ::std::move(from);
  }

  inline keyframePruningRequest& operator=(const keyframePruningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline keyframePruningRequest& operator=(keyframePruningRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const keyframePruningRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const keyframePruningRequest* internal_default_instance() {
    return reinterpret_cast<const keyframePruningRequest*>(
               &_keyframePruningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(keyframePruningRequest& a, keyframePruningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(keyframePruningRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(keyframePruningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  keyframePruningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<keyframePruningRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const keyframePruningRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const keyframePruningRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(keyframePruningRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.keyframePruningRequest";
  }
  protected:
  explicit keyframePruningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes keyframes = 2;
  void clear_keyframes();
  const std::string& keyframes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframes();
  PROTOBUF_NODISCARD std::string* release_keyframes();
  void set_allocated_keyframes(std::string* keyframes);
  private:
  const std::string& _internal_keyframes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframes(const std::string& value);
  std::string* _internal_mutable_keyframes();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.keyframePruningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframes_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class keyframePruningResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.keyframePruningResponse) */ {
 public:
  inline keyframePruningResponse() : keyframePruningResponse(nullptr) {}
  ~keyframePruningResponse() override;
  explicit PROTOBUF_CONSTEXPR keyframePruningResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  keyframePruningResponse(const keyframePruningResponse& from);
  keyframePruningResponse(keyframePruningResponse&& from) noexcept
    : keyframePruningResponse() {
    *this = ::std::move(from);
  }

  inline keyframePruningResponse& operator=(const keyframePruningResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline keyframePruningResponse& operator=(keyframePruningResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const keyframePruningResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const keyframePruningResponse* internal_default_instance() {
    return reinterpret_cast<const keyframePruningResponse*>(
               &_keyframePruningResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(keyframePruningResponse& a, keyframePruningResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(keyframePruningResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(keyframePruningResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  keyframePruningResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<keyframePruningResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const keyframePruningResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const keyframePruningResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(keyframePruningResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.keyframePruningResponse";
  }
  protected:
  explicit keyframePruningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.keyframePruningResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class visibilityPruningRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.visibilityPruningRequest) */ {
 public:
  inline visibilityPruningRequest() : visibilityPruningRequest(nullptr) {}
  ~visibilityPruningRequest() override;
  explicit PROTOBUF_CONSTEXPR visibilityPruningRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  visibilityPruningRequest(const visibilityPruningRequest& from);
  visibilityPruningRequest(visibilityPruningRequest&& from) noexcept
    : visibilityPruningRequest() {
    *this = ::std::move(from);
  }

  inline visibilityPruningRequest& operator=(const visibilityPruningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline visibilityPruningRequest& operator=(visibilityPruningRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const visibilityPruningRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const visibilityPruningRequest* internal_default_instance() {
    return reinterpret_cast<const visibilityPruningRequest*>(
               &_visibilityPruningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(visibilityPruningRequest& a, visibilityPruningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(visibilityPruningRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(visibilityPruningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  visibilityPruningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<visibilityPruningRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const visibilityPruningRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const visibilityPruningRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(visibilityPruningRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.visibilityPruningRequest";
  }
  protected:
  explicit visibilityPruningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.visibilityPruningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class visibilityPruningResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.visibilityPruningResponse) */ {
 public:
  inline visibilityPruningResponse() : visibilityPruningResponse(nullptr) {}
  ~visibilityPruningResponse() override;
  explicit PROTOBUF_CONSTEXPR visibilityPruningResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  visibilityPruningResponse(const visibilityPruningResponse& from);
  visibilityPruningResponse(visibilityPruningResponse&& from) noexcept
    : visibilityPruningResponse() {
    *this = ::std::move(from);
  }

  inline visibilityPruningResponse& operator=(const visibilityPruningResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline visibilityPruningResponse& operator=(visibilityPruningResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const visibilityPruningResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const visibilityPruningResponse* internal_default_instance() {
    return reinterpret_cast<const visibilityPruningResponse*>(
               &_visibilityPruningResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(visibilityPruningResponse& a, visibilityPruningResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(visibilityPruningResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(visibilityPruningResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  visibilityPruningResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<visibilityPruningResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const visibilityPruningResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const visibilityPruningResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(visibilityPruningResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.visibilityPruningResponse";
  }
  protected:
  explicit visibilityPruningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.visibilityPruningResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.saveToFileRequest) */ {
 public:
  inline saveToFileRequest() : saveToFileRequest(nullptr) {}
  ~saveToFileRequest() override;
  explicit PROTOBUF_CONSTEXPR saveToFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileRequest(const saveToFileRequest& from);
  saveToFileRequest(saveToFileRequest&& from) noexcept
    : saveToFileRequest() {
    *this = ::std::move(from);
  }

  inline saveToFileRequest& operator=(const saveToFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileRequest& operator=(saveToFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const saveToFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileRequest* internal_default_instance() {
    return reinterpret_cast<const saveToFileRequest*>(
               &_saveToFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(saveToFileRequest& a, saveToFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  saveToFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<saveToFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const saveToFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const saveToFileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.saveToFileRequest";
  }
  protected:
  explicit saveToFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.saveToFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.saveToFileResponse) */ {
 public:
  inline saveToFileResponse() : saveToFileResponse(nullptr) {}
  ~saveToFileResponse() override;
  explicit PROTOBUF_CONSTEXPR saveToFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileResponse(const saveToFileResponse& from);
  saveToFileResponse(saveToFileResponse&& from) noexcept
    : saveToFileResponse() {
    *this = ::std::move(from);
  }

  inline saveToFileResponse& operator=(const saveToFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileResponse& operator=(saveToFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const saveToFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileResponse* internal_default_instance() {
    return reinterpret_cast<const saveToFileResponse*>(
               &_saveToFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(saveToFileResponse& a, saveToFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  saveToFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<saveToFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const saveToFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const saveToFileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.saveToFileResponse";
  }
  protected:
  explicit saveToFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.saveToFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.loadFromFileRequest) */ {
 public:
  inline loadFromFileRequest() : loadFromFileRequest(nullptr) {}
  ~loadFromFileRequest() override;
  explicit PROTOBUF_CONSTEXPR loadFromFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileRequest(const loadFromFileRequest& from);
  loadFromFileRequest(loadFromFileRequest&& from) noexcept
    : loadFromFileRequest() {
    *this = ::std::move(from);
  }

  inline loadFromFileRequest& operator=(const loadFromFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileRequest& operator=(loadFromFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loadFromFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileRequest* internal_default_instance() {
    return reinterpret_cast<const loadFromFileRequest*>(
               &_loadFromFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(loadFromFileRequest& a, loadFromFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  loadFromFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<loadFromFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loadFromFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const loadFromFileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.loadFromFileRequest";
  }
  protected:
  explicit loadFromFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.loadFromFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.loadFromFileResponse) */ {
 public:
  inline loadFromFileResponse() : loadFromFileResponse(nullptr) {}
  ~loadFromFileResponse() override;
  explicit PROTOBUF_CONSTEXPR loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileResponse(const loadFromFileResponse& from);
  loadFromFileResponse(loadFromFileResponse&& from) noexcept
    : loadFromFileResponse() {
    *this = ::std::move(from);
  }

  inline loadFromFileResponse& operator=(const loadFromFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileResponse& operator=(loadFromFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loadFromFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileResponse* internal_default_instance() {
    return reinterpret_cast<const loadFromFileResponse*>(
               &_loadFromFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(loadFromFileResponse& a, loadFromFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  loadFromFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<loadFromFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loadFromFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const loadFromFileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.loadFromFileResponse";
  }
  protected:
  explicit loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.loadFromFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class deleteFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.deleteFileRequest) */ {
 public:
  inline deleteFileRequest() : deleteFileRequest(nullptr) {}
  ~deleteFileRequest() override;
  explicit PROTOBUF_CONSTEXPR deleteFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteFileRequest(const deleteFileRequest& from);
  deleteFileRequest(deleteFileRequest&& from) noexcept
    : deleteFileRequest() {
    *this = ::std::move(from);
  }

  inline deleteFileRequest& operator=(const deleteFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteFileRequest& operator=(deleteFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteFileRequest* internal_default_instance() {
    return reinterpret_cast<const deleteFileRequest*>(
               &_deleteFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(deleteFileRequest& a, deleteFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const deleteFileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.deleteFileRequest";
  }
  protected:
  explicit deleteFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.deleteFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class deleteFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.deleteFileResponse) */ {
 public:
  inline deleteFileResponse() : deleteFileResponse(nullptr) {}
  ~deleteFileResponse() override;
  explicit PROTOBUF_CONSTEXPR deleteFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteFileResponse(const deleteFileResponse& from);
  deleteFileResponse(deleteFileResponse&& from) noexcept
    : deleteFileResponse() {
    *this = ::std::move(from);
  }

  inline deleteFileResponse& operator=(const deleteFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteFileResponse& operator=(deleteFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteFileResponse* internal_default_instance() {
    return reinterpret_cast<const deleteFileResponse*>(
               &_deleteFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(deleteFileResponse& a, deleteFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const deleteFileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.deleteFileResponse";
  }
  protected:
  explicit deleteFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.deleteFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setMapRequest

// int32 grpcServerCompressionFormat = 1;
inline void setMapRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t setMapRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t setMapRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.setMapRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setMapRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void setMapRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.setMapRequest.grpcServerCompressionFormat)
}

// bytes map = 2;
inline void setMapRequest::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& setMapRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.setMapRequest.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setMapRequest::set_map(ArgT0&& arg0, ArgT... args) {
 
 map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.setMapRequest.map)
}
inline std::string* setMapRequest::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.setMapRequest.map)
  return _s;
}
inline const std::string& setMapRequest::_internal_map() const {
  return map_.Get();
}
inline void setMapRequest::_internal_set_map(const std::string& value) {
  
  map_.Set(value, GetArenaForAllocation());
}
inline std::string* setMapRequest::_internal_mutable_map() {
  
  return map_.Mutable(GetArenaForAllocation());
}
inline std::string* setMapRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.setMapRequest.map)
  return map_.Release();
}
inline void setMapRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_.IsDefault()) {
    map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.setMapRequest.map)
}

// -------------------------------------------------------------------

// setMapResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setMapResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t setMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.setMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setMapResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setMapResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.setMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMapRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMapRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t getMapRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t getMapRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getMapRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMapRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void getMapRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getMapRequest.grpcServerCompressionFormat)
}

// bytes map = 2;
inline void getMapRequest::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& getMapRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getMapRequest.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequest::set_map(ArgT0&& arg0, ArgT... args) {
 
 map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getMapRequest.map)
}
inline std::string* getMapRequest::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getMapRequest.map)
  return _s;
}
inline const std::string& getMapRequest::_internal_map() const {
  return map_.Get();
}
inline void getMapRequest::_internal_set_map(const std::string& value) {
  
  map_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequest::_internal_mutable_map() {
  
  return map_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getMapRequest.map)
  return map_.Release();
}
inline void getMapRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_.IsDefault()) {
    map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getMapRequest.map)
}

// -------------------------------------------------------------------

// getMapResponse

// bytes map = 1;
inline void getMapResponse::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& getMapResponse::map() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getMapResponse.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapResponse::set_map(ArgT0&& arg0, ArgT... args) {
 
 map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getMapResponse.map)
}
inline std::string* getMapResponse::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getMapResponse.map)
  return _s;
}
inline const std::string& getMapResponse::_internal_map() const {
  return map_.Get();
}
inline void getMapResponse::_internal_set_map(const std::string& value) {
  
  map_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapResponse::_internal_mutable_map() {
  
  return map_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapResponse::release_map() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getMapResponse.map)
  return map_.Release();
}
inline void getMapResponse::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_.IsDefault()) {
    map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getMapResponse.map)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getMapResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t getMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMapResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getMapResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getSubmapRequest

// int32 grpcServerCompressionFormat = 1;
inline void getSubmapRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t getSubmapRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t getSubmapRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getSubmapRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getSubmapRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void getSubmapRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getSubmapRequest.grpcServerCompressionFormat)
}

// uint32 idCenteredKeyframe = 2;
inline void getSubmapRequest::clear_idcenteredkeyframe() {
  idcenteredkeyframe_ = 0u;
}
inline uint32_t getSubmapRequest::_internal_idcenteredkeyframe() const {
  return idcenteredkeyframe_;
}
inline uint32_t getSubmapRequest::idcenteredkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getSubmapRequest.idCenteredKeyframe)
  return _internal_idcenteredkeyframe();
}
inline void getSubmapRequest::_internal_set_idcenteredkeyframe(uint32_t value) {
  
  idcenteredkeyframe_ = value;
}
inline void getSubmapRequest::set_idcenteredkeyframe(uint32_t value) {
  _internal_set_idcenteredkeyframe(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getSubmapRequest.idCenteredKeyframe)
}

// uint32 nbKeyframes = 3;
inline void getSubmapRequest::clear_nbkeyframes() {
  nbkeyframes_ = 0u;
}
inline uint32_t getSubmapRequest::_internal_nbkeyframes() const {
  return nbkeyframes_;
}
inline uint32_t getSubmapRequest::nbkeyframes() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getSubmapRequest.nbKeyframes)
  return _internal_nbkeyframes();
}
inline void getSubmapRequest::_internal_set_nbkeyframes(uint32_t value) {
  
  nbkeyframes_ = value;
}
inline void getSubmapRequest::set_nbkeyframes(uint32_t value) {
  _internal_set_nbkeyframes(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getSubmapRequest.nbKeyframes)
}

// bytes submap = 4;
inline void getSubmapRequest::clear_submap() {
  submap_.ClearToEmpty();
}
inline const std::string& getSubmapRequest::submap() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getSubmapRequest.submap)
  return _internal_submap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getSubmapRequest::set_submap(ArgT0&& arg0, ArgT... args) {
 
 submap_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getSubmapRequest.submap)
}
inline std::string* getSubmapRequest::mutable_submap() {
  std::string* _s = _internal_mutable_submap();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getSubmapRequest.submap)
  return _s;
}
inline const std::string& getSubmapRequest::_internal_submap() const {
  return submap_.Get();
}
inline void getSubmapRequest::_internal_set_submap(const std::string& value) {
  
  submap_.Set(value, GetArenaForAllocation());
}
inline std::string* getSubmapRequest::_internal_mutable_submap() {
  
  return submap_.Mutable(GetArenaForAllocation());
}
inline std::string* getSubmapRequest::release_submap() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getSubmapRequest.submap)
  return submap_.Release();
}
inline void getSubmapRequest::set_allocated_submap(std::string* submap) {
  if (submap != nullptr) {
    
  } else {
    
  }
  submap_.SetAllocated(submap, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (submap_.IsDefault()) {
    submap_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getSubmapRequest.submap)
}

// -------------------------------------------------------------------

// getSubmapResponse

// bytes submap = 1;
inline void getSubmapResponse::clear_submap() {
  submap_.ClearToEmpty();
}
inline const std::string& getSubmapResponse::submap() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getSubmapResponse.submap)
  return _internal_submap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getSubmapResponse::set_submap(ArgT0&& arg0, ArgT... args) {
 
 submap_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getSubmapResponse.submap)
}
inline std::string* getSubmapResponse::mutable_submap() {
  std::string* _s = _internal_mutable_submap();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getSubmapResponse.submap)
  return _s;
}
inline const std::string& getSubmapResponse::_internal_submap() const {
  return submap_.Get();
}
inline void getSubmapResponse::_internal_set_submap(const std::string& value) {
  
  submap_.Set(value, GetArenaForAllocation());
}
inline std::string* getSubmapResponse::_internal_mutable_submap() {
  
  return submap_.Mutable(GetArenaForAllocation());
}
inline std::string* getSubmapResponse::release_submap() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getSubmapResponse.submap)
  return submap_.Release();
}
inline void getSubmapResponse::set_allocated_submap(std::string* submap) {
  if (submap != nullptr) {
    
  } else {
    
  }
  submap_.SetAllocated(submap, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (submap_.IsDefault()) {
    submap_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getSubmapResponse.submap)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getSubmapResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getSubmapResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t getSubmapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getSubmapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getSubmapResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getSubmapResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getSubmapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getLocalPointCloud_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void getLocalPointCloud_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t getLocalPointCloud_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t getLocalPointCloud_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getLocalPointCloud_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void getLocalPointCloud_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc0Request.grpcServerCompressionFormat)
}

// bytes keyframes = 2;
inline void getLocalPointCloud_grpc0Request::clear_keyframes() {
  keyframes_.ClearToEmpty();
}
inline const std::string& getLocalPointCloud_grpc0Request::keyframes() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc0Request.keyframes)
  return _internal_keyframes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getLocalPointCloud_grpc0Request::set_keyframes(ArgT0&& arg0, ArgT... args) {
 
 keyframes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc0Request.keyframes)
}
inline std::string* getLocalPointCloud_grpc0Request::mutable_keyframes() {
  std::string* _s = _internal_mutable_keyframes();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getLocalPointCloud_grpc0Request.keyframes)
  return _s;
}
inline const std::string& getLocalPointCloud_grpc0Request::_internal_keyframes() const {
  return keyframes_.Get();
}
inline void getLocalPointCloud_grpc0Request::_internal_set_keyframes(const std::string& value) {
  
  keyframes_.Set(value, GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc0Request::_internal_mutable_keyframes() {
  
  return keyframes_.Mutable(GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc0Request::release_keyframes() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getLocalPointCloud_grpc0Request.keyframes)
  return keyframes_.Release();
}
inline void getLocalPointCloud_grpc0Request::set_allocated_keyframes(std::string* keyframes) {
  if (keyframes != nullptr) {
    
  } else {
    
  }
  keyframes_.SetAllocated(keyframes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframes_.IsDefault()) {
    keyframes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getLocalPointCloud_grpc0Request.keyframes)
}

// bytes localPointCloud = 3;
inline void getLocalPointCloud_grpc0Request::clear_localpointcloud() {
  localpointcloud_.ClearToEmpty();
}
inline const std::string& getLocalPointCloud_grpc0Request::localpointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc0Request.localPointCloud)
  return _internal_localpointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getLocalPointCloud_grpc0Request::set_localpointcloud(ArgT0&& arg0, ArgT... args) {
 
 localpointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc0Request.localPointCloud)
}
inline std::string* getLocalPointCloud_grpc0Request::mutable_localpointcloud() {
  std::string* _s = _internal_mutable_localpointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getLocalPointCloud_grpc0Request.localPointCloud)
  return _s;
}
inline const std::string& getLocalPointCloud_grpc0Request::_internal_localpointcloud() const {
  return localpointcloud_.Get();
}
inline void getLocalPointCloud_grpc0Request::_internal_set_localpointcloud(const std::string& value) {
  
  localpointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc0Request::_internal_mutable_localpointcloud() {
  
  return localpointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc0Request::release_localpointcloud() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getLocalPointCloud_grpc0Request.localPointCloud)
  return localpointcloud_.Release();
}
inline void getLocalPointCloud_grpc0Request::set_allocated_localpointcloud(std::string* localpointcloud) {
  if (localpointcloud != nullptr) {
    
  } else {
    
  }
  localpointcloud_.SetAllocated(localpointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localpointcloud_.IsDefault()) {
    localpointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getLocalPointCloud_grpc0Request.localPointCloud)
}

// -------------------------------------------------------------------

// getLocalPointCloud_grpc0Response

// bytes localPointCloud = 1;
inline void getLocalPointCloud_grpc0Response::clear_localpointcloud() {
  localpointcloud_.ClearToEmpty();
}
inline const std::string& getLocalPointCloud_grpc0Response::localpointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc0Response.localPointCloud)
  return _internal_localpointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getLocalPointCloud_grpc0Response::set_localpointcloud(ArgT0&& arg0, ArgT... args) {
 
 localpointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc0Response.localPointCloud)
}
inline std::string* getLocalPointCloud_grpc0Response::mutable_localpointcloud() {
  std::string* _s = _internal_mutable_localpointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getLocalPointCloud_grpc0Response.localPointCloud)
  return _s;
}
inline const std::string& getLocalPointCloud_grpc0Response::_internal_localpointcloud() const {
  return localpointcloud_.Get();
}
inline void getLocalPointCloud_grpc0Response::_internal_set_localpointcloud(const std::string& value) {
  
  localpointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc0Response::_internal_mutable_localpointcloud() {
  
  return localpointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc0Response::release_localpointcloud() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getLocalPointCloud_grpc0Response.localPointCloud)
  return localpointcloud_.Release();
}
inline void getLocalPointCloud_grpc0Response::set_allocated_localpointcloud(std::string* localpointcloud) {
  if (localpointcloud != nullptr) {
    
  } else {
    
  }
  localpointcloud_.SetAllocated(localpointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localpointcloud_.IsDefault()) {
    localpointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getLocalPointCloud_grpc0Response.localPointCloud)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getLocalPointCloud_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getLocalPointCloud_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t getLocalPointCloud_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getLocalPointCloud_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getLocalPointCloud_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getLocalPointCloud_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void getLocalPointCloud_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t getLocalPointCloud_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t getLocalPointCloud_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getLocalPointCloud_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void getLocalPointCloud_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc1Request.grpcServerCompressionFormat)
}

// bytes keyframe = 2;
inline void getLocalPointCloud_grpc1Request::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& getLocalPointCloud_grpc1Request::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc1Request.keyframe)
  return _internal_keyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getLocalPointCloud_grpc1Request::set_keyframe(ArgT0&& arg0, ArgT... args) {
 
 keyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc1Request.keyframe)
}
inline std::string* getLocalPointCloud_grpc1Request::mutable_keyframe() {
  std::string* _s = _internal_mutable_keyframe();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getLocalPointCloud_grpc1Request.keyframe)
  return _s;
}
inline const std::string& getLocalPointCloud_grpc1Request::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void getLocalPointCloud_grpc1Request::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc1Request::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc1Request::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getLocalPointCloud_grpc1Request.keyframe)
  return keyframe_.Release();
}
inline void getLocalPointCloud_grpc1Request::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(keyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframe_.IsDefault()) {
    keyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getLocalPointCloud_grpc1Request.keyframe)
}

// float minWeightNeighbor = 3;
inline void getLocalPointCloud_grpc1Request::clear_minweightneighbor() {
  minweightneighbor_ = 0;
}
inline float getLocalPointCloud_grpc1Request::_internal_minweightneighbor() const {
  return minweightneighbor_;
}
inline float getLocalPointCloud_grpc1Request::minweightneighbor() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc1Request.minWeightNeighbor)
  return _internal_minweightneighbor();
}
inline void getLocalPointCloud_grpc1Request::_internal_set_minweightneighbor(float value) {
  
  minweightneighbor_ = value;
}
inline void getLocalPointCloud_grpc1Request::set_minweightneighbor(float value) {
  _internal_set_minweightneighbor(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc1Request.minWeightNeighbor)
}

// bytes localPointCloud = 4;
inline void getLocalPointCloud_grpc1Request::clear_localpointcloud() {
  localpointcloud_.ClearToEmpty();
}
inline const std::string& getLocalPointCloud_grpc1Request::localpointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc1Request.localPointCloud)
  return _internal_localpointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getLocalPointCloud_grpc1Request::set_localpointcloud(ArgT0&& arg0, ArgT... args) {
 
 localpointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc1Request.localPointCloud)
}
inline std::string* getLocalPointCloud_grpc1Request::mutable_localpointcloud() {
  std::string* _s = _internal_mutable_localpointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getLocalPointCloud_grpc1Request.localPointCloud)
  return _s;
}
inline const std::string& getLocalPointCloud_grpc1Request::_internal_localpointcloud() const {
  return localpointcloud_.Get();
}
inline void getLocalPointCloud_grpc1Request::_internal_set_localpointcloud(const std::string& value) {
  
  localpointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc1Request::_internal_mutable_localpointcloud() {
  
  return localpointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc1Request::release_localpointcloud() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getLocalPointCloud_grpc1Request.localPointCloud)
  return localpointcloud_.Release();
}
inline void getLocalPointCloud_grpc1Request::set_allocated_localpointcloud(std::string* localpointcloud) {
  if (localpointcloud != nullptr) {
    
  } else {
    
  }
  localpointcloud_.SetAllocated(localpointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localpointcloud_.IsDefault()) {
    localpointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getLocalPointCloud_grpc1Request.localPointCloud)
}

// -------------------------------------------------------------------

// getLocalPointCloud_grpc1Response

// bytes localPointCloud = 1;
inline void getLocalPointCloud_grpc1Response::clear_localpointcloud() {
  localpointcloud_.ClearToEmpty();
}
inline const std::string& getLocalPointCloud_grpc1Response::localpointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc1Response.localPointCloud)
  return _internal_localpointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getLocalPointCloud_grpc1Response::set_localpointcloud(ArgT0&& arg0, ArgT... args) {
 
 localpointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc1Response.localPointCloud)
}
inline std::string* getLocalPointCloud_grpc1Response::mutable_localpointcloud() {
  std::string* _s = _internal_mutable_localpointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getLocalPointCloud_grpc1Response.localPointCloud)
  return _s;
}
inline const std::string& getLocalPointCloud_grpc1Response::_internal_localpointcloud() const {
  return localpointcloud_.Get();
}
inline void getLocalPointCloud_grpc1Response::_internal_set_localpointcloud(const std::string& value) {
  
  localpointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc1Response::_internal_mutable_localpointcloud() {
  
  return localpointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getLocalPointCloud_grpc1Response::release_localpointcloud() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getLocalPointCloud_grpc1Response.localPointCloud)
  return localpointcloud_.Release();
}
inline void getLocalPointCloud_grpc1Response::set_allocated_localpointcloud(std::string* localpointcloud) {
  if (localpointcloud != nullptr) {
    
  } else {
    
  }
  localpointcloud_.SetAllocated(localpointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (localpointcloud_.IsDefault()) {
    localpointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getLocalPointCloud_grpc1Response.localPointCloud)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getLocalPointCloud_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getLocalPointCloud_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t getLocalPointCloud_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloud_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getLocalPointCloud_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getLocalPointCloud_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloud_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addCloudPointRequest

// int32 grpcServerCompressionFormat = 1;
inline void addCloudPointRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t addCloudPointRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t addCloudPointRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addCloudPointRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void addCloudPointRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void addCloudPointRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.addCloudPointRequest.grpcServerCompressionFormat)
}

// bytes cloudPoint = 2;
inline void addCloudPointRequest::clear_cloudpoint() {
  cloudpoint_.ClearToEmpty();
}
inline const std::string& addCloudPointRequest::cloudpoint() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addCloudPointRequest.cloudPoint)
  return _internal_cloudpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addCloudPointRequest::set_cloudpoint(ArgT0&& arg0, ArgT... args) {
 
 cloudpoint_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.addCloudPointRequest.cloudPoint)
}
inline std::string* addCloudPointRequest::mutable_cloudpoint() {
  std::string* _s = _internal_mutable_cloudpoint();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.addCloudPointRequest.cloudPoint)
  return _s;
}
inline const std::string& addCloudPointRequest::_internal_cloudpoint() const {
  return cloudpoint_.Get();
}
inline void addCloudPointRequest::_internal_set_cloudpoint(const std::string& value) {
  
  cloudpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* addCloudPointRequest::_internal_mutable_cloudpoint() {
  
  return cloudpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* addCloudPointRequest::release_cloudpoint() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.addCloudPointRequest.cloudPoint)
  return cloudpoint_.Release();
}
inline void addCloudPointRequest::set_allocated_cloudpoint(std::string* cloudpoint) {
  if (cloudpoint != nullptr) {
    
  } else {
    
  }
  cloudpoint_.SetAllocated(cloudpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cloudpoint_.IsDefault()) {
    cloudpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.addCloudPointRequest.cloudPoint)
}

// -------------------------------------------------------------------

// addCloudPointResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void addCloudPointResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t addCloudPointResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t addCloudPointResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addCloudPointResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addCloudPointResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addCloudPointResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.addCloudPointResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// removeCloudPointRequest

// int32 grpcServerCompressionFormat = 1;
inline void removeCloudPointRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t removeCloudPointRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t removeCloudPointRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeCloudPointRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void removeCloudPointRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void removeCloudPointRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeCloudPointRequest.grpcServerCompressionFormat)
}

// bytes cloudPoint = 2;
inline void removeCloudPointRequest::clear_cloudpoint() {
  cloudpoint_.ClearToEmpty();
}
inline const std::string& removeCloudPointRequest::cloudpoint() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeCloudPointRequest.cloudPoint)
  return _internal_cloudpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void removeCloudPointRequest::set_cloudpoint(ArgT0&& arg0, ArgT... args) {
 
 cloudpoint_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeCloudPointRequest.cloudPoint)
}
inline std::string* removeCloudPointRequest::mutable_cloudpoint() {
  std::string* _s = _internal_mutable_cloudpoint();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.removeCloudPointRequest.cloudPoint)
  return _s;
}
inline const std::string& removeCloudPointRequest::_internal_cloudpoint() const {
  return cloudpoint_.Get();
}
inline void removeCloudPointRequest::_internal_set_cloudpoint(const std::string& value) {
  
  cloudpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* removeCloudPointRequest::_internal_mutable_cloudpoint() {
  
  return cloudpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* removeCloudPointRequest::release_cloudpoint() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.removeCloudPointRequest.cloudPoint)
  return cloudpoint_.Release();
}
inline void removeCloudPointRequest::set_allocated_cloudpoint(std::string* cloudpoint) {
  if (cloudpoint != nullptr) {
    
  } else {
    
  }
  cloudpoint_.SetAllocated(cloudpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cloudpoint_.IsDefault()) {
    cloudpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.removeCloudPointRequest.cloudPoint)
}

// -------------------------------------------------------------------

// removeCloudPointResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void removeCloudPointResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t removeCloudPointResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t removeCloudPointResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeCloudPointResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void removeCloudPointResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void removeCloudPointResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeCloudPointResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addKeyframeRequest

// int32 grpcServerCompressionFormat = 1;
inline void addKeyframeRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t addKeyframeRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t addKeyframeRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addKeyframeRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void addKeyframeRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void addKeyframeRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.addKeyframeRequest.grpcServerCompressionFormat)
}

// bytes keyframe = 2;
inline void addKeyframeRequest::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& addKeyframeRequest::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addKeyframeRequest.keyframe)
  return _internal_keyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addKeyframeRequest::set_keyframe(ArgT0&& arg0, ArgT... args) {
 
 keyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.addKeyframeRequest.keyframe)
}
inline std::string* addKeyframeRequest::mutable_keyframe() {
  std::string* _s = _internal_mutable_keyframe();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.addKeyframeRequest.keyframe)
  return _s;
}
inline const std::string& addKeyframeRequest::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void addKeyframeRequest::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* addKeyframeRequest::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* addKeyframeRequest::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.addKeyframeRequest.keyframe)
  return keyframe_.Release();
}
inline void addKeyframeRequest::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(keyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframe_.IsDefault()) {
    keyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.addKeyframeRequest.keyframe)
}

// -------------------------------------------------------------------

// addKeyframeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void addKeyframeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t addKeyframeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t addKeyframeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addKeyframeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addKeyframeResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addKeyframeResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.addKeyframeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// removeKeyframeRequest

// int32 grpcServerCompressionFormat = 1;
inline void removeKeyframeRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t removeKeyframeRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t removeKeyframeRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeKeyframeRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void removeKeyframeRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void removeKeyframeRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeKeyframeRequest.grpcServerCompressionFormat)
}

// bytes keyframe = 2;
inline void removeKeyframeRequest::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& removeKeyframeRequest::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeKeyframeRequest.keyframe)
  return _internal_keyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void removeKeyframeRequest::set_keyframe(ArgT0&& arg0, ArgT... args) {
 
 keyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeKeyframeRequest.keyframe)
}
inline std::string* removeKeyframeRequest::mutable_keyframe() {
  std::string* _s = _internal_mutable_keyframe();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.removeKeyframeRequest.keyframe)
  return _s;
}
inline const std::string& removeKeyframeRequest::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void removeKeyframeRequest::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* removeKeyframeRequest::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* removeKeyframeRequest::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.removeKeyframeRequest.keyframe)
  return keyframe_.Release();
}
inline void removeKeyframeRequest::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(keyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframe_.IsDefault()) {
    keyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.removeKeyframeRequest.keyframe)
}

// -------------------------------------------------------------------

// removeKeyframeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void removeKeyframeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t removeKeyframeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t removeKeyframeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeKeyframeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void removeKeyframeResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void removeKeyframeResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeKeyframeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addCameraParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void addCameraParametersRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t addCameraParametersRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t addCameraParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addCameraParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void addCameraParametersRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void addCameraParametersRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.addCameraParametersRequest.grpcServerCompressionFormat)
}

// bytes cameraParameters = 2;
inline void addCameraParametersRequest::clear_cameraparameters() {
  cameraparameters_.ClearToEmpty();
}
inline const std::string& addCameraParametersRequest::cameraparameters() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addCameraParametersRequest.cameraParameters)
  return _internal_cameraparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addCameraParametersRequest::set_cameraparameters(ArgT0&& arg0, ArgT... args) {
 
 cameraparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.addCameraParametersRequest.cameraParameters)
}
inline std::string* addCameraParametersRequest::mutable_cameraparameters() {
  std::string* _s = _internal_mutable_cameraparameters();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.addCameraParametersRequest.cameraParameters)
  return _s;
}
inline const std::string& addCameraParametersRequest::_internal_cameraparameters() const {
  return cameraparameters_.Get();
}
inline void addCameraParametersRequest::_internal_set_cameraparameters(const std::string& value) {
  
  cameraparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* addCameraParametersRequest::_internal_mutable_cameraparameters() {
  
  return cameraparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* addCameraParametersRequest::release_cameraparameters() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.addCameraParametersRequest.cameraParameters)
  return cameraparameters_.Release();
}
inline void addCameraParametersRequest::set_allocated_cameraparameters(std::string* cameraparameters) {
  if (cameraparameters != nullptr) {
    
  } else {
    
  }
  cameraparameters_.SetAllocated(cameraparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cameraparameters_.IsDefault()) {
    cameraparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.addCameraParametersRequest.cameraParameters)
}

// -------------------------------------------------------------------

// addCameraParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void addCameraParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t addCameraParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t addCameraParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addCameraParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addCameraParametersResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addCameraParametersResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.addCameraParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// removeCameraParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void removeCameraParametersRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t removeCameraParametersRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t removeCameraParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeCameraParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void removeCameraParametersRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void removeCameraParametersRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeCameraParametersRequest.grpcServerCompressionFormat)
}

// bytes cameraParameters = 2;
inline void removeCameraParametersRequest::clear_cameraparameters() {
  cameraparameters_.ClearToEmpty();
}
inline const std::string& removeCameraParametersRequest::cameraparameters() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeCameraParametersRequest.cameraParameters)
  return _internal_cameraparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void removeCameraParametersRequest::set_cameraparameters(ArgT0&& arg0, ArgT... args) {
 
 cameraparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeCameraParametersRequest.cameraParameters)
}
inline std::string* removeCameraParametersRequest::mutable_cameraparameters() {
  std::string* _s = _internal_mutable_cameraparameters();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.removeCameraParametersRequest.cameraParameters)
  return _s;
}
inline const std::string& removeCameraParametersRequest::_internal_cameraparameters() const {
  return cameraparameters_.Get();
}
inline void removeCameraParametersRequest::_internal_set_cameraparameters(const std::string& value) {
  
  cameraparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* removeCameraParametersRequest::_internal_mutable_cameraparameters() {
  
  return cameraparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* removeCameraParametersRequest::release_cameraparameters() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.removeCameraParametersRequest.cameraParameters)
  return cameraparameters_.Release();
}
inline void removeCameraParametersRequest::set_allocated_cameraparameters(std::string* cameraparameters) {
  if (cameraparameters != nullptr) {
    
  } else {
    
  }
  cameraparameters_.SetAllocated(cameraparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cameraparameters_.IsDefault()) {
    cameraparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.removeCameraParametersRequest.cameraParameters)
}

// -------------------------------------------------------------------

// removeCameraParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void removeCameraParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t removeCameraParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t removeCameraParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeCameraParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void removeCameraParametersResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void removeCameraParametersResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeCameraParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getCameraParameters_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void getCameraParameters_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t getCameraParameters_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t getCameraParameters_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getCameraParameters_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getCameraParameters_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void getCameraParameters_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getCameraParameters_grpc0Request.grpcServerCompressionFormat)
}

// uint32 id = 2;
inline void getCameraParameters_grpc0Request::clear_id() {
  id_ = 0u;
}
inline uint32_t getCameraParameters_grpc0Request::_internal_id() const {
  return id_;
}
inline uint32_t getCameraParameters_grpc0Request::id() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getCameraParameters_grpc0Request.id)
  return _internal_id();
}
inline void getCameraParameters_grpc0Request::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void getCameraParameters_grpc0Request::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getCameraParameters_grpc0Request.id)
}

// bytes cameraParameters = 3;
inline void getCameraParameters_grpc0Request::clear_cameraparameters() {
  cameraparameters_.ClearToEmpty();
}
inline const std::string& getCameraParameters_grpc0Request::cameraparameters() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getCameraParameters_grpc0Request.cameraParameters)
  return _internal_cameraparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParameters_grpc0Request::set_cameraparameters(ArgT0&& arg0, ArgT... args) {
 
 cameraparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getCameraParameters_grpc0Request.cameraParameters)
}
inline std::string* getCameraParameters_grpc0Request::mutable_cameraparameters() {
  std::string* _s = _internal_mutable_cameraparameters();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getCameraParameters_grpc0Request.cameraParameters)
  return _s;
}
inline const std::string& getCameraParameters_grpc0Request::_internal_cameraparameters() const {
  return cameraparameters_.Get();
}
inline void getCameraParameters_grpc0Request::_internal_set_cameraparameters(const std::string& value) {
  
  cameraparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParameters_grpc0Request::_internal_mutable_cameraparameters() {
  
  return cameraparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParameters_grpc0Request::release_cameraparameters() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getCameraParameters_grpc0Request.cameraParameters)
  return cameraparameters_.Release();
}
inline void getCameraParameters_grpc0Request::set_allocated_cameraparameters(std::string* cameraparameters) {
  if (cameraparameters != nullptr) {
    
  } else {
    
  }
  cameraparameters_.SetAllocated(cameraparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cameraparameters_.IsDefault()) {
    cameraparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getCameraParameters_grpc0Request.cameraParameters)
}

// -------------------------------------------------------------------

// getCameraParameters_grpc0Response

// bytes cameraParameters = 1;
inline void getCameraParameters_grpc0Response::clear_cameraparameters() {
  cameraparameters_.ClearToEmpty();
}
inline const std::string& getCameraParameters_grpc0Response::cameraparameters() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getCameraParameters_grpc0Response.cameraParameters)
  return _internal_cameraparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParameters_grpc0Response::set_cameraparameters(ArgT0&& arg0, ArgT... args) {
 
 cameraparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getCameraParameters_grpc0Response.cameraParameters)
}
inline std::string* getCameraParameters_grpc0Response::mutable_cameraparameters() {
  std::string* _s = _internal_mutable_cameraparameters();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getCameraParameters_grpc0Response.cameraParameters)
  return _s;
}
inline const std::string& getCameraParameters_grpc0Response::_internal_cameraparameters() const {
  return cameraparameters_.Get();
}
inline void getCameraParameters_grpc0Response::_internal_set_cameraparameters(const std::string& value) {
  
  cameraparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParameters_grpc0Response::_internal_mutable_cameraparameters() {
  
  return cameraparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParameters_grpc0Response::release_cameraparameters() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getCameraParameters_grpc0Response.cameraParameters)
  return cameraparameters_.Release();
}
inline void getCameraParameters_grpc0Response::set_allocated_cameraparameters(std::string* cameraparameters) {
  if (cameraparameters != nullptr) {
    
  } else {
    
  }
  cameraparameters_.SetAllocated(cameraparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cameraparameters_.IsDefault()) {
    cameraparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getCameraParameters_grpc0Response.cameraParameters)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getCameraParameters_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getCameraParameters_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t getCameraParameters_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getCameraParameters_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getCameraParameters_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getCameraParameters_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getCameraParameters_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getCameraParameters_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void getCameraParameters_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t getCameraParameters_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t getCameraParameters_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getCameraParameters_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getCameraParameters_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void getCameraParameters_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getCameraParameters_grpc1Request.grpcServerCompressionFormat)
}

// uint32 id = 2;
inline void getCameraParameters_grpc1Request::clear_id() {
  id_ = 0u;
}
inline uint32_t getCameraParameters_grpc1Request::_internal_id() const {
  return id_;
}
inline uint32_t getCameraParameters_grpc1Request::id() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getCameraParameters_grpc1Request.id)
  return _internal_id();
}
inline void getCameraParameters_grpc1Request::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void getCameraParameters_grpc1Request::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getCameraParameters_grpc1Request.id)
}

// bytes cameraParameters = 3;
inline void getCameraParameters_grpc1Request::clear_cameraparameters() {
  cameraparameters_.ClearToEmpty();
}
inline const std::string& getCameraParameters_grpc1Request::cameraparameters() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getCameraParameters_grpc1Request.cameraParameters)
  return _internal_cameraparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParameters_grpc1Request::set_cameraparameters(ArgT0&& arg0, ArgT... args) {
 
 cameraparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getCameraParameters_grpc1Request.cameraParameters)
}
inline std::string* getCameraParameters_grpc1Request::mutable_cameraparameters() {
  std::string* _s = _internal_mutable_cameraparameters();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getCameraParameters_grpc1Request.cameraParameters)
  return _s;
}
inline const std::string& getCameraParameters_grpc1Request::_internal_cameraparameters() const {
  return cameraparameters_.Get();
}
inline void getCameraParameters_grpc1Request::_internal_set_cameraparameters(const std::string& value) {
  
  cameraparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParameters_grpc1Request::_internal_mutable_cameraparameters() {
  
  return cameraparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParameters_grpc1Request::release_cameraparameters() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getCameraParameters_grpc1Request.cameraParameters)
  return cameraparameters_.Release();
}
inline void getCameraParameters_grpc1Request::set_allocated_cameraparameters(std::string* cameraparameters) {
  if (cameraparameters != nullptr) {
    
  } else {
    
  }
  cameraparameters_.SetAllocated(cameraparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cameraparameters_.IsDefault()) {
    cameraparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getCameraParameters_grpc1Request.cameraParameters)
}

// -------------------------------------------------------------------

// getCameraParameters_grpc1Response

// bytes cameraParameters = 1;
inline void getCameraParameters_grpc1Response::clear_cameraparameters() {
  cameraparameters_.ClearToEmpty();
}
inline const std::string& getCameraParameters_grpc1Response::cameraparameters() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getCameraParameters_grpc1Response.cameraParameters)
  return _internal_cameraparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParameters_grpc1Response::set_cameraparameters(ArgT0&& arg0, ArgT... args) {
 
 cameraparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.getCameraParameters_grpc1Response.cameraParameters)
}
inline std::string* getCameraParameters_grpc1Response::mutable_cameraparameters() {
  std::string* _s = _internal_mutable_cameraparameters();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getCameraParameters_grpc1Response.cameraParameters)
  return _s;
}
inline const std::string& getCameraParameters_grpc1Response::_internal_cameraparameters() const {
  return cameraparameters_.Get();
}
inline void getCameraParameters_grpc1Response::_internal_set_cameraparameters(const std::string& value) {
  
  cameraparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParameters_grpc1Response::_internal_mutable_cameraparameters() {
  
  return cameraparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParameters_grpc1Response::release_cameraparameters() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getCameraParameters_grpc1Response.cameraParameters)
  return cameraparameters_.Release();
}
inline void getCameraParameters_grpc1Response::set_allocated_cameraparameters(std::string* cameraparameters) {
  if (cameraparameters != nullptr) {
    
  } else {
    
  }
  cameraparameters_.SetAllocated(cameraparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cameraparameters_.IsDefault()) {
    cameraparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getCameraParameters_grpc1Response.cameraParameters)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getCameraParameters_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getCameraParameters_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t getCameraParameters_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getCameraParameters_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getCameraParameters_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getCameraParameters_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getCameraParameters_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// pointCloudPruningRequest

// int32 grpcServerCompressionFormat = 1;
inline void pointCloudPruningRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t pointCloudPruningRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t pointCloudPruningRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.pointCloudPruningRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void pointCloudPruningRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void pointCloudPruningRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.pointCloudPruningRequest.grpcServerCompressionFormat)
}

// bytes cloudPoints = 2;
inline void pointCloudPruningRequest::clear_cloudpoints() {
  cloudpoints_.ClearToEmpty();
}
inline const std::string& pointCloudPruningRequest::cloudpoints() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
  return _internal_cloudpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pointCloudPruningRequest::set_cloudpoints(ArgT0&& arg0, ArgT... args) {
 
 cloudpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
}
inline std::string* pointCloudPruningRequest::mutable_cloudpoints() {
  std::string* _s = _internal_mutable_cloudpoints();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
  return _s;
}
inline const std::string& pointCloudPruningRequest::_internal_cloudpoints() const {
  return cloudpoints_.Get();
}
inline void pointCloudPruningRequest::_internal_set_cloudpoints(const std::string& value) {
  
  cloudpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* pointCloudPruningRequest::_internal_mutable_cloudpoints() {
  
  return cloudpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* pointCloudPruningRequest::release_cloudpoints() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
  return cloudpoints_.Release();
}
inline void pointCloudPruningRequest::set_allocated_cloudpoints(std::string* cloudpoints) {
  if (cloudpoints != nullptr) {
    
  } else {
    
  }
  cloudpoints_.SetAllocated(cloudpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cloudpoints_.IsDefault()) {
    cloudpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
}

// -------------------------------------------------------------------

// pointCloudPruningResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void pointCloudPruningResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t pointCloudPruningResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t pointCloudPruningResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.pointCloudPruningResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void pointCloudPruningResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void pointCloudPruningResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.pointCloudPruningResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// keyframePruningRequest

// int32 grpcServerCompressionFormat = 1;
inline void keyframePruningRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t keyframePruningRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t keyframePruningRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.keyframePruningRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void keyframePruningRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void keyframePruningRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.keyframePruningRequest.grpcServerCompressionFormat)
}

// bytes keyframes = 2;
inline void keyframePruningRequest::clear_keyframes() {
  keyframes_.ClearToEmpty();
}
inline const std::string& keyframePruningRequest::keyframes() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.keyframePruningRequest.keyframes)
  return _internal_keyframes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void keyframePruningRequest::set_keyframes(ArgT0&& arg0, ArgT... args) {
 
 keyframes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapManager.keyframePruningRequest.keyframes)
}
inline std::string* keyframePruningRequest::mutable_keyframes() {
  std::string* _s = _internal_mutable_keyframes();
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.keyframePruningRequest.keyframes)
  return _s;
}
inline const std::string& keyframePruningRequest::_internal_keyframes() const {
  return keyframes_.Get();
}
inline void keyframePruningRequest::_internal_set_keyframes(const std::string& value) {
  
  keyframes_.Set(value, GetArenaForAllocation());
}
inline std::string* keyframePruningRequest::_internal_mutable_keyframes() {
  
  return keyframes_.Mutable(GetArenaForAllocation());
}
inline std::string* keyframePruningRequest::release_keyframes() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.keyframePruningRequest.keyframes)
  return keyframes_.Release();
}
inline void keyframePruningRequest::set_allocated_keyframes(std::string* keyframes) {
  if (keyframes != nullptr) {
    
  } else {
    
  }
  keyframes_.SetAllocated(keyframes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframes_.IsDefault()) {
    keyframes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.keyframePruningRequest.keyframes)
}

// -------------------------------------------------------------------

// keyframePruningResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void keyframePruningResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t keyframePruningResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t keyframePruningResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.keyframePruningResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void keyframePruningResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void keyframePruningResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.keyframePruningResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// visibilityPruningRequest

// int32 grpcServerCompressionFormat = 1;
inline void visibilityPruningRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t visibilityPruningRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t visibilityPruningRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.visibilityPruningRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void visibilityPruningRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void visibilityPruningRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.visibilityPruningRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// visibilityPruningResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void visibilityPruningResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t visibilityPruningResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t visibilityPruningResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.visibilityPruningResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void visibilityPruningResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void visibilityPruningResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.visibilityPruningResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// saveToFileRequest

// int32 grpcServerCompressionFormat = 1;
inline void saveToFileRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t saveToFileRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t saveToFileRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.saveToFileRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void saveToFileRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void saveToFileRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.saveToFileRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// saveToFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void saveToFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t saveToFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t saveToFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.saveToFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void saveToFileResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void saveToFileResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.saveToFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// loadFromFileRequest

// int32 grpcServerCompressionFormat = 1;
inline void loadFromFileRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t loadFromFileRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t loadFromFileRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.loadFromFileRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void loadFromFileRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void loadFromFileRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.loadFromFileRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// loadFromFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void loadFromFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t loadFromFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t loadFromFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.loadFromFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void loadFromFileResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void loadFromFileResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.loadFromFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// deleteFileRequest

// int32 grpcServerCompressionFormat = 1;
inline void deleteFileRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t deleteFileRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t deleteFileRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.deleteFileRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void deleteFileRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void deleteFileRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.deleteFileRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// deleteFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void deleteFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t deleteFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t deleteFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.deleteFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void deleteFileResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void deleteFileResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.deleteFileResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIMapManager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIMapManagerService_2eproto
