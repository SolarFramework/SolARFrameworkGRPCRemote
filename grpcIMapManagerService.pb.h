// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMapManagerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIMapManagerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIMapManagerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIMapManagerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIMapManagerService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMapManagerService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(int index);
namespace grpcIMapManager {
class addCloudPointRequest;
struct addCloudPointRequestDefaultTypeInternal;
extern addCloudPointRequestDefaultTypeInternal _addCloudPointRequest_default_instance_;
class addCloudPointResponse;
struct addCloudPointResponseDefaultTypeInternal;
extern addCloudPointResponseDefaultTypeInternal _addCloudPointResponse_default_instance_;
class addKeyframeRequest;
struct addKeyframeRequestDefaultTypeInternal;
extern addKeyframeRequestDefaultTypeInternal _addKeyframeRequest_default_instance_;
class addKeyframeResponse;
struct addKeyframeResponseDefaultTypeInternal;
extern addKeyframeResponseDefaultTypeInternal _addKeyframeResponse_default_instance_;
class getLocalPointCloudRequest;
struct getLocalPointCloudRequestDefaultTypeInternal;
extern getLocalPointCloudRequestDefaultTypeInternal _getLocalPointCloudRequest_default_instance_;
class getLocalPointCloudResponse;
struct getLocalPointCloudResponseDefaultTypeInternal;
extern getLocalPointCloudResponseDefaultTypeInternal _getLocalPointCloudResponse_default_instance_;
class getMapRequest;
struct getMapRequestDefaultTypeInternal;
extern getMapRequestDefaultTypeInternal _getMapRequest_default_instance_;
class getMapResponse;
struct getMapResponseDefaultTypeInternal;
extern getMapResponseDefaultTypeInternal _getMapResponse_default_instance_;
class keyframePruningRequest;
struct keyframePruningRequestDefaultTypeInternal;
extern keyframePruningRequestDefaultTypeInternal _keyframePruningRequest_default_instance_;
class keyframePruningResponse;
struct keyframePruningResponseDefaultTypeInternal;
extern keyframePruningResponseDefaultTypeInternal _keyframePruningResponse_default_instance_;
class loadFromFileResponse;
struct loadFromFileResponseDefaultTypeInternal;
extern loadFromFileResponseDefaultTypeInternal _loadFromFileResponse_default_instance_;
class pointCloudPruningRequest;
struct pointCloudPruningRequestDefaultTypeInternal;
extern pointCloudPruningRequestDefaultTypeInternal _pointCloudPruningRequest_default_instance_;
class pointCloudPruningResponse;
struct pointCloudPruningResponseDefaultTypeInternal;
extern pointCloudPruningResponseDefaultTypeInternal _pointCloudPruningResponse_default_instance_;
class removeCloudPointRequest;
struct removeCloudPointRequestDefaultTypeInternal;
extern removeCloudPointRequestDefaultTypeInternal _removeCloudPointRequest_default_instance_;
class removeCloudPointResponse;
struct removeCloudPointResponseDefaultTypeInternal;
extern removeCloudPointResponseDefaultTypeInternal _removeCloudPointResponse_default_instance_;
class removeKeyframeRequest;
struct removeKeyframeRequestDefaultTypeInternal;
extern removeKeyframeRequestDefaultTypeInternal _removeKeyframeRequest_default_instance_;
class removeKeyframeResponse;
struct removeKeyframeResponseDefaultTypeInternal;
extern removeKeyframeResponseDefaultTypeInternal _removeKeyframeResponse_default_instance_;
class saveToFileResponse;
struct saveToFileResponseDefaultTypeInternal;
extern saveToFileResponseDefaultTypeInternal _saveToFileResponse_default_instance_;
class setMapRequest;
struct setMapRequestDefaultTypeInternal;
extern setMapRequestDefaultTypeInternal _setMapRequest_default_instance_;
class setMapResponse;
struct setMapResponseDefaultTypeInternal;
extern setMapResponseDefaultTypeInternal _setMapResponse_default_instance_;
}  // namespace grpcIMapManager
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIMapManager::addCloudPointRequest* Arena::CreateMaybeMessage<::grpcIMapManager::addCloudPointRequest>(Arena*);
template<> ::grpcIMapManager::addCloudPointResponse* Arena::CreateMaybeMessage<::grpcIMapManager::addCloudPointResponse>(Arena*);
template<> ::grpcIMapManager::addKeyframeRequest* Arena::CreateMaybeMessage<::grpcIMapManager::addKeyframeRequest>(Arena*);
template<> ::grpcIMapManager::addKeyframeResponse* Arena::CreateMaybeMessage<::grpcIMapManager::addKeyframeResponse>(Arena*);
template<> ::grpcIMapManager::getLocalPointCloudRequest* Arena::CreateMaybeMessage<::grpcIMapManager::getLocalPointCloudRequest>(Arena*);
template<> ::grpcIMapManager::getLocalPointCloudResponse* Arena::CreateMaybeMessage<::grpcIMapManager::getLocalPointCloudResponse>(Arena*);
template<> ::grpcIMapManager::getMapRequest* Arena::CreateMaybeMessage<::grpcIMapManager::getMapRequest>(Arena*);
template<> ::grpcIMapManager::getMapResponse* Arena::CreateMaybeMessage<::grpcIMapManager::getMapResponse>(Arena*);
template<> ::grpcIMapManager::keyframePruningRequest* Arena::CreateMaybeMessage<::grpcIMapManager::keyframePruningRequest>(Arena*);
template<> ::grpcIMapManager::keyframePruningResponse* Arena::CreateMaybeMessage<::grpcIMapManager::keyframePruningResponse>(Arena*);
template<> ::grpcIMapManager::loadFromFileResponse* Arena::CreateMaybeMessage<::grpcIMapManager::loadFromFileResponse>(Arena*);
template<> ::grpcIMapManager::pointCloudPruningRequest* Arena::CreateMaybeMessage<::grpcIMapManager::pointCloudPruningRequest>(Arena*);
template<> ::grpcIMapManager::pointCloudPruningResponse* Arena::CreateMaybeMessage<::grpcIMapManager::pointCloudPruningResponse>(Arena*);
template<> ::grpcIMapManager::removeCloudPointRequest* Arena::CreateMaybeMessage<::grpcIMapManager::removeCloudPointRequest>(Arena*);
template<> ::grpcIMapManager::removeCloudPointResponse* Arena::CreateMaybeMessage<::grpcIMapManager::removeCloudPointResponse>(Arena*);
template<> ::grpcIMapManager::removeKeyframeRequest* Arena::CreateMaybeMessage<::grpcIMapManager::removeKeyframeRequest>(Arena*);
template<> ::grpcIMapManager::removeKeyframeResponse* Arena::CreateMaybeMessage<::grpcIMapManager::removeKeyframeResponse>(Arena*);
template<> ::grpcIMapManager::saveToFileResponse* Arena::CreateMaybeMessage<::grpcIMapManager::saveToFileResponse>(Arena*);
template<> ::grpcIMapManager::setMapRequest* Arena::CreateMaybeMessage<::grpcIMapManager::setMapRequest>(Arena*);
template<> ::grpcIMapManager::setMapResponse* Arena::CreateMaybeMessage<::grpcIMapManager::setMapResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIMapManager {

// ===================================================================

class setMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.setMapRequest) */ {
 public:
  inline setMapRequest() : setMapRequest(nullptr) {}
  virtual ~setMapRequest();
  explicit constexpr setMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapRequest(const setMapRequest& from);
  setMapRequest(setMapRequest&& from) noexcept
    : setMapRequest() {
    *this = ::std::move(from);
  }

  inline setMapRequest& operator=(const setMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapRequest& operator=(setMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapRequest* internal_default_instance() {
    return reinterpret_cast<const setMapRequest*>(
               &_setMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setMapRequest& a, setMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setMapRequest* New() const final {
    return CreateMaybeMessage<setMapRequest>(nullptr);
  }

  setMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setMapRequest& from);
  void MergeFrom(const setMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.setMapRequest";
  }
  protected:
  explicit setMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // bytes map = 1;
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const void* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.setMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class setMapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.setMapResponse) */ {
 public:
  inline setMapResponse() : setMapResponse(nullptr) {}
  virtual ~setMapResponse();
  explicit constexpr setMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapResponse(const setMapResponse& from);
  setMapResponse(setMapResponse&& from) noexcept
    : setMapResponse() {
    *this = ::std::move(from);
  }

  inline setMapResponse& operator=(const setMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapResponse& operator=(setMapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapResponse* internal_default_instance() {
    return reinterpret_cast<const setMapResponse*>(
               &_setMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(setMapResponse& a, setMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setMapResponse* New() const final {
    return CreateMaybeMessage<setMapResponse>(nullptr);
  }

  setMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setMapResponse& from);
  void MergeFrom(const setMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.setMapResponse";
  }
  protected:
  explicit setMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.setMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getMapRequest) */ {
 public:
  inline getMapRequest() : getMapRequest(nullptr) {}
  virtual ~getMapRequest();
  explicit constexpr getMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapRequest(const getMapRequest& from);
  getMapRequest(getMapRequest&& from) noexcept
    : getMapRequest() {
    *this = ::std::move(from);
  }

  inline getMapRequest& operator=(const getMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapRequest& operator=(getMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapRequest* internal_default_instance() {
    return reinterpret_cast<const getMapRequest*>(
               &_getMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(getMapRequest& a, getMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getMapRequest* New() const final {
    return CreateMaybeMessage<getMapRequest>(nullptr);
  }

  getMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getMapRequest& from);
  void MergeFrom(const getMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getMapRequest";
  }
  protected:
  explicit getMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // bytes map = 1;
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const void* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getMapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getMapResponse) */ {
 public:
  inline getMapResponse() : getMapResponse(nullptr) {}
  virtual ~getMapResponse();
  explicit constexpr getMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapResponse(const getMapResponse& from);
  getMapResponse(getMapResponse&& from) noexcept
    : getMapResponse() {
    *this = ::std::move(from);
  }

  inline getMapResponse& operator=(const getMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapResponse& operator=(getMapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapResponse* internal_default_instance() {
    return reinterpret_cast<const getMapResponse*>(
               &_getMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(getMapResponse& a, getMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getMapResponse* New() const final {
    return CreateMaybeMessage<getMapResponse>(nullptr);
  }

  getMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getMapResponse& from);
  void MergeFrom(const getMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getMapResponse";
  }
  protected:
  explicit getMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes map = 1;
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const void* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getLocalPointCloudRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getLocalPointCloudRequest) */ {
 public:
  inline getLocalPointCloudRequest() : getLocalPointCloudRequest(nullptr) {}
  virtual ~getLocalPointCloudRequest();
  explicit constexpr getLocalPointCloudRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getLocalPointCloudRequest(const getLocalPointCloudRequest& from);
  getLocalPointCloudRequest(getLocalPointCloudRequest&& from) noexcept
    : getLocalPointCloudRequest() {
    *this = ::std::move(from);
  }

  inline getLocalPointCloudRequest& operator=(const getLocalPointCloudRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getLocalPointCloudRequest& operator=(getLocalPointCloudRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getLocalPointCloudRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getLocalPointCloudRequest* internal_default_instance() {
    return reinterpret_cast<const getLocalPointCloudRequest*>(
               &_getLocalPointCloudRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getLocalPointCloudRequest& a, getLocalPointCloudRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getLocalPointCloudRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getLocalPointCloudRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getLocalPointCloudRequest* New() const final {
    return CreateMaybeMessage<getLocalPointCloudRequest>(nullptr);
  }

  getLocalPointCloudRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getLocalPointCloudRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getLocalPointCloudRequest& from);
  void MergeFrom(const getLocalPointCloudRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getLocalPointCloudRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getLocalPointCloudRequest";
  }
  protected:
  explicit getLocalPointCloudRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 1,
    kLocalPointCloudFieldNumber = 3,
    kMinWeightNeighborFieldNumber = 2,
  };
  // bytes keyframe = 1;
  void clear_keyframe();
  const std::string& keyframe() const;
  void set_keyframe(const std::string& value);
  void set_keyframe(std::string&& value);
  void set_keyframe(const char* value);
  void set_keyframe(const void* value, size_t size);
  std::string* mutable_keyframe();
  std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // bytes localPointCloud = 3;
  void clear_localpointcloud();
  const std::string& localpointcloud() const;
  void set_localpointcloud(const std::string& value);
  void set_localpointcloud(std::string&& value);
  void set_localpointcloud(const char* value);
  void set_localpointcloud(const void* value, size_t size);
  std::string* mutable_localpointcloud();
  std::string* release_localpointcloud();
  void set_allocated_localpointcloud(std::string* localpointcloud);
  private:
  const std::string& _internal_localpointcloud() const;
  void _internal_set_localpointcloud(const std::string& value);
  std::string* _internal_mutable_localpointcloud();
  public:

  // float minWeightNeighbor = 2;
  void clear_minweightneighbor();
  float minweightneighbor() const;
  void set_minweightneighbor(float value);
  private:
  float _internal_minweightneighbor() const;
  void _internal_set_minweightneighbor(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getLocalPointCloudRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localpointcloud_;
  float minweightneighbor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class getLocalPointCloudResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.getLocalPointCloudResponse) */ {
 public:
  inline getLocalPointCloudResponse() : getLocalPointCloudResponse(nullptr) {}
  virtual ~getLocalPointCloudResponse();
  explicit constexpr getLocalPointCloudResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getLocalPointCloudResponse(const getLocalPointCloudResponse& from);
  getLocalPointCloudResponse(getLocalPointCloudResponse&& from) noexcept
    : getLocalPointCloudResponse() {
    *this = ::std::move(from);
  }

  inline getLocalPointCloudResponse& operator=(const getLocalPointCloudResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getLocalPointCloudResponse& operator=(getLocalPointCloudResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getLocalPointCloudResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getLocalPointCloudResponse* internal_default_instance() {
    return reinterpret_cast<const getLocalPointCloudResponse*>(
               &_getLocalPointCloudResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getLocalPointCloudResponse& a, getLocalPointCloudResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getLocalPointCloudResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getLocalPointCloudResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getLocalPointCloudResponse* New() const final {
    return CreateMaybeMessage<getLocalPointCloudResponse>(nullptr);
  }

  getLocalPointCloudResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getLocalPointCloudResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getLocalPointCloudResponse& from);
  void MergeFrom(const getLocalPointCloudResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getLocalPointCloudResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.getLocalPointCloudResponse";
  }
  protected:
  explicit getLocalPointCloudResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalPointCloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes localPointCloud = 1;
  void clear_localpointcloud();
  const std::string& localpointcloud() const;
  void set_localpointcloud(const std::string& value);
  void set_localpointcloud(std::string&& value);
  void set_localpointcloud(const char* value);
  void set_localpointcloud(const void* value, size_t size);
  std::string* mutable_localpointcloud();
  std::string* release_localpointcloud();
  void set_allocated_localpointcloud(std::string* localpointcloud);
  private:
  const std::string& _internal_localpointcloud() const;
  void _internal_set_localpointcloud(const std::string& value);
  std::string* _internal_mutable_localpointcloud();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.getLocalPointCloudResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localpointcloud_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class addCloudPointRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.addCloudPointRequest) */ {
 public:
  inline addCloudPointRequest() : addCloudPointRequest(nullptr) {}
  virtual ~addCloudPointRequest();
  explicit constexpr addCloudPointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addCloudPointRequest(const addCloudPointRequest& from);
  addCloudPointRequest(addCloudPointRequest&& from) noexcept
    : addCloudPointRequest() {
    *this = ::std::move(from);
  }

  inline addCloudPointRequest& operator=(const addCloudPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addCloudPointRequest& operator=(addCloudPointRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addCloudPointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addCloudPointRequest* internal_default_instance() {
    return reinterpret_cast<const addCloudPointRequest*>(
               &_addCloudPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(addCloudPointRequest& a, addCloudPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addCloudPointRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addCloudPointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addCloudPointRequest* New() const final {
    return CreateMaybeMessage<addCloudPointRequest>(nullptr);
  }

  addCloudPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addCloudPointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addCloudPointRequest& from);
  void MergeFrom(const addCloudPointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addCloudPointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.addCloudPointRequest";
  }
  protected:
  explicit addCloudPointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudPointFieldNumber = 1,
  };
  // bytes cloudPoint = 1;
  void clear_cloudpoint();
  const std::string& cloudpoint() const;
  void set_cloudpoint(const std::string& value);
  void set_cloudpoint(std::string&& value);
  void set_cloudpoint(const char* value);
  void set_cloudpoint(const void* value, size_t size);
  std::string* mutable_cloudpoint();
  std::string* release_cloudpoint();
  void set_allocated_cloudpoint(std::string* cloudpoint);
  private:
  const std::string& _internal_cloudpoint() const;
  void _internal_set_cloudpoint(const std::string& value);
  std::string* _internal_mutable_cloudpoint();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.addCloudPointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class addCloudPointResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.addCloudPointResponse) */ {
 public:
  inline addCloudPointResponse() : addCloudPointResponse(nullptr) {}
  virtual ~addCloudPointResponse();
  explicit constexpr addCloudPointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addCloudPointResponse(const addCloudPointResponse& from);
  addCloudPointResponse(addCloudPointResponse&& from) noexcept
    : addCloudPointResponse() {
    *this = ::std::move(from);
  }

  inline addCloudPointResponse& operator=(const addCloudPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addCloudPointResponse& operator=(addCloudPointResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addCloudPointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const addCloudPointResponse* internal_default_instance() {
    return reinterpret_cast<const addCloudPointResponse*>(
               &_addCloudPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(addCloudPointResponse& a, addCloudPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addCloudPointResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addCloudPointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addCloudPointResponse* New() const final {
    return CreateMaybeMessage<addCloudPointResponse>(nullptr);
  }

  addCloudPointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addCloudPointResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addCloudPointResponse& from);
  void MergeFrom(const addCloudPointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addCloudPointResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.addCloudPointResponse";
  }
  protected:
  explicit addCloudPointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.addCloudPointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeCloudPointRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.removeCloudPointRequest) */ {
 public:
  inline removeCloudPointRequest() : removeCloudPointRequest(nullptr) {}
  virtual ~removeCloudPointRequest();
  explicit constexpr removeCloudPointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeCloudPointRequest(const removeCloudPointRequest& from);
  removeCloudPointRequest(removeCloudPointRequest&& from) noexcept
    : removeCloudPointRequest() {
    *this = ::std::move(from);
  }

  inline removeCloudPointRequest& operator=(const removeCloudPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeCloudPointRequest& operator=(removeCloudPointRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const removeCloudPointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeCloudPointRequest* internal_default_instance() {
    return reinterpret_cast<const removeCloudPointRequest*>(
               &_removeCloudPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(removeCloudPointRequest& a, removeCloudPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(removeCloudPointRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeCloudPointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline removeCloudPointRequest* New() const final {
    return CreateMaybeMessage<removeCloudPointRequest>(nullptr);
  }

  removeCloudPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<removeCloudPointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const removeCloudPointRequest& from);
  void MergeFrom(const removeCloudPointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeCloudPointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.removeCloudPointRequest";
  }
  protected:
  explicit removeCloudPointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudPointFieldNumber = 1,
  };
  // bytes cloudPoint = 1;
  void clear_cloudpoint();
  const std::string& cloudpoint() const;
  void set_cloudpoint(const std::string& value);
  void set_cloudpoint(std::string&& value);
  void set_cloudpoint(const char* value);
  void set_cloudpoint(const void* value, size_t size);
  std::string* mutable_cloudpoint();
  std::string* release_cloudpoint();
  void set_allocated_cloudpoint(std::string* cloudpoint);
  private:
  const std::string& _internal_cloudpoint() const;
  void _internal_set_cloudpoint(const std::string& value);
  std::string* _internal_mutable_cloudpoint();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.removeCloudPointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeCloudPointResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.removeCloudPointResponse) */ {
 public:
  inline removeCloudPointResponse() : removeCloudPointResponse(nullptr) {}
  virtual ~removeCloudPointResponse();
  explicit constexpr removeCloudPointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeCloudPointResponse(const removeCloudPointResponse& from);
  removeCloudPointResponse(removeCloudPointResponse&& from) noexcept
    : removeCloudPointResponse() {
    *this = ::std::move(from);
  }

  inline removeCloudPointResponse& operator=(const removeCloudPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeCloudPointResponse& operator=(removeCloudPointResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const removeCloudPointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeCloudPointResponse* internal_default_instance() {
    return reinterpret_cast<const removeCloudPointResponse*>(
               &_removeCloudPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(removeCloudPointResponse& a, removeCloudPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(removeCloudPointResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeCloudPointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline removeCloudPointResponse* New() const final {
    return CreateMaybeMessage<removeCloudPointResponse>(nullptr);
  }

  removeCloudPointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<removeCloudPointResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const removeCloudPointResponse& from);
  void MergeFrom(const removeCloudPointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeCloudPointResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.removeCloudPointResponse";
  }
  protected:
  explicit removeCloudPointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.removeCloudPointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class addKeyframeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.addKeyframeRequest) */ {
 public:
  inline addKeyframeRequest() : addKeyframeRequest(nullptr) {}
  virtual ~addKeyframeRequest();
  explicit constexpr addKeyframeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addKeyframeRequest(const addKeyframeRequest& from);
  addKeyframeRequest(addKeyframeRequest&& from) noexcept
    : addKeyframeRequest() {
    *this = ::std::move(from);
  }

  inline addKeyframeRequest& operator=(const addKeyframeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addKeyframeRequest& operator=(addKeyframeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addKeyframeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addKeyframeRequest* internal_default_instance() {
    return reinterpret_cast<const addKeyframeRequest*>(
               &_addKeyframeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(addKeyframeRequest& a, addKeyframeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addKeyframeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addKeyframeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addKeyframeRequest* New() const final {
    return CreateMaybeMessage<addKeyframeRequest>(nullptr);
  }

  addKeyframeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addKeyframeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addKeyframeRequest& from);
  void MergeFrom(const addKeyframeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addKeyframeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.addKeyframeRequest";
  }
  protected:
  explicit addKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 1,
  };
  // bytes keyframe = 1;
  void clear_keyframe();
  const std::string& keyframe() const;
  void set_keyframe(const std::string& value);
  void set_keyframe(std::string&& value);
  void set_keyframe(const char* value);
  void set_keyframe(const void* value, size_t size);
  std::string* mutable_keyframe();
  std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.addKeyframeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class addKeyframeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.addKeyframeResponse) */ {
 public:
  inline addKeyframeResponse() : addKeyframeResponse(nullptr) {}
  virtual ~addKeyframeResponse();
  explicit constexpr addKeyframeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addKeyframeResponse(const addKeyframeResponse& from);
  addKeyframeResponse(addKeyframeResponse&& from) noexcept
    : addKeyframeResponse() {
    *this = ::std::move(from);
  }

  inline addKeyframeResponse& operator=(const addKeyframeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addKeyframeResponse& operator=(addKeyframeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addKeyframeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const addKeyframeResponse* internal_default_instance() {
    return reinterpret_cast<const addKeyframeResponse*>(
               &_addKeyframeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(addKeyframeResponse& a, addKeyframeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addKeyframeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addKeyframeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addKeyframeResponse* New() const final {
    return CreateMaybeMessage<addKeyframeResponse>(nullptr);
  }

  addKeyframeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addKeyframeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addKeyframeResponse& from);
  void MergeFrom(const addKeyframeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addKeyframeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.addKeyframeResponse";
  }
  protected:
  explicit addKeyframeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.addKeyframeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeKeyframeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.removeKeyframeRequest) */ {
 public:
  inline removeKeyframeRequest() : removeKeyframeRequest(nullptr) {}
  virtual ~removeKeyframeRequest();
  explicit constexpr removeKeyframeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeKeyframeRequest(const removeKeyframeRequest& from);
  removeKeyframeRequest(removeKeyframeRequest&& from) noexcept
    : removeKeyframeRequest() {
    *this = ::std::move(from);
  }

  inline removeKeyframeRequest& operator=(const removeKeyframeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeKeyframeRequest& operator=(removeKeyframeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const removeKeyframeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeKeyframeRequest* internal_default_instance() {
    return reinterpret_cast<const removeKeyframeRequest*>(
               &_removeKeyframeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(removeKeyframeRequest& a, removeKeyframeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(removeKeyframeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeKeyframeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline removeKeyframeRequest* New() const final {
    return CreateMaybeMessage<removeKeyframeRequest>(nullptr);
  }

  removeKeyframeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<removeKeyframeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const removeKeyframeRequest& from);
  void MergeFrom(const removeKeyframeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeKeyframeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.removeKeyframeRequest";
  }
  protected:
  explicit removeKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 1,
  };
  // bytes keyframe = 1;
  void clear_keyframe();
  const std::string& keyframe() const;
  void set_keyframe(const std::string& value);
  void set_keyframe(std::string&& value);
  void set_keyframe(const char* value);
  void set_keyframe(const void* value, size_t size);
  std::string* mutable_keyframe();
  std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.removeKeyframeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeKeyframeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.removeKeyframeResponse) */ {
 public:
  inline removeKeyframeResponse() : removeKeyframeResponse(nullptr) {}
  virtual ~removeKeyframeResponse();
  explicit constexpr removeKeyframeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeKeyframeResponse(const removeKeyframeResponse& from);
  removeKeyframeResponse(removeKeyframeResponse&& from) noexcept
    : removeKeyframeResponse() {
    *this = ::std::move(from);
  }

  inline removeKeyframeResponse& operator=(const removeKeyframeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeKeyframeResponse& operator=(removeKeyframeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const removeKeyframeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeKeyframeResponse* internal_default_instance() {
    return reinterpret_cast<const removeKeyframeResponse*>(
               &_removeKeyframeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(removeKeyframeResponse& a, removeKeyframeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(removeKeyframeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeKeyframeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline removeKeyframeResponse* New() const final {
    return CreateMaybeMessage<removeKeyframeResponse>(nullptr);
  }

  removeKeyframeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<removeKeyframeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const removeKeyframeResponse& from);
  void MergeFrom(const removeKeyframeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeKeyframeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.removeKeyframeResponse";
  }
  protected:
  explicit removeKeyframeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.removeKeyframeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class pointCloudPruningRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.pointCloudPruningRequest) */ {
 public:
  inline pointCloudPruningRequest() : pointCloudPruningRequest(nullptr) {}
  virtual ~pointCloudPruningRequest();
  explicit constexpr pointCloudPruningRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pointCloudPruningRequest(const pointCloudPruningRequest& from);
  pointCloudPruningRequest(pointCloudPruningRequest&& from) noexcept
    : pointCloudPruningRequest() {
    *this = ::std::move(from);
  }

  inline pointCloudPruningRequest& operator=(const pointCloudPruningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline pointCloudPruningRequest& operator=(pointCloudPruningRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pointCloudPruningRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const pointCloudPruningRequest* internal_default_instance() {
    return reinterpret_cast<const pointCloudPruningRequest*>(
               &_pointCloudPruningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(pointCloudPruningRequest& a, pointCloudPruningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(pointCloudPruningRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pointCloudPruningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pointCloudPruningRequest* New() const final {
    return CreateMaybeMessage<pointCloudPruningRequest>(nullptr);
  }

  pointCloudPruningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pointCloudPruningRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pointCloudPruningRequest& from);
  void MergeFrom(const pointCloudPruningRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pointCloudPruningRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.pointCloudPruningRequest";
  }
  protected:
  explicit pointCloudPruningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloudPointsFieldNumber = 1,
  };
  // bytes cloudPoints = 1;
  void clear_cloudpoints();
  const std::string& cloudpoints() const;
  void set_cloudpoints(const std::string& value);
  void set_cloudpoints(std::string&& value);
  void set_cloudpoints(const char* value);
  void set_cloudpoints(const void* value, size_t size);
  std::string* mutable_cloudpoints();
  std::string* release_cloudpoints();
  void set_allocated_cloudpoints(std::string* cloudpoints);
  private:
  const std::string& _internal_cloudpoints() const;
  void _internal_set_cloudpoints(const std::string& value);
  std::string* _internal_mutable_cloudpoints();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.pointCloudPruningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudpoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class pointCloudPruningResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.pointCloudPruningResponse) */ {
 public:
  inline pointCloudPruningResponse() : pointCloudPruningResponse(nullptr) {}
  virtual ~pointCloudPruningResponse();
  explicit constexpr pointCloudPruningResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pointCloudPruningResponse(const pointCloudPruningResponse& from);
  pointCloudPruningResponse(pointCloudPruningResponse&& from) noexcept
    : pointCloudPruningResponse() {
    *this = ::std::move(from);
  }

  inline pointCloudPruningResponse& operator=(const pointCloudPruningResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline pointCloudPruningResponse& operator=(pointCloudPruningResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pointCloudPruningResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const pointCloudPruningResponse* internal_default_instance() {
    return reinterpret_cast<const pointCloudPruningResponse*>(
               &_pointCloudPruningResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(pointCloudPruningResponse& a, pointCloudPruningResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(pointCloudPruningResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pointCloudPruningResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pointCloudPruningResponse* New() const final {
    return CreateMaybeMessage<pointCloudPruningResponse>(nullptr);
  }

  pointCloudPruningResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pointCloudPruningResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pointCloudPruningResponse& from);
  void MergeFrom(const pointCloudPruningResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pointCloudPruningResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.pointCloudPruningResponse";
  }
  protected:
  explicit pointCloudPruningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.pointCloudPruningResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class keyframePruningRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.keyframePruningRequest) */ {
 public:
  inline keyframePruningRequest() : keyframePruningRequest(nullptr) {}
  virtual ~keyframePruningRequest();
  explicit constexpr keyframePruningRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  keyframePruningRequest(const keyframePruningRequest& from);
  keyframePruningRequest(keyframePruningRequest&& from) noexcept
    : keyframePruningRequest() {
    *this = ::std::move(from);
  }

  inline keyframePruningRequest& operator=(const keyframePruningRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline keyframePruningRequest& operator=(keyframePruningRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const keyframePruningRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const keyframePruningRequest* internal_default_instance() {
    return reinterpret_cast<const keyframePruningRequest*>(
               &_keyframePruningRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(keyframePruningRequest& a, keyframePruningRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(keyframePruningRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(keyframePruningRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline keyframePruningRequest* New() const final {
    return CreateMaybeMessage<keyframePruningRequest>(nullptr);
  }

  keyframePruningRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<keyframePruningRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const keyframePruningRequest& from);
  void MergeFrom(const keyframePruningRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(keyframePruningRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.keyframePruningRequest";
  }
  protected:
  explicit keyframePruningRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 1,
  };
  // bytes keyframes = 1;
  void clear_keyframes();
  const std::string& keyframes() const;
  void set_keyframes(const std::string& value);
  void set_keyframes(std::string&& value);
  void set_keyframes(const char* value);
  void set_keyframes(const void* value, size_t size);
  std::string* mutable_keyframes();
  std::string* release_keyframes();
  void set_allocated_keyframes(std::string* keyframes);
  private:
  const std::string& _internal_keyframes() const;
  void _internal_set_keyframes(const std::string& value);
  std::string* _internal_mutable_keyframes();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.keyframePruningRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class keyframePruningResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.keyframePruningResponse) */ {
 public:
  inline keyframePruningResponse() : keyframePruningResponse(nullptr) {}
  virtual ~keyframePruningResponse();
  explicit constexpr keyframePruningResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  keyframePruningResponse(const keyframePruningResponse& from);
  keyframePruningResponse(keyframePruningResponse&& from) noexcept
    : keyframePruningResponse() {
    *this = ::std::move(from);
  }

  inline keyframePruningResponse& operator=(const keyframePruningResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline keyframePruningResponse& operator=(keyframePruningResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const keyframePruningResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const keyframePruningResponse* internal_default_instance() {
    return reinterpret_cast<const keyframePruningResponse*>(
               &_keyframePruningResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(keyframePruningResponse& a, keyframePruningResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(keyframePruningResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(keyframePruningResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline keyframePruningResponse* New() const final {
    return CreateMaybeMessage<keyframePruningResponse>(nullptr);
  }

  keyframePruningResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<keyframePruningResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const keyframePruningResponse& from);
  void MergeFrom(const keyframePruningResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(keyframePruningResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.keyframePruningResponse";
  }
  protected:
  explicit keyframePruningResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.keyframePruningResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.saveToFileResponse) */ {
 public:
  inline saveToFileResponse() : saveToFileResponse(nullptr) {}
  virtual ~saveToFileResponse();
  explicit constexpr saveToFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileResponse(const saveToFileResponse& from);
  saveToFileResponse(saveToFileResponse&& from) noexcept
    : saveToFileResponse() {
    *this = ::std::move(from);
  }

  inline saveToFileResponse& operator=(const saveToFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileResponse& operator=(saveToFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const saveToFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileResponse* internal_default_instance() {
    return reinterpret_cast<const saveToFileResponse*>(
               &_saveToFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(saveToFileResponse& a, saveToFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline saveToFileResponse* New() const final {
    return CreateMaybeMessage<saveToFileResponse>(nullptr);
  }

  saveToFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<saveToFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const saveToFileResponse& from);
  void MergeFrom(const saveToFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.saveToFileResponse";
  }
  protected:
  explicit saveToFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.saveToFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapManager.loadFromFileResponse) */ {
 public:
  inline loadFromFileResponse() : loadFromFileResponse(nullptr) {}
  virtual ~loadFromFileResponse();
  explicit constexpr loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileResponse(const loadFromFileResponse& from);
  loadFromFileResponse(loadFromFileResponse&& from) noexcept
    : loadFromFileResponse() {
    *this = ::std::move(from);
  }

  inline loadFromFileResponse& operator=(const loadFromFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileResponse& operator=(loadFromFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loadFromFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileResponse* internal_default_instance() {
    return reinterpret_cast<const loadFromFileResponse*>(
               &_loadFromFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(loadFromFileResponse& a, loadFromFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadFromFileResponse* New() const final {
    return CreateMaybeMessage<loadFromFileResponse>(nullptr);
  }

  loadFromFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadFromFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loadFromFileResponse& from);
  void MergeFrom(const loadFromFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapManager.loadFromFileResponse";
  }
  protected:
  explicit loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMapManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapManager.loadFromFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapManagerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setMapRequest

// bytes map = 1;
inline void setMapRequest::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& setMapRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.setMapRequest.map)
  return _internal_map();
}
inline void setMapRequest::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.setMapRequest.map)
}
inline std::string* setMapRequest::mutable_map() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.setMapRequest.map)
  return _internal_mutable_map();
}
inline const std::string& setMapRequest::_internal_map() const {
  return map_.Get();
}
inline void setMapRequest::_internal_set_map(const std::string& value) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setMapRequest::set_map(std::string&& value) {
  
  map_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.setMapRequest.map)
}
inline void setMapRequest::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.setMapRequest.map)
}
inline void setMapRequest::set_map(const void* value,
    size_t size) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.setMapRequest.map)
}
inline std::string* setMapRequest::_internal_mutable_map() {
  
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setMapRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.setMapRequest.map)
  return map_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setMapRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.setMapRequest.map)
}

// -------------------------------------------------------------------

// setMapResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setMapResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.setMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setMapResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setMapResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.setMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMapRequest

// bytes map = 1;
inline void getMapRequest::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& getMapRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getMapRequest.map)
  return _internal_map();
}
inline void getMapRequest::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getMapRequest.map)
}
inline std::string* getMapRequest::mutable_map() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getMapRequest.map)
  return _internal_mutable_map();
}
inline const std::string& getMapRequest::_internal_map() const {
  return map_.Get();
}
inline void getMapRequest::_internal_set_map(const std::string& value) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getMapRequest::set_map(std::string&& value) {
  
  map_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.getMapRequest.map)
}
inline void getMapRequest::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.getMapRequest.map)
}
inline void getMapRequest::set_map(const void* value,
    size_t size) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.getMapRequest.map)
}
inline std::string* getMapRequest::_internal_mutable_map() {
  
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getMapRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getMapRequest.map)
  return map_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getMapRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getMapRequest.map)
}

// -------------------------------------------------------------------

// getMapResponse

// bytes map = 1;
inline void getMapResponse::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& getMapResponse::map() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getMapResponse.map)
  return _internal_map();
}
inline void getMapResponse::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getMapResponse.map)
}
inline std::string* getMapResponse::mutable_map() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getMapResponse.map)
  return _internal_mutable_map();
}
inline const std::string& getMapResponse::_internal_map() const {
  return map_.Get();
}
inline void getMapResponse::_internal_set_map(const std::string& value) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getMapResponse::set_map(std::string&& value) {
  
  map_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.getMapResponse.map)
}
inline void getMapResponse::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.getMapResponse.map)
}
inline void getMapResponse::set_map(const void* value,
    size_t size) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.getMapResponse.map)
}
inline std::string* getMapResponse::_internal_mutable_map() {
  
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getMapResponse::release_map() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getMapResponse.map)
  return map_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getMapResponse::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getMapResponse.map)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getMapResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMapResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getMapResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getLocalPointCloudRequest

// bytes keyframe = 1;
inline void getLocalPointCloudRequest::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& getLocalPointCloudRequest::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloudRequest.keyframe)
  return _internal_keyframe();
}
inline void getLocalPointCloudRequest::set_keyframe(const std::string& value) {
  _internal_set_keyframe(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloudRequest.keyframe)
}
inline std::string* getLocalPointCloudRequest::mutable_keyframe() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getLocalPointCloudRequest.keyframe)
  return _internal_mutable_keyframe();
}
inline const std::string& getLocalPointCloudRequest::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void getLocalPointCloudRequest::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getLocalPointCloudRequest::set_keyframe(std::string&& value) {
  
  keyframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.getLocalPointCloudRequest.keyframe)
}
inline void getLocalPointCloudRequest::set_keyframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.getLocalPointCloudRequest.keyframe)
}
inline void getLocalPointCloudRequest::set_keyframe(const void* value,
    size_t size) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.getLocalPointCloudRequest.keyframe)
}
inline std::string* getLocalPointCloudRequest::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getLocalPointCloudRequest::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getLocalPointCloudRequest.keyframe)
  return keyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getLocalPointCloudRequest::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getLocalPointCloudRequest.keyframe)
}

// float minWeightNeighbor = 2;
inline void getLocalPointCloudRequest::clear_minweightneighbor() {
  minweightneighbor_ = 0;
}
inline float getLocalPointCloudRequest::_internal_minweightneighbor() const {
  return minweightneighbor_;
}
inline float getLocalPointCloudRequest::minweightneighbor() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloudRequest.minWeightNeighbor)
  return _internal_minweightneighbor();
}
inline void getLocalPointCloudRequest::_internal_set_minweightneighbor(float value) {
  
  minweightneighbor_ = value;
}
inline void getLocalPointCloudRequest::set_minweightneighbor(float value) {
  _internal_set_minweightneighbor(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloudRequest.minWeightNeighbor)
}

// bytes localPointCloud = 3;
inline void getLocalPointCloudRequest::clear_localpointcloud() {
  localpointcloud_.ClearToEmpty();
}
inline const std::string& getLocalPointCloudRequest::localpointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloudRequest.localPointCloud)
  return _internal_localpointcloud();
}
inline void getLocalPointCloudRequest::set_localpointcloud(const std::string& value) {
  _internal_set_localpointcloud(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloudRequest.localPointCloud)
}
inline std::string* getLocalPointCloudRequest::mutable_localpointcloud() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getLocalPointCloudRequest.localPointCloud)
  return _internal_mutable_localpointcloud();
}
inline const std::string& getLocalPointCloudRequest::_internal_localpointcloud() const {
  return localpointcloud_.Get();
}
inline void getLocalPointCloudRequest::_internal_set_localpointcloud(const std::string& value) {
  
  localpointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getLocalPointCloudRequest::set_localpointcloud(std::string&& value) {
  
  localpointcloud_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.getLocalPointCloudRequest.localPointCloud)
}
inline void getLocalPointCloudRequest::set_localpointcloud(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  localpointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.getLocalPointCloudRequest.localPointCloud)
}
inline void getLocalPointCloudRequest::set_localpointcloud(const void* value,
    size_t size) {
  
  localpointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.getLocalPointCloudRequest.localPointCloud)
}
inline std::string* getLocalPointCloudRequest::_internal_mutable_localpointcloud() {
  
  return localpointcloud_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getLocalPointCloudRequest::release_localpointcloud() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getLocalPointCloudRequest.localPointCloud)
  return localpointcloud_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getLocalPointCloudRequest::set_allocated_localpointcloud(std::string* localpointcloud) {
  if (localpointcloud != nullptr) {
    
  } else {
    
  }
  localpointcloud_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localpointcloud,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getLocalPointCloudRequest.localPointCloud)
}

// -------------------------------------------------------------------

// getLocalPointCloudResponse

// bytes localPointCloud = 1;
inline void getLocalPointCloudResponse::clear_localpointcloud() {
  localpointcloud_.ClearToEmpty();
}
inline const std::string& getLocalPointCloudResponse::localpointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloudResponse.localPointCloud)
  return _internal_localpointcloud();
}
inline void getLocalPointCloudResponse::set_localpointcloud(const std::string& value) {
  _internal_set_localpointcloud(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloudResponse.localPointCloud)
}
inline std::string* getLocalPointCloudResponse::mutable_localpointcloud() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.getLocalPointCloudResponse.localPointCloud)
  return _internal_mutable_localpointcloud();
}
inline const std::string& getLocalPointCloudResponse::_internal_localpointcloud() const {
  return localpointcloud_.Get();
}
inline void getLocalPointCloudResponse::_internal_set_localpointcloud(const std::string& value) {
  
  localpointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getLocalPointCloudResponse::set_localpointcloud(std::string&& value) {
  
  localpointcloud_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.getLocalPointCloudResponse.localPointCloud)
}
inline void getLocalPointCloudResponse::set_localpointcloud(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  localpointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.getLocalPointCloudResponse.localPointCloud)
}
inline void getLocalPointCloudResponse::set_localpointcloud(const void* value,
    size_t size) {
  
  localpointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.getLocalPointCloudResponse.localPointCloud)
}
inline std::string* getLocalPointCloudResponse::_internal_mutable_localpointcloud() {
  
  return localpointcloud_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getLocalPointCloudResponse::release_localpointcloud() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.getLocalPointCloudResponse.localPointCloud)
  return localpointcloud_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getLocalPointCloudResponse::set_allocated_localpointcloud(std::string* localpointcloud) {
  if (localpointcloud != nullptr) {
    
  } else {
    
  }
  localpointcloud_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localpointcloud,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.getLocalPointCloudResponse.localPointCloud)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getLocalPointCloudResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getLocalPointCloudResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getLocalPointCloudResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.getLocalPointCloudResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getLocalPointCloudResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getLocalPointCloudResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.getLocalPointCloudResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addCloudPointRequest

// bytes cloudPoint = 1;
inline void addCloudPointRequest::clear_cloudpoint() {
  cloudpoint_.ClearToEmpty();
}
inline const std::string& addCloudPointRequest::cloudpoint() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addCloudPointRequest.cloudPoint)
  return _internal_cloudpoint();
}
inline void addCloudPointRequest::set_cloudpoint(const std::string& value) {
  _internal_set_cloudpoint(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.addCloudPointRequest.cloudPoint)
}
inline std::string* addCloudPointRequest::mutable_cloudpoint() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.addCloudPointRequest.cloudPoint)
  return _internal_mutable_cloudpoint();
}
inline const std::string& addCloudPointRequest::_internal_cloudpoint() const {
  return cloudpoint_.Get();
}
inline void addCloudPointRequest::_internal_set_cloudpoint(const std::string& value) {
  
  cloudpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void addCloudPointRequest::set_cloudpoint(std::string&& value) {
  
  cloudpoint_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.addCloudPointRequest.cloudPoint)
}
inline void addCloudPointRequest::set_cloudpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloudpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.addCloudPointRequest.cloudPoint)
}
inline void addCloudPointRequest::set_cloudpoint(const void* value,
    size_t size) {
  
  cloudpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.addCloudPointRequest.cloudPoint)
}
inline std::string* addCloudPointRequest::_internal_mutable_cloudpoint() {
  
  return cloudpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* addCloudPointRequest::release_cloudpoint() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.addCloudPointRequest.cloudPoint)
  return cloudpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addCloudPointRequest::set_allocated_cloudpoint(std::string* cloudpoint) {
  if (cloudpoint != nullptr) {
    
  } else {
    
  }
  cloudpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloudpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.addCloudPointRequest.cloudPoint)
}

// -------------------------------------------------------------------

// addCloudPointResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void addCloudPointResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addCloudPointResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addCloudPointResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addCloudPointResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addCloudPointResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addCloudPointResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.addCloudPointResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// removeCloudPointRequest

// bytes cloudPoint = 1;
inline void removeCloudPointRequest::clear_cloudpoint() {
  cloudpoint_.ClearToEmpty();
}
inline const std::string& removeCloudPointRequest::cloudpoint() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeCloudPointRequest.cloudPoint)
  return _internal_cloudpoint();
}
inline void removeCloudPointRequest::set_cloudpoint(const std::string& value) {
  _internal_set_cloudpoint(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeCloudPointRequest.cloudPoint)
}
inline std::string* removeCloudPointRequest::mutable_cloudpoint() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.removeCloudPointRequest.cloudPoint)
  return _internal_mutable_cloudpoint();
}
inline const std::string& removeCloudPointRequest::_internal_cloudpoint() const {
  return cloudpoint_.Get();
}
inline void removeCloudPointRequest::_internal_set_cloudpoint(const std::string& value) {
  
  cloudpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void removeCloudPointRequest::set_cloudpoint(std::string&& value) {
  
  cloudpoint_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.removeCloudPointRequest.cloudPoint)
}
inline void removeCloudPointRequest::set_cloudpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloudpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.removeCloudPointRequest.cloudPoint)
}
inline void removeCloudPointRequest::set_cloudpoint(const void* value,
    size_t size) {
  
  cloudpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.removeCloudPointRequest.cloudPoint)
}
inline std::string* removeCloudPointRequest::_internal_mutable_cloudpoint() {
  
  return cloudpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* removeCloudPointRequest::release_cloudpoint() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.removeCloudPointRequest.cloudPoint)
  return cloudpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void removeCloudPointRequest::set_allocated_cloudpoint(std::string* cloudpoint) {
  if (cloudpoint != nullptr) {
    
  } else {
    
  }
  cloudpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloudpoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.removeCloudPointRequest.cloudPoint)
}

// -------------------------------------------------------------------

// removeCloudPointResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void removeCloudPointResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 removeCloudPointResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 removeCloudPointResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeCloudPointResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void removeCloudPointResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void removeCloudPointResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeCloudPointResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addKeyframeRequest

// bytes keyframe = 1;
inline void addKeyframeRequest::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& addKeyframeRequest::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addKeyframeRequest.keyframe)
  return _internal_keyframe();
}
inline void addKeyframeRequest::set_keyframe(const std::string& value) {
  _internal_set_keyframe(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.addKeyframeRequest.keyframe)
}
inline std::string* addKeyframeRequest::mutable_keyframe() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.addKeyframeRequest.keyframe)
  return _internal_mutable_keyframe();
}
inline const std::string& addKeyframeRequest::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void addKeyframeRequest::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void addKeyframeRequest::set_keyframe(std::string&& value) {
  
  keyframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.addKeyframeRequest.keyframe)
}
inline void addKeyframeRequest::set_keyframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.addKeyframeRequest.keyframe)
}
inline void addKeyframeRequest::set_keyframe(const void* value,
    size_t size) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.addKeyframeRequest.keyframe)
}
inline std::string* addKeyframeRequest::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* addKeyframeRequest::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.addKeyframeRequest.keyframe)
  return keyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addKeyframeRequest::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.addKeyframeRequest.keyframe)
}

// -------------------------------------------------------------------

// addKeyframeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void addKeyframeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addKeyframeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addKeyframeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.addKeyframeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addKeyframeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addKeyframeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.addKeyframeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// removeKeyframeRequest

// bytes keyframe = 1;
inline void removeKeyframeRequest::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& removeKeyframeRequest::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeKeyframeRequest.keyframe)
  return _internal_keyframe();
}
inline void removeKeyframeRequest::set_keyframe(const std::string& value) {
  _internal_set_keyframe(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeKeyframeRequest.keyframe)
}
inline std::string* removeKeyframeRequest::mutable_keyframe() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.removeKeyframeRequest.keyframe)
  return _internal_mutable_keyframe();
}
inline const std::string& removeKeyframeRequest::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void removeKeyframeRequest::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void removeKeyframeRequest::set_keyframe(std::string&& value) {
  
  keyframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.removeKeyframeRequest.keyframe)
}
inline void removeKeyframeRequest::set_keyframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.removeKeyframeRequest.keyframe)
}
inline void removeKeyframeRequest::set_keyframe(const void* value,
    size_t size) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.removeKeyframeRequest.keyframe)
}
inline std::string* removeKeyframeRequest::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* removeKeyframeRequest::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.removeKeyframeRequest.keyframe)
  return keyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void removeKeyframeRequest::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.removeKeyframeRequest.keyframe)
}

// -------------------------------------------------------------------

// removeKeyframeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void removeKeyframeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 removeKeyframeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 removeKeyframeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.removeKeyframeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void removeKeyframeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void removeKeyframeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.removeKeyframeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// pointCloudPruningRequest

// bytes cloudPoints = 1;
inline void pointCloudPruningRequest::clear_cloudpoints() {
  cloudpoints_.ClearToEmpty();
}
inline const std::string& pointCloudPruningRequest::cloudpoints() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
  return _internal_cloudpoints();
}
inline void pointCloudPruningRequest::set_cloudpoints(const std::string& value) {
  _internal_set_cloudpoints(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
}
inline std::string* pointCloudPruningRequest::mutable_cloudpoints() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
  return _internal_mutable_cloudpoints();
}
inline const std::string& pointCloudPruningRequest::_internal_cloudpoints() const {
  return cloudpoints_.Get();
}
inline void pointCloudPruningRequest::_internal_set_cloudpoints(const std::string& value) {
  
  cloudpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void pointCloudPruningRequest::set_cloudpoints(std::string&& value) {
  
  cloudpoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
}
inline void pointCloudPruningRequest::set_cloudpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloudpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
}
inline void pointCloudPruningRequest::set_cloudpoints(const void* value,
    size_t size) {
  
  cloudpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
}
inline std::string* pointCloudPruningRequest::_internal_mutable_cloudpoints() {
  
  return cloudpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* pointCloudPruningRequest::release_cloudpoints() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
  return cloudpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void pointCloudPruningRequest::set_allocated_cloudpoints(std::string* cloudpoints) {
  if (cloudpoints != nullptr) {
    
  } else {
    
  }
  cloudpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloudpoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.pointCloudPruningRequest.cloudPoints)
}

// -------------------------------------------------------------------

// pointCloudPruningResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void pointCloudPruningResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pointCloudPruningResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pointCloudPruningResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.pointCloudPruningResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void pointCloudPruningResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void pointCloudPruningResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.pointCloudPruningResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// keyframePruningRequest

// bytes keyframes = 1;
inline void keyframePruningRequest::clear_keyframes() {
  keyframes_.ClearToEmpty();
}
inline const std::string& keyframePruningRequest::keyframes() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.keyframePruningRequest.keyframes)
  return _internal_keyframes();
}
inline void keyframePruningRequest::set_keyframes(const std::string& value) {
  _internal_set_keyframes(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.keyframePruningRequest.keyframes)
}
inline std::string* keyframePruningRequest::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable:grpcIMapManager.keyframePruningRequest.keyframes)
  return _internal_mutable_keyframes();
}
inline const std::string& keyframePruningRequest::_internal_keyframes() const {
  return keyframes_.Get();
}
inline void keyframePruningRequest::_internal_set_keyframes(const std::string& value) {
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void keyframePruningRequest::set_keyframes(std::string&& value) {
  
  keyframes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMapManager.keyframePruningRequest.keyframes)
}
inline void keyframePruningRequest::set_keyframes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMapManager.keyframePruningRequest.keyframes)
}
inline void keyframePruningRequest::set_keyframes(const void* value,
    size_t size) {
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMapManager.keyframePruningRequest.keyframes)
}
inline std::string* keyframePruningRequest::_internal_mutable_keyframes() {
  
  return keyframes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* keyframePruningRequest::release_keyframes() {
  // @@protoc_insertion_point(field_release:grpcIMapManager.keyframePruningRequest.keyframes)
  return keyframes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void keyframePruningRequest::set_allocated_keyframes(std::string* keyframes) {
  if (keyframes != nullptr) {
    
  } else {
    
  }
  keyframes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapManager.keyframePruningRequest.keyframes)
}

// -------------------------------------------------------------------

// keyframePruningResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void keyframePruningResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 keyframePruningResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 keyframePruningResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.keyframePruningResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void keyframePruningResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void keyframePruningResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.keyframePruningResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// saveToFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void saveToFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 saveToFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 saveToFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.saveToFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void saveToFileResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void saveToFileResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.saveToFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// loadFromFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void loadFromFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loadFromFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loadFromFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapManager.loadFromFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void loadFromFileResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void loadFromFileResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapManager.loadFromFileResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIMapManager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIMapManagerService_2eproto
