// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIBundlerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIBundlerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIBundlerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIBundlerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIBundlerService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIBundlerService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIBundlerService_2eproto_metadata_getter(int index);
namespace grpcIBundler {
class bundleAdjustmentRequest;
struct bundleAdjustmentRequestDefaultTypeInternal;
extern bundleAdjustmentRequestDefaultTypeInternal _bundleAdjustmentRequest_default_instance_;
class bundleAdjustmentResponse;
struct bundleAdjustmentResponseDefaultTypeInternal;
extern bundleAdjustmentResponseDefaultTypeInternal _bundleAdjustmentResponse_default_instance_;
class setMapperRequest;
struct setMapperRequestDefaultTypeInternal;
extern setMapperRequestDefaultTypeInternal _setMapperRequest_default_instance_;
class setMapperResponse;
struct setMapperResponseDefaultTypeInternal;
extern setMapperResponseDefaultTypeInternal _setMapperResponse_default_instance_;
}  // namespace grpcIBundler
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIBundler::bundleAdjustmentRequest* Arena::CreateMaybeMessage<::grpcIBundler::bundleAdjustmentRequest>(Arena*);
template<> ::grpcIBundler::bundleAdjustmentResponse* Arena::CreateMaybeMessage<::grpcIBundler::bundleAdjustmentResponse>(Arena*);
template<> ::grpcIBundler::setMapperRequest* Arena::CreateMaybeMessage<::grpcIBundler::setMapperRequest>(Arena*);
template<> ::grpcIBundler::setMapperResponse* Arena::CreateMaybeMessage<::grpcIBundler::setMapperResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIBundler {

// ===================================================================

class setMapperRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBundler.setMapperRequest) */ {
 public:
  inline setMapperRequest() : setMapperRequest(nullptr) {}
  virtual ~setMapperRequest();
  explicit constexpr setMapperRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapperRequest(const setMapperRequest& from);
  setMapperRequest(setMapperRequest&& from) noexcept
    : setMapperRequest() {
    *this = ::std::move(from);
  }

  inline setMapperRequest& operator=(const setMapperRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapperRequest& operator=(setMapperRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setMapperRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapperRequest* internal_default_instance() {
    return reinterpret_cast<const setMapperRequest*>(
               &_setMapperRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setMapperRequest& a, setMapperRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapperRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapperRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setMapperRequest* New() const final {
    return CreateMaybeMessage<setMapperRequest>(nullptr);
  }

  setMapperRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setMapperRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setMapperRequest& from);
  void MergeFrom(const setMapperRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapperRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBundler.setMapperRequest";
  }
  protected:
  explicit setMapperRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIBundlerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
  };
  // bytes map = 1;
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const void* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // @@protoc_insertion_point(class_scope:grpcIBundler.setMapperRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIBundlerService_2eproto;
};
// -------------------------------------------------------------------

class setMapperResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBundler.setMapperResponse) */ {
 public:
  inline setMapperResponse() : setMapperResponse(nullptr) {}
  virtual ~setMapperResponse();
  explicit constexpr setMapperResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapperResponse(const setMapperResponse& from);
  setMapperResponse(setMapperResponse&& from) noexcept
    : setMapperResponse() {
    *this = ::std::move(from);
  }

  inline setMapperResponse& operator=(const setMapperResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapperResponse& operator=(setMapperResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setMapperResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapperResponse* internal_default_instance() {
    return reinterpret_cast<const setMapperResponse*>(
               &_setMapperResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(setMapperResponse& a, setMapperResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapperResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapperResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setMapperResponse* New() const final {
    return CreateMaybeMessage<setMapperResponse>(nullptr);
  }

  setMapperResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setMapperResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setMapperResponse& from);
  void MergeFrom(const setMapperResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapperResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBundler.setMapperResponse";
  }
  protected:
  explicit setMapperResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIBundlerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIBundler.setMapperResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIBundlerService_2eproto;
};
// -------------------------------------------------------------------

class bundleAdjustmentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBundler.bundleAdjustmentRequest) */ {
 public:
  inline bundleAdjustmentRequest() : bundleAdjustmentRequest(nullptr) {}
  virtual ~bundleAdjustmentRequest();
  explicit constexpr bundleAdjustmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  bundleAdjustmentRequest(const bundleAdjustmentRequest& from);
  bundleAdjustmentRequest(bundleAdjustmentRequest&& from) noexcept
    : bundleAdjustmentRequest() {
    *this = ::std::move(from);
  }

  inline bundleAdjustmentRequest& operator=(const bundleAdjustmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline bundleAdjustmentRequest& operator=(bundleAdjustmentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bundleAdjustmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const bundleAdjustmentRequest* internal_default_instance() {
    return reinterpret_cast<const bundleAdjustmentRequest*>(
               &_bundleAdjustmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(bundleAdjustmentRequest& a, bundleAdjustmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(bundleAdjustmentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bundleAdjustmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bundleAdjustmentRequest* New() const final {
    return CreateMaybeMessage<bundleAdjustmentRequest>(nullptr);
  }

  bundleAdjustmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bundleAdjustmentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bundleAdjustmentRequest& from);
  void MergeFrom(const bundleAdjustmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bundleAdjustmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBundler.bundleAdjustmentRequest";
  }
  protected:
  explicit bundleAdjustmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIBundlerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectKeyframesFieldNumber = 1,
    kKFieldNumber = 2,
    kDFieldNumber = 3,
  };
  // bytes selectKeyframes = 1;
  void clear_selectkeyframes();
  const std::string& selectkeyframes() const;
  void set_selectkeyframes(const std::string& value);
  void set_selectkeyframes(std::string&& value);
  void set_selectkeyframes(const char* value);
  void set_selectkeyframes(const void* value, size_t size);
  std::string* mutable_selectkeyframes();
  std::string* release_selectkeyframes();
  void set_allocated_selectkeyframes(std::string* selectkeyframes);
  private:
  const std::string& _internal_selectkeyframes() const;
  void _internal_set_selectkeyframes(const std::string& value);
  std::string* _internal_mutable_selectkeyframes();
  public:

  // bytes K = 2;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // bytes D = 3;
  void clear_d();
  const std::string& d() const;
  void set_d(const std::string& value);
  void set_d(std::string&& value);
  void set_d(const char* value);
  void set_d(const void* value, size_t size);
  std::string* mutable_d();
  std::string* release_d();
  void set_allocated_d(std::string* d);
  private:
  const std::string& _internal_d() const;
  void _internal_set_d(const std::string& value);
  std::string* _internal_mutable_d();
  public:

  // @@protoc_insertion_point(class_scope:grpcIBundler.bundleAdjustmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selectkeyframes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIBundlerService_2eproto;
};
// -------------------------------------------------------------------

class bundleAdjustmentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBundler.bundleAdjustmentResponse) */ {
 public:
  inline bundleAdjustmentResponse() : bundleAdjustmentResponse(nullptr) {}
  virtual ~bundleAdjustmentResponse();
  explicit constexpr bundleAdjustmentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  bundleAdjustmentResponse(const bundleAdjustmentResponse& from);
  bundleAdjustmentResponse(bundleAdjustmentResponse&& from) noexcept
    : bundleAdjustmentResponse() {
    *this = ::std::move(from);
  }

  inline bundleAdjustmentResponse& operator=(const bundleAdjustmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline bundleAdjustmentResponse& operator=(bundleAdjustmentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bundleAdjustmentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const bundleAdjustmentResponse* internal_default_instance() {
    return reinterpret_cast<const bundleAdjustmentResponse*>(
               &_bundleAdjustmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(bundleAdjustmentResponse& a, bundleAdjustmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(bundleAdjustmentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bundleAdjustmentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bundleAdjustmentResponse* New() const final {
    return CreateMaybeMessage<bundleAdjustmentResponse>(nullptr);
  }

  bundleAdjustmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bundleAdjustmentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bundleAdjustmentResponse& from);
  void MergeFrom(const bundleAdjustmentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bundleAdjustmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBundler.bundleAdjustmentResponse";
  }
  protected:
  explicit bundleAdjustmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIBundlerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKFieldNumber = 1,
    kDFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes K = 1;
  void clear_k();
  const std::string& k() const;
  void set_k(const std::string& value);
  void set_k(std::string&& value);
  void set_k(const char* value);
  void set_k(const void* value, size_t size);
  std::string* mutable_k();
  std::string* release_k();
  void set_allocated_k(std::string* k);
  private:
  const std::string& _internal_k() const;
  void _internal_set_k(const std::string& value);
  std::string* _internal_mutable_k();
  public:

  // bytes D = 2;
  void clear_d();
  const std::string& d() const;
  void set_d(const std::string& value);
  void set_d(std::string&& value);
  void set_d(const char* value);
  void set_d(const void* value, size_t size);
  std::string* mutable_d();
  std::string* release_d();
  void set_allocated_d(std::string* d);
  private:
  const std::string& _internal_d() const;
  void _internal_set_d(const std::string& value);
  std::string* _internal_mutable_d();
  public:

  // double xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  double xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(double value);
  private:
  double _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIBundler.bundleAdjustmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_;
  double xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIBundlerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setMapperRequest

// bytes map = 1;
inline void setMapperRequest::clear_map() {
  map_.ClearToEmpty();
}
inline const std::string& setMapperRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.setMapperRequest.map)
  return _internal_map();
}
inline void setMapperRequest::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.setMapperRequest.map)
}
inline std::string* setMapperRequest::mutable_map() {
  // @@protoc_insertion_point(field_mutable:grpcIBundler.setMapperRequest.map)
  return _internal_mutable_map();
}
inline const std::string& setMapperRequest::_internal_map() const {
  return map_.Get();
}
inline void setMapperRequest::_internal_set_map(const std::string& value) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setMapperRequest::set_map(std::string&& value) {
  
  map_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIBundler.setMapperRequest.map)
}
inline void setMapperRequest::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIBundler.setMapperRequest.map)
}
inline void setMapperRequest::set_map(const void* value,
    size_t size) {
  
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIBundler.setMapperRequest.map)
}
inline std::string* setMapperRequest::_internal_mutable_map() {
  
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setMapperRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIBundler.setMapperRequest.map)
  return map_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setMapperRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.setMapperRequest.map)
}

// -------------------------------------------------------------------

// setMapperResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setMapperResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setMapperResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setMapperResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.setMapperResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setMapperResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setMapperResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.setMapperResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// bundleAdjustmentRequest

// bytes selectKeyframes = 1;
inline void bundleAdjustmentRequest::clear_selectkeyframes() {
  selectkeyframes_.ClearToEmpty();
}
inline const std::string& bundleAdjustmentRequest::selectkeyframes() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
  return _internal_selectkeyframes();
}
inline void bundleAdjustmentRequest::set_selectkeyframes(const std::string& value) {
  _internal_set_selectkeyframes(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
}
inline std::string* bundleAdjustmentRequest::mutable_selectkeyframes() {
  // @@protoc_insertion_point(field_mutable:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
  return _internal_mutable_selectkeyframes();
}
inline const std::string& bundleAdjustmentRequest::_internal_selectkeyframes() const {
  return selectkeyframes_.Get();
}
inline void bundleAdjustmentRequest::_internal_set_selectkeyframes(const std::string& value) {
  
  selectkeyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void bundleAdjustmentRequest::set_selectkeyframes(std::string&& value) {
  
  selectkeyframes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
}
inline void bundleAdjustmentRequest::set_selectkeyframes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  selectkeyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
}
inline void bundleAdjustmentRequest::set_selectkeyframes(const void* value,
    size_t size) {
  
  selectkeyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
}
inline std::string* bundleAdjustmentRequest::_internal_mutable_selectkeyframes() {
  
  return selectkeyframes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* bundleAdjustmentRequest::release_selectkeyframes() {
  // @@protoc_insertion_point(field_release:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
  return selectkeyframes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bundleAdjustmentRequest::set_allocated_selectkeyframes(std::string* selectkeyframes) {
  if (selectkeyframes != nullptr) {
    
  } else {
    
  }
  selectkeyframes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selectkeyframes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
}

// bytes K = 2;
inline void bundleAdjustmentRequest::clear_k() {
  k_.ClearToEmpty();
}
inline const std::string& bundleAdjustmentRequest::k() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.bundleAdjustmentRequest.K)
  return _internal_k();
}
inline void bundleAdjustmentRequest::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.bundleAdjustmentRequest.K)
}
inline std::string* bundleAdjustmentRequest::mutable_k() {
  // @@protoc_insertion_point(field_mutable:grpcIBundler.bundleAdjustmentRequest.K)
  return _internal_mutable_k();
}
inline const std::string& bundleAdjustmentRequest::_internal_k() const {
  return k_.Get();
}
inline void bundleAdjustmentRequest::_internal_set_k(const std::string& value) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void bundleAdjustmentRequest::set_k(std::string&& value) {
  
  k_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIBundler.bundleAdjustmentRequest.K)
}
inline void bundleAdjustmentRequest::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIBundler.bundleAdjustmentRequest.K)
}
inline void bundleAdjustmentRequest::set_k(const void* value,
    size_t size) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIBundler.bundleAdjustmentRequest.K)
}
inline std::string* bundleAdjustmentRequest::_internal_mutable_k() {
  
  return k_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* bundleAdjustmentRequest::release_k() {
  // @@protoc_insertion_point(field_release:grpcIBundler.bundleAdjustmentRequest.K)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bundleAdjustmentRequest::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.bundleAdjustmentRequest.K)
}

// bytes D = 3;
inline void bundleAdjustmentRequest::clear_d() {
  d_.ClearToEmpty();
}
inline const std::string& bundleAdjustmentRequest::d() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.bundleAdjustmentRequest.D)
  return _internal_d();
}
inline void bundleAdjustmentRequest::set_d(const std::string& value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.bundleAdjustmentRequest.D)
}
inline std::string* bundleAdjustmentRequest::mutable_d() {
  // @@protoc_insertion_point(field_mutable:grpcIBundler.bundleAdjustmentRequest.D)
  return _internal_mutable_d();
}
inline const std::string& bundleAdjustmentRequest::_internal_d() const {
  return d_.Get();
}
inline void bundleAdjustmentRequest::_internal_set_d(const std::string& value) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void bundleAdjustmentRequest::set_d(std::string&& value) {
  
  d_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIBundler.bundleAdjustmentRequest.D)
}
inline void bundleAdjustmentRequest::set_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIBundler.bundleAdjustmentRequest.D)
}
inline void bundleAdjustmentRequest::set_d(const void* value,
    size_t size) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIBundler.bundleAdjustmentRequest.D)
}
inline std::string* bundleAdjustmentRequest::_internal_mutable_d() {
  
  return d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* bundleAdjustmentRequest::release_d() {
  // @@protoc_insertion_point(field_release:grpcIBundler.bundleAdjustmentRequest.D)
  return d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bundleAdjustmentRequest::set_allocated_d(std::string* d) {
  if (d != nullptr) {
    
  } else {
    
  }
  d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.bundleAdjustmentRequest.D)
}

// -------------------------------------------------------------------

// bundleAdjustmentResponse

// bytes K = 1;
inline void bundleAdjustmentResponse::clear_k() {
  k_.ClearToEmpty();
}
inline const std::string& bundleAdjustmentResponse::k() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.bundleAdjustmentResponse.K)
  return _internal_k();
}
inline void bundleAdjustmentResponse::set_k(const std::string& value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.bundleAdjustmentResponse.K)
}
inline std::string* bundleAdjustmentResponse::mutable_k() {
  // @@protoc_insertion_point(field_mutable:grpcIBundler.bundleAdjustmentResponse.K)
  return _internal_mutable_k();
}
inline const std::string& bundleAdjustmentResponse::_internal_k() const {
  return k_.Get();
}
inline void bundleAdjustmentResponse::_internal_set_k(const std::string& value) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void bundleAdjustmentResponse::set_k(std::string&& value) {
  
  k_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIBundler.bundleAdjustmentResponse.K)
}
inline void bundleAdjustmentResponse::set_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIBundler.bundleAdjustmentResponse.K)
}
inline void bundleAdjustmentResponse::set_k(const void* value,
    size_t size) {
  
  k_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIBundler.bundleAdjustmentResponse.K)
}
inline std::string* bundleAdjustmentResponse::_internal_mutable_k() {
  
  return k_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* bundleAdjustmentResponse::release_k() {
  // @@protoc_insertion_point(field_release:grpcIBundler.bundleAdjustmentResponse.K)
  return k_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bundleAdjustmentResponse::set_allocated_k(std::string* k) {
  if (k != nullptr) {
    
  } else {
    
  }
  k_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), k,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.bundleAdjustmentResponse.K)
}

// bytes D = 2;
inline void bundleAdjustmentResponse::clear_d() {
  d_.ClearToEmpty();
}
inline const std::string& bundleAdjustmentResponse::d() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.bundleAdjustmentResponse.D)
  return _internal_d();
}
inline void bundleAdjustmentResponse::set_d(const std::string& value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.bundleAdjustmentResponse.D)
}
inline std::string* bundleAdjustmentResponse::mutable_d() {
  // @@protoc_insertion_point(field_mutable:grpcIBundler.bundleAdjustmentResponse.D)
  return _internal_mutable_d();
}
inline const std::string& bundleAdjustmentResponse::_internal_d() const {
  return d_.Get();
}
inline void bundleAdjustmentResponse::_internal_set_d(const std::string& value) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void bundleAdjustmentResponse::set_d(std::string&& value) {
  
  d_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIBundler.bundleAdjustmentResponse.D)
}
inline void bundleAdjustmentResponse::set_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIBundler.bundleAdjustmentResponse.D)
}
inline void bundleAdjustmentResponse::set_d(const void* value,
    size_t size) {
  
  d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIBundler.bundleAdjustmentResponse.D)
}
inline std::string* bundleAdjustmentResponse::_internal_mutable_d() {
  
  return d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* bundleAdjustmentResponse::release_d() {
  // @@protoc_insertion_point(field_release:grpcIBundler.bundleAdjustmentResponse.D)
  return d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void bundleAdjustmentResponse::set_allocated_d(std::string* d) {
  if (d != nullptr) {
    
  } else {
    
  }
  d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.bundleAdjustmentResponse.D)
}

// double xpcfGrpcReturnValue = 3;
inline void bundleAdjustmentResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline double bundleAdjustmentResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline double bundleAdjustmentResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.bundleAdjustmentResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void bundleAdjustmentResponse::_internal_set_xpcfgrpcreturnvalue(double value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void bundleAdjustmentResponse::set_xpcfgrpcreturnvalue(double value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.bundleAdjustmentResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIBundler

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIBundlerService_2eproto
