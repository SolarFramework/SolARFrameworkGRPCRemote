// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIBundlerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIBundlerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIBundlerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIBundlerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIBundlerService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIBundlerService_2eproto;
namespace grpcIBundler {
class bundleAdjustmentRequest;
struct bundleAdjustmentRequestDefaultTypeInternal;
extern bundleAdjustmentRequestDefaultTypeInternal _bundleAdjustmentRequest_default_instance_;
class bundleAdjustmentResponse;
struct bundleAdjustmentResponseDefaultTypeInternal;
extern bundleAdjustmentResponseDefaultTypeInternal _bundleAdjustmentResponse_default_instance_;
class optimizeSim3Request;
struct optimizeSim3RequestDefaultTypeInternal;
extern optimizeSim3RequestDefaultTypeInternal _optimizeSim3Request_default_instance_;
class optimizeSim3Response;
struct optimizeSim3ResponseDefaultTypeInternal;
extern optimizeSim3ResponseDefaultTypeInternal _optimizeSim3Response_default_instance_;
class setMapRequest;
struct setMapRequestDefaultTypeInternal;
extern setMapRequestDefaultTypeInternal _setMapRequest_default_instance_;
class setMapResponse;
struct setMapResponseDefaultTypeInternal;
extern setMapResponseDefaultTypeInternal _setMapResponse_default_instance_;
}  // namespace grpcIBundler
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIBundler::bundleAdjustmentRequest* Arena::CreateMaybeMessage<::grpcIBundler::bundleAdjustmentRequest>(Arena*);
template<> ::grpcIBundler::bundleAdjustmentResponse* Arena::CreateMaybeMessage<::grpcIBundler::bundleAdjustmentResponse>(Arena*);
template<> ::grpcIBundler::optimizeSim3Request* Arena::CreateMaybeMessage<::grpcIBundler::optimizeSim3Request>(Arena*);
template<> ::grpcIBundler::optimizeSim3Response* Arena::CreateMaybeMessage<::grpcIBundler::optimizeSim3Response>(Arena*);
template<> ::grpcIBundler::setMapRequest* Arena::CreateMaybeMessage<::grpcIBundler::setMapRequest>(Arena*);
template<> ::grpcIBundler::setMapResponse* Arena::CreateMaybeMessage<::grpcIBundler::setMapResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIBundler {

// ===================================================================

class setMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBundler.setMapRequest) */ {
 public:
  inline setMapRequest() : setMapRequest(nullptr) {}
  ~setMapRequest() override;
  explicit PROTOBUF_CONSTEXPR setMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapRequest(const setMapRequest& from);
  setMapRequest(setMapRequest&& from) noexcept
    : setMapRequest() {
    *this = ::std::move(from);
  }

  inline setMapRequest& operator=(const setMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapRequest& operator=(setMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapRequest* internal_default_instance() {
    return reinterpret_cast<const setMapRequest*>(
               &_setMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setMapRequest& a, setMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setMapRequest& from) {
    setMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBundler.setMapRequest";
  }
  protected:
  explicit setMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes map = 2;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIBundler.setMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIBundlerService_2eproto;
};
// -------------------------------------------------------------------

class setMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBundler.setMapResponse) */ {
 public:
  inline setMapResponse() : setMapResponse(nullptr) {}
  ~setMapResponse() override;
  explicit PROTOBUF_CONSTEXPR setMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapResponse(const setMapResponse& from);
  setMapResponse(setMapResponse&& from) noexcept
    : setMapResponse() {
    *this = ::std::move(from);
  }

  inline setMapResponse& operator=(const setMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapResponse& operator=(setMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapResponse* internal_default_instance() {
    return reinterpret_cast<const setMapResponse*>(
               &_setMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(setMapResponse& a, setMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setMapResponse& from) {
    setMapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBundler.setMapResponse";
  }
  protected:
  explicit setMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIBundler.setMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIBundlerService_2eproto;
};
// -------------------------------------------------------------------

class bundleAdjustmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBundler.bundleAdjustmentRequest) */ {
 public:
  inline bundleAdjustmentRequest() : bundleAdjustmentRequest(nullptr) {}
  ~bundleAdjustmentRequest() override;
  explicit PROTOBUF_CONSTEXPR bundleAdjustmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  bundleAdjustmentRequest(const bundleAdjustmentRequest& from);
  bundleAdjustmentRequest(bundleAdjustmentRequest&& from) noexcept
    : bundleAdjustmentRequest() {
    *this = ::std::move(from);
  }

  inline bundleAdjustmentRequest& operator=(const bundleAdjustmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline bundleAdjustmentRequest& operator=(bundleAdjustmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const bundleAdjustmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const bundleAdjustmentRequest* internal_default_instance() {
    return reinterpret_cast<const bundleAdjustmentRequest*>(
               &_bundleAdjustmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(bundleAdjustmentRequest& a, bundleAdjustmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(bundleAdjustmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bundleAdjustmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  bundleAdjustmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<bundleAdjustmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const bundleAdjustmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const bundleAdjustmentRequest& from) {
    bundleAdjustmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bundleAdjustmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBundler.bundleAdjustmentRequest";
  }
  protected:
  explicit bundleAdjustmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectKeyframesFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes selectKeyframes = 2;
  void clear_selectkeyframes();
  const std::string& selectkeyframes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_selectkeyframes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_selectkeyframes();
  PROTOBUF_NODISCARD std::string* release_selectkeyframes();
  void set_allocated_selectkeyframes(std::string* selectkeyframes);
  private:
  const std::string& _internal_selectkeyframes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selectkeyframes(const std::string& value);
  std::string* _internal_mutable_selectkeyframes();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIBundler.bundleAdjustmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selectkeyframes_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIBundlerService_2eproto;
};
// -------------------------------------------------------------------

class bundleAdjustmentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBundler.bundleAdjustmentResponse) */ {
 public:
  inline bundleAdjustmentResponse() : bundleAdjustmentResponse(nullptr) {}
  ~bundleAdjustmentResponse() override;
  explicit PROTOBUF_CONSTEXPR bundleAdjustmentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  bundleAdjustmentResponse(const bundleAdjustmentResponse& from);
  bundleAdjustmentResponse(bundleAdjustmentResponse&& from) noexcept
    : bundleAdjustmentResponse() {
    *this = ::std::move(from);
  }

  inline bundleAdjustmentResponse& operator=(const bundleAdjustmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline bundleAdjustmentResponse& operator=(bundleAdjustmentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const bundleAdjustmentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const bundleAdjustmentResponse* internal_default_instance() {
    return reinterpret_cast<const bundleAdjustmentResponse*>(
               &_bundleAdjustmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(bundleAdjustmentResponse& a, bundleAdjustmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(bundleAdjustmentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bundleAdjustmentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  bundleAdjustmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<bundleAdjustmentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const bundleAdjustmentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const bundleAdjustmentResponse& from) {
    bundleAdjustmentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bundleAdjustmentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBundler.bundleAdjustmentResponse";
  }
  protected:
  explicit bundleAdjustmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // double xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  double xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(double value);
  private:
  double _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIBundler.bundleAdjustmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIBundlerService_2eproto;
};
// -------------------------------------------------------------------

class optimizeSim3Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBundler.optimizeSim3Request) */ {
 public:
  inline optimizeSim3Request() : optimizeSim3Request(nullptr) {}
  ~optimizeSim3Request() override;
  explicit PROTOBUF_CONSTEXPR optimizeSim3Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  optimizeSim3Request(const optimizeSim3Request& from);
  optimizeSim3Request(optimizeSim3Request&& from) noexcept
    : optimizeSim3Request() {
    *this = ::std::move(from);
  }

  inline optimizeSim3Request& operator=(const optimizeSim3Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline optimizeSim3Request& operator=(optimizeSim3Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const optimizeSim3Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const optimizeSim3Request* internal_default_instance() {
    return reinterpret_cast<const optimizeSim3Request*>(
               &_optimizeSim3Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(optimizeSim3Request& a, optimizeSim3Request& b) {
    a.Swap(&b);
  }
  inline void Swap(optimizeSim3Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(optimizeSim3Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  optimizeSim3Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<optimizeSim3Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const optimizeSim3Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const optimizeSim3Request& from) {
    optimizeSim3Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(optimizeSim3Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBundler.optimizeSim3Request";
  }
  protected:
  explicit optimizeSim3Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframe1FieldNumber = 2,
    kKeyframe2FieldNumber = 3,
    kMatchesFieldNumber = 4,
    kPts3D1FieldNumber = 5,
    kPts3D2FieldNumber = 6,
    kPoseFieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes keyframe1 = 2;
  void clear_keyframe1();
  const std::string& keyframe1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframe1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframe1();
  PROTOBUF_NODISCARD std::string* release_keyframe1();
  void set_allocated_keyframe1(std::string* keyframe1);
  private:
  const std::string& _internal_keyframe1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframe1(const std::string& value);
  std::string* _internal_mutable_keyframe1();
  public:

  // bytes keyframe2 = 3;
  void clear_keyframe2();
  const std::string& keyframe2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframe2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframe2();
  PROTOBUF_NODISCARD std::string* release_keyframe2();
  void set_allocated_keyframe2(std::string* keyframe2);
  private:
  const std::string& _internal_keyframe2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframe2(const std::string& value);
  std::string* _internal_mutable_keyframe2();
  public:

  // bytes matches = 4;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes pts3D1 = 5;
  void clear_pts3d1();
  const std::string& pts3d1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pts3d1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pts3d1();
  PROTOBUF_NODISCARD std::string* release_pts3d1();
  void set_allocated_pts3d1(std::string* pts3d1);
  private:
  const std::string& _internal_pts3d1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pts3d1(const std::string& value);
  std::string* _internal_mutable_pts3d1();
  public:

  // bytes pts3D2 = 6;
  void clear_pts3d2();
  const std::string& pts3d2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pts3d2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pts3d2();
  PROTOBUF_NODISCARD std::string* release_pts3d2();
  void set_allocated_pts3d2(std::string* pts3d2);
  private:
  const std::string& _internal_pts3d2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pts3d2(const std::string& value);
  std::string* _internal_mutable_pts3d2();
  public:

  // bytes pose = 7;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIBundler.optimizeSim3Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pts3d1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pts3d2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIBundlerService_2eproto;
};
// -------------------------------------------------------------------

class optimizeSim3Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBundler.optimizeSim3Response) */ {
 public:
  inline optimizeSim3Response() : optimizeSim3Response(nullptr) {}
  ~optimizeSim3Response() override;
  explicit PROTOBUF_CONSTEXPR optimizeSim3Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  optimizeSim3Response(const optimizeSim3Response& from);
  optimizeSim3Response(optimizeSim3Response&& from) noexcept
    : optimizeSim3Response() {
    *this = ::std::move(from);
  }

  inline optimizeSim3Response& operator=(const optimizeSim3Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline optimizeSim3Response& operator=(optimizeSim3Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const optimizeSim3Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const optimizeSim3Response* internal_default_instance() {
    return reinterpret_cast<const optimizeSim3Response*>(
               &_optimizeSim3Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(optimizeSim3Response& a, optimizeSim3Response& b) {
    a.Swap(&b);
  }
  inline void Swap(optimizeSim3Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(optimizeSim3Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  optimizeSim3Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<optimizeSim3Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const optimizeSim3Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const optimizeSim3Response& from) {
    optimizeSim3Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(optimizeSim3Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBundler.optimizeSim3Response";
  }
  protected:
  explicit optimizeSim3Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pose = 1;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // double xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  double xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(double value);
  private:
  double _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIBundler.optimizeSim3Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    double xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIBundlerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setMapRequest

// int32 grpcServerCompressionFormat = 1;
inline void setMapRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setMapRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setMapRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.setMapRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setMapRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setMapRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.setMapRequest.grpcServerCompressionFormat)
}

// bytes map = 2;
inline void setMapRequest::clear_map() {
  _impl_.map_.ClearToEmpty();
}
inline const std::string& setMapRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.setMapRequest.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setMapRequest::set_map(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIBundler.setMapRequest.map)
}
inline std::string* setMapRequest::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIBundler.setMapRequest.map)
  return _s;
}
inline const std::string& setMapRequest::_internal_map() const {
  return _impl_.map_.Get();
}
inline void setMapRequest::_internal_set_map(const std::string& value) {
  
  _impl_.map_.Set(value, GetArenaForAllocation());
}
inline std::string* setMapRequest::_internal_mutable_map() {
  
  return _impl_.map_.Mutable(GetArenaForAllocation());
}
inline std::string* setMapRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIBundler.setMapRequest.map)
  return _impl_.map_.Release();
}
inline void setMapRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  _impl_.map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_.IsDefault()) {
    _impl_.map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.setMapRequest.map)
}

// -------------------------------------------------------------------

// setMapResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setMapResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.setMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setMapResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setMapResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.setMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// bundleAdjustmentRequest

// int32 grpcServerCompressionFormat = 1;
inline void bundleAdjustmentRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t bundleAdjustmentRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t bundleAdjustmentRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.bundleAdjustmentRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void bundleAdjustmentRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void bundleAdjustmentRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.bundleAdjustmentRequest.grpcServerCompressionFormat)
}

// bytes selectKeyframes = 2;
inline void bundleAdjustmentRequest::clear_selectkeyframes() {
  _impl_.selectkeyframes_.ClearToEmpty();
}
inline const std::string& bundleAdjustmentRequest::selectkeyframes() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
  return _internal_selectkeyframes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void bundleAdjustmentRequest::set_selectkeyframes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.selectkeyframes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
}
inline std::string* bundleAdjustmentRequest::mutable_selectkeyframes() {
  std::string* _s = _internal_mutable_selectkeyframes();
  // @@protoc_insertion_point(field_mutable:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
  return _s;
}
inline const std::string& bundleAdjustmentRequest::_internal_selectkeyframes() const {
  return _impl_.selectkeyframes_.Get();
}
inline void bundleAdjustmentRequest::_internal_set_selectkeyframes(const std::string& value) {
  
  _impl_.selectkeyframes_.Set(value, GetArenaForAllocation());
}
inline std::string* bundleAdjustmentRequest::_internal_mutable_selectkeyframes() {
  
  return _impl_.selectkeyframes_.Mutable(GetArenaForAllocation());
}
inline std::string* bundleAdjustmentRequest::release_selectkeyframes() {
  // @@protoc_insertion_point(field_release:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
  return _impl_.selectkeyframes_.Release();
}
inline void bundleAdjustmentRequest::set_allocated_selectkeyframes(std::string* selectkeyframes) {
  if (selectkeyframes != nullptr) {
    
  } else {
    
  }
  _impl_.selectkeyframes_.SetAllocated(selectkeyframes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.selectkeyframes_.IsDefault()) {
    _impl_.selectkeyframes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.bundleAdjustmentRequest.selectKeyframes)
}

// -------------------------------------------------------------------

// bundleAdjustmentResponse

// double xpcfGrpcReturnValue = 1;
inline void bundleAdjustmentResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline double bundleAdjustmentResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline double bundleAdjustmentResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.bundleAdjustmentResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void bundleAdjustmentResponse::_internal_set_xpcfgrpcreturnvalue(double value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void bundleAdjustmentResponse::set_xpcfgrpcreturnvalue(double value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.bundleAdjustmentResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// optimizeSim3Request

// int32 grpcServerCompressionFormat = 1;
inline void optimizeSim3Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t optimizeSim3Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t optimizeSim3Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.optimizeSim3Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void optimizeSim3Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void optimizeSim3Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.optimizeSim3Request.grpcServerCompressionFormat)
}

// bytes keyframe1 = 2;
inline void optimizeSim3Request::clear_keyframe1() {
  _impl_.keyframe1_.ClearToEmpty();
}
inline const std::string& optimizeSim3Request::keyframe1() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.optimizeSim3Request.keyframe1)
  return _internal_keyframe1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void optimizeSim3Request::set_keyframe1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframe1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIBundler.optimizeSim3Request.keyframe1)
}
inline std::string* optimizeSim3Request::mutable_keyframe1() {
  std::string* _s = _internal_mutable_keyframe1();
  // @@protoc_insertion_point(field_mutable:grpcIBundler.optimizeSim3Request.keyframe1)
  return _s;
}
inline const std::string& optimizeSim3Request::_internal_keyframe1() const {
  return _impl_.keyframe1_.Get();
}
inline void optimizeSim3Request::_internal_set_keyframe1(const std::string& value) {
  
  _impl_.keyframe1_.Set(value, GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::_internal_mutable_keyframe1() {
  
  return _impl_.keyframe1_.Mutable(GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::release_keyframe1() {
  // @@protoc_insertion_point(field_release:grpcIBundler.optimizeSim3Request.keyframe1)
  return _impl_.keyframe1_.Release();
}
inline void optimizeSim3Request::set_allocated_keyframe1(std::string* keyframe1) {
  if (keyframe1 != nullptr) {
    
  } else {
    
  }
  _impl_.keyframe1_.SetAllocated(keyframe1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframe1_.IsDefault()) {
    _impl_.keyframe1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.optimizeSim3Request.keyframe1)
}

// bytes keyframe2 = 3;
inline void optimizeSim3Request::clear_keyframe2() {
  _impl_.keyframe2_.ClearToEmpty();
}
inline const std::string& optimizeSim3Request::keyframe2() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.optimizeSim3Request.keyframe2)
  return _internal_keyframe2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void optimizeSim3Request::set_keyframe2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframe2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIBundler.optimizeSim3Request.keyframe2)
}
inline std::string* optimizeSim3Request::mutable_keyframe2() {
  std::string* _s = _internal_mutable_keyframe2();
  // @@protoc_insertion_point(field_mutable:grpcIBundler.optimizeSim3Request.keyframe2)
  return _s;
}
inline const std::string& optimizeSim3Request::_internal_keyframe2() const {
  return _impl_.keyframe2_.Get();
}
inline void optimizeSim3Request::_internal_set_keyframe2(const std::string& value) {
  
  _impl_.keyframe2_.Set(value, GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::_internal_mutable_keyframe2() {
  
  return _impl_.keyframe2_.Mutable(GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::release_keyframe2() {
  // @@protoc_insertion_point(field_release:grpcIBundler.optimizeSim3Request.keyframe2)
  return _impl_.keyframe2_.Release();
}
inline void optimizeSim3Request::set_allocated_keyframe2(std::string* keyframe2) {
  if (keyframe2 != nullptr) {
    
  } else {
    
  }
  _impl_.keyframe2_.SetAllocated(keyframe2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframe2_.IsDefault()) {
    _impl_.keyframe2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.optimizeSim3Request.keyframe2)
}

// bytes matches = 4;
inline void optimizeSim3Request::clear_matches() {
  _impl_.matches_.ClearToEmpty();
}
inline const std::string& optimizeSim3Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.optimizeSim3Request.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void optimizeSim3Request::set_matches(ArgT0&& arg0, ArgT... args) {
 
 _impl_.matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIBundler.optimizeSim3Request.matches)
}
inline std::string* optimizeSim3Request::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcIBundler.optimizeSim3Request.matches)
  return _s;
}
inline const std::string& optimizeSim3Request::_internal_matches() const {
  return _impl_.matches_.Get();
}
inline void optimizeSim3Request::_internal_set_matches(const std::string& value) {
  
  _impl_.matches_.Set(value, GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::_internal_mutable_matches() {
  
  return _impl_.matches_.Mutable(GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIBundler.optimizeSim3Request.matches)
  return _impl_.matches_.Release();
}
inline void optimizeSim3Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  _impl_.matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.matches_.IsDefault()) {
    _impl_.matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.optimizeSim3Request.matches)
}

// bytes pts3D1 = 5;
inline void optimizeSim3Request::clear_pts3d1() {
  _impl_.pts3d1_.ClearToEmpty();
}
inline const std::string& optimizeSim3Request::pts3d1() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.optimizeSim3Request.pts3D1)
  return _internal_pts3d1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void optimizeSim3Request::set_pts3d1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pts3d1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIBundler.optimizeSim3Request.pts3D1)
}
inline std::string* optimizeSim3Request::mutable_pts3d1() {
  std::string* _s = _internal_mutable_pts3d1();
  // @@protoc_insertion_point(field_mutable:grpcIBundler.optimizeSim3Request.pts3D1)
  return _s;
}
inline const std::string& optimizeSim3Request::_internal_pts3d1() const {
  return _impl_.pts3d1_.Get();
}
inline void optimizeSim3Request::_internal_set_pts3d1(const std::string& value) {
  
  _impl_.pts3d1_.Set(value, GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::_internal_mutable_pts3d1() {
  
  return _impl_.pts3d1_.Mutable(GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::release_pts3d1() {
  // @@protoc_insertion_point(field_release:grpcIBundler.optimizeSim3Request.pts3D1)
  return _impl_.pts3d1_.Release();
}
inline void optimizeSim3Request::set_allocated_pts3d1(std::string* pts3d1) {
  if (pts3d1 != nullptr) {
    
  } else {
    
  }
  _impl_.pts3d1_.SetAllocated(pts3d1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pts3d1_.IsDefault()) {
    _impl_.pts3d1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.optimizeSim3Request.pts3D1)
}

// bytes pts3D2 = 6;
inline void optimizeSim3Request::clear_pts3d2() {
  _impl_.pts3d2_.ClearToEmpty();
}
inline const std::string& optimizeSim3Request::pts3d2() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.optimizeSim3Request.pts3D2)
  return _internal_pts3d2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void optimizeSim3Request::set_pts3d2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pts3d2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIBundler.optimizeSim3Request.pts3D2)
}
inline std::string* optimizeSim3Request::mutable_pts3d2() {
  std::string* _s = _internal_mutable_pts3d2();
  // @@protoc_insertion_point(field_mutable:grpcIBundler.optimizeSim3Request.pts3D2)
  return _s;
}
inline const std::string& optimizeSim3Request::_internal_pts3d2() const {
  return _impl_.pts3d2_.Get();
}
inline void optimizeSim3Request::_internal_set_pts3d2(const std::string& value) {
  
  _impl_.pts3d2_.Set(value, GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::_internal_mutable_pts3d2() {
  
  return _impl_.pts3d2_.Mutable(GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::release_pts3d2() {
  // @@protoc_insertion_point(field_release:grpcIBundler.optimizeSim3Request.pts3D2)
  return _impl_.pts3d2_.Release();
}
inline void optimizeSim3Request::set_allocated_pts3d2(std::string* pts3d2) {
  if (pts3d2 != nullptr) {
    
  } else {
    
  }
  _impl_.pts3d2_.SetAllocated(pts3d2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pts3d2_.IsDefault()) {
    _impl_.pts3d2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.optimizeSim3Request.pts3D2)
}

// bytes pose = 7;
inline void optimizeSim3Request::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& optimizeSim3Request::pose() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.optimizeSim3Request.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void optimizeSim3Request::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIBundler.optimizeSim3Request.pose)
}
inline std::string* optimizeSim3Request::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIBundler.optimizeSim3Request.pose)
  return _s;
}
inline const std::string& optimizeSim3Request::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void optimizeSim3Request::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* optimizeSim3Request::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIBundler.optimizeSim3Request.pose)
  return _impl_.pose_.Release();
}
inline void optimizeSim3Request::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.optimizeSim3Request.pose)
}

// -------------------------------------------------------------------

// optimizeSim3Response

// bytes pose = 1;
inline void optimizeSim3Response::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& optimizeSim3Response::pose() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.optimizeSim3Response.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void optimizeSim3Response::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIBundler.optimizeSim3Response.pose)
}
inline std::string* optimizeSim3Response::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIBundler.optimizeSim3Response.pose)
  return _s;
}
inline const std::string& optimizeSim3Response::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void optimizeSim3Response::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* optimizeSim3Response::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* optimizeSim3Response::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIBundler.optimizeSim3Response.pose)
  return _impl_.pose_.Release();
}
inline void optimizeSim3Response::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIBundler.optimizeSim3Response.pose)
}

// double xpcfGrpcReturnValue = 2;
inline void optimizeSim3Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline double optimizeSim3Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline double optimizeSim3Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIBundler.optimizeSim3Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void optimizeSim3Response::_internal_set_xpcfgrpcreturnvalue(double value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void optimizeSim3Response::set_xpcfgrpcreturnvalue(double value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIBundler.optimizeSim3Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIBundler

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIBundlerService_2eproto
