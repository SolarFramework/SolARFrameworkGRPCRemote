// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIPointCloudManagerService.proto
#ifndef GRPC_grpcIPointCloudManagerService_2eproto__INCLUDED
#define GRPC_grpcIPointCloudManagerService_2eproto__INCLUDED

#include "grpcIPointCloudManagerService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIPointCloudManager {

class grpcIPointCloudManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIPointCloudManager.grpcIPointCloudManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpcIPointCloudManager::addPoint_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc0Response>> AsyncaddPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc0Response>>(AsyncaddPoint_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc0Response>> PrepareAsyncaddPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc0Response>>(PrepareAsyncaddPoint_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpcIPointCloudManager::addPoints_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc0Response>> AsyncaddPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc0Response>>(AsyncaddPoints_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc0Response>> PrepareAsyncaddPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc0Response>>(PrepareAsyncaddPoints_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpcIPointCloudManager::addPoint_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc1Response>> AsyncaddPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc1Response>>(AsyncaddPoint_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc1Response>> PrepareAsyncaddPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc1Response>>(PrepareAsyncaddPoint_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpcIPointCloudManager::addPoints_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc1Response>> AsyncaddPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc1Response>>(AsyncaddPoints_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc1Response>> PrepareAsyncaddPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc1Response>>(PrepareAsyncaddPoints_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpcIPointCloudManager::getPointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointResponse>> AsyncgetPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointResponse>>(AsyncgetPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointResponse>> PrepareAsyncgetPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointResponse>>(PrepareAsyncgetPointRaw(context, request, cq));
    }
    virtual ::grpc::Status getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpcIPointCloudManager::getPointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointsResponse>> AsyncgetPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointsResponse>>(AsyncgetPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointsResponse>> PrepareAsyncgetPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointsResponse>>(PrepareAsyncgetPointsRaw(context, request, cq));
    }
    virtual ::grpc::Status getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpcIPointCloudManager::getAllPointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getAllPointsResponse>> AsyncgetAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getAllPointsResponse>>(AsyncgetAllPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getAllPointsResponse>> PrepareAsyncgetAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getAllPointsResponse>>(PrepareAsyncgetAllPointsRaw(context, request, cq));
    }
    virtual ::grpc::Status suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpcIPointCloudManager::suppressPointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointResponse>> AsyncsuppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointResponse>>(AsyncsuppressPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointResponse>> PrepareAsyncsuppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointResponse>>(PrepareAsyncsuppressPointRaw(context, request, cq));
    }
    virtual ::grpc::Status suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpcIPointCloudManager::suppressPointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointsResponse>> AsyncsuppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointsResponse>>(AsyncsuppressPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointsResponse>> PrepareAsyncsuppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointsResponse>>(PrepareAsyncsuppressPointsRaw(context, request, cq));
    }
    virtual ::grpc::Status getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getDescriptorTypeResponse>> AsyncgetDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getDescriptorTypeResponse>>(AsyncgetDescriptorTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getDescriptorTypeResponse>> PrepareAsyncgetDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getDescriptorTypeResponse>>(PrepareAsyncgetDescriptorTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::setDescriptorTypeResponse>> AsyncsetDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::setDescriptorTypeResponse>>(AsyncsetDescriptorTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::setDescriptorTypeResponse>> PrepareAsyncsetDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::setDescriptorTypeResponse>>(PrepareAsyncsetDescriptorTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpcIPointCloudManager::isExistPointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::isExistPointResponse>> AsyncisExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::isExistPointResponse>>(AsyncisExistPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::isExistPointResponse>> PrepareAsyncisExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::isExistPointResponse>>(PrepareAsyncisExistPointRaw(context, request, cq));
    }
    virtual ::grpc::Status getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIPointCloudManager::getNbPointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getNbPointsResponse>> AsyncgetNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getNbPointsResponse>>(AsyncgetNbPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getNbPointsResponse>> PrepareAsyncgetNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getNbPointsResponse>>(PrepareAsyncgetNbPointsRaw(context, request, cq));
    }
    virtual ::grpc::Status saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpcIPointCloudManager::saveToFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::saveToFileResponse>> AsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::saveToFileResponse>>(AsyncsaveToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::saveToFileResponse>> PrepareAsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::saveToFileResponse>>(PrepareAsyncsaveToFileRaw(context, request, cq));
    }
    virtual ::grpc::Status loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpcIPointCloudManager::loadFromFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::loadFromFileResponse>> AsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::loadFromFileResponse>>(AsyncloadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::loadFromFileResponse>> PrepareAsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::loadFromFileResponse>>(PrepareAsyncloadFromFileRaw(context, request, cq));
    }
    virtual ::grpc::Status getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIPointCloudManager::getConstPointCloudResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getConstPointCloudResponse>> AsyncgetConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getConstPointCloudResponse>>(AsyncgetConstPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getConstPointCloudResponse>> PrepareAsyncgetConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getConstPointCloudResponse>>(PrepareAsyncgetConstPointCloudRaw(context, request, cq));
    }
    virtual ::grpc::Status getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpcIPointCloudManager::getPointCloudResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointCloudResponse>> AsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointCloudResponse>>(AsyncgetPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointCloudResponse>> PrepareAsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointCloudResponse>>(PrepareAsyncgetPointCloudRaw(context, request, cq));
    }
    virtual ::grpc::Status setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetPointCloudRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc0Response>* AsyncaddPoint_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc0Response>* PrepareAsyncaddPoint_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc0Response>* AsyncaddPoints_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc0Response>* PrepareAsyncaddPoints_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc1Response>* AsyncaddPoint_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoint_grpc1Response>* PrepareAsyncaddPoint_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc1Response>* AsyncaddPoints_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::addPoints_grpc1Response>* PrepareAsyncaddPoints_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointResponse>* AsyncgetPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointResponse>* PrepareAsyncgetPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointsResponse>* AsyncgetPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointsResponse>* PrepareAsyncgetPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getAllPointsResponse>* AsyncgetAllPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getAllPointsResponse>* PrepareAsyncgetAllPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointResponse>* AsyncsuppressPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointResponse>* PrepareAsyncsuppressPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointsResponse>* AsyncsuppressPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::suppressPointsResponse>* PrepareAsyncsuppressPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getDescriptorTypeResponse>* AsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getDescriptorTypeResponse>* PrepareAsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::setDescriptorTypeResponse>* AsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::setDescriptorTypeResponse>* PrepareAsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::isExistPointResponse>* AsyncisExistPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::isExistPointResponse>* PrepareAsyncisExistPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getNbPointsResponse>* AsyncgetNbPointsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getNbPointsResponse>* PrepareAsyncgetNbPointsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::saveToFileResponse>* AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::saveToFileResponse>* PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::loadFromFileResponse>* AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::loadFromFileResponse>* PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getConstPointCloudResponse>* AsyncgetConstPointCloudRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getConstPointCloudResponse>* PrepareAsyncgetConstPointCloudRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointCloudResponse>* AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIPointCloudManager::getPointCloudResponse>* PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpcIPointCloudManager::addPoint_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc0Response>> AsyncaddPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc0Response>>(AsyncaddPoint_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc0Response>> PrepareAsyncaddPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc0Response>>(PrepareAsyncaddPoint_grpc0Raw(context, request, cq));
    }
    ::grpc::Status addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpcIPointCloudManager::addPoints_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc0Response>> AsyncaddPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc0Response>>(AsyncaddPoints_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc0Response>> PrepareAsyncaddPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc0Response>>(PrepareAsyncaddPoints_grpc0Raw(context, request, cq));
    }
    ::grpc::Status addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpcIPointCloudManager::addPoint_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc1Response>> AsyncaddPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc1Response>>(AsyncaddPoint_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc1Response>> PrepareAsyncaddPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc1Response>>(PrepareAsyncaddPoint_grpc1Raw(context, request, cq));
    }
    ::grpc::Status addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpcIPointCloudManager::addPoints_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc1Response>> AsyncaddPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc1Response>>(AsyncaddPoints_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc1Response>> PrepareAsyncaddPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc1Response>>(PrepareAsyncaddPoints_grpc1Raw(context, request, cq));
    }
    ::grpc::Status getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpcIPointCloudManager::getPointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointResponse>> AsyncgetPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointResponse>>(AsyncgetPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointResponse>> PrepareAsyncgetPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointResponse>>(PrepareAsyncgetPointRaw(context, request, cq));
    }
    ::grpc::Status getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpcIPointCloudManager::getPointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointsResponse>> AsyncgetPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointsResponse>>(AsyncgetPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointsResponse>> PrepareAsyncgetPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointsResponse>>(PrepareAsyncgetPointsRaw(context, request, cq));
    }
    ::grpc::Status getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpcIPointCloudManager::getAllPointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getAllPointsResponse>> AsyncgetAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getAllPointsResponse>>(AsyncgetAllPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getAllPointsResponse>> PrepareAsyncgetAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getAllPointsResponse>>(PrepareAsyncgetAllPointsRaw(context, request, cq));
    }
    ::grpc::Status suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpcIPointCloudManager::suppressPointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointResponse>> AsyncsuppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointResponse>>(AsyncsuppressPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointResponse>> PrepareAsyncsuppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointResponse>>(PrepareAsyncsuppressPointRaw(context, request, cq));
    }
    ::grpc::Status suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpcIPointCloudManager::suppressPointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointsResponse>> AsyncsuppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointsResponse>>(AsyncsuppressPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointsResponse>> PrepareAsyncsuppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointsResponse>>(PrepareAsyncsuppressPointsRaw(context, request, cq));
    }
    ::grpc::Status getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getDescriptorTypeResponse>> AsyncgetDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getDescriptorTypeResponse>>(AsyncgetDescriptorTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getDescriptorTypeResponse>> PrepareAsyncgetDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getDescriptorTypeResponse>>(PrepareAsyncgetDescriptorTypeRaw(context, request, cq));
    }
    ::grpc::Status setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::setDescriptorTypeResponse>> AsyncsetDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::setDescriptorTypeResponse>>(AsyncsetDescriptorTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::setDescriptorTypeResponse>> PrepareAsyncsetDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::setDescriptorTypeResponse>>(PrepareAsyncsetDescriptorTypeRaw(context, request, cq));
    }
    ::grpc::Status isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpcIPointCloudManager::isExistPointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::isExistPointResponse>> AsyncisExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::isExistPointResponse>>(AsyncisExistPointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::isExistPointResponse>> PrepareAsyncisExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::isExistPointResponse>>(PrepareAsyncisExistPointRaw(context, request, cq));
    }
    ::grpc::Status getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIPointCloudManager::getNbPointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getNbPointsResponse>> AsyncgetNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getNbPointsResponse>>(AsyncgetNbPointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getNbPointsResponse>> PrepareAsyncgetNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getNbPointsResponse>>(PrepareAsyncgetNbPointsRaw(context, request, cq));
    }
    ::grpc::Status saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpcIPointCloudManager::saveToFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::saveToFileResponse>> AsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::saveToFileResponse>>(AsyncsaveToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::saveToFileResponse>> PrepareAsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::saveToFileResponse>>(PrepareAsyncsaveToFileRaw(context, request, cq));
    }
    ::grpc::Status loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpcIPointCloudManager::loadFromFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::loadFromFileResponse>> AsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::loadFromFileResponse>>(AsyncloadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::loadFromFileResponse>> PrepareAsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::loadFromFileResponse>>(PrepareAsyncloadFromFileRaw(context, request, cq));
    }
    ::grpc::Status getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIPointCloudManager::getConstPointCloudResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getConstPointCloudResponse>> AsyncgetConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getConstPointCloudResponse>>(AsyncgetConstPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getConstPointCloudResponse>> PrepareAsyncgetConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getConstPointCloudResponse>>(PrepareAsyncgetConstPointCloudRaw(context, request, cq));
    }
    ::grpc::Status getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpcIPointCloudManager::getPointCloudResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointCloudResponse>> AsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointCloudResponse>>(AsyncgetPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointCloudResponse>> PrepareAsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointCloudResponse>>(PrepareAsyncgetPointCloudRaw(context, request, cq));
    }
    ::grpc::Status setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetPointCloudRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc0Response>* AsyncaddPoint_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc0Response>* PrepareAsyncaddPoint_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc0Response>* AsyncaddPoints_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc0Response>* PrepareAsyncaddPoints_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc1Response>* AsyncaddPoint_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc1Response>* PrepareAsyncaddPoint_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc1Response>* AsyncaddPoints_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc1Response>* PrepareAsyncaddPoints_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointResponse>* AsyncgetPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointResponse>* PrepareAsyncgetPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointsResponse>* AsyncgetPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointsResponse>* PrepareAsyncgetPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getAllPointsResponse>* AsyncgetAllPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getAllPointsResponse>* PrepareAsyncgetAllPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointResponse>* AsyncsuppressPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointResponse>* PrepareAsyncsuppressPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointsResponse>* AsyncsuppressPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointsResponse>* PrepareAsyncsuppressPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getDescriptorTypeResponse>* AsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getDescriptorTypeResponse>* PrepareAsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::setDescriptorTypeResponse>* AsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::setDescriptorTypeResponse>* PrepareAsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::isExistPointResponse>* AsyncisExistPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::isExistPointResponse>* PrepareAsyncisExistPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getNbPointsResponse>* AsyncgetNbPointsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getNbPointsResponse>* PrepareAsyncgetNbPointsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::saveToFileResponse>* AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::saveToFileResponse>* PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::loadFromFileResponse>* AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::loadFromFileResponse>* PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getConstPointCloudResponse>* AsyncgetConstPointCloudRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getConstPointCloudResponse>* PrepareAsyncgetConstPointCloudRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointCloudResponse>* AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointCloudResponse>* PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_addPoint_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_addPoints_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_addPoint_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_addPoints_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_getPoint_;
    const ::grpc::internal::RpcMethod rpcmethod_getPoints_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllPoints_;
    const ::grpc::internal::RpcMethod rpcmethod_suppressPoint_;
    const ::grpc::internal::RpcMethod rpcmethod_suppressPoints_;
    const ::grpc::internal::RpcMethod rpcmethod_getDescriptorType_;
    const ::grpc::internal::RpcMethod rpcmethod_setDescriptorType_;
    const ::grpc::internal::RpcMethod rpcmethod_isExistPoint_;
    const ::grpc::internal::RpcMethod rpcmethod_getNbPoints_;
    const ::grpc::internal::RpcMethod rpcmethod_saveToFile_;
    const ::grpc::internal::RpcMethod rpcmethod_loadFromFile_;
    const ::grpc::internal::RpcMethod rpcmethod_getConstPointCloud_;
    const ::grpc::internal::RpcMethod rpcmethod_getPointCloud_;
    const ::grpc::internal::RpcMethod rpcmethod_setPointCloud_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status addPoint_grpc0(::grpc::ServerContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response);
    virtual ::grpc::Status addPoints_grpc0(::grpc::ServerContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response);
    virtual ::grpc::Status addPoint_grpc1(::grpc::ServerContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response);
    virtual ::grpc::Status addPoints_grpc1(::grpc::ServerContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response);
    virtual ::grpc::Status getPoint(::grpc::ServerContext* context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response);
    virtual ::grpc::Status getPoints(::grpc::ServerContext* context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response);
    virtual ::grpc::Status getAllPoints(::grpc::ServerContext* context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response);
    virtual ::grpc::Status suppressPoint(::grpc::ServerContext* context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response);
    virtual ::grpc::Status suppressPoints(::grpc::ServerContext* context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response);
    virtual ::grpc::Status getDescriptorType(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response);
    virtual ::grpc::Status setDescriptorType(::grpc::ServerContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response);
    virtual ::grpc::Status isExistPoint(::grpc::ServerContext* context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response);
    virtual ::grpc::Status getNbPoints(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response);
    virtual ::grpc::Status saveToFile(::grpc::ServerContext* context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response);
    virtual ::grpc::Status loadFromFile(::grpc::ServerContext* context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response);
    virtual ::grpc::Status getConstPointCloud(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response);
    virtual ::grpc::Status getPointCloud(::grpc::ServerContext* context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response);
    virtual ::grpc::Status setPointCloud(::grpc::ServerContext* context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_addPoint_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addPoint_grpc0() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_addPoint_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoint_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddPoint_grpc0(::grpc::ServerContext* context, ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::addPoint_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addPoints_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addPoints_grpc0() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_addPoints_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoints_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddPoints_grpc0(::grpc::ServerContext* context, ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::addPoints_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addPoint_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addPoint_grpc1() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_addPoint_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoint_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddPoint_grpc1(::grpc::ServerContext* context, ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::addPoint_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addPoints_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addPoints_grpc1() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_addPoints_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoints_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddPoints_grpc1(::grpc::ServerContext* context, ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::addPoints_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPoint() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointRequest* /*request*/, ::grpcIPointCloudManager::getPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPoint(::grpc::ServerContext* context, ::grpcIPointCloudManager::getPointRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::getPointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPoints() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointsRequest* /*request*/, ::grpcIPointCloudManager::getPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPoints(::grpc::ServerContext* context, ::grpcIPointCloudManager::getPointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::getPointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAllPoints() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getAllPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getAllPointsRequest* /*request*/, ::grpcIPointCloudManager::getAllPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllPoints(::grpc::ServerContext* context, ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::getAllPointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_suppressPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_suppressPoint() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_suppressPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointRequest* /*request*/, ::grpcIPointCloudManager::suppressPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsuppressPoint(::grpc::ServerContext* context, ::grpcIPointCloudManager::suppressPointRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::suppressPointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_suppressPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_suppressPoints() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_suppressPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointsRequest* /*request*/, ::grpcIPointCloudManager::suppressPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsuppressPoints(::grpc::ServerContext* context, ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::suppressPointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDescriptorType() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDescriptorType(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::getDescriptorTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDescriptorType() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setDescriptorTypeRequest* /*request*/, ::grpcIPointCloudManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDescriptorType(::grpc::ServerContext* context, ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::setDescriptorTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isExistPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isExistPoint() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_isExistPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isExistPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::isExistPointRequest* /*request*/, ::grpcIPointCloudManager::isExistPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisExistPoint(::grpc::ServerContext* context, ::grpcIPointCloudManager::isExistPointRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::isExistPointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNbPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNbPoints() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getNbPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNbPoints(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getNbPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNbPoints(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::getNbPointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_saveToFile() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::saveToFileRequest* /*request*/, ::grpcIPointCloudManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToFile(::grpc::ServerContext* context, ::grpcIPointCloudManager::saveToFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::saveToFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadFromFile() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::loadFromFileRequest* /*request*/, ::grpcIPointCloudManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromFile(::grpc::ServerContext* context, ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::loadFromFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getConstPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getConstPointCloud() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_getConstPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstPointCloud(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getConstPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConstPointCloud(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::getConstPointCloudResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPointCloud() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointCloudRequest* /*request*/, ::grpcIPointCloudManager::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPointCloud(::grpc::ServerContext* context, ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIPointCloudManager::getPointCloudResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setPointCloud() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_setPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setPointCloudRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetPointCloud(::grpc::ServerContext* context, ::grpcIPointCloudManager::setPointCloudRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_addPoint_grpc0<WithAsyncMethod_addPoints_grpc0<WithAsyncMethod_addPoint_grpc1<WithAsyncMethod_addPoints_grpc1<WithAsyncMethod_getPoint<WithAsyncMethod_getPoints<WithAsyncMethod_getAllPoints<WithAsyncMethod_suppressPoint<WithAsyncMethod_suppressPoints<WithAsyncMethod_getDescriptorType<WithAsyncMethod_setDescriptorType<WithAsyncMethod_isExistPoint<WithAsyncMethod_getNbPoints<WithAsyncMethod_saveToFile<WithAsyncMethod_loadFromFile<WithAsyncMethod_getConstPointCloud<WithAsyncMethod_getPointCloud<WithAsyncMethod_setPointCloud<Service > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addPoint_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_addPoint_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::addPoint_grpc0Request, ::grpcIPointCloudManager::addPoint_grpc0Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response) { return this->addPoint_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_addPoint_grpc0(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::addPoint_grpc0Request, ::grpcIPointCloudManager::addPoint_grpc0Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::addPoint_grpc0Request, ::grpcIPointCloudManager::addPoint_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_addPoint_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoint_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addPoint_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc0Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addPoint_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc0Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addPoints_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_addPoints_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::addPoints_grpc0Request, ::grpcIPointCloudManager::addPoints_grpc0Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response) { return this->addPoints_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_addPoints_grpc0(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::addPoints_grpc0Request, ::grpcIPointCloudManager::addPoints_grpc0Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::addPoints_grpc0Request, ::grpcIPointCloudManager::addPoints_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_addPoints_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoints_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addPoints_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc0Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addPoints_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc0Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addPoint_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_addPoint_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::addPoint_grpc1Request, ::grpcIPointCloudManager::addPoint_grpc1Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response) { return this->addPoint_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_addPoint_grpc1(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::addPoint_grpc1Request, ::grpcIPointCloudManager::addPoint_grpc1Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::addPoint_grpc1Request, ::grpcIPointCloudManager::addPoint_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_addPoint_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoint_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addPoint_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc1Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addPoint_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc1Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addPoints_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_addPoints_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::addPoints_grpc1Request, ::grpcIPointCloudManager::addPoints_grpc1Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response) { return this->addPoints_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_addPoints_grpc1(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::addPoints_grpc1Request, ::grpcIPointCloudManager::addPoints_grpc1Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::addPoints_grpc1Request, ::grpcIPointCloudManager::addPoints_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_addPoints_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoints_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addPoints_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc1Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addPoints_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc1Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getPoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::getPointRequest, ::grpcIPointCloudManager::getPointResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response) { return this->getPoint(context, request, response); }));}
    void SetMessageAllocatorFor_getPoint(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::getPointRequest, ::grpcIPointCloudManager::getPointResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::getPointRequest, ::grpcIPointCloudManager::getPointResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointRequest* /*request*/, ::grpcIPointCloudManager::getPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::getPointRequest* /*request*/, ::grpcIPointCloudManager::getPointResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::getPointRequest* /*request*/, ::grpcIPointCloudManager::getPointResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getPoints() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::getPointsRequest, ::grpcIPointCloudManager::getPointsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response) { return this->getPoints(context, request, response); }));}
    void SetMessageAllocatorFor_getPoints(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::getPointsRequest, ::grpcIPointCloudManager::getPointsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::getPointsRequest, ::grpcIPointCloudManager::getPointsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointsRequest* /*request*/, ::grpcIPointCloudManager::getPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::getPointsRequest* /*request*/, ::grpcIPointCloudManager::getPointsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPoints(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::getPointsRequest* /*request*/, ::grpcIPointCloudManager::getPointsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getAllPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getAllPoints() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::getAllPointsRequest, ::grpcIPointCloudManager::getAllPointsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response) { return this->getAllPoints(context, request, response); }));}
    void SetMessageAllocatorFor_getAllPoints(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::getAllPointsRequest, ::grpcIPointCloudManager::getAllPointsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::getAllPointsRequest, ::grpcIPointCloudManager::getAllPointsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getAllPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getAllPointsRequest* /*request*/, ::grpcIPointCloudManager::getAllPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAllPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::getAllPointsRequest* /*request*/, ::grpcIPointCloudManager::getAllPointsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAllPoints(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::getAllPointsRequest* /*request*/, ::grpcIPointCloudManager::getAllPointsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_suppressPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_suppressPoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::suppressPointRequest, ::grpcIPointCloudManager::suppressPointResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response) { return this->suppressPoint(context, request, response); }));}
    void SetMessageAllocatorFor_suppressPoint(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::suppressPointRequest, ::grpcIPointCloudManager::suppressPointResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::suppressPointRequest, ::grpcIPointCloudManager::suppressPointResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_suppressPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointRequest* /*request*/, ::grpcIPointCloudManager::suppressPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* suppressPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointRequest* /*request*/, ::grpcIPointCloudManager::suppressPointResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* suppressPoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointRequest* /*request*/, ::grpcIPointCloudManager::suppressPointResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_suppressPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_suppressPoints() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::suppressPointsRequest, ::grpcIPointCloudManager::suppressPointsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response) { return this->suppressPoints(context, request, response); }));}
    void SetMessageAllocatorFor_suppressPoints(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::suppressPointsRequest, ::grpcIPointCloudManager::suppressPointsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::suppressPointsRequest, ::grpcIPointCloudManager::suppressPointsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_suppressPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointsRequest* /*request*/, ::grpcIPointCloudManager::suppressPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* suppressPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointsRequest* /*request*/, ::grpcIPointCloudManager::suppressPointsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* suppressPoints(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointsRequest* /*request*/, ::grpcIPointCloudManager::suppressPointsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDescriptorType() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIPointCloudManager::getDescriptorTypeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response) { return this->getDescriptorType(context, request, response); }));}
    void SetMessageAllocatorFor_getDescriptorType(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIPointCloudManager::getDescriptorTypeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIPointCloudManager::getDescriptorTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDescriptorType(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getDescriptorTypeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDescriptorType(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getDescriptorTypeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setDescriptorType() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::setDescriptorTypeRequest, ::grpcIPointCloudManager::setDescriptorTypeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response) { return this->setDescriptorType(context, request, response); }));}
    void SetMessageAllocatorFor_setDescriptorType(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::setDescriptorTypeRequest, ::grpcIPointCloudManager::setDescriptorTypeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::setDescriptorTypeRequest, ::grpcIPointCloudManager::setDescriptorTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setDescriptorTypeRequest* /*request*/, ::grpcIPointCloudManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDescriptorType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::setDescriptorTypeRequest* /*request*/, ::grpcIPointCloudManager::setDescriptorTypeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDescriptorType(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::setDescriptorTypeRequest* /*request*/, ::grpcIPointCloudManager::setDescriptorTypeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_isExistPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_isExistPoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::isExistPointRequest, ::grpcIPointCloudManager::isExistPointResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response) { return this->isExistPoint(context, request, response); }));}
    void SetMessageAllocatorFor_isExistPoint(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::isExistPointRequest, ::grpcIPointCloudManager::isExistPointResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::isExistPointRequest, ::grpcIPointCloudManager::isExistPointResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_isExistPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isExistPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::isExistPointRequest* /*request*/, ::grpcIPointCloudManager::isExistPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isExistPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::isExistPointRequest* /*request*/, ::grpcIPointCloudManager::isExistPointResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isExistPoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::isExistPointRequest* /*request*/, ::grpcIPointCloudManager::isExistPointResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getNbPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getNbPoints() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIPointCloudManager::getNbPointsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response) { return this->getNbPoints(context, request, response); }));}
    void SetMessageAllocatorFor_getNbPoints(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIPointCloudManager::getNbPointsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIPointCloudManager::getNbPointsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getNbPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNbPoints(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getNbPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNbPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getNbPointsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNbPoints(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getNbPointsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_saveToFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::saveToFileRequest, ::grpcIPointCloudManager::saveToFileResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response) { return this->saveToFile(context, request, response); }));}
    void SetMessageAllocatorFor_saveToFile(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::saveToFileRequest, ::grpcIPointCloudManager::saveToFileResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::saveToFileRequest, ::grpcIPointCloudManager::saveToFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::saveToFileRequest* /*request*/, ::grpcIPointCloudManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* saveToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::saveToFileRequest* /*request*/, ::grpcIPointCloudManager::saveToFileResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* saveToFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::saveToFileRequest* /*request*/, ::grpcIPointCloudManager::saveToFileResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_loadFromFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::loadFromFileRequest, ::grpcIPointCloudManager::loadFromFileResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response) { return this->loadFromFile(context, request, response); }));}
    void SetMessageAllocatorFor_loadFromFile(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::loadFromFileRequest, ::grpcIPointCloudManager::loadFromFileResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::loadFromFileRequest, ::grpcIPointCloudManager::loadFromFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::loadFromFileRequest* /*request*/, ::grpcIPointCloudManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* loadFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::loadFromFileRequest* /*request*/, ::grpcIPointCloudManager::loadFromFileResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* loadFromFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::loadFromFileRequest* /*request*/, ::grpcIPointCloudManager::loadFromFileResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getConstPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getConstPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIPointCloudManager::getConstPointCloudResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response) { return this->getConstPointCloud(context, request, response); }));}
    void SetMessageAllocatorFor_getConstPointCloud(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIPointCloudManager::getConstPointCloudResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIPointCloudManager::getConstPointCloudResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getConstPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstPointCloud(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getConstPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getConstPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getConstPointCloudResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getConstPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getConstPointCloudResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::getPointCloudRequest, ::grpcIPointCloudManager::getPointCloudResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response) { return this->getPointCloud(context, request, response); }));}
    void SetMessageAllocatorFor_getPointCloud(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::getPointCloudRequest, ::grpcIPointCloudManager::getPointCloudResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::getPointCloudRequest, ::grpcIPointCloudManager::getPointCloudResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointCloudRequest* /*request*/, ::grpcIPointCloudManager::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::getPointCloudRequest* /*request*/, ::grpcIPointCloudManager::getPointCloudResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::getPointCloudRequest* /*request*/, ::grpcIPointCloudManager::getPointCloudResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::setPointCloudRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response) { return this->setPointCloud(context, request, response); }));}
    void SetMessageAllocatorFor_setPointCloud(
        ::grpc::experimental::MessageAllocator< ::grpcIPointCloudManager::setPointCloudRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIPointCloudManager::setPointCloudRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setPointCloudRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::setPointCloudRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIPointCloudManager::setPointCloudRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_addPoint_grpc0<ExperimentalWithCallbackMethod_addPoints_grpc0<ExperimentalWithCallbackMethod_addPoint_grpc1<ExperimentalWithCallbackMethod_addPoints_grpc1<ExperimentalWithCallbackMethod_getPoint<ExperimentalWithCallbackMethod_getPoints<ExperimentalWithCallbackMethod_getAllPoints<ExperimentalWithCallbackMethod_suppressPoint<ExperimentalWithCallbackMethod_suppressPoints<ExperimentalWithCallbackMethod_getDescriptorType<ExperimentalWithCallbackMethod_setDescriptorType<ExperimentalWithCallbackMethod_isExistPoint<ExperimentalWithCallbackMethod_getNbPoints<ExperimentalWithCallbackMethod_saveToFile<ExperimentalWithCallbackMethod_loadFromFile<ExperimentalWithCallbackMethod_getConstPointCloud<ExperimentalWithCallbackMethod_getPointCloud<ExperimentalWithCallbackMethod_setPointCloud<Service > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_addPoint_grpc0<ExperimentalWithCallbackMethod_addPoints_grpc0<ExperimentalWithCallbackMethod_addPoint_grpc1<ExperimentalWithCallbackMethod_addPoints_grpc1<ExperimentalWithCallbackMethod_getPoint<ExperimentalWithCallbackMethod_getPoints<ExperimentalWithCallbackMethod_getAllPoints<ExperimentalWithCallbackMethod_suppressPoint<ExperimentalWithCallbackMethod_suppressPoints<ExperimentalWithCallbackMethod_getDescriptorType<ExperimentalWithCallbackMethod_setDescriptorType<ExperimentalWithCallbackMethod_isExistPoint<ExperimentalWithCallbackMethod_getNbPoints<ExperimentalWithCallbackMethod_saveToFile<ExperimentalWithCallbackMethod_loadFromFile<ExperimentalWithCallbackMethod_getConstPointCloud<ExperimentalWithCallbackMethod_getPointCloud<ExperimentalWithCallbackMethod_setPointCloud<Service > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_addPoint_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addPoint_grpc0() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_addPoint_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoint_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addPoints_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addPoints_grpc0() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_addPoints_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoints_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addPoint_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addPoint_grpc1() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_addPoint_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoint_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addPoints_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addPoints_grpc1() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_addPoints_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoints_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPoint() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointRequest* /*request*/, ::grpcIPointCloudManager::getPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPoints() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointsRequest* /*request*/, ::grpcIPointCloudManager::getPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAllPoints() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getAllPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getAllPointsRequest* /*request*/, ::grpcIPointCloudManager::getAllPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_suppressPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_suppressPoint() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_suppressPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointRequest* /*request*/, ::grpcIPointCloudManager::suppressPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_suppressPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_suppressPoints() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_suppressPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointsRequest* /*request*/, ::grpcIPointCloudManager::suppressPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDescriptorType() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDescriptorType() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setDescriptorTypeRequest* /*request*/, ::grpcIPointCloudManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isExistPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isExistPoint() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_isExistPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isExistPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::isExistPointRequest* /*request*/, ::grpcIPointCloudManager::isExistPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNbPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNbPoints() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getNbPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNbPoints(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getNbPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_saveToFile() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::saveToFileRequest* /*request*/, ::grpcIPointCloudManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadFromFile() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::loadFromFileRequest* /*request*/, ::grpcIPointCloudManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getConstPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getConstPointCloud() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_getConstPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstPointCloud(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getConstPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPointCloud() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointCloudRequest* /*request*/, ::grpcIPointCloudManager::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setPointCloud() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_setPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setPointCloudRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_addPoint_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addPoint_grpc0() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_addPoint_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoint_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddPoint_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addPoints_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addPoints_grpc0() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_addPoints_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoints_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddPoints_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addPoint_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addPoint_grpc1() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_addPoint_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoint_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddPoint_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addPoints_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addPoints_grpc1() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_addPoints_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoints_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddPoints_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPoint() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointRequest* /*request*/, ::grpcIPointCloudManager::getPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPoints() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointsRequest* /*request*/, ::grpcIPointCloudManager::getPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAllPoints() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getAllPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getAllPointsRequest* /*request*/, ::grpcIPointCloudManager::getAllPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllPoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_suppressPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_suppressPoint() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_suppressPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointRequest* /*request*/, ::grpcIPointCloudManager::suppressPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsuppressPoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_suppressPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_suppressPoints() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_suppressPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointsRequest* /*request*/, ::grpcIPointCloudManager::suppressPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsuppressPoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDescriptorType() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDescriptorType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDescriptorType() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setDescriptorTypeRequest* /*request*/, ::grpcIPointCloudManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDescriptorType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isExistPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isExistPoint() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_isExistPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isExistPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::isExistPointRequest* /*request*/, ::grpcIPointCloudManager::isExistPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisExistPoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNbPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNbPoints() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getNbPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNbPoints(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getNbPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNbPoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_saveToFile() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::saveToFileRequest* /*request*/, ::grpcIPointCloudManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadFromFile() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::loadFromFileRequest* /*request*/, ::grpcIPointCloudManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getConstPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getConstPointCloud() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_getConstPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstPointCloud(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getConstPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConstPointCloud(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPointCloud() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointCloudRequest* /*request*/, ::grpcIPointCloudManager::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPointCloud(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setPointCloud() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_setPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setPointCloudRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetPointCloud(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addPoint_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_addPoint_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addPoint_grpc0(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_addPoint_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoint_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addPoint_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addPoint_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addPoints_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_addPoints_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addPoints_grpc0(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_addPoints_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoints_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addPoints_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addPoints_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addPoint_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_addPoint_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addPoint_grpc1(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_addPoint_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoint_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addPoint_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addPoint_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addPoints_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_addPoints_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addPoints_grpc1(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_addPoints_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addPoints_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addPoints_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addPoints_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getPoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPoint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointRequest* /*request*/, ::grpcIPointCloudManager::getPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getPoints() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPoints(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointsRequest* /*request*/, ::grpcIPointCloudManager::getPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPoints(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getAllPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getAllPoints() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAllPoints(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getAllPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getAllPointsRequest* /*request*/, ::grpcIPointCloudManager::getAllPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAllPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAllPoints(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_suppressPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_suppressPoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->suppressPoint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_suppressPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointRequest* /*request*/, ::grpcIPointCloudManager::suppressPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* suppressPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* suppressPoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_suppressPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_suppressPoints() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->suppressPoints(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_suppressPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointsRequest* /*request*/, ::grpcIPointCloudManager::suppressPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* suppressPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* suppressPoints(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDescriptorType() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDescriptorType(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDescriptorType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDescriptorType(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setDescriptorType() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDescriptorType(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setDescriptorTypeRequest* /*request*/, ::grpcIPointCloudManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDescriptorType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDescriptorType(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_isExistPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_isExistPoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isExistPoint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_isExistPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isExistPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::isExistPointRequest* /*request*/, ::grpcIPointCloudManager::isExistPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isExistPoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isExistPoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getNbPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getNbPoints() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNbPoints(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getNbPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNbPoints(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getNbPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNbPoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNbPoints(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_saveToFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->saveToFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::saveToFileRequest* /*request*/, ::grpcIPointCloudManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* saveToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* saveToFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_loadFromFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadFromFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::loadFromFileRequest* /*request*/, ::grpcIPointCloudManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* loadFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* loadFromFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getConstPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getConstPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getConstPointCloud(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getConstPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstPointCloud(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getConstPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getConstPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getConstPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPointCloud(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointCloudRequest* /*request*/, ::grpcIPointCloudManager::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setPointCloud(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setPointCloudRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addPoint_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addPoint_grpc0() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::addPoint_grpc0Request, ::grpcIPointCloudManager::addPoint_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::addPoint_grpc0Request, ::grpcIPointCloudManager::addPoint_grpc0Response>* streamer) {
                       return this->StreamedaddPoint_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addPoint_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addPoint_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddPoint_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::addPoint_grpc0Request,::grpcIPointCloudManager::addPoint_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addPoints_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addPoints_grpc0() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::addPoints_grpc0Request, ::grpcIPointCloudManager::addPoints_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::addPoints_grpc0Request, ::grpcIPointCloudManager::addPoints_grpc0Response>* streamer) {
                       return this->StreamedaddPoints_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addPoints_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addPoints_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc0Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddPoints_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::addPoints_grpc0Request,::grpcIPointCloudManager::addPoints_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addPoint_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addPoint_grpc1() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::addPoint_grpc1Request, ::grpcIPointCloudManager::addPoint_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::addPoint_grpc1Request, ::grpcIPointCloudManager::addPoint_grpc1Response>* streamer) {
                       return this->StreamedaddPoint_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addPoint_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addPoint_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoint_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoint_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddPoint_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::addPoint_grpc1Request,::grpcIPointCloudManager::addPoint_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addPoints_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addPoints_grpc1() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::addPoints_grpc1Request, ::grpcIPointCloudManager::addPoints_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::addPoints_grpc1Request, ::grpcIPointCloudManager::addPoints_grpc1Response>* streamer) {
                       return this->StreamedaddPoints_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addPoints_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addPoints_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::addPoints_grpc1Request* /*request*/, ::grpcIPointCloudManager::addPoints_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddPoints_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::addPoints_grpc1Request,::grpcIPointCloudManager::addPoints_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPoint() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::getPointRequest, ::grpcIPointCloudManager::getPointResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::getPointRequest, ::grpcIPointCloudManager::getPointResponse>* streamer) {
                       return this->StreamedgetPoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointRequest* /*request*/, ::grpcIPointCloudManager::getPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::getPointRequest,::grpcIPointCloudManager::getPointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPoints() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::getPointsRequest, ::grpcIPointCloudManager::getPointsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::getPointsRequest, ::grpcIPointCloudManager::getPointsResponse>* streamer) {
                       return this->StreamedgetPoints(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointsRequest* /*request*/, ::grpcIPointCloudManager::getPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::getPointsRequest,::grpcIPointCloudManager::getPointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAllPoints() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::getAllPointsRequest, ::grpcIPointCloudManager::getAllPointsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::getAllPointsRequest, ::grpcIPointCloudManager::getAllPointsResponse>* streamer) {
                       return this->StreamedgetAllPoints(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAllPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getAllPointsRequest* /*request*/, ::grpcIPointCloudManager::getAllPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllPoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::getAllPointsRequest,::grpcIPointCloudManager::getAllPointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_suppressPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_suppressPoint() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::suppressPointRequest, ::grpcIPointCloudManager::suppressPointResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::suppressPointRequest, ::grpcIPointCloudManager::suppressPointResponse>* streamer) {
                       return this->StreamedsuppressPoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_suppressPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status suppressPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointRequest* /*request*/, ::grpcIPointCloudManager::suppressPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsuppressPoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::suppressPointRequest,::grpcIPointCloudManager::suppressPointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_suppressPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_suppressPoints() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::suppressPointsRequest, ::grpcIPointCloudManager::suppressPointsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::suppressPointsRequest, ::grpcIPointCloudManager::suppressPointsResponse>* streamer) {
                       return this->StreamedsuppressPoints(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_suppressPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status suppressPoints(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::suppressPointsRequest* /*request*/, ::grpcIPointCloudManager::suppressPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsuppressPoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::suppressPointsRequest,::grpcIPointCloudManager::suppressPointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDescriptorType() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIPointCloudManager::getDescriptorTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIPointCloudManager::getDescriptorTypeResponse>* streamer) {
                       return this->StreamedgetDescriptorType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDescriptorType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIPointCloudManager::getDescriptorTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDescriptorType() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::setDescriptorTypeRequest, ::grpcIPointCloudManager::setDescriptorTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::setDescriptorTypeRequest, ::grpcIPointCloudManager::setDescriptorTypeResponse>* streamer) {
                       return this->StreamedsetDescriptorType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setDescriptorTypeRequest* /*request*/, ::grpcIPointCloudManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDescriptorType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::setDescriptorTypeRequest,::grpcIPointCloudManager::setDescriptorTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isExistPoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isExistPoint() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::isExistPointRequest, ::grpcIPointCloudManager::isExistPointResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::isExistPointRequest, ::grpcIPointCloudManager::isExistPointResponse>* streamer) {
                       return this->StreamedisExistPoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isExistPoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isExistPoint(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::isExistPointRequest* /*request*/, ::grpcIPointCloudManager::isExistPointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisExistPoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::isExistPointRequest,::grpcIPointCloudManager::isExistPointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNbPoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNbPoints() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIPointCloudManager::getNbPointsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIPointCloudManager::getNbPointsResponse>* streamer) {
                       return this->StreamedgetNbPoints(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNbPoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNbPoints(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getNbPointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNbPoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIPointCloudManager::getNbPointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_saveToFile() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::saveToFileRequest, ::grpcIPointCloudManager::saveToFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::saveToFileRequest, ::grpcIPointCloudManager::saveToFileResponse>* streamer) {
                       return this->StreamedsaveToFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::saveToFileRequest* /*request*/, ::grpcIPointCloudManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsaveToFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::saveToFileRequest,::grpcIPointCloudManager::saveToFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadFromFile() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::loadFromFileRequest, ::grpcIPointCloudManager::loadFromFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::loadFromFileRequest, ::grpcIPointCloudManager::loadFromFileResponse>* streamer) {
                       return this->StreamedloadFromFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::loadFromFileRequest* /*request*/, ::grpcIPointCloudManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadFromFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::loadFromFileRequest,::grpcIPointCloudManager::loadFromFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getConstPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getConstPointCloud() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIPointCloudManager::getConstPointCloudResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIPointCloudManager::getConstPointCloudResponse>* streamer) {
                       return this->StreamedgetConstPointCloud(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getConstPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getConstPointCloud(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIPointCloudManager::getConstPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetConstPointCloud(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIPointCloudManager::getConstPointCloudResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPointCloud() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::getPointCloudRequest, ::grpcIPointCloudManager::getPointCloudResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::getPointCloudRequest, ::grpcIPointCloudManager::getPointCloudResponse>* streamer) {
                       return this->StreamedgetPointCloud(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::getPointCloudRequest* /*request*/, ::grpcIPointCloudManager::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPointCloud(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::getPointCloudRequest,::grpcIPointCloudManager::getPointCloudResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setPointCloud() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIPointCloudManager::setPointCloudRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIPointCloudManager::setPointCloudRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetPointCloud(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIPointCloudManager::setPointCloudRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetPointCloud(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIPointCloudManager::setPointCloudRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_addPoint_grpc0<WithStreamedUnaryMethod_addPoints_grpc0<WithStreamedUnaryMethod_addPoint_grpc1<WithStreamedUnaryMethod_addPoints_grpc1<WithStreamedUnaryMethod_getPoint<WithStreamedUnaryMethod_getPoints<WithStreamedUnaryMethod_getAllPoints<WithStreamedUnaryMethod_suppressPoint<WithStreamedUnaryMethod_suppressPoints<WithStreamedUnaryMethod_getDescriptorType<WithStreamedUnaryMethod_setDescriptorType<WithStreamedUnaryMethod_isExistPoint<WithStreamedUnaryMethod_getNbPoints<WithStreamedUnaryMethod_saveToFile<WithStreamedUnaryMethod_loadFromFile<WithStreamedUnaryMethod_getConstPointCloud<WithStreamedUnaryMethod_getPointCloud<WithStreamedUnaryMethod_setPointCloud<Service > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_addPoint_grpc0<WithStreamedUnaryMethod_addPoints_grpc0<WithStreamedUnaryMethod_addPoint_grpc1<WithStreamedUnaryMethod_addPoints_grpc1<WithStreamedUnaryMethod_getPoint<WithStreamedUnaryMethod_getPoints<WithStreamedUnaryMethod_getAllPoints<WithStreamedUnaryMethod_suppressPoint<WithStreamedUnaryMethod_suppressPoints<WithStreamedUnaryMethod_getDescriptorType<WithStreamedUnaryMethod_setDescriptorType<WithStreamedUnaryMethod_isExistPoint<WithStreamedUnaryMethod_getNbPoints<WithStreamedUnaryMethod_saveToFile<WithStreamedUnaryMethod_loadFromFile<WithStreamedUnaryMethod_getConstPointCloud<WithStreamedUnaryMethod_getPointCloud<WithStreamedUnaryMethod_setPointCloud<Service > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace grpcIPointCloudManager


#endif  // GRPC_grpcIPointCloudManagerService_2eproto__INCLUDED
