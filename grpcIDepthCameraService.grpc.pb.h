// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIDepthCameraService.proto
#ifndef GRPC_grpcIDepthCameraService_2eproto__INCLUDED
#define GRPC_grpcIDepthCameraService_2eproto__INCLUDED

#include "grpcIDepthCameraService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIDepthCamera {

class grpcIDepthCameraService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIDepthCamera.grpcIDepthCameraService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::startResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::stopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpcIDepthCamera::getNextDepthFrameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getNextDepthFrameResponse>> AsyncgetNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getNextDepthFrameResponse>>(AsyncgetNextDepthFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getNextDepthFrameResponse>> PrepareAsyncgetNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getNextDepthFrameResponse>>(PrepareAsyncgetNextDepthFrameRaw(context, request, cq));
    }
    virtual ::grpc::Status getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpcIDepthCamera::getPointCloudResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getPointCloudResponse>> AsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getPointCloudResponse>>(AsyncgetPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getPointCloudResponse>> PrepareAsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getPointCloudResponse>>(PrepareAsyncgetPointCloudRaw(context, request, cq));
    }
    virtual ::grpc::Status setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpcIDepthCamera::setDepthResolutionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDepthResolutionResponse>> AsyncsetDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDepthResolutionResponse>>(AsyncsetDepthResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDepthResolutionResponse>> PrepareAsyncsetDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDepthResolutionResponse>>(PrepareAsyncsetDepthResolutionRaw(context, request, cq));
    }
    virtual ::grpc::Status setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>> AsyncsetIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>>(AsyncsetIntrinsicDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>> PrepareAsyncsetIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>>(PrepareAsyncsetIntrinsicDepthParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDistortionDepthParametersResponse>> AsyncsetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDistortionDepthParametersResponse>>(AsyncsetDistortionDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDistortionDepthParametersResponse>> PrepareAsyncsetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDistortionDepthParametersResponse>>(PrepareAsyncsetDistortionDepthParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getDepthResolutionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthResolutionResponse>> AsyncgetDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthResolutionResponse>>(AsyncgetDepthResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthResolutionResponse>> PrepareAsyncgetDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthResolutionResponse>>(PrepareAsyncgetDepthResolutionRaw(context, request, cq));
    }
    virtual ::grpc::Status getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthMinDistanceResponse>> AsyncgetDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthMinDistanceResponse>>(AsyncgetDepthMinDistanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthMinDistanceResponse>> PrepareAsyncgetDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthMinDistanceResponse>>(PrepareAsyncgetDepthMinDistanceRaw(context, request, cq));
    }
    virtual ::grpc::Status getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>> AsyncgetIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>>(AsyncgetIntrinsicsDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>> PrepareAsyncgetIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>>(PrepareAsyncgetIntrinsicsDepthParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDistortionDepthParametersResponse>> AsyncgetDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDistortionDepthParametersResponse>>(AsyncgetDistortionDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDistortionDepthParametersResponse>> PrepareAsyncgetDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDistortionDepthParametersResponse>>(PrepareAsyncgetDistortionDepthParametersRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getNextDepthFrameResponse>* AsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getNextDepthFrameResponse>* PrepareAsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getPointCloudResponse>* AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getPointCloudResponse>* PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDepthResolutionResponse>* AsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDepthResolutionResponse>* PrepareAsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>* AsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>* PrepareAsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDistortionDepthParametersResponse>* AsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::setDistortionDepthParametersResponse>* PrepareAsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthResolutionResponse>* AsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthResolutionResponse>* PrepareAsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthMinDistanceResponse>* AsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDepthMinDistanceResponse>* PrepareAsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>* AsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>* PrepareAsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDistortionDepthParametersResponse>* AsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIDepthCamera::getDistortionDepthParametersResponse>* PrepareAsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status start(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::startResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::stopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    ::grpc::Status getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpcIDepthCamera::getNextDepthFrameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getNextDepthFrameResponse>> AsyncgetNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getNextDepthFrameResponse>>(AsyncgetNextDepthFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getNextDepthFrameResponse>> PrepareAsyncgetNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getNextDepthFrameResponse>>(PrepareAsyncgetNextDepthFrameRaw(context, request, cq));
    }
    ::grpc::Status getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpcIDepthCamera::getPointCloudResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getPointCloudResponse>> AsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getPointCloudResponse>>(AsyncgetPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getPointCloudResponse>> PrepareAsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getPointCloudResponse>>(PrepareAsyncgetPointCloudRaw(context, request, cq));
    }
    ::grpc::Status setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpcIDepthCamera::setDepthResolutionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDepthResolutionResponse>> AsyncsetDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDepthResolutionResponse>>(AsyncsetDepthResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDepthResolutionResponse>> PrepareAsyncsetDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDepthResolutionResponse>>(PrepareAsyncsetDepthResolutionRaw(context, request, cq));
    }
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>> AsyncsetIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>>(AsyncsetIntrinsicDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>> PrepareAsyncsetIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>>(PrepareAsyncsetIntrinsicDepthParametersRaw(context, request, cq));
    }
    ::grpc::Status setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDistortionDepthParametersResponse>> AsyncsetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDistortionDepthParametersResponse>>(AsyncsetDistortionDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDistortionDepthParametersResponse>> PrepareAsyncsetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDistortionDepthParametersResponse>>(PrepareAsyncsetDistortionDepthParametersRaw(context, request, cq));
    }
    ::grpc::Status getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getDepthResolutionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthResolutionResponse>> AsyncgetDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthResolutionResponse>>(AsyncgetDepthResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthResolutionResponse>> PrepareAsyncgetDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthResolutionResponse>>(PrepareAsyncgetDepthResolutionRaw(context, request, cq));
    }
    ::grpc::Status getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthMinDistanceResponse>> AsyncgetDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthMinDistanceResponse>>(AsyncgetDepthMinDistanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthMinDistanceResponse>> PrepareAsyncgetDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthMinDistanceResponse>>(PrepareAsyncgetDepthMinDistanceRaw(context, request, cq));
    }
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>> AsyncgetIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>>(AsyncgetIntrinsicsDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>> PrepareAsyncgetIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>>(PrepareAsyncgetIntrinsicsDepthParametersRaw(context, request, cq));
    }
    ::grpc::Status getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDistortionDepthParametersResponse>> AsyncgetDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDistortionDepthParametersResponse>>(AsyncgetDistortionDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDistortionDepthParametersResponse>> PrepareAsyncgetDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDistortionDepthParametersResponse>>(PrepareAsyncgetDistortionDepthParametersRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getNextDepthFrameResponse>* AsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getNextDepthFrameResponse>* PrepareAsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getPointCloudResponse>* AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getPointCloudResponse>* PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDepthResolutionResponse>* AsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDepthResolutionResponse>* PrepareAsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>* AsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>* PrepareAsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDistortionDepthParametersResponse>* AsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDistortionDepthParametersResponse>* PrepareAsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthResolutionResponse>* AsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthResolutionResponse>* PrepareAsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthMinDistanceResponse>* AsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthMinDistanceResponse>* PrepareAsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>* AsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>* PrepareAsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDistortionDepthParametersResponse>* AsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDistortionDepthParametersResponse>* PrepareAsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_start_;
    const ::grpc::internal::RpcMethod rpcmethod_stop_;
    const ::grpc::internal::RpcMethod rpcmethod_getNextDepthFrame_;
    const ::grpc::internal::RpcMethod rpcmethod_getPointCloud_;
    const ::grpc::internal::RpcMethod rpcmethod_setDepthResolution_;
    const ::grpc::internal::RpcMethod rpcmethod_setIntrinsicDepthParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_setDistortionDepthParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getDepthResolution_;
    const ::grpc::internal::RpcMethod rpcmethod_getDepthMinDistance_;
    const ::grpc::internal::RpcMethod rpcmethod_getIntrinsicsDepthParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getDistortionDepthParameters_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response);
    virtual ::grpc::Status getNextDepthFrame(::grpc::ServerContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response);
    virtual ::grpc::Status getPointCloud(::grpc::ServerContext* context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response);
    virtual ::grpc::Status setDepthResolution(::grpc::ServerContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response);
    virtual ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response);
    virtual ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response);
    virtual ::grpc::Status getDepthResolution(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response);
    virtual ::grpc::Status getDepthMinDistance(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response);
    virtual ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response);
    virtual ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::startResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::stopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNextDepthFrame() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getNextDepthFrameRequest* /*request*/, ::grpcIDepthCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNextDepthFrame(::grpc::ServerContext* context, ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::getNextDepthFrameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPointCloud() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getPointCloudRequest* /*request*/, ::grpcIDepthCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPointCloud(::grpc::ServerContext* context, ::grpcIDepthCamera::getPointCloudRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::getPointCloudResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDepthResolution() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDepthResolutionRequest* /*request*/, ::grpcIDepthCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDepthResolution(::grpc::ServerContext* context, ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::setDepthResolutionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setIntrinsicDepthParameters() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetIntrinsicDepthParameters(::grpc::ServerContext* context, ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDistortionDepthParameters() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDistortionDepthParameters(::grpc::ServerContext* context, ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::setDistortionDepthParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDepthResolution() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDepthResolution(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::getDepthResolutionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDepthMinDistance() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDepthMinDistance(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::getDepthMinDistanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getIntrinsicsDepthParameters() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetIntrinsicsDepthParameters(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDistortionDepthParameters() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDistortionDepthParameters(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIDepthCamera::getDistortionDepthParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_start<WithAsyncMethod_stop<WithAsyncMethod_getNextDepthFrame<WithAsyncMethod_getPointCloud<WithAsyncMethod_setDepthResolution<WithAsyncMethod_setIntrinsicDepthParameters<WithAsyncMethod_setDistortionDepthParameters<WithAsyncMethod_getDepthResolution<WithAsyncMethod_getDepthMinDistance<WithAsyncMethod_getIntrinsicsDepthParameters<WithAsyncMethod_getDistortionDepthParameters<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::startResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response) { return this->start(context, request, response); }));}
    void SetMessageAllocatorFor_start(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIDepthCamera::startResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::startResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::startResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::startResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::stopResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response) { return this->stop(context, request, response); }));}
    void SetMessageAllocatorFor_stop(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIDepthCamera::stopResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::stopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::stopResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::stopResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getNextDepthFrame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDepthCamera::getNextDepthFrameRequest, ::grpcIDepthCamera::getNextDepthFrameResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response) { return this->getNextDepthFrame(context, request, response); }));}
    void SetMessageAllocatorFor_getNextDepthFrame(
        ::grpc::experimental::MessageAllocator< ::grpcIDepthCamera::getNextDepthFrameRequest, ::grpcIDepthCamera::getNextDepthFrameResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDepthCamera::getNextDepthFrameRequest, ::grpcIDepthCamera::getNextDepthFrameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getNextDepthFrameRequest* /*request*/, ::grpcIDepthCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNextDepthFrame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDepthCamera::getNextDepthFrameRequest* /*request*/, ::grpcIDepthCamera::getNextDepthFrameResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNextDepthFrame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDepthCamera::getNextDepthFrameRequest* /*request*/, ::grpcIDepthCamera::getNextDepthFrameResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDepthCamera::getPointCloudRequest, ::grpcIDepthCamera::getPointCloudResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response) { return this->getPointCloud(context, request, response); }));}
    void SetMessageAllocatorFor_getPointCloud(
        ::grpc::experimental::MessageAllocator< ::grpcIDepthCamera::getPointCloudRequest, ::grpcIDepthCamera::getPointCloudResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDepthCamera::getPointCloudRequest, ::grpcIDepthCamera::getPointCloudResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getPointCloudRequest* /*request*/, ::grpcIDepthCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDepthCamera::getPointCloudRequest* /*request*/, ::grpcIDepthCamera::getPointCloudResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDepthCamera::getPointCloudRequest* /*request*/, ::grpcIDepthCamera::getPointCloudResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setDepthResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDepthCamera::setDepthResolutionRequest, ::grpcIDepthCamera::setDepthResolutionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response) { return this->setDepthResolution(context, request, response); }));}
    void SetMessageAllocatorFor_setDepthResolution(
        ::grpc::experimental::MessageAllocator< ::grpcIDepthCamera::setDepthResolutionRequest, ::grpcIDepthCamera::setDepthResolutionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDepthCamera::setDepthResolutionRequest, ::grpcIDepthCamera::setDepthResolutionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDepthResolutionRequest* /*request*/, ::grpcIDepthCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDepthResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDepthCamera::setDepthResolutionRequest* /*request*/, ::grpcIDepthCamera::setDepthResolutionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDepthResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDepthCamera::setDepthResolutionRequest* /*request*/, ::grpcIDepthCamera::setDepthResolutionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setIntrinsicDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDepthCamera::setIntrinsicDepthParametersRequest, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response) { return this->setIntrinsicDepthParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setIntrinsicDepthParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIDepthCamera::setIntrinsicDepthParametersRequest, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDepthCamera::setIntrinsicDepthParametersRequest, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setIntrinsicDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setIntrinsicDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setDistortionDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIDepthCamera::setDistortionDepthParametersRequest, ::grpcIDepthCamera::setDistortionDepthParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response) { return this->setDistortionDepthParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setDistortionDepthParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIDepthCamera::setDistortionDepthParametersRequest, ::grpcIDepthCamera::setDistortionDepthParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIDepthCamera::setDistortionDepthParametersRequest, ::grpcIDepthCamera::setDistortionDepthParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDistortionDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setDistortionDepthParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDistortionDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setDistortionDepthParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDepthResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthResolutionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response) { return this->getDepthResolution(context, request, response); }));}
    void SetMessageAllocatorFor_getDepthResolution(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthResolutionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthResolutionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDepthResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthResolutionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDepthResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthResolutionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDepthMinDistance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthMinDistanceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response) { return this->getDepthMinDistance(context, request, response); }));}
    void SetMessageAllocatorFor_getDepthMinDistance(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthMinDistanceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthMinDistanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDepthMinDistance(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthMinDistanceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDepthMinDistance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthMinDistanceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getIntrinsicsDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response) { return this->getIntrinsicsDepthParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getIntrinsicsDepthParameters(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getIntrinsicsDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getIntrinsicsDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDistortionDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::getDistortionDepthParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response) { return this->getDistortionDepthParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getDistortionDepthParameters(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIDepthCamera::getDistortionDepthParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIDepthCamera::getDistortionDepthParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDistortionDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDistortionDepthParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDistortionDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDistortionDepthParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_start<ExperimentalWithCallbackMethod_stop<ExperimentalWithCallbackMethod_getNextDepthFrame<ExperimentalWithCallbackMethod_getPointCloud<ExperimentalWithCallbackMethod_setDepthResolution<ExperimentalWithCallbackMethod_setIntrinsicDepthParameters<ExperimentalWithCallbackMethod_setDistortionDepthParameters<ExperimentalWithCallbackMethod_getDepthResolution<ExperimentalWithCallbackMethod_getDepthMinDistance<ExperimentalWithCallbackMethod_getIntrinsicsDepthParameters<ExperimentalWithCallbackMethod_getDistortionDepthParameters<Service > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_start<ExperimentalWithCallbackMethod_stop<ExperimentalWithCallbackMethod_getNextDepthFrame<ExperimentalWithCallbackMethod_getPointCloud<ExperimentalWithCallbackMethod_setDepthResolution<ExperimentalWithCallbackMethod_setIntrinsicDepthParameters<ExperimentalWithCallbackMethod_setDistortionDepthParameters<ExperimentalWithCallbackMethod_getDepthResolution<ExperimentalWithCallbackMethod_getDepthMinDistance<ExperimentalWithCallbackMethod_getIntrinsicsDepthParameters<ExperimentalWithCallbackMethod_getDistortionDepthParameters<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNextDepthFrame() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getNextDepthFrameRequest* /*request*/, ::grpcIDepthCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPointCloud() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getPointCloudRequest* /*request*/, ::grpcIDepthCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDepthResolution() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDepthResolutionRequest* /*request*/, ::grpcIDepthCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setIntrinsicDepthParameters() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDistortionDepthParameters() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDepthResolution() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDepthMinDistance() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getIntrinsicsDepthParameters() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDistortionDepthParameters() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stop() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNextDepthFrame() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getNextDepthFrameRequest* /*request*/, ::grpcIDepthCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNextDepthFrame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPointCloud() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getPointCloudRequest* /*request*/, ::grpcIDepthCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPointCloud(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDepthResolution() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDepthResolutionRequest* /*request*/, ::grpcIDepthCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDepthResolution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setIntrinsicDepthParameters() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetIntrinsicDepthParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDistortionDepthParameters() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDistortionDepthParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDepthResolution() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDepthResolution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDepthMinDistance() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDepthMinDistance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getIntrinsicsDepthParameters() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetIntrinsicsDepthParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDistortionDepthParameters() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDistortionDepthParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getNextDepthFrame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNextDepthFrame(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getNextDepthFrameRequest* /*request*/, ::grpcIDepthCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNextDepthFrame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNextDepthFrame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPointCloud(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getPointCloudRequest* /*request*/, ::grpcIDepthCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setDepthResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDepthResolution(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDepthResolutionRequest* /*request*/, ::grpcIDepthCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDepthResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDepthResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setIntrinsicDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setIntrinsicDepthParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setIntrinsicDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setIntrinsicDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setDistortionDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDistortionDepthParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDistortionDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDistortionDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDepthResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDepthResolution(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDepthResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDepthResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDepthMinDistance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDepthMinDistance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDepthMinDistance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDepthMinDistance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getIntrinsicsDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getIntrinsicsDepthParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getIntrinsicsDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getIntrinsicsDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDistortionDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDistortionDepthParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDistortionDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDistortionDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIDepthCamera::startResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIDepthCamera::startResponse>* streamer) {
                       return this->Streamedstart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIDepthCamera::startResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stop() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIDepthCamera::stopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIDepthCamera::stopResponse>* streamer) {
                       return this->Streamedstop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIDepthCamera::stopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNextDepthFrame() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDepthCamera::getNextDepthFrameRequest, ::grpcIDepthCamera::getNextDepthFrameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDepthCamera::getNextDepthFrameRequest, ::grpcIDepthCamera::getNextDepthFrameResponse>* streamer) {
                       return this->StreamedgetNextDepthFrame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getNextDepthFrameRequest* /*request*/, ::grpcIDepthCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNextDepthFrame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDepthCamera::getNextDepthFrameRequest,::grpcIDepthCamera::getNextDepthFrameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPointCloud() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDepthCamera::getPointCloudRequest, ::grpcIDepthCamera::getPointCloudResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDepthCamera::getPointCloudRequest, ::grpcIDepthCamera::getPointCloudResponse>* streamer) {
                       return this->StreamedgetPointCloud(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::getPointCloudRequest* /*request*/, ::grpcIDepthCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPointCloud(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDepthCamera::getPointCloudRequest,::grpcIDepthCamera::getPointCloudResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDepthResolution() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDepthCamera::setDepthResolutionRequest, ::grpcIDepthCamera::setDepthResolutionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDepthCamera::setDepthResolutionRequest, ::grpcIDepthCamera::setDepthResolutionResponse>* streamer) {
                       return this->StreamedsetDepthResolution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDepthResolutionRequest* /*request*/, ::grpcIDepthCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDepthResolution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDepthCamera::setDepthResolutionRequest,::grpcIDepthCamera::setDepthResolutionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setIntrinsicDepthParameters() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDepthCamera::setIntrinsicDepthParametersRequest, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDepthCamera::setIntrinsicDepthParametersRequest, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>* streamer) {
                       return this->StreamedsetIntrinsicDepthParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetIntrinsicDepthParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDepthCamera::setIntrinsicDepthParametersRequest,::grpcIDepthCamera::setIntrinsicDepthParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDistortionDepthParameters() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIDepthCamera::setDistortionDepthParametersRequest, ::grpcIDepthCamera::setDistortionDepthParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIDepthCamera::setDistortionDepthParametersRequest, ::grpcIDepthCamera::setDistortionDepthParametersResponse>* streamer) {
                       return this->StreamedsetDistortionDepthParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIDepthCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDistortionDepthParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIDepthCamera::setDistortionDepthParametersRequest,::grpcIDepthCamera::setDistortionDepthParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDepthResolution() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthResolutionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthResolutionResponse>* streamer) {
                       return this->StreamedgetDepthResolution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDepthResolution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIDepthCamera::getDepthResolutionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDepthMinDistance() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthMinDistanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthMinDistanceResponse>* streamer) {
                       return this->StreamedgetDepthMinDistance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDepthMinDistance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIDepthCamera::getDepthMinDistanceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getIntrinsicsDepthParameters() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>* streamer) {
                       return this->StreamedgetIntrinsicsDepthParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetIntrinsicsDepthParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDistortionDepthParameters() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIDepthCamera::getDistortionDepthParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIDepthCamera::getDistortionDepthParametersResponse>* streamer) {
                       return this->StreamedgetDistortionDepthParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIDepthCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDistortionDepthParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIDepthCamera::getDistortionDepthParametersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getNextDepthFrame<WithStreamedUnaryMethod_getPointCloud<WithStreamedUnaryMethod_setDepthResolution<WithStreamedUnaryMethod_setIntrinsicDepthParameters<WithStreamedUnaryMethod_setDistortionDepthParameters<WithStreamedUnaryMethod_getDepthResolution<WithStreamedUnaryMethod_getDepthMinDistance<WithStreamedUnaryMethod_getIntrinsicsDepthParameters<WithStreamedUnaryMethod_getDistortionDepthParameters<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getNextDepthFrame<WithStreamedUnaryMethod_getPointCloud<WithStreamedUnaryMethod_setDepthResolution<WithStreamedUnaryMethod_setIntrinsicDepthParameters<WithStreamedUnaryMethod_setDistortionDepthParameters<WithStreamedUnaryMethod_getDepthResolution<WithStreamedUnaryMethod_getDepthMinDistance<WithStreamedUnaryMethod_getIntrinsicsDepthParameters<WithStreamedUnaryMethod_getDistortionDepthParameters<Service > > > > > > > > > > > StreamedService;
};

}  // namespace grpcIDepthCamera


#endif  // GRPC_grpcIDepthCameraService_2eproto__INCLUDED
