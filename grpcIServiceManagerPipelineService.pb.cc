// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIServiceManagerPipelineService.proto

#include "grpcIServiceManagerPipelineService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIServiceManagerPipeline {
PROTOBUF_CONSTEXPR initRequest::initRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct initRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR initRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~initRequestDefaultTypeInternal() {}
  union {
    initRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 initRequestDefaultTypeInternal _initRequest_default_instance_;
PROTOBUF_CONSTEXPR initResponse::initResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct initResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR initResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~initResponseDefaultTypeInternal() {}
  union {
    initResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 initResponseDefaultTypeInternal _initResponse_default_instance_;
PROTOBUF_CONSTEXPR startRequest::startRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct startRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR startRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~startRequestDefaultTypeInternal() {}
  union {
    startRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 startRequestDefaultTypeInternal _startRequest_default_instance_;
PROTOBUF_CONSTEXPR startResponse::startResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct startResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR startResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~startResponseDefaultTypeInternal() {}
  union {
    startResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 startResponseDefaultTypeInternal _startResponse_default_instance_;
PROTOBUF_CONSTEXPR stopRequest::stopRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct stopRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR stopRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~stopRequestDefaultTypeInternal() {}
  union {
    stopRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 stopRequestDefaultTypeInternal _stopRequest_default_instance_;
PROTOBUF_CONSTEXPR stopResponse::stopResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct stopResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR stopResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~stopResponseDefaultTypeInternal() {}
  union {
    stopResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 stopResponseDefaultTypeInternal _stopResponse_default_instance_;
PROTOBUF_CONSTEXPR registerServiceRequest::registerServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct registerServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR registerServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~registerServiceRequestDefaultTypeInternal() {}
  union {
    registerServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 registerServiceRequestDefaultTypeInternal _registerServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR registerServiceResponse::registerServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct registerServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR registerServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~registerServiceResponseDefaultTypeInternal() {}
  union {
    registerServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 registerServiceResponseDefaultTypeInternal _registerServiceResponse_default_instance_;
PROTOBUF_CONSTEXPR unregisterServiceRequest::unregisterServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct unregisterServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR unregisterServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~unregisterServiceRequestDefaultTypeInternal() {}
  union {
    unregisterServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 unregisterServiceRequestDefaultTypeInternal _unregisterServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR unregisterServiceResponse::unregisterServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct unregisterServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR unregisterServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~unregisterServiceResponseDefaultTypeInternal() {}
  union {
    unregisterServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 unregisterServiceResponseDefaultTypeInternal _unregisterServiceResponse_default_instance_;
PROTOBUF_CONSTEXPR getServiceRequest::getServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getServiceRequestDefaultTypeInternal() {}
  union {
    getServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getServiceRequestDefaultTypeInternal _getServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR getServiceResponse::getServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getServiceResponseDefaultTypeInternal() {}
  union {
    getServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getServiceResponseDefaultTypeInternal _getServiceResponse_default_instance_;
PROTOBUF_CONSTEXPR getAndLockServiceRequest::getAndLockServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAndLockServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAndLockServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAndLockServiceRequestDefaultTypeInternal() {}
  union {
    getAndLockServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAndLockServiceRequestDefaultTypeInternal _getAndLockServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR getAndLockServiceResponse::getAndLockServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAndLockServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAndLockServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAndLockServiceResponseDefaultTypeInternal() {}
  union {
    getAndLockServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAndLockServiceResponseDefaultTypeInternal _getAndLockServiceResponse_default_instance_;
PROTOBUF_CONSTEXPR unlockServiceRequest::unlockServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct unlockServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR unlockServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~unlockServiceRequestDefaultTypeInternal() {}
  union {
    unlockServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 unlockServiceRequestDefaultTypeInternal _unlockServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR unlockServiceResponse::unlockServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct unlockServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR unlockServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~unlockServiceResponseDefaultTypeInternal() {}
  union {
    unlockServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 unlockServiceResponseDefaultTypeInternal _unlockServiceResponse_default_instance_;
}  // namespace grpcIServiceManagerPipeline
static ::_pb::Metadata file_level_metadata_grpcIServiceManagerPipelineService_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIServiceManagerPipelineService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIServiceManagerPipelineService_2eproto = nullptr;

const uint32_t TableStruct_grpcIServiceManagerPipelineService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::initRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::initRequest, _impl_.grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::initResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::initResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::startRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::startRequest, _impl_.grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::startResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::startResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::stopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::stopRequest, _impl_.grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::stopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::stopResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::registerServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::registerServiceRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::registerServiceRequest, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::registerServiceRequest, _impl_.serviceurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::registerServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::registerServiceResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unregisterServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unregisterServiceRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unregisterServiceRequest, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unregisterServiceRequest, _impl_.serviceurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unregisterServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unregisterServiceResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getServiceRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getServiceRequest, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getServiceRequest, _impl_.serviceurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getServiceResponse, _impl_.serviceurl_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getServiceResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getAndLockServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getAndLockServiceRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getAndLockServiceRequest, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getAndLockServiceRequest, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getAndLockServiceRequest, _impl_.serviceurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getAndLockServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getAndLockServiceResponse, _impl_.serviceurl_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::getAndLockServiceResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unlockServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unlockServiceRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unlockServiceRequest, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unlockServiceRequest, _impl_.clientuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unlockServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManagerPipeline::unlockServiceResponse, _impl_.xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIServiceManagerPipeline::initRequest)},
  { 7, -1, -1, sizeof(::grpcIServiceManagerPipeline::initResponse)},
  { 14, -1, -1, sizeof(::grpcIServiceManagerPipeline::startRequest)},
  { 21, -1, -1, sizeof(::grpcIServiceManagerPipeline::startResponse)},
  { 28, -1, -1, sizeof(::grpcIServiceManagerPipeline::stopRequest)},
  { 35, -1, -1, sizeof(::grpcIServiceManagerPipeline::stopResponse)},
  { 42, -1, -1, sizeof(::grpcIServiceManagerPipeline::registerServiceRequest)},
  { 51, -1, -1, sizeof(::grpcIServiceManagerPipeline::registerServiceResponse)},
  { 58, -1, -1, sizeof(::grpcIServiceManagerPipeline::unregisterServiceRequest)},
  { 67, -1, -1, sizeof(::grpcIServiceManagerPipeline::unregisterServiceResponse)},
  { 74, -1, -1, sizeof(::grpcIServiceManagerPipeline::getServiceRequest)},
  { 83, -1, -1, sizeof(::grpcIServiceManagerPipeline::getServiceResponse)},
  { 91, -1, -1, sizeof(::grpcIServiceManagerPipeline::getAndLockServiceRequest)},
  { 101, -1, -1, sizeof(::grpcIServiceManagerPipeline::getAndLockServiceResponse)},
  { 109, -1, -1, sizeof(::grpcIServiceManagerPipeline::unlockServiceRequest)},
  { 118, -1, -1, sizeof(::grpcIServiceManagerPipeline::unlockServiceResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIServiceManagerPipeline::_initRequest_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_initResponse_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_startRequest_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_startResponse_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_stopRequest_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_stopResponse_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_registerServiceRequest_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_registerServiceResponse_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_unregisterServiceRequest_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_unregisterServiceResponse_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_getServiceRequest_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_getServiceResponse_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_getAndLockServiceRequest_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_getAndLockServiceResponse_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_unlockServiceRequest_default_instance_._instance,
  &::grpcIServiceManagerPipeline::_unlockServiceResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIServiceManagerPipelineService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(grpcIServiceManagerPipelineService.pro"
  "to\022\033grpcIServiceManagerPipeline\032\033google/"
  "protobuf/empty.proto\"2\n\013initRequest\022#\n\033g"
  "rpcServerCompressionFormat\030\001 \001(\005\"+\n\014init"
  "Response\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"3\n"
  "\014startRequest\022#\n\033grpcServerCompressionFo"
  "rmat\030\001 \001(\005\",\n\rstartResponse\022\033\n\023xpcfGrpcR"
  "eturnValue\030\001 \001(\021\"2\n\013stopRequest\022#\n\033grpcS"
  "erverCompressionFormat\030\001 \001(\005\"+\n\014stopResp"
  "onse\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"f\n\026reg"
  "isterServiceRequest\022#\n\033grpcServerCompres"
  "sionFormat\030\001 \001(\005\022\023\n\013serviceType\030\002 \001(\021\022\022\n"
  "\nserviceURL\030\003 \001(\t\"6\n\027registerServiceResp"
  "onse\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"h\n\030unr"
  "egisterServiceRequest\022#\n\033grpcServerCompr"
  "essionFormat\030\001 \001(\005\022\023\n\013serviceType\030\002 \001(\021\022"
  "\022\n\nserviceURL\030\003 \001(\t\"8\n\031unregisterService"
  "Response\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"a\n"
  "\021getServiceRequest\022#\n\033grpcServerCompress"
  "ionFormat\030\001 \001(\005\022\023\n\013serviceType\030\002 \001(\021\022\022\n\n"
  "serviceURL\030\003 \001(\t\"E\n\022getServiceResponse\022\022"
  "\n\nserviceURL\030\001 \001(\t\022\033\n\023xpcfGrpcReturnValu"
  "e\030\002 \001(\021\"|\n\030getAndLockServiceRequest\022#\n\033g"
  "rpcServerCompressionFormat\030\001 \001(\005\022\023\n\013serv"
  "iceType\030\002 \001(\021\022\022\n\nclientUUID\030\003 \001(\t\022\022\n\nser"
  "viceURL\030\004 \001(\t\"L\n\031getAndLockServiceRespon"
  "se\022\022\n\nserviceURL\030\001 \001(\t\022\033\n\023xpcfGrpcReturn"
  "Value\030\002 \001(\021\"d\n\024unlockServiceRequest\022#\n\033g"
  "rpcServerCompressionFormat\030\001 \001(\005\022\023\n\013serv"
  "iceType\030\002 \001(\021\022\022\n\nclientUUID\030\003 \001(\t\"4\n\025unl"
  "ockServiceResponse\022\033\n\023xpcfGrpcReturnValu"
  "e\030\001 \001(\0212\275\007\n\"grpcIServiceManagerPipelineS"
  "ervice\022]\n\004init\022(.grpcIServiceManagerPipe"
  "line.initRequest\032).grpcIServiceManagerPi"
  "peline.initResponse\"\000\022`\n\005start\022).grpcISe"
  "rviceManagerPipeline.startRequest\032*.grpc"
  "IServiceManagerPipeline.startResponse\"\000\022"
  "]\n\004stop\022(.grpcIServiceManagerPipeline.st"
  "opRequest\032).grpcIServiceManagerPipeline."
  "stopResponse\"\000\022~\n\017registerService\0223.grpc"
  "IServiceManagerPipeline.registerServiceR"
  "equest\0324.grpcIServiceManagerPipeline.reg"
  "isterServiceResponse\"\000\022\204\001\n\021unregisterSer"
  "vice\0225.grpcIServiceManagerPipeline.unreg"
  "isterServiceRequest\0326.grpcIServiceManage"
  "rPipeline.unregisterServiceResponse\"\000\022o\n"
  "\ngetService\022..grpcIServiceManagerPipelin"
  "e.getServiceRequest\032/.grpcIServiceManage"
  "rPipeline.getServiceResponse\"\000\022\204\001\n\021getAn"
  "dLockService\0225.grpcIServiceManagerPipeli"
  "ne.getAndLockServiceRequest\0326.grpcIServi"
  "ceManagerPipeline.getAndLockServiceRespo"
  "nse\"\000\022x\n\runlockService\0221.grpcIServiceMan"
  "agerPipeline.unlockServiceRequest\0322.grpc"
  "IServiceManagerPipeline.unlockServiceRes"
  "ponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIServiceManagerPipelineService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIServiceManagerPipelineService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIServiceManagerPipelineService_2eproto = {
    false, false, 2215, descriptor_table_protodef_grpcIServiceManagerPipelineService_2eproto,
    "grpcIServiceManagerPipelineService.proto",
    &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once, descriptor_table_grpcIServiceManagerPipelineService_2eproto_deps, 1, 16,
    schemas, file_default_instances, TableStruct_grpcIServiceManagerPipelineService_2eproto::offsets,
    file_level_metadata_grpcIServiceManagerPipelineService_2eproto, file_level_enum_descriptors_grpcIServiceManagerPipelineService_2eproto,
    file_level_service_descriptors_grpcIServiceManagerPipelineService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter() {
  return &descriptor_table_grpcIServiceManagerPipelineService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIServiceManagerPipelineService_2eproto(&descriptor_table_grpcIServiceManagerPipelineService_2eproto);
namespace grpcIServiceManagerPipeline {

// ===================================================================

class initRequest::_Internal {
 public:
};

initRequest::initRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.initRequest)
}
initRequest::initRequest(const initRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  initRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.initRequest)
}

inline void initRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

initRequest::~initRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.initRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void initRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void initRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void initRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.initRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* initRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* initRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.initRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.initRequest)
  return target;
}

size_t initRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.initRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData initRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    initRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*initRequest::GetClassData() const { return &_class_data_; }


void initRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<initRequest*>(&to_msg);
  auto& from = static_cast<const initRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.initRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void initRequest::CopyFrom(const initRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.initRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool initRequest::IsInitialized() const {
  return true;
}

void initRequest::InternalSwap(initRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata initRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[0]);
}

// ===================================================================

class initResponse::_Internal {
 public:
};

initResponse::initResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.initResponse)
}
initResponse::initResponse(const initResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  initResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.initResponse)
}

inline void initResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

initResponse::~initResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.initResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void initResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void initResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void initResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.initResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* initResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* initResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.initResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.initResponse)
  return target;
}

size_t initResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.initResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData initResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    initResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*initResponse::GetClassData() const { return &_class_data_; }


void initResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<initResponse*>(&to_msg);
  auto& from = static_cast<const initResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.initResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void initResponse::CopyFrom(const initResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.initResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool initResponse::IsInitialized() const {
  return true;
}

void initResponse::InternalSwap(initResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata initResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[1]);
}

// ===================================================================

class startRequest::_Internal {
 public:
};

startRequest::startRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.startRequest)
}
startRequest::startRequest(const startRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  startRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.startRequest)
}

inline void startRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

startRequest::~startRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.startRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void startRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void startRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void startRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.startRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* startRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* startRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.startRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.startRequest)
  return target;
}

size_t startRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.startRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData startRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    startRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*startRequest::GetClassData() const { return &_class_data_; }


void startRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<startRequest*>(&to_msg);
  auto& from = static_cast<const startRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.startRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void startRequest::CopyFrom(const startRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.startRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool startRequest::IsInitialized() const {
  return true;
}

void startRequest::InternalSwap(startRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata startRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[2]);
}

// ===================================================================

class startResponse::_Internal {
 public:
};

startResponse::startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.startResponse)
}
startResponse::startResponse(const startResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  startResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.startResponse)
}

inline void startResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

startResponse::~startResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.startResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void startResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void startResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void startResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.startResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* startResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* startResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.startResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.startResponse)
  return target;
}

size_t startResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.startResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData startResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    startResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*startResponse::GetClassData() const { return &_class_data_; }


void startResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<startResponse*>(&to_msg);
  auto& from = static_cast<const startResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.startResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void startResponse::CopyFrom(const startResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.startResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool startResponse::IsInitialized() const {
  return true;
}

void startResponse::InternalSwap(startResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata startResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[3]);
}

// ===================================================================

class stopRequest::_Internal {
 public:
};

stopRequest::stopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.stopRequest)
}
stopRequest::stopRequest(const stopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  stopRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.stopRequest)
}

inline void stopRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

stopRequest::~stopRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.stopRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void stopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void stopRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void stopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.stopRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stopRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* stopRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.stopRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.stopRequest)
  return target;
}

size_t stopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.stopRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData stopRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    stopRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*stopRequest::GetClassData() const { return &_class_data_; }


void stopRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<stopRequest*>(&to_msg);
  auto& from = static_cast<const stopRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.stopRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void stopRequest::CopyFrom(const stopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.stopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stopRequest::IsInitialized() const {
  return true;
}

void stopRequest::InternalSwap(stopRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stopRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[4]);
}

// ===================================================================

class stopResponse::_Internal {
 public:
};

stopResponse::stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.stopResponse)
}
stopResponse::stopResponse(const stopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  stopResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.stopResponse)
}

inline void stopResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

stopResponse::~stopResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.stopResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void stopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void stopResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void stopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.stopResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stopResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* stopResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.stopResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.stopResponse)
  return target;
}

size_t stopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.stopResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData stopResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    stopResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*stopResponse::GetClassData() const { return &_class_data_; }


void stopResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<stopResponse*>(&to_msg);
  auto& from = static_cast<const stopResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.stopResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void stopResponse::CopyFrom(const stopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.stopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stopResponse::IsInitialized() const {
  return true;
}

void stopResponse::InternalSwap(stopResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stopResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[5]);
}

// ===================================================================

class registerServiceRequest::_Internal {
 public:
};

registerServiceRequest::registerServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.registerServiceRequest)
}
registerServiceRequest::registerServiceRequest(const registerServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  registerServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.servicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.registerServiceRequest)
}

inline void registerServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.servicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

registerServiceRequest::~registerServiceRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.registerServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void registerServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceurl_.Destroy();
}

void registerServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void registerServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.registerServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceurl_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servicetype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serviceURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManagerPipeline.registerServiceRequest.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* registerServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.registerServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_servicetype(), target);
  }

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManagerPipeline.registerServiceRequest.serviceURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serviceurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.registerServiceRequest)
  return target;
}

size_t registerServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.registerServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_servicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData registerServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    registerServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*registerServiceRequest::GetClassData() const { return &_class_data_; }


void registerServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<registerServiceRequest*>(&to_msg);
  auto& from = static_cast<const registerServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.registerServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void registerServiceRequest::CopyFrom(const registerServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.registerServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerServiceRequest::IsInitialized() const {
  return true;
}

void registerServiceRequest::InternalSwap(registerServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(registerServiceRequest, _impl_.servicetype_)
      + sizeof(registerServiceRequest::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(registerServiceRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata registerServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[6]);
}

// ===================================================================

class registerServiceResponse::_Internal {
 public:
};

registerServiceResponse::registerServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.registerServiceResponse)
}
registerServiceResponse::registerServiceResponse(const registerServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  registerServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.registerServiceResponse)
}

inline void registerServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

registerServiceResponse::~registerServiceResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.registerServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void registerServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void registerServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void registerServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.registerServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* registerServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.registerServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.registerServiceResponse)
  return target;
}

size_t registerServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.registerServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData registerServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    registerServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*registerServiceResponse::GetClassData() const { return &_class_data_; }


void registerServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<registerServiceResponse*>(&to_msg);
  auto& from = static_cast<const registerServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.registerServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void registerServiceResponse::CopyFrom(const registerServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.registerServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerServiceResponse::IsInitialized() const {
  return true;
}

void registerServiceResponse::InternalSwap(registerServiceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registerServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[7]);
}

// ===================================================================

class unregisterServiceRequest::_Internal {
 public:
};

unregisterServiceRequest::unregisterServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.unregisterServiceRequest)
}
unregisterServiceRequest::unregisterServiceRequest(const unregisterServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  unregisterServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.servicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.unregisterServiceRequest)
}

inline void unregisterServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.servicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

unregisterServiceRequest::~unregisterServiceRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.unregisterServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void unregisterServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceurl_.Destroy();
}

void unregisterServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void unregisterServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.unregisterServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceurl_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servicetype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unregisterServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serviceURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManagerPipeline.unregisterServiceRequest.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* unregisterServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.unregisterServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_servicetype(), target);
  }

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManagerPipeline.unregisterServiceRequest.serviceURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serviceurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.unregisterServiceRequest)
  return target;
}

size_t unregisterServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.unregisterServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_servicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData unregisterServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    unregisterServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*unregisterServiceRequest::GetClassData() const { return &_class_data_; }


void unregisterServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<unregisterServiceRequest*>(&to_msg);
  auto& from = static_cast<const unregisterServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.unregisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void unregisterServiceRequest::CopyFrom(const unregisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.unregisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unregisterServiceRequest::IsInitialized() const {
  return true;
}

void unregisterServiceRequest::InternalSwap(unregisterServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(unregisterServiceRequest, _impl_.servicetype_)
      + sizeof(unregisterServiceRequest::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(unregisterServiceRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata unregisterServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[8]);
}

// ===================================================================

class unregisterServiceResponse::_Internal {
 public:
};

unregisterServiceResponse::unregisterServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.unregisterServiceResponse)
}
unregisterServiceResponse::unregisterServiceResponse(const unregisterServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  unregisterServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.unregisterServiceResponse)
}

inline void unregisterServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

unregisterServiceResponse::~unregisterServiceResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.unregisterServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void unregisterServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void unregisterServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void unregisterServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.unregisterServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unregisterServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* unregisterServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.unregisterServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.unregisterServiceResponse)
  return target;
}

size_t unregisterServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.unregisterServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData unregisterServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    unregisterServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*unregisterServiceResponse::GetClassData() const { return &_class_data_; }


void unregisterServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<unregisterServiceResponse*>(&to_msg);
  auto& from = static_cast<const unregisterServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.unregisterServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void unregisterServiceResponse::CopyFrom(const unregisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.unregisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unregisterServiceResponse::IsInitialized() const {
  return true;
}

void unregisterServiceResponse::InternalSwap(unregisterServiceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata unregisterServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[9]);
}

// ===================================================================

class getServiceRequest::_Internal {
 public:
};

getServiceRequest::getServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.getServiceRequest)
}
getServiceRequest::getServiceRequest(const getServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.servicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.getServiceRequest)
}

inline void getServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.servicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getServiceRequest::~getServiceRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.getServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceurl_.Destroy();
}

void getServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.getServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceurl_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servicetype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serviceURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManagerPipeline.getServiceRequest.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.getServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_servicetype(), target);
  }

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManagerPipeline.getServiceRequest.serviceURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serviceurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.getServiceRequest)
  return target;
}

size_t getServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.getServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_servicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getServiceRequest::GetClassData() const { return &_class_data_; }


void getServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getServiceRequest*>(&to_msg);
  auto& from = static_cast<const getServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.getServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getServiceRequest::CopyFrom(const getServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.getServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getServiceRequest::IsInitialized() const {
  return true;
}

void getServiceRequest::InternalSwap(getServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getServiceRequest, _impl_.servicetype_)
      + sizeof(getServiceRequest::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(getServiceRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[10]);
}

// ===================================================================

class getServiceResponse::_Internal {
 public:
};

getServiceResponse::getServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.getServiceResponse)
}
getServiceResponse::getServiceResponse(const getServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.getServiceResponse)
}

inline void getServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getServiceResponse::~getServiceResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.getServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceurl_.Destroy();
}

void getServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.getServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceurl_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serviceURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManagerPipeline.getServiceResponse.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.getServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceURL = 1;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManagerPipeline.getServiceResponse.serviceURL");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serviceurl(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.getServiceResponse)
  return target;
}

size_t getServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.getServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceURL = 1;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getServiceResponse::GetClassData() const { return &_class_data_; }


void getServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getServiceResponse*>(&to_msg);
  auto& from = static_cast<const getServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.getServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getServiceResponse::CopyFrom(const getServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.getServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getServiceResponse::IsInitialized() const {
  return true;
}

void getServiceResponse::InternalSwap(getServiceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[11]);
}

// ===================================================================

class getAndLockServiceRequest::_Internal {
 public:
};

getAndLockServiceRequest::getAndLockServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.getAndLockServiceRequest)
}
getAndLockServiceRequest::getAndLockServiceRequest(const getAndLockServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAndLockServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuid_){}
    , decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.servicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.getAndLockServiceRequest)
}

inline void getAndLockServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuid_){}
    , decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.servicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAndLockServiceRequest::~getAndLockServiceRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.getAndLockServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAndLockServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientuuid_.Destroy();
  _impl_.serviceurl_.Destroy();
}

void getAndLockServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAndLockServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.getAndLockServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientuuid_.ClearToEmpty();
  _impl_.serviceurl_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servicetype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAndLockServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManagerPipeline.getAndLockServiceRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // string serviceURL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManagerPipeline.getAndLockServiceRequest.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAndLockServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.getAndLockServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_servicetype(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManagerPipeline.getAndLockServiceRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // string serviceURL = 4;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManagerPipeline.getAndLockServiceRequest.serviceURL");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serviceurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.getAndLockServiceRequest)
  return target;
}

size_t getAndLockServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.getAndLockServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // string serviceURL = 4;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_servicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAndLockServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAndLockServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAndLockServiceRequest::GetClassData() const { return &_class_data_; }


void getAndLockServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAndLockServiceRequest*>(&to_msg);
  auto& from = static_cast<const getAndLockServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.getAndLockServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAndLockServiceRequest::CopyFrom(const getAndLockServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.getAndLockServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAndLockServiceRequest::IsInitialized() const {
  return true;
}

void getAndLockServiceRequest::InternalSwap(getAndLockServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getAndLockServiceRequest, _impl_.servicetype_)
      + sizeof(getAndLockServiceRequest::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(getAndLockServiceRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getAndLockServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[12]);
}

// ===================================================================

class getAndLockServiceResponse::_Internal {
 public:
};

getAndLockServiceResponse::getAndLockServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.getAndLockServiceResponse)
}
getAndLockServiceResponse::getAndLockServiceResponse(const getAndLockServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAndLockServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.getAndLockServiceResponse)
}

inline void getAndLockServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAndLockServiceResponse::~getAndLockServiceResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.getAndLockServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAndLockServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceurl_.Destroy();
}

void getAndLockServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAndLockServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.getAndLockServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceurl_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAndLockServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serviceURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManagerPipeline.getAndLockServiceResponse.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAndLockServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.getAndLockServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceURL = 1;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManagerPipeline.getAndLockServiceResponse.serviceURL");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serviceurl(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.getAndLockServiceResponse)
  return target;
}

size_t getAndLockServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.getAndLockServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceURL = 1;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAndLockServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAndLockServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAndLockServiceResponse::GetClassData() const { return &_class_data_; }


void getAndLockServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAndLockServiceResponse*>(&to_msg);
  auto& from = static_cast<const getAndLockServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.getAndLockServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAndLockServiceResponse::CopyFrom(const getAndLockServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.getAndLockServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAndLockServiceResponse::IsInitialized() const {
  return true;
}

void getAndLockServiceResponse::InternalSwap(getAndLockServiceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAndLockServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[13]);
}

// ===================================================================

class unlockServiceRequest::_Internal {
 public:
};

unlockServiceRequest::unlockServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.unlockServiceRequest)
}
unlockServiceRequest::unlockServiceRequest(const unlockServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  unlockServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.servicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.unlockServiceRequest)
}

inline void unlockServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.servicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

unlockServiceRequest::~unlockServiceRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.unlockServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void unlockServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientuuid_.Destroy();
}

void unlockServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void unlockServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.unlockServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientuuid_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servicetype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unlockServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManagerPipeline.unlockServiceRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* unlockServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.unlockServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_servicetype(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManagerPipeline.unlockServiceRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.unlockServiceRequest)
  return target;
}

size_t unlockServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.unlockServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_servicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData unlockServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    unlockServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*unlockServiceRequest::GetClassData() const { return &_class_data_; }


void unlockServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<unlockServiceRequest*>(&to_msg);
  auto& from = static_cast<const unlockServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.unlockServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void unlockServiceRequest::CopyFrom(const unlockServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.unlockServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unlockServiceRequest::IsInitialized() const {
  return true;
}

void unlockServiceRequest::InternalSwap(unlockServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(unlockServiceRequest, _impl_.servicetype_)
      + sizeof(unlockServiceRequest::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(unlockServiceRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata unlockServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[14]);
}

// ===================================================================

class unlockServiceResponse::_Internal {
 public:
};

unlockServiceResponse::unlockServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManagerPipeline.unlockServiceResponse)
}
unlockServiceResponse::unlockServiceResponse(const unlockServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  unlockServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManagerPipeline.unlockServiceResponse)
}

inline void unlockServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

unlockServiceResponse::~unlockServiceResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManagerPipeline.unlockServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void unlockServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void unlockServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void unlockServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManagerPipeline.unlockServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unlockServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* unlockServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManagerPipeline.unlockServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManagerPipeline.unlockServiceResponse)
  return target;
}

size_t unlockServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManagerPipeline.unlockServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData unlockServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    unlockServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*unlockServiceResponse::GetClassData() const { return &_class_data_; }


void unlockServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<unlockServiceResponse*>(&to_msg);
  auto& from = static_cast<const unlockServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManagerPipeline.unlockServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void unlockServiceResponse::CopyFrom(const unlockServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManagerPipeline.unlockServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unlockServiceResponse::IsInitialized() const {
  return true;
}

void unlockServiceResponse::InternalSwap(unlockServiceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata unlockServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerPipelineService_2eproto_getter, &descriptor_table_grpcIServiceManagerPipelineService_2eproto_once,
      file_level_metadata_grpcIServiceManagerPipelineService_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIServiceManagerPipeline
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::initRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::initRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::initRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::initResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::initResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::initResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::startRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::startRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::startRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::startResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::startResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::startResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::stopRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::stopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::stopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::stopResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::stopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::stopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::registerServiceRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::registerServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::registerServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::registerServiceResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::registerServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::registerServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::unregisterServiceRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::unregisterServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::unregisterServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::unregisterServiceResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::unregisterServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::unregisterServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::getServiceRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::getServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::getServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::getServiceResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::getServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::getServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::getAndLockServiceRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::getAndLockServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::getAndLockServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::getAndLockServiceResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::getAndLockServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::getAndLockServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::unlockServiceRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::unlockServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::unlockServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManagerPipeline::unlockServiceResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManagerPipeline::unlockServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManagerPipeline::unlockServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
