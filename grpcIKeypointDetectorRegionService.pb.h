// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIKeypointDetectorRegionService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIKeypointDetectorRegionService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIKeypointDetectorRegionService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIKeypointDetectorRegionService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIKeypointDetectorRegionService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIKeypointDetectorRegionService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIKeypointDetectorRegionService_2eproto_metadata_getter(int index);
namespace grpcIKeypointDetectorRegion {
class detectRequest;
struct detectRequestDefaultTypeInternal;
extern detectRequestDefaultTypeInternal _detectRequest_default_instance_;
class detectResponse;
struct detectResponseDefaultTypeInternal;
extern detectResponseDefaultTypeInternal _detectResponse_default_instance_;
class getTypeResponse;
struct getTypeResponseDefaultTypeInternal;
extern getTypeResponseDefaultTypeInternal _getTypeResponse_default_instance_;
class setTypeRequest;
struct setTypeRequestDefaultTypeInternal;
extern setTypeRequestDefaultTypeInternal _setTypeRequest_default_instance_;
}  // namespace grpcIKeypointDetectorRegion
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIKeypointDetectorRegion::detectRequest* Arena::CreateMaybeMessage<::grpcIKeypointDetectorRegion::detectRequest>(Arena*);
template<> ::grpcIKeypointDetectorRegion::detectResponse* Arena::CreateMaybeMessage<::grpcIKeypointDetectorRegion::detectResponse>(Arena*);
template<> ::grpcIKeypointDetectorRegion::getTypeResponse* Arena::CreateMaybeMessage<::grpcIKeypointDetectorRegion::getTypeResponse>(Arena*);
template<> ::grpcIKeypointDetectorRegion::setTypeRequest* Arena::CreateMaybeMessage<::grpcIKeypointDetectorRegion::setTypeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIKeypointDetectorRegion {

// ===================================================================

class setTypeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeypointDetectorRegion.setTypeRequest) */ {
 public:
  inline setTypeRequest() : setTypeRequest(nullptr) {}
  virtual ~setTypeRequest();
  explicit constexpr setTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setTypeRequest(const setTypeRequest& from);
  setTypeRequest(setTypeRequest&& from) noexcept
    : setTypeRequest() {
    *this = ::std::move(from);
  }

  inline setTypeRequest& operator=(const setTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setTypeRequest& operator=(setTypeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setTypeRequest* internal_default_instance() {
    return reinterpret_cast<const setTypeRequest*>(
               &_setTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setTypeRequest& a, setTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setTypeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setTypeRequest* New() const final {
    return CreateMaybeMessage<setTypeRequest>(nullptr);
  }

  setTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setTypeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setTypeRequest& from);
  void MergeFrom(const setTypeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setTypeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeypointDetectorRegion.setTypeRequest";
  }
  protected:
  explicit setTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeypointDetectorRegionService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // sint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeypointDetectorRegion.setTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeypointDetectorRegionService_2eproto;
};
// -------------------------------------------------------------------

class getTypeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeypointDetectorRegion.getTypeResponse) */ {
 public:
  inline getTypeResponse() : getTypeResponse(nullptr) {}
  virtual ~getTypeResponse();
  explicit constexpr getTypeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getTypeResponse(const getTypeResponse& from);
  getTypeResponse(getTypeResponse&& from) noexcept
    : getTypeResponse() {
    *this = ::std::move(from);
  }

  inline getTypeResponse& operator=(const getTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getTypeResponse& operator=(getTypeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getTypeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getTypeResponse* internal_default_instance() {
    return reinterpret_cast<const getTypeResponse*>(
               &_getTypeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(getTypeResponse& a, getTypeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getTypeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getTypeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getTypeResponse* New() const final {
    return CreateMaybeMessage<getTypeResponse>(nullptr);
  }

  getTypeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getTypeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getTypeResponse& from);
  void MergeFrom(const getTypeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getTypeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeypointDetectorRegion.getTypeResponse";
  }
  protected:
  explicit getTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeypointDetectorRegionService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeypointDetectorRegion.getTypeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeypointDetectorRegionService_2eproto;
};
// -------------------------------------------------------------------

class detectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeypointDetectorRegion.detectRequest) */ {
 public:
  inline detectRequest() : detectRequest(nullptr) {}
  virtual ~detectRequest();
  explicit constexpr detectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  detectRequest(const detectRequest& from);
  detectRequest(detectRequest&& from) noexcept
    : detectRequest() {
    *this = ::std::move(from);
  }

  inline detectRequest& operator=(const detectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline detectRequest& operator=(detectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const detectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const detectRequest* internal_default_instance() {
    return reinterpret_cast<const detectRequest*>(
               &_detectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(detectRequest& a, detectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(detectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(detectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline detectRequest* New() const final {
    return CreateMaybeMessage<detectRequest>(nullptr);
  }

  detectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<detectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const detectRequest& from);
  void MergeFrom(const detectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(detectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeypointDetectorRegion.detectRequest";
  }
  protected:
  explicit detectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeypointDetectorRegionService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kContoursFieldNumber = 2,
    kKeypointsFieldNumber = 3,
  };
  // bytes image = 1;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes contours = 2;
  void clear_contours();
  const std::string& contours() const;
  void set_contours(const std::string& value);
  void set_contours(std::string&& value);
  void set_contours(const char* value);
  void set_contours(const void* value, size_t size);
  std::string* mutable_contours();
  std::string* release_contours();
  void set_allocated_contours(std::string* contours);
  private:
  const std::string& _internal_contours() const;
  void _internal_set_contours(const std::string& value);
  std::string* _internal_mutable_contours();
  public:

  // bytes keypoints = 3;
  void clear_keypoints();
  const std::string& keypoints() const;
  void set_keypoints(const std::string& value);
  void set_keypoints(std::string&& value);
  void set_keypoints(const char* value);
  void set_keypoints(const void* value, size_t size);
  std::string* mutable_keypoints();
  std::string* release_keypoints();
  void set_allocated_keypoints(std::string* keypoints);
  private:
  const std::string& _internal_keypoints() const;
  void _internal_set_keypoints(const std::string& value);
  std::string* _internal_mutable_keypoints();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeypointDetectorRegion.detectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeypointDetectorRegionService_2eproto;
};
// -------------------------------------------------------------------

class detectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeypointDetectorRegion.detectResponse) */ {
 public:
  inline detectResponse() : detectResponse(nullptr) {}
  virtual ~detectResponse();
  explicit constexpr detectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  detectResponse(const detectResponse& from);
  detectResponse(detectResponse&& from) noexcept
    : detectResponse() {
    *this = ::std::move(from);
  }

  inline detectResponse& operator=(const detectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline detectResponse& operator=(detectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const detectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const detectResponse* internal_default_instance() {
    return reinterpret_cast<const detectResponse*>(
               &_detectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(detectResponse& a, detectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(detectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(detectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline detectResponse* New() const final {
    return CreateMaybeMessage<detectResponse>(nullptr);
  }

  detectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<detectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const detectResponse& from);
  void MergeFrom(const detectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(detectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeypointDetectorRegion.detectResponse";
  }
  protected:
  explicit detectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeypointDetectorRegionService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointsFieldNumber = 1,
  };
  // bytes keypoints = 1;
  void clear_keypoints();
  const std::string& keypoints() const;
  void set_keypoints(const std::string& value);
  void set_keypoints(std::string&& value);
  void set_keypoints(const char* value);
  void set_keypoints(const void* value, size_t size);
  std::string* mutable_keypoints();
  std::string* release_keypoints();
  void set_allocated_keypoints(std::string* keypoints);
  private:
  const std::string& _internal_keypoints() const;
  void _internal_set_keypoints(const std::string& value);
  std::string* _internal_mutable_keypoints();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeypointDetectorRegion.detectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeypointDetectorRegionService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setTypeRequest

// sint32 type = 1;
inline void setTypeRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setTypeRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setTypeRequest::type() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointDetectorRegion.setTypeRequest.type)
  return _internal_type();
}
inline void setTypeRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void setTypeRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointDetectorRegion.setTypeRequest.type)
}

// -------------------------------------------------------------------

// getTypeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void getTypeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getTypeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getTypeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointDetectorRegion.getTypeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getTypeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getTypeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointDetectorRegion.getTypeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// detectRequest

// bytes image = 1;
inline void detectRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& detectRequest::image() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointDetectorRegion.detectRequest.image)
  return _internal_image();
}
inline void detectRequest::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointDetectorRegion.detectRequest.image)
}
inline std::string* detectRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointDetectorRegion.detectRequest.image)
  return _internal_mutable_image();
}
inline const std::string& detectRequest::_internal_image() const {
  return image_.Get();
}
inline void detectRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectRequest::set_image(std::string&& value) {
  
  image_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointDetectorRegion.detectRequest.image)
}
inline void detectRequest::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointDetectorRegion.detectRequest.image)
}
inline void detectRequest::set_image(const void* value,
    size_t size) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointDetectorRegion.detectRequest.image)
}
inline std::string* detectRequest::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectRequest::release_image() {
  // @@protoc_insertion_point(field_release:grpcIKeypointDetectorRegion.detectRequest.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointDetectorRegion.detectRequest.image)
}

// bytes contours = 2;
inline void detectRequest::clear_contours() {
  contours_.ClearToEmpty();
}
inline const std::string& detectRequest::contours() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointDetectorRegion.detectRequest.contours)
  return _internal_contours();
}
inline void detectRequest::set_contours(const std::string& value) {
  _internal_set_contours(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointDetectorRegion.detectRequest.contours)
}
inline std::string* detectRequest::mutable_contours() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointDetectorRegion.detectRequest.contours)
  return _internal_mutable_contours();
}
inline const std::string& detectRequest::_internal_contours() const {
  return contours_.Get();
}
inline void detectRequest::_internal_set_contours(const std::string& value) {
  
  contours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectRequest::set_contours(std::string&& value) {
  
  contours_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointDetectorRegion.detectRequest.contours)
}
inline void detectRequest::set_contours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointDetectorRegion.detectRequest.contours)
}
inline void detectRequest::set_contours(const void* value,
    size_t size) {
  
  contours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointDetectorRegion.detectRequest.contours)
}
inline std::string* detectRequest::_internal_mutable_contours() {
  
  return contours_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectRequest::release_contours() {
  // @@protoc_insertion_point(field_release:grpcIKeypointDetectorRegion.detectRequest.contours)
  return contours_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectRequest::set_allocated_contours(std::string* contours) {
  if (contours != nullptr) {
    
  } else {
    
  }
  contours_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contours,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointDetectorRegion.detectRequest.contours)
}

// bytes keypoints = 3;
inline void detectRequest::clear_keypoints() {
  keypoints_.ClearToEmpty();
}
inline const std::string& detectRequest::keypoints() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointDetectorRegion.detectRequest.keypoints)
  return _internal_keypoints();
}
inline void detectRequest::set_keypoints(const std::string& value) {
  _internal_set_keypoints(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointDetectorRegion.detectRequest.keypoints)
}
inline std::string* detectRequest::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointDetectorRegion.detectRequest.keypoints)
  return _internal_mutable_keypoints();
}
inline const std::string& detectRequest::_internal_keypoints() const {
  return keypoints_.Get();
}
inline void detectRequest::_internal_set_keypoints(const std::string& value) {
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectRequest::set_keypoints(std::string&& value) {
  
  keypoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointDetectorRegion.detectRequest.keypoints)
}
inline void detectRequest::set_keypoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointDetectorRegion.detectRequest.keypoints)
}
inline void detectRequest::set_keypoints(const void* value,
    size_t size) {
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointDetectorRegion.detectRequest.keypoints)
}
inline std::string* detectRequest::_internal_mutable_keypoints() {
  
  return keypoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectRequest::release_keypoints() {
  // @@protoc_insertion_point(field_release:grpcIKeypointDetectorRegion.detectRequest.keypoints)
  return keypoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectRequest::set_allocated_keypoints(std::string* keypoints) {
  if (keypoints != nullptr) {
    
  } else {
    
  }
  keypoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keypoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointDetectorRegion.detectRequest.keypoints)
}

// -------------------------------------------------------------------

// detectResponse

// bytes keypoints = 1;
inline void detectResponse::clear_keypoints() {
  keypoints_.ClearToEmpty();
}
inline const std::string& detectResponse::keypoints() const {
  // @@protoc_insertion_point(field_get:grpcIKeypointDetectorRegion.detectResponse.keypoints)
  return _internal_keypoints();
}
inline void detectResponse::set_keypoints(const std::string& value) {
  _internal_set_keypoints(value);
  // @@protoc_insertion_point(field_set:grpcIKeypointDetectorRegion.detectResponse.keypoints)
}
inline std::string* detectResponse::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable:grpcIKeypointDetectorRegion.detectResponse.keypoints)
  return _internal_mutable_keypoints();
}
inline const std::string& detectResponse::_internal_keypoints() const {
  return keypoints_.Get();
}
inline void detectResponse::_internal_set_keypoints(const std::string& value) {
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectResponse::set_keypoints(std::string&& value) {
  
  keypoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeypointDetectorRegion.detectResponse.keypoints)
}
inline void detectResponse::set_keypoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeypointDetectorRegion.detectResponse.keypoints)
}
inline void detectResponse::set_keypoints(const void* value,
    size_t size) {
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeypointDetectorRegion.detectResponse.keypoints)
}
inline std::string* detectResponse::_internal_mutable_keypoints() {
  
  return keypoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectResponse::release_keypoints() {
  // @@protoc_insertion_point(field_release:grpcIKeypointDetectorRegion.detectResponse.keypoints)
  return keypoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectResponse::set_allocated_keypoints(std::string* keypoints) {
  if (keypoints != nullptr) {
    
  } else {
    
  }
  keypoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keypoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeypointDetectorRegion.detectResponse.keypoints)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIKeypointDetectorRegion

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIKeypointDetectorRegionService_2eproto
