// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIIMUService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIIMUService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIIMUService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIIMUService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIIMUService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIIMUService_2eproto;
namespace grpcIIMU {
class getAccelerometerDataRequest;
struct getAccelerometerDataRequestDefaultTypeInternal;
extern getAccelerometerDataRequestDefaultTypeInternal _getAccelerometerDataRequest_default_instance_;
class getAccelerometerDataResponse;
struct getAccelerometerDataResponseDefaultTypeInternal;
extern getAccelerometerDataResponseDefaultTypeInternal _getAccelerometerDataResponse_default_instance_;
class getAllSensorsDataRequest;
struct getAllSensorsDataRequestDefaultTypeInternal;
extern getAllSensorsDataRequestDefaultTypeInternal _getAllSensorsDataRequest_default_instance_;
class getAllSensorsDataResponse;
struct getAllSensorsDataResponseDefaultTypeInternal;
extern getAllSensorsDataResponseDefaultTypeInternal _getAllSensorsDataResponse_default_instance_;
class getGyroscopeDataRequest;
struct getGyroscopeDataRequestDefaultTypeInternal;
extern getGyroscopeDataRequestDefaultTypeInternal _getGyroscopeDataRequest_default_instance_;
class getGyroscopeDataResponse;
struct getGyroscopeDataResponseDefaultTypeInternal;
extern getGyroscopeDataResponseDefaultTypeInternal _getGyroscopeDataResponse_default_instance_;
class getMagnetometerDataRequest;
struct getMagnetometerDataRequestDefaultTypeInternal;
extern getMagnetometerDataRequestDefaultTypeInternal _getMagnetometerDataRequest_default_instance_;
class getMagnetometerDataResponse;
struct getMagnetometerDataResponseDefaultTypeInternal;
extern getMagnetometerDataResponseDefaultTypeInternal _getMagnetometerDataResponse_default_instance_;
class isAccelerometerAvailableResponse;
struct isAccelerometerAvailableResponseDefaultTypeInternal;
extern isAccelerometerAvailableResponseDefaultTypeInternal _isAccelerometerAvailableResponse_default_instance_;
class isGyroscopeAvailableResponse;
struct isGyroscopeAvailableResponseDefaultTypeInternal;
extern isGyroscopeAvailableResponseDefaultTypeInternal _isGyroscopeAvailableResponse_default_instance_;
class isMagnetometerAvailableResponse;
struct isMagnetometerAvailableResponseDefaultTypeInternal;
extern isMagnetometerAvailableResponseDefaultTypeInternal _isMagnetometerAvailableResponse_default_instance_;
class startResponse;
struct startResponseDefaultTypeInternal;
extern startResponseDefaultTypeInternal _startResponse_default_instance_;
class stopResponse;
struct stopResponseDefaultTypeInternal;
extern stopResponseDefaultTypeInternal _stopResponse_default_instance_;
}  // namespace grpcIIMU
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIIMU::getAccelerometerDataRequest* Arena::CreateMaybeMessage<::grpcIIMU::getAccelerometerDataRequest>(Arena*);
template<> ::grpcIIMU::getAccelerometerDataResponse* Arena::CreateMaybeMessage<::grpcIIMU::getAccelerometerDataResponse>(Arena*);
template<> ::grpcIIMU::getAllSensorsDataRequest* Arena::CreateMaybeMessage<::grpcIIMU::getAllSensorsDataRequest>(Arena*);
template<> ::grpcIIMU::getAllSensorsDataResponse* Arena::CreateMaybeMessage<::grpcIIMU::getAllSensorsDataResponse>(Arena*);
template<> ::grpcIIMU::getGyroscopeDataRequest* Arena::CreateMaybeMessage<::grpcIIMU::getGyroscopeDataRequest>(Arena*);
template<> ::grpcIIMU::getGyroscopeDataResponse* Arena::CreateMaybeMessage<::grpcIIMU::getGyroscopeDataResponse>(Arena*);
template<> ::grpcIIMU::getMagnetometerDataRequest* Arena::CreateMaybeMessage<::grpcIIMU::getMagnetometerDataRequest>(Arena*);
template<> ::grpcIIMU::getMagnetometerDataResponse* Arena::CreateMaybeMessage<::grpcIIMU::getMagnetometerDataResponse>(Arena*);
template<> ::grpcIIMU::isAccelerometerAvailableResponse* Arena::CreateMaybeMessage<::grpcIIMU::isAccelerometerAvailableResponse>(Arena*);
template<> ::grpcIIMU::isGyroscopeAvailableResponse* Arena::CreateMaybeMessage<::grpcIIMU::isGyroscopeAvailableResponse>(Arena*);
template<> ::grpcIIMU::isMagnetometerAvailableResponse* Arena::CreateMaybeMessage<::grpcIIMU::isMagnetometerAvailableResponse>(Arena*);
template<> ::grpcIIMU::startResponse* Arena::CreateMaybeMessage<::grpcIIMU::startResponse>(Arena*);
template<> ::grpcIIMU::stopResponse* Arena::CreateMaybeMessage<::grpcIIMU::stopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIIMU {

// ===================================================================

class startResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.startResponse) */ {
 public:
  inline startResponse() : startResponse(nullptr) {}
  ~startResponse() override;
  explicit constexpr startResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startResponse(const startResponse& from);
  startResponse(startResponse&& from) noexcept
    : startResponse() {
    *this = ::std::move(from);
  }

  inline startResponse& operator=(const startResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline startResponse& operator=(startResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const startResponse* internal_default_instance() {
    return reinterpret_cast<const startResponse*>(
               &_startResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(startResponse& a, startResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(startResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline startResponse* New() const final {
    return new startResponse();
  }

  startResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<startResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const startResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.startResponse";
  }
  protected:
  explicit startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.startResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class stopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.stopResponse) */ {
 public:
  inline stopResponse() : stopResponse(nullptr) {}
  ~stopResponse() override;
  explicit constexpr stopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopResponse(const stopResponse& from);
  stopResponse(stopResponse&& from) noexcept
    : stopResponse() {
    *this = ::std::move(from);
  }

  inline stopResponse& operator=(const stopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopResponse& operator=(stopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopResponse* internal_default_instance() {
    return reinterpret_cast<const stopResponse*>(
               &_stopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(stopResponse& a, stopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(stopResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stopResponse* New() const final {
    return new stopResponse();
  }

  stopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const stopResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.stopResponse";
  }
  protected:
  explicit stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.stopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class getGyroscopeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.getGyroscopeDataRequest) */ {
 public:
  inline getGyroscopeDataRequest() : getGyroscopeDataRequest(nullptr) {}
  ~getGyroscopeDataRequest() override;
  explicit constexpr getGyroscopeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getGyroscopeDataRequest(const getGyroscopeDataRequest& from);
  getGyroscopeDataRequest(getGyroscopeDataRequest&& from) noexcept
    : getGyroscopeDataRequest() {
    *this = ::std::move(from);
  }

  inline getGyroscopeDataRequest& operator=(const getGyroscopeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getGyroscopeDataRequest& operator=(getGyroscopeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getGyroscopeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getGyroscopeDataRequest* internal_default_instance() {
    return reinterpret_cast<const getGyroscopeDataRequest*>(
               &_getGyroscopeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(getGyroscopeDataRequest& a, getGyroscopeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getGyroscopeDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getGyroscopeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getGyroscopeDataRequest* New() const final {
    return new getGyroscopeDataRequest();
  }

  getGyroscopeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getGyroscopeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getGyroscopeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getGyroscopeDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getGyroscopeDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.getGyroscopeDataRequest";
  }
  protected:
  explicit getGyroscopeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGyroDataFieldNumber = 1,
  };
  // bytes gyroData = 1;
  void clear_gyrodata();
  const std::string& gyrodata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gyrodata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gyrodata();
  PROTOBUF_MUST_USE_RESULT std::string* release_gyrodata();
  void set_allocated_gyrodata(std::string* gyrodata);
  private:
  const std::string& _internal_gyrodata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gyrodata(const std::string& value);
  std::string* _internal_mutable_gyrodata();
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.getGyroscopeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gyrodata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class getGyroscopeDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.getGyroscopeDataResponse) */ {
 public:
  inline getGyroscopeDataResponse() : getGyroscopeDataResponse(nullptr) {}
  ~getGyroscopeDataResponse() override;
  explicit constexpr getGyroscopeDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getGyroscopeDataResponse(const getGyroscopeDataResponse& from);
  getGyroscopeDataResponse(getGyroscopeDataResponse&& from) noexcept
    : getGyroscopeDataResponse() {
    *this = ::std::move(from);
  }

  inline getGyroscopeDataResponse& operator=(const getGyroscopeDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getGyroscopeDataResponse& operator=(getGyroscopeDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getGyroscopeDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getGyroscopeDataResponse* internal_default_instance() {
    return reinterpret_cast<const getGyroscopeDataResponse*>(
               &_getGyroscopeDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(getGyroscopeDataResponse& a, getGyroscopeDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getGyroscopeDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getGyroscopeDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getGyroscopeDataResponse* New() const final {
    return new getGyroscopeDataResponse();
  }

  getGyroscopeDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getGyroscopeDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getGyroscopeDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getGyroscopeDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getGyroscopeDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.getGyroscopeDataResponse";
  }
  protected:
  explicit getGyroscopeDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGyroDataFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes gyroData = 1;
  void clear_gyrodata();
  const std::string& gyrodata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gyrodata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gyrodata();
  PROTOBUF_MUST_USE_RESULT std::string* release_gyrodata();
  void set_allocated_gyrodata(std::string* gyrodata);
  private:
  const std::string& _internal_gyrodata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gyrodata(const std::string& value);
  std::string* _internal_mutable_gyrodata();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.getGyroscopeDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gyrodata_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class getAccelerometerDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.getAccelerometerDataRequest) */ {
 public:
  inline getAccelerometerDataRequest() : getAccelerometerDataRequest(nullptr) {}
  ~getAccelerometerDataRequest() override;
  explicit constexpr getAccelerometerDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAccelerometerDataRequest(const getAccelerometerDataRequest& from);
  getAccelerometerDataRequest(getAccelerometerDataRequest&& from) noexcept
    : getAccelerometerDataRequest() {
    *this = ::std::move(from);
  }

  inline getAccelerometerDataRequest& operator=(const getAccelerometerDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAccelerometerDataRequest& operator=(getAccelerometerDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAccelerometerDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAccelerometerDataRequest* internal_default_instance() {
    return reinterpret_cast<const getAccelerometerDataRequest*>(
               &_getAccelerometerDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getAccelerometerDataRequest& a, getAccelerometerDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getAccelerometerDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAccelerometerDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getAccelerometerDataRequest* New() const final {
    return new getAccelerometerDataRequest();
  }

  getAccelerometerDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getAccelerometerDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAccelerometerDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getAccelerometerDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAccelerometerDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.getAccelerometerDataRequest";
  }
  protected:
  explicit getAccelerometerDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelDataFieldNumber = 1,
  };
  // bytes accelData = 1;
  void clear_acceldata();
  const std::string& acceldata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acceldata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acceldata();
  PROTOBUF_MUST_USE_RESULT std::string* release_acceldata();
  void set_allocated_acceldata(std::string* acceldata);
  private:
  const std::string& _internal_acceldata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acceldata(const std::string& value);
  std::string* _internal_mutable_acceldata();
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.getAccelerometerDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceldata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class getAccelerometerDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.getAccelerometerDataResponse) */ {
 public:
  inline getAccelerometerDataResponse() : getAccelerometerDataResponse(nullptr) {}
  ~getAccelerometerDataResponse() override;
  explicit constexpr getAccelerometerDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAccelerometerDataResponse(const getAccelerometerDataResponse& from);
  getAccelerometerDataResponse(getAccelerometerDataResponse&& from) noexcept
    : getAccelerometerDataResponse() {
    *this = ::std::move(from);
  }

  inline getAccelerometerDataResponse& operator=(const getAccelerometerDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAccelerometerDataResponse& operator=(getAccelerometerDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAccelerometerDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAccelerometerDataResponse* internal_default_instance() {
    return reinterpret_cast<const getAccelerometerDataResponse*>(
               &_getAccelerometerDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getAccelerometerDataResponse& a, getAccelerometerDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getAccelerometerDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAccelerometerDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getAccelerometerDataResponse* New() const final {
    return new getAccelerometerDataResponse();
  }

  getAccelerometerDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getAccelerometerDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAccelerometerDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getAccelerometerDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAccelerometerDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.getAccelerometerDataResponse";
  }
  protected:
  explicit getAccelerometerDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelDataFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes accelData = 1;
  void clear_acceldata();
  const std::string& acceldata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acceldata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acceldata();
  PROTOBUF_MUST_USE_RESULT std::string* release_acceldata();
  void set_allocated_acceldata(std::string* acceldata);
  private:
  const std::string& _internal_acceldata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acceldata(const std::string& value);
  std::string* _internal_mutable_acceldata();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.getAccelerometerDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceldata_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class getMagnetometerDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.getMagnetometerDataRequest) */ {
 public:
  inline getMagnetometerDataRequest() : getMagnetometerDataRequest(nullptr) {}
  ~getMagnetometerDataRequest() override;
  explicit constexpr getMagnetometerDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMagnetometerDataRequest(const getMagnetometerDataRequest& from);
  getMagnetometerDataRequest(getMagnetometerDataRequest&& from) noexcept
    : getMagnetometerDataRequest() {
    *this = ::std::move(from);
  }

  inline getMagnetometerDataRequest& operator=(const getMagnetometerDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMagnetometerDataRequest& operator=(getMagnetometerDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMagnetometerDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMagnetometerDataRequest* internal_default_instance() {
    return reinterpret_cast<const getMagnetometerDataRequest*>(
               &_getMagnetometerDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(getMagnetometerDataRequest& a, getMagnetometerDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMagnetometerDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMagnetometerDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getMagnetometerDataRequest* New() const final {
    return new getMagnetometerDataRequest();
  }

  getMagnetometerDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getMagnetometerDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMagnetometerDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getMagnetometerDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMagnetometerDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.getMagnetometerDataRequest";
  }
  protected:
  explicit getMagnetometerDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagDataFieldNumber = 1,
  };
  // bytes magData = 1;
  void clear_magdata();
  const std::string& magdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_magdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_magdata();
  PROTOBUF_MUST_USE_RESULT std::string* release_magdata();
  void set_allocated_magdata(std::string* magdata);
  private:
  const std::string& _internal_magdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_magdata(const std::string& value);
  std::string* _internal_mutable_magdata();
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.getMagnetometerDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr magdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class getMagnetometerDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.getMagnetometerDataResponse) */ {
 public:
  inline getMagnetometerDataResponse() : getMagnetometerDataResponse(nullptr) {}
  ~getMagnetometerDataResponse() override;
  explicit constexpr getMagnetometerDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMagnetometerDataResponse(const getMagnetometerDataResponse& from);
  getMagnetometerDataResponse(getMagnetometerDataResponse&& from) noexcept
    : getMagnetometerDataResponse() {
    *this = ::std::move(from);
  }

  inline getMagnetometerDataResponse& operator=(const getMagnetometerDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMagnetometerDataResponse& operator=(getMagnetometerDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMagnetometerDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMagnetometerDataResponse* internal_default_instance() {
    return reinterpret_cast<const getMagnetometerDataResponse*>(
               &_getMagnetometerDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(getMagnetometerDataResponse& a, getMagnetometerDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMagnetometerDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMagnetometerDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getMagnetometerDataResponse* New() const final {
    return new getMagnetometerDataResponse();
  }

  getMagnetometerDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getMagnetometerDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMagnetometerDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getMagnetometerDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMagnetometerDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.getMagnetometerDataResponse";
  }
  protected:
  explicit getMagnetometerDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMagDataFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes magData = 1;
  void clear_magdata();
  const std::string& magdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_magdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_magdata();
  PROTOBUF_MUST_USE_RESULT std::string* release_magdata();
  void set_allocated_magdata(std::string* magdata);
  private:
  const std::string& _internal_magdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_magdata(const std::string& value);
  std::string* _internal_mutable_magdata();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.getMagnetometerDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr magdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class getAllSensorsDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.getAllSensorsDataRequest) */ {
 public:
  inline getAllSensorsDataRequest() : getAllSensorsDataRequest(nullptr) {}
  ~getAllSensorsDataRequest() override;
  explicit constexpr getAllSensorsDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllSensorsDataRequest(const getAllSensorsDataRequest& from);
  getAllSensorsDataRequest(getAllSensorsDataRequest&& from) noexcept
    : getAllSensorsDataRequest() {
    *this = ::std::move(from);
  }

  inline getAllSensorsDataRequest& operator=(const getAllSensorsDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllSensorsDataRequest& operator=(getAllSensorsDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllSensorsDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllSensorsDataRequest* internal_default_instance() {
    return reinterpret_cast<const getAllSensorsDataRequest*>(
               &_getAllSensorsDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(getAllSensorsDataRequest& a, getAllSensorsDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllSensorsDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllSensorsDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getAllSensorsDataRequest* New() const final {
    return new getAllSensorsDataRequest();
  }

  getAllSensorsDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getAllSensorsDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllSensorsDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getAllSensorsDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllSensorsDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.getAllSensorsDataRequest";
  }
  protected:
  explicit getAllSensorsDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGyroDataFieldNumber = 1,
    kAccelDataFieldNumber = 2,
    kMagDataFieldNumber = 3,
  };
  // bytes gyroData = 1;
  void clear_gyrodata();
  const std::string& gyrodata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gyrodata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gyrodata();
  PROTOBUF_MUST_USE_RESULT std::string* release_gyrodata();
  void set_allocated_gyrodata(std::string* gyrodata);
  private:
  const std::string& _internal_gyrodata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gyrodata(const std::string& value);
  std::string* _internal_mutable_gyrodata();
  public:

  // bytes accelData = 2;
  void clear_acceldata();
  const std::string& acceldata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acceldata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acceldata();
  PROTOBUF_MUST_USE_RESULT std::string* release_acceldata();
  void set_allocated_acceldata(std::string* acceldata);
  private:
  const std::string& _internal_acceldata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acceldata(const std::string& value);
  std::string* _internal_mutable_acceldata();
  public:

  // bytes magData = 3;
  void clear_magdata();
  const std::string& magdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_magdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_magdata();
  PROTOBUF_MUST_USE_RESULT std::string* release_magdata();
  void set_allocated_magdata(std::string* magdata);
  private:
  const std::string& _internal_magdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_magdata(const std::string& value);
  std::string* _internal_mutable_magdata();
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.getAllSensorsDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gyrodata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceldata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr magdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class getAllSensorsDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.getAllSensorsDataResponse) */ {
 public:
  inline getAllSensorsDataResponse() : getAllSensorsDataResponse(nullptr) {}
  ~getAllSensorsDataResponse() override;
  explicit constexpr getAllSensorsDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllSensorsDataResponse(const getAllSensorsDataResponse& from);
  getAllSensorsDataResponse(getAllSensorsDataResponse&& from) noexcept
    : getAllSensorsDataResponse() {
    *this = ::std::move(from);
  }

  inline getAllSensorsDataResponse& operator=(const getAllSensorsDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllSensorsDataResponse& operator=(getAllSensorsDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllSensorsDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllSensorsDataResponse* internal_default_instance() {
    return reinterpret_cast<const getAllSensorsDataResponse*>(
               &_getAllSensorsDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(getAllSensorsDataResponse& a, getAllSensorsDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllSensorsDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllSensorsDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getAllSensorsDataResponse* New() const final {
    return new getAllSensorsDataResponse();
  }

  getAllSensorsDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getAllSensorsDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllSensorsDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getAllSensorsDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllSensorsDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.getAllSensorsDataResponse";
  }
  protected:
  explicit getAllSensorsDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGyroDataFieldNumber = 1,
    kAccelDataFieldNumber = 2,
    kMagDataFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes gyroData = 1;
  void clear_gyrodata();
  const std::string& gyrodata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gyrodata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gyrodata();
  PROTOBUF_MUST_USE_RESULT std::string* release_gyrodata();
  void set_allocated_gyrodata(std::string* gyrodata);
  private:
  const std::string& _internal_gyrodata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gyrodata(const std::string& value);
  std::string* _internal_mutable_gyrodata();
  public:

  // bytes accelData = 2;
  void clear_acceldata();
  const std::string& acceldata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acceldata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acceldata();
  PROTOBUF_MUST_USE_RESULT std::string* release_acceldata();
  void set_allocated_acceldata(std::string* acceldata);
  private:
  const std::string& _internal_acceldata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acceldata(const std::string& value);
  std::string* _internal_mutable_acceldata();
  public:

  // bytes magData = 3;
  void clear_magdata();
  const std::string& magdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_magdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_magdata();
  PROTOBUF_MUST_USE_RESULT std::string* release_magdata();
  void set_allocated_magdata(std::string* magdata);
  private:
  const std::string& _internal_magdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_magdata(const std::string& value);
  std::string* _internal_mutable_magdata();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.getAllSensorsDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gyrodata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceldata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr magdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class isGyroscopeAvailableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.isGyroscopeAvailableResponse) */ {
 public:
  inline isGyroscopeAvailableResponse() : isGyroscopeAvailableResponse(nullptr) {}
  ~isGyroscopeAvailableResponse() override;
  explicit constexpr isGyroscopeAvailableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isGyroscopeAvailableResponse(const isGyroscopeAvailableResponse& from);
  isGyroscopeAvailableResponse(isGyroscopeAvailableResponse&& from) noexcept
    : isGyroscopeAvailableResponse() {
    *this = ::std::move(from);
  }

  inline isGyroscopeAvailableResponse& operator=(const isGyroscopeAvailableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline isGyroscopeAvailableResponse& operator=(isGyroscopeAvailableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const isGyroscopeAvailableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const isGyroscopeAvailableResponse* internal_default_instance() {
    return reinterpret_cast<const isGyroscopeAvailableResponse*>(
               &_isGyroscopeAvailableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(isGyroscopeAvailableResponse& a, isGyroscopeAvailableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(isGyroscopeAvailableResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isGyroscopeAvailableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isGyroscopeAvailableResponse* New() const final {
    return new isGyroscopeAvailableResponse();
  }

  isGyroscopeAvailableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isGyroscopeAvailableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const isGyroscopeAvailableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const isGyroscopeAvailableResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isGyroscopeAvailableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.isGyroscopeAvailableResponse";
  }
  protected:
  explicit isGyroscopeAvailableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.isGyroscopeAvailableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class isAccelerometerAvailableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.isAccelerometerAvailableResponse) */ {
 public:
  inline isAccelerometerAvailableResponse() : isAccelerometerAvailableResponse(nullptr) {}
  ~isAccelerometerAvailableResponse() override;
  explicit constexpr isAccelerometerAvailableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isAccelerometerAvailableResponse(const isAccelerometerAvailableResponse& from);
  isAccelerometerAvailableResponse(isAccelerometerAvailableResponse&& from) noexcept
    : isAccelerometerAvailableResponse() {
    *this = ::std::move(from);
  }

  inline isAccelerometerAvailableResponse& operator=(const isAccelerometerAvailableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline isAccelerometerAvailableResponse& operator=(isAccelerometerAvailableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const isAccelerometerAvailableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const isAccelerometerAvailableResponse* internal_default_instance() {
    return reinterpret_cast<const isAccelerometerAvailableResponse*>(
               &_isAccelerometerAvailableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(isAccelerometerAvailableResponse& a, isAccelerometerAvailableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(isAccelerometerAvailableResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isAccelerometerAvailableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isAccelerometerAvailableResponse* New() const final {
    return new isAccelerometerAvailableResponse();
  }

  isAccelerometerAvailableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isAccelerometerAvailableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const isAccelerometerAvailableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const isAccelerometerAvailableResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isAccelerometerAvailableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.isAccelerometerAvailableResponse";
  }
  protected:
  explicit isAccelerometerAvailableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.isAccelerometerAvailableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// -------------------------------------------------------------------

class isMagnetometerAvailableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIIMU.isMagnetometerAvailableResponse) */ {
 public:
  inline isMagnetometerAvailableResponse() : isMagnetometerAvailableResponse(nullptr) {}
  ~isMagnetometerAvailableResponse() override;
  explicit constexpr isMagnetometerAvailableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isMagnetometerAvailableResponse(const isMagnetometerAvailableResponse& from);
  isMagnetometerAvailableResponse(isMagnetometerAvailableResponse&& from) noexcept
    : isMagnetometerAvailableResponse() {
    *this = ::std::move(from);
  }

  inline isMagnetometerAvailableResponse& operator=(const isMagnetometerAvailableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline isMagnetometerAvailableResponse& operator=(isMagnetometerAvailableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const isMagnetometerAvailableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const isMagnetometerAvailableResponse* internal_default_instance() {
    return reinterpret_cast<const isMagnetometerAvailableResponse*>(
               &_isMagnetometerAvailableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(isMagnetometerAvailableResponse& a, isMagnetometerAvailableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(isMagnetometerAvailableResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isMagnetometerAvailableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isMagnetometerAvailableResponse* New() const final {
    return new isMagnetometerAvailableResponse();
  }

  isMagnetometerAvailableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isMagnetometerAvailableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const isMagnetometerAvailableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const isMagnetometerAvailableResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isMagnetometerAvailableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIIMU.isMagnetometerAvailableResponse";
  }
  protected:
  explicit isMagnetometerAvailableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIIMU.isMagnetometerAvailableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIIMUService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// startResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void startResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.startResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void startResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void startResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIIMU.startResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stopResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void stopResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.stopResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stopResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void stopResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIIMU.stopResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getGyroscopeDataRequest

// bytes gyroData = 1;
inline void getGyroscopeDataRequest::clear_gyrodata() {
  gyrodata_.ClearToEmpty();
}
inline const std::string& getGyroscopeDataRequest::gyrodata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getGyroscopeDataRequest.gyroData)
  return _internal_gyrodata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getGyroscopeDataRequest::set_gyrodata(ArgT0&& arg0, ArgT... args) {
 
 gyrodata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getGyroscopeDataRequest.gyroData)
}
inline std::string* getGyroscopeDataRequest::mutable_gyrodata() {
  std::string* _s = _internal_mutable_gyrodata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getGyroscopeDataRequest.gyroData)
  return _s;
}
inline const std::string& getGyroscopeDataRequest::_internal_gyrodata() const {
  return gyrodata_.Get();
}
inline void getGyroscopeDataRequest::_internal_set_gyrodata(const std::string& value) {
  
  gyrodata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getGyroscopeDataRequest::_internal_mutable_gyrodata() {
  
  return gyrodata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getGyroscopeDataRequest::release_gyrodata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getGyroscopeDataRequest.gyroData)
  return gyrodata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getGyroscopeDataRequest::set_allocated_gyrodata(std::string* gyrodata) {
  if (gyrodata != nullptr) {
    
  } else {
    
  }
  gyrodata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gyrodata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getGyroscopeDataRequest.gyroData)
}

// -------------------------------------------------------------------

// getGyroscopeDataResponse

// bytes gyroData = 1;
inline void getGyroscopeDataResponse::clear_gyrodata() {
  gyrodata_.ClearToEmpty();
}
inline const std::string& getGyroscopeDataResponse::gyrodata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getGyroscopeDataResponse.gyroData)
  return _internal_gyrodata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getGyroscopeDataResponse::set_gyrodata(ArgT0&& arg0, ArgT... args) {
 
 gyrodata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getGyroscopeDataResponse.gyroData)
}
inline std::string* getGyroscopeDataResponse::mutable_gyrodata() {
  std::string* _s = _internal_mutable_gyrodata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getGyroscopeDataResponse.gyroData)
  return _s;
}
inline const std::string& getGyroscopeDataResponse::_internal_gyrodata() const {
  return gyrodata_.Get();
}
inline void getGyroscopeDataResponse::_internal_set_gyrodata(const std::string& value) {
  
  gyrodata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getGyroscopeDataResponse::_internal_mutable_gyrodata() {
  
  return gyrodata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getGyroscopeDataResponse::release_gyrodata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getGyroscopeDataResponse.gyroData)
  return gyrodata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getGyroscopeDataResponse::set_allocated_gyrodata(std::string* gyrodata) {
  if (gyrodata != nullptr) {
    
  } else {
    
  }
  gyrodata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gyrodata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getGyroscopeDataResponse.gyroData)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getGyroscopeDataResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getGyroscopeDataResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getGyroscopeDataResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getGyroscopeDataResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getGyroscopeDataResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getGyroscopeDataResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIIMU.getGyroscopeDataResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getAccelerometerDataRequest

// bytes accelData = 1;
inline void getAccelerometerDataRequest::clear_acceldata() {
  acceldata_.ClearToEmpty();
}
inline const std::string& getAccelerometerDataRequest::acceldata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getAccelerometerDataRequest.accelData)
  return _internal_acceldata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAccelerometerDataRequest::set_acceldata(ArgT0&& arg0, ArgT... args) {
 
 acceldata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getAccelerometerDataRequest.accelData)
}
inline std::string* getAccelerometerDataRequest::mutable_acceldata() {
  std::string* _s = _internal_mutable_acceldata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getAccelerometerDataRequest.accelData)
  return _s;
}
inline const std::string& getAccelerometerDataRequest::_internal_acceldata() const {
  return acceldata_.Get();
}
inline void getAccelerometerDataRequest::_internal_set_acceldata(const std::string& value) {
  
  acceldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getAccelerometerDataRequest::_internal_mutable_acceldata() {
  
  return acceldata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getAccelerometerDataRequest::release_acceldata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getAccelerometerDataRequest.accelData)
  return acceldata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getAccelerometerDataRequest::set_allocated_acceldata(std::string* acceldata) {
  if (acceldata != nullptr) {
    
  } else {
    
  }
  acceldata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceldata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getAccelerometerDataRequest.accelData)
}

// -------------------------------------------------------------------

// getAccelerometerDataResponse

// bytes accelData = 1;
inline void getAccelerometerDataResponse::clear_acceldata() {
  acceldata_.ClearToEmpty();
}
inline const std::string& getAccelerometerDataResponse::acceldata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getAccelerometerDataResponse.accelData)
  return _internal_acceldata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAccelerometerDataResponse::set_acceldata(ArgT0&& arg0, ArgT... args) {
 
 acceldata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getAccelerometerDataResponse.accelData)
}
inline std::string* getAccelerometerDataResponse::mutable_acceldata() {
  std::string* _s = _internal_mutable_acceldata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getAccelerometerDataResponse.accelData)
  return _s;
}
inline const std::string& getAccelerometerDataResponse::_internal_acceldata() const {
  return acceldata_.Get();
}
inline void getAccelerometerDataResponse::_internal_set_acceldata(const std::string& value) {
  
  acceldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getAccelerometerDataResponse::_internal_mutable_acceldata() {
  
  return acceldata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getAccelerometerDataResponse::release_acceldata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getAccelerometerDataResponse.accelData)
  return acceldata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getAccelerometerDataResponse::set_allocated_acceldata(std::string* acceldata) {
  if (acceldata != nullptr) {
    
  } else {
    
  }
  acceldata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceldata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getAccelerometerDataResponse.accelData)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getAccelerometerDataResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getAccelerometerDataResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getAccelerometerDataResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getAccelerometerDataResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getAccelerometerDataResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getAccelerometerDataResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIIMU.getAccelerometerDataResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMagnetometerDataRequest

// bytes magData = 1;
inline void getMagnetometerDataRequest::clear_magdata() {
  magdata_.ClearToEmpty();
}
inline const std::string& getMagnetometerDataRequest::magdata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getMagnetometerDataRequest.magData)
  return _internal_magdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMagnetometerDataRequest::set_magdata(ArgT0&& arg0, ArgT... args) {
 
 magdata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getMagnetometerDataRequest.magData)
}
inline std::string* getMagnetometerDataRequest::mutable_magdata() {
  std::string* _s = _internal_mutable_magdata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getMagnetometerDataRequest.magData)
  return _s;
}
inline const std::string& getMagnetometerDataRequest::_internal_magdata() const {
  return magdata_.Get();
}
inline void getMagnetometerDataRequest::_internal_set_magdata(const std::string& value) {
  
  magdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getMagnetometerDataRequest::_internal_mutable_magdata() {
  
  return magdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getMagnetometerDataRequest::release_magdata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getMagnetometerDataRequest.magData)
  return magdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getMagnetometerDataRequest::set_allocated_magdata(std::string* magdata) {
  if (magdata != nullptr) {
    
  } else {
    
  }
  magdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), magdata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getMagnetometerDataRequest.magData)
}

// -------------------------------------------------------------------

// getMagnetometerDataResponse

// bytes magData = 1;
inline void getMagnetometerDataResponse::clear_magdata() {
  magdata_.ClearToEmpty();
}
inline const std::string& getMagnetometerDataResponse::magdata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getMagnetometerDataResponse.magData)
  return _internal_magdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMagnetometerDataResponse::set_magdata(ArgT0&& arg0, ArgT... args) {
 
 magdata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getMagnetometerDataResponse.magData)
}
inline std::string* getMagnetometerDataResponse::mutable_magdata() {
  std::string* _s = _internal_mutable_magdata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getMagnetometerDataResponse.magData)
  return _s;
}
inline const std::string& getMagnetometerDataResponse::_internal_magdata() const {
  return magdata_.Get();
}
inline void getMagnetometerDataResponse::_internal_set_magdata(const std::string& value) {
  
  magdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getMagnetometerDataResponse::_internal_mutable_magdata() {
  
  return magdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getMagnetometerDataResponse::release_magdata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getMagnetometerDataResponse.magData)
  return magdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getMagnetometerDataResponse::set_allocated_magdata(std::string* magdata) {
  if (magdata != nullptr) {
    
  } else {
    
  }
  magdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), magdata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getMagnetometerDataResponse.magData)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getMagnetometerDataResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getMagnetometerDataResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getMagnetometerDataResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getMagnetometerDataResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMagnetometerDataResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getMagnetometerDataResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIIMU.getMagnetometerDataResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getAllSensorsDataRequest

// bytes gyroData = 1;
inline void getAllSensorsDataRequest::clear_gyrodata() {
  gyrodata_.ClearToEmpty();
}
inline const std::string& getAllSensorsDataRequest::gyrodata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getAllSensorsDataRequest.gyroData)
  return _internal_gyrodata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllSensorsDataRequest::set_gyrodata(ArgT0&& arg0, ArgT... args) {
 
 gyrodata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getAllSensorsDataRequest.gyroData)
}
inline std::string* getAllSensorsDataRequest::mutable_gyrodata() {
  std::string* _s = _internal_mutable_gyrodata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getAllSensorsDataRequest.gyroData)
  return _s;
}
inline const std::string& getAllSensorsDataRequest::_internal_gyrodata() const {
  return gyrodata_.Get();
}
inline void getAllSensorsDataRequest::_internal_set_gyrodata(const std::string& value) {
  
  gyrodata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataRequest::_internal_mutable_gyrodata() {
  
  return gyrodata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataRequest::release_gyrodata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getAllSensorsDataRequest.gyroData)
  return gyrodata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getAllSensorsDataRequest::set_allocated_gyrodata(std::string* gyrodata) {
  if (gyrodata != nullptr) {
    
  } else {
    
  }
  gyrodata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gyrodata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getAllSensorsDataRequest.gyroData)
}

// bytes accelData = 2;
inline void getAllSensorsDataRequest::clear_acceldata() {
  acceldata_.ClearToEmpty();
}
inline const std::string& getAllSensorsDataRequest::acceldata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getAllSensorsDataRequest.accelData)
  return _internal_acceldata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllSensorsDataRequest::set_acceldata(ArgT0&& arg0, ArgT... args) {
 
 acceldata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getAllSensorsDataRequest.accelData)
}
inline std::string* getAllSensorsDataRequest::mutable_acceldata() {
  std::string* _s = _internal_mutable_acceldata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getAllSensorsDataRequest.accelData)
  return _s;
}
inline const std::string& getAllSensorsDataRequest::_internal_acceldata() const {
  return acceldata_.Get();
}
inline void getAllSensorsDataRequest::_internal_set_acceldata(const std::string& value) {
  
  acceldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataRequest::_internal_mutable_acceldata() {
  
  return acceldata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataRequest::release_acceldata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getAllSensorsDataRequest.accelData)
  return acceldata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getAllSensorsDataRequest::set_allocated_acceldata(std::string* acceldata) {
  if (acceldata != nullptr) {
    
  } else {
    
  }
  acceldata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceldata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getAllSensorsDataRequest.accelData)
}

// bytes magData = 3;
inline void getAllSensorsDataRequest::clear_magdata() {
  magdata_.ClearToEmpty();
}
inline const std::string& getAllSensorsDataRequest::magdata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getAllSensorsDataRequest.magData)
  return _internal_magdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllSensorsDataRequest::set_magdata(ArgT0&& arg0, ArgT... args) {
 
 magdata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getAllSensorsDataRequest.magData)
}
inline std::string* getAllSensorsDataRequest::mutable_magdata() {
  std::string* _s = _internal_mutable_magdata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getAllSensorsDataRequest.magData)
  return _s;
}
inline const std::string& getAllSensorsDataRequest::_internal_magdata() const {
  return magdata_.Get();
}
inline void getAllSensorsDataRequest::_internal_set_magdata(const std::string& value) {
  
  magdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataRequest::_internal_mutable_magdata() {
  
  return magdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataRequest::release_magdata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getAllSensorsDataRequest.magData)
  return magdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getAllSensorsDataRequest::set_allocated_magdata(std::string* magdata) {
  if (magdata != nullptr) {
    
  } else {
    
  }
  magdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), magdata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getAllSensorsDataRequest.magData)
}

// -------------------------------------------------------------------

// getAllSensorsDataResponse

// bytes gyroData = 1;
inline void getAllSensorsDataResponse::clear_gyrodata() {
  gyrodata_.ClearToEmpty();
}
inline const std::string& getAllSensorsDataResponse::gyrodata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getAllSensorsDataResponse.gyroData)
  return _internal_gyrodata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllSensorsDataResponse::set_gyrodata(ArgT0&& arg0, ArgT... args) {
 
 gyrodata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getAllSensorsDataResponse.gyroData)
}
inline std::string* getAllSensorsDataResponse::mutable_gyrodata() {
  std::string* _s = _internal_mutable_gyrodata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getAllSensorsDataResponse.gyroData)
  return _s;
}
inline const std::string& getAllSensorsDataResponse::_internal_gyrodata() const {
  return gyrodata_.Get();
}
inline void getAllSensorsDataResponse::_internal_set_gyrodata(const std::string& value) {
  
  gyrodata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataResponse::_internal_mutable_gyrodata() {
  
  return gyrodata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataResponse::release_gyrodata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getAllSensorsDataResponse.gyroData)
  return gyrodata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getAllSensorsDataResponse::set_allocated_gyrodata(std::string* gyrodata) {
  if (gyrodata != nullptr) {
    
  } else {
    
  }
  gyrodata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gyrodata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getAllSensorsDataResponse.gyroData)
}

// bytes accelData = 2;
inline void getAllSensorsDataResponse::clear_acceldata() {
  acceldata_.ClearToEmpty();
}
inline const std::string& getAllSensorsDataResponse::acceldata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getAllSensorsDataResponse.accelData)
  return _internal_acceldata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllSensorsDataResponse::set_acceldata(ArgT0&& arg0, ArgT... args) {
 
 acceldata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getAllSensorsDataResponse.accelData)
}
inline std::string* getAllSensorsDataResponse::mutable_acceldata() {
  std::string* _s = _internal_mutable_acceldata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getAllSensorsDataResponse.accelData)
  return _s;
}
inline const std::string& getAllSensorsDataResponse::_internal_acceldata() const {
  return acceldata_.Get();
}
inline void getAllSensorsDataResponse::_internal_set_acceldata(const std::string& value) {
  
  acceldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataResponse::_internal_mutable_acceldata() {
  
  return acceldata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataResponse::release_acceldata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getAllSensorsDataResponse.accelData)
  return acceldata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getAllSensorsDataResponse::set_allocated_acceldata(std::string* acceldata) {
  if (acceldata != nullptr) {
    
  } else {
    
  }
  acceldata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceldata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getAllSensorsDataResponse.accelData)
}

// bytes magData = 3;
inline void getAllSensorsDataResponse::clear_magdata() {
  magdata_.ClearToEmpty();
}
inline const std::string& getAllSensorsDataResponse::magdata() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getAllSensorsDataResponse.magData)
  return _internal_magdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllSensorsDataResponse::set_magdata(ArgT0&& arg0, ArgT... args) {
 
 magdata_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIIMU.getAllSensorsDataResponse.magData)
}
inline std::string* getAllSensorsDataResponse::mutable_magdata() {
  std::string* _s = _internal_mutable_magdata();
  // @@protoc_insertion_point(field_mutable:grpcIIMU.getAllSensorsDataResponse.magData)
  return _s;
}
inline const std::string& getAllSensorsDataResponse::_internal_magdata() const {
  return magdata_.Get();
}
inline void getAllSensorsDataResponse::_internal_set_magdata(const std::string& value) {
  
  magdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataResponse::_internal_mutable_magdata() {
  
  return magdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getAllSensorsDataResponse::release_magdata() {
  // @@protoc_insertion_point(field_release:grpcIIMU.getAllSensorsDataResponse.magData)
  return magdata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getAllSensorsDataResponse::set_allocated_magdata(std::string* magdata) {
  if (magdata != nullptr) {
    
  } else {
    
  }
  magdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), magdata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIIMU.getAllSensorsDataResponse.magData)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void getAllSensorsDataResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getAllSensorsDataResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getAllSensorsDataResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.getAllSensorsDataResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getAllSensorsDataResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getAllSensorsDataResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIIMU.getAllSensorsDataResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// isGyroscopeAvailableResponse

// bool xpcfGrpcReturnValue = 1;
inline void isGyroscopeAvailableResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool isGyroscopeAvailableResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool isGyroscopeAvailableResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.isGyroscopeAvailableResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void isGyroscopeAvailableResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void isGyroscopeAvailableResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIIMU.isGyroscopeAvailableResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// isAccelerometerAvailableResponse

// bool xpcfGrpcReturnValue = 1;
inline void isAccelerometerAvailableResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool isAccelerometerAvailableResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool isAccelerometerAvailableResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.isAccelerometerAvailableResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void isAccelerometerAvailableResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void isAccelerometerAvailableResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIIMU.isAccelerometerAvailableResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// isMagnetometerAvailableResponse

// bool xpcfGrpcReturnValue = 1;
inline void isMagnetometerAvailableResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool isMagnetometerAvailableResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool isMagnetometerAvailableResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIIMU.isMagnetometerAvailableResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void isMagnetometerAvailableResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void isMagnetometerAvailableResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIIMU.isMagnetometerAvailableResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIIMU

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIIMUService_2eproto
