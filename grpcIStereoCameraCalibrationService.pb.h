// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIStereoCameraCalibrationService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIStereoCameraCalibrationService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIStereoCameraCalibrationService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIStereoCameraCalibrationService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIStereoCameraCalibrationService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIStereoCameraCalibrationService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIStereoCameraCalibrationService_2eproto_metadata_getter(int index);
namespace grpcIStereoCameraCalibration {
class calibrateRequest;
struct calibrateRequestDefaultTypeInternal;
extern calibrateRequestDefaultTypeInternal _calibrateRequest_default_instance_;
class calibrateResponse;
struct calibrateResponseDefaultTypeInternal;
extern calibrateResponseDefaultTypeInternal _calibrateResponse_default_instance_;
}  // namespace grpcIStereoCameraCalibration
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIStereoCameraCalibration::calibrateRequest* Arena::CreateMaybeMessage<::grpcIStereoCameraCalibration::calibrateRequest>(Arena*);
template<> ::grpcIStereoCameraCalibration::calibrateResponse* Arena::CreateMaybeMessage<::grpcIStereoCameraCalibration::calibrateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIStereoCameraCalibration {

// ===================================================================

class calibrateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIStereoCameraCalibration.calibrateRequest) */ {
 public:
  inline calibrateRequest() : calibrateRequest(nullptr) {}
  virtual ~calibrateRequest();
  explicit constexpr calibrateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  calibrateRequest(const calibrateRequest& from);
  calibrateRequest(calibrateRequest&& from) noexcept
    : calibrateRequest() {
    *this = ::std::move(from);
  }

  inline calibrateRequest& operator=(const calibrateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline calibrateRequest& operator=(calibrateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const calibrateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const calibrateRequest* internal_default_instance() {
    return reinterpret_cast<const calibrateRequest*>(
               &_calibrateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(calibrateRequest& a, calibrateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(calibrateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(calibrateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline calibrateRequest* New() const final {
    return CreateMaybeMessage<calibrateRequest>(nullptr);
  }

  calibrateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<calibrateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const calibrateRequest& from);
  void MergeFrom(const calibrateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(calibrateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIStereoCameraCalibration.calibrateRequest";
  }
  protected:
  explicit calibrateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIStereoCameraCalibrationService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImages1FieldNumber = 2,
    kImages2FieldNumber = 3,
    kCamParams1FieldNumber = 4,
    kCamParams2FieldNumber = 5,
    kTransformationFieldNumber = 6,
    kRectParams1FieldNumber = 7,
    kRectParams2FieldNumber = 8,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes images1 = 2;
  void clear_images1();
  const std::string& images1() const;
  void set_images1(const std::string& value);
  void set_images1(std::string&& value);
  void set_images1(const char* value);
  void set_images1(const void* value, size_t size);
  std::string* mutable_images1();
  std::string* release_images1();
  void set_allocated_images1(std::string* images1);
  private:
  const std::string& _internal_images1() const;
  void _internal_set_images1(const std::string& value);
  std::string* _internal_mutable_images1();
  public:

  // bytes images2 = 3;
  void clear_images2();
  const std::string& images2() const;
  void set_images2(const std::string& value);
  void set_images2(std::string&& value);
  void set_images2(const char* value);
  void set_images2(const void* value, size_t size);
  std::string* mutable_images2();
  std::string* release_images2();
  void set_allocated_images2(std::string* images2);
  private:
  const std::string& _internal_images2() const;
  void _internal_set_images2(const std::string& value);
  std::string* _internal_mutable_images2();
  public:

  // bytes camParams1 = 4;
  void clear_camparams1();
  const std::string& camparams1() const;
  void set_camparams1(const std::string& value);
  void set_camparams1(std::string&& value);
  void set_camparams1(const char* value);
  void set_camparams1(const void* value, size_t size);
  std::string* mutable_camparams1();
  std::string* release_camparams1();
  void set_allocated_camparams1(std::string* camparams1);
  private:
  const std::string& _internal_camparams1() const;
  void _internal_set_camparams1(const std::string& value);
  std::string* _internal_mutable_camparams1();
  public:

  // bytes camParams2 = 5;
  void clear_camparams2();
  const std::string& camparams2() const;
  void set_camparams2(const std::string& value);
  void set_camparams2(std::string&& value);
  void set_camparams2(const char* value);
  void set_camparams2(const void* value, size_t size);
  std::string* mutable_camparams2();
  std::string* release_camparams2();
  void set_allocated_camparams2(std::string* camparams2);
  private:
  const std::string& _internal_camparams2() const;
  void _internal_set_camparams2(const std::string& value);
  std::string* _internal_mutable_camparams2();
  public:

  // bytes transformation = 6;
  void clear_transformation();
  const std::string& transformation() const;
  void set_transformation(const std::string& value);
  void set_transformation(std::string&& value);
  void set_transformation(const char* value);
  void set_transformation(const void* value, size_t size);
  std::string* mutable_transformation();
  std::string* release_transformation();
  void set_allocated_transformation(std::string* transformation);
  private:
  const std::string& _internal_transformation() const;
  void _internal_set_transformation(const std::string& value);
  std::string* _internal_mutable_transformation();
  public:

  // bytes rectParams1 = 7;
  void clear_rectparams1();
  const std::string& rectparams1() const;
  void set_rectparams1(const std::string& value);
  void set_rectparams1(std::string&& value);
  void set_rectparams1(const char* value);
  void set_rectparams1(const void* value, size_t size);
  std::string* mutable_rectparams1();
  std::string* release_rectparams1();
  void set_allocated_rectparams1(std::string* rectparams1);
  private:
  const std::string& _internal_rectparams1() const;
  void _internal_set_rectparams1(const std::string& value);
  std::string* _internal_mutable_rectparams1();
  public:

  // bytes rectParams2 = 8;
  void clear_rectparams2();
  const std::string& rectparams2() const;
  void set_rectparams2(const std::string& value);
  void set_rectparams2(std::string&& value);
  void set_rectparams2(const char* value);
  void set_rectparams2(const void* value, size_t size);
  std::string* mutable_rectparams2();
  std::string* release_rectparams2();
  void set_allocated_rectparams2(std::string* rectparams2);
  private:
  const std::string& _internal_rectparams2() const;
  void _internal_set_rectparams2(const std::string& value);
  std::string* _internal_mutable_rectparams2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIStereoCameraCalibration.calibrateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camparams2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transformation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectparams1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectparams2_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIStereoCameraCalibrationService_2eproto;
};
// -------------------------------------------------------------------

class calibrateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIStereoCameraCalibration.calibrateResponse) */ {
 public:
  inline calibrateResponse() : calibrateResponse(nullptr) {}
  virtual ~calibrateResponse();
  explicit constexpr calibrateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  calibrateResponse(const calibrateResponse& from);
  calibrateResponse(calibrateResponse&& from) noexcept
    : calibrateResponse() {
    *this = ::std::move(from);
  }

  inline calibrateResponse& operator=(const calibrateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline calibrateResponse& operator=(calibrateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const calibrateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const calibrateResponse* internal_default_instance() {
    return reinterpret_cast<const calibrateResponse*>(
               &_calibrateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(calibrateResponse& a, calibrateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(calibrateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(calibrateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline calibrateResponse* New() const final {
    return CreateMaybeMessage<calibrateResponse>(nullptr);
  }

  calibrateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<calibrateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const calibrateResponse& from);
  void MergeFrom(const calibrateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(calibrateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIStereoCameraCalibration.calibrateResponse";
  }
  protected:
  explicit calibrateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIStereoCameraCalibrationService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformationFieldNumber = 1,
    kRectParams1FieldNumber = 2,
    kRectParams2FieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes transformation = 1;
  void clear_transformation();
  const std::string& transformation() const;
  void set_transformation(const std::string& value);
  void set_transformation(std::string&& value);
  void set_transformation(const char* value);
  void set_transformation(const void* value, size_t size);
  std::string* mutable_transformation();
  std::string* release_transformation();
  void set_allocated_transformation(std::string* transformation);
  private:
  const std::string& _internal_transformation() const;
  void _internal_set_transformation(const std::string& value);
  std::string* _internal_mutable_transformation();
  public:

  // bytes rectParams1 = 2;
  void clear_rectparams1();
  const std::string& rectparams1() const;
  void set_rectparams1(const std::string& value);
  void set_rectparams1(std::string&& value);
  void set_rectparams1(const char* value);
  void set_rectparams1(const void* value, size_t size);
  std::string* mutable_rectparams1();
  std::string* release_rectparams1();
  void set_allocated_rectparams1(std::string* rectparams1);
  private:
  const std::string& _internal_rectparams1() const;
  void _internal_set_rectparams1(const std::string& value);
  std::string* _internal_mutable_rectparams1();
  public:

  // bytes rectParams2 = 3;
  void clear_rectparams2();
  const std::string& rectparams2() const;
  void set_rectparams2(const std::string& value);
  void set_rectparams2(std::string&& value);
  void set_rectparams2(const char* value);
  void set_rectparams2(const void* value, size_t size);
  std::string* mutable_rectparams2();
  std::string* release_rectparams2();
  void set_allocated_rectparams2(std::string* rectparams2);
  private:
  const std::string& _internal_rectparams2() const;
  void _internal_set_rectparams2(const std::string& value);
  std::string* _internal_mutable_rectparams2();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIStereoCameraCalibration.calibrateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transformation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectparams1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectparams2_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIStereoCameraCalibrationService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// calibrateRequest

// int32 grpcServerCompressionFormat = 1;
inline void calibrateRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 calibrateRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 calibrateRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void calibrateRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void calibrateRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateRequest.grpcServerCompressionFormat)
}

// bytes images1 = 2;
inline void calibrateRequest::clear_images1() {
  images1_.ClearToEmpty();
}
inline const std::string& calibrateRequest::images1() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateRequest.images1)
  return _internal_images1();
}
inline void calibrateRequest::set_images1(const std::string& value) {
  _internal_set_images1(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateRequest.images1)
}
inline std::string* calibrateRequest::mutable_images1() {
  // @@protoc_insertion_point(field_mutable:grpcIStereoCameraCalibration.calibrateRequest.images1)
  return _internal_mutable_images1();
}
inline const std::string& calibrateRequest::_internal_images1() const {
  return images1_.Get();
}
inline void calibrateRequest::_internal_set_images1(const std::string& value) {
  
  images1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrateRequest::set_images1(std::string&& value) {
  
  images1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIStereoCameraCalibration.calibrateRequest.images1)
}
inline void calibrateRequest::set_images1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  images1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIStereoCameraCalibration.calibrateRequest.images1)
}
inline void calibrateRequest::set_images1(const void* value,
    size_t size) {
  
  images1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIStereoCameraCalibration.calibrateRequest.images1)
}
inline std::string* calibrateRequest::_internal_mutable_images1() {
  
  return images1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrateRequest::release_images1() {
  // @@protoc_insertion_point(field_release:grpcIStereoCameraCalibration.calibrateRequest.images1)
  return images1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrateRequest::set_allocated_images1(std::string* images1) {
  if (images1 != nullptr) {
    
  } else {
    
  }
  images1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), images1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIStereoCameraCalibration.calibrateRequest.images1)
}

// bytes images2 = 3;
inline void calibrateRequest::clear_images2() {
  images2_.ClearToEmpty();
}
inline const std::string& calibrateRequest::images2() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateRequest.images2)
  return _internal_images2();
}
inline void calibrateRequest::set_images2(const std::string& value) {
  _internal_set_images2(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateRequest.images2)
}
inline std::string* calibrateRequest::mutable_images2() {
  // @@protoc_insertion_point(field_mutable:grpcIStereoCameraCalibration.calibrateRequest.images2)
  return _internal_mutable_images2();
}
inline const std::string& calibrateRequest::_internal_images2() const {
  return images2_.Get();
}
inline void calibrateRequest::_internal_set_images2(const std::string& value) {
  
  images2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrateRequest::set_images2(std::string&& value) {
  
  images2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIStereoCameraCalibration.calibrateRequest.images2)
}
inline void calibrateRequest::set_images2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  images2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIStereoCameraCalibration.calibrateRequest.images2)
}
inline void calibrateRequest::set_images2(const void* value,
    size_t size) {
  
  images2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIStereoCameraCalibration.calibrateRequest.images2)
}
inline std::string* calibrateRequest::_internal_mutable_images2() {
  
  return images2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrateRequest::release_images2() {
  // @@protoc_insertion_point(field_release:grpcIStereoCameraCalibration.calibrateRequest.images2)
  return images2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrateRequest::set_allocated_images2(std::string* images2) {
  if (images2 != nullptr) {
    
  } else {
    
  }
  images2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), images2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIStereoCameraCalibration.calibrateRequest.images2)
}

// bytes camParams1 = 4;
inline void calibrateRequest::clear_camparams1() {
  camparams1_.ClearToEmpty();
}
inline const std::string& calibrateRequest::camparams1() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateRequest.camParams1)
  return _internal_camparams1();
}
inline void calibrateRequest::set_camparams1(const std::string& value) {
  _internal_set_camparams1(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateRequest.camParams1)
}
inline std::string* calibrateRequest::mutable_camparams1() {
  // @@protoc_insertion_point(field_mutable:grpcIStereoCameraCalibration.calibrateRequest.camParams1)
  return _internal_mutable_camparams1();
}
inline const std::string& calibrateRequest::_internal_camparams1() const {
  return camparams1_.Get();
}
inline void calibrateRequest::_internal_set_camparams1(const std::string& value) {
  
  camparams1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrateRequest::set_camparams1(std::string&& value) {
  
  camparams1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIStereoCameraCalibration.calibrateRequest.camParams1)
}
inline void calibrateRequest::set_camparams1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camparams1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIStereoCameraCalibration.calibrateRequest.camParams1)
}
inline void calibrateRequest::set_camparams1(const void* value,
    size_t size) {
  
  camparams1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIStereoCameraCalibration.calibrateRequest.camParams1)
}
inline std::string* calibrateRequest::_internal_mutable_camparams1() {
  
  return camparams1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrateRequest::release_camparams1() {
  // @@protoc_insertion_point(field_release:grpcIStereoCameraCalibration.calibrateRequest.camParams1)
  return camparams1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrateRequest::set_allocated_camparams1(std::string* camparams1) {
  if (camparams1 != nullptr) {
    
  } else {
    
  }
  camparams1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camparams1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIStereoCameraCalibration.calibrateRequest.camParams1)
}

// bytes camParams2 = 5;
inline void calibrateRequest::clear_camparams2() {
  camparams2_.ClearToEmpty();
}
inline const std::string& calibrateRequest::camparams2() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateRequest.camParams2)
  return _internal_camparams2();
}
inline void calibrateRequest::set_camparams2(const std::string& value) {
  _internal_set_camparams2(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateRequest.camParams2)
}
inline std::string* calibrateRequest::mutable_camparams2() {
  // @@protoc_insertion_point(field_mutable:grpcIStereoCameraCalibration.calibrateRequest.camParams2)
  return _internal_mutable_camparams2();
}
inline const std::string& calibrateRequest::_internal_camparams2() const {
  return camparams2_.Get();
}
inline void calibrateRequest::_internal_set_camparams2(const std::string& value) {
  
  camparams2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrateRequest::set_camparams2(std::string&& value) {
  
  camparams2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIStereoCameraCalibration.calibrateRequest.camParams2)
}
inline void calibrateRequest::set_camparams2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camparams2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIStereoCameraCalibration.calibrateRequest.camParams2)
}
inline void calibrateRequest::set_camparams2(const void* value,
    size_t size) {
  
  camparams2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIStereoCameraCalibration.calibrateRequest.camParams2)
}
inline std::string* calibrateRequest::_internal_mutable_camparams2() {
  
  return camparams2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrateRequest::release_camparams2() {
  // @@protoc_insertion_point(field_release:grpcIStereoCameraCalibration.calibrateRequest.camParams2)
  return camparams2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrateRequest::set_allocated_camparams2(std::string* camparams2) {
  if (camparams2 != nullptr) {
    
  } else {
    
  }
  camparams2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camparams2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIStereoCameraCalibration.calibrateRequest.camParams2)
}

// bytes transformation = 6;
inline void calibrateRequest::clear_transformation() {
  transformation_.ClearToEmpty();
}
inline const std::string& calibrateRequest::transformation() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateRequest.transformation)
  return _internal_transformation();
}
inline void calibrateRequest::set_transformation(const std::string& value) {
  _internal_set_transformation(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateRequest.transformation)
}
inline std::string* calibrateRequest::mutable_transformation() {
  // @@protoc_insertion_point(field_mutable:grpcIStereoCameraCalibration.calibrateRequest.transformation)
  return _internal_mutable_transformation();
}
inline const std::string& calibrateRequest::_internal_transformation() const {
  return transformation_.Get();
}
inline void calibrateRequest::_internal_set_transformation(const std::string& value) {
  
  transformation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrateRequest::set_transformation(std::string&& value) {
  
  transformation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIStereoCameraCalibration.calibrateRequest.transformation)
}
inline void calibrateRequest::set_transformation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transformation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIStereoCameraCalibration.calibrateRequest.transformation)
}
inline void calibrateRequest::set_transformation(const void* value,
    size_t size) {
  
  transformation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIStereoCameraCalibration.calibrateRequest.transformation)
}
inline std::string* calibrateRequest::_internal_mutable_transformation() {
  
  return transformation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrateRequest::release_transformation() {
  // @@protoc_insertion_point(field_release:grpcIStereoCameraCalibration.calibrateRequest.transformation)
  return transformation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrateRequest::set_allocated_transformation(std::string* transformation) {
  if (transformation != nullptr) {
    
  } else {
    
  }
  transformation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transformation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIStereoCameraCalibration.calibrateRequest.transformation)
}

// bytes rectParams1 = 7;
inline void calibrateRequest::clear_rectparams1() {
  rectparams1_.ClearToEmpty();
}
inline const std::string& calibrateRequest::rectparams1() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateRequest.rectParams1)
  return _internal_rectparams1();
}
inline void calibrateRequest::set_rectparams1(const std::string& value) {
  _internal_set_rectparams1(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateRequest.rectParams1)
}
inline std::string* calibrateRequest::mutable_rectparams1() {
  // @@protoc_insertion_point(field_mutable:grpcIStereoCameraCalibration.calibrateRequest.rectParams1)
  return _internal_mutable_rectparams1();
}
inline const std::string& calibrateRequest::_internal_rectparams1() const {
  return rectparams1_.Get();
}
inline void calibrateRequest::_internal_set_rectparams1(const std::string& value) {
  
  rectparams1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrateRequest::set_rectparams1(std::string&& value) {
  
  rectparams1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIStereoCameraCalibration.calibrateRequest.rectParams1)
}
inline void calibrateRequest::set_rectparams1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rectparams1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIStereoCameraCalibration.calibrateRequest.rectParams1)
}
inline void calibrateRequest::set_rectparams1(const void* value,
    size_t size) {
  
  rectparams1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIStereoCameraCalibration.calibrateRequest.rectParams1)
}
inline std::string* calibrateRequest::_internal_mutable_rectparams1() {
  
  return rectparams1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrateRequest::release_rectparams1() {
  // @@protoc_insertion_point(field_release:grpcIStereoCameraCalibration.calibrateRequest.rectParams1)
  return rectparams1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrateRequest::set_allocated_rectparams1(std::string* rectparams1) {
  if (rectparams1 != nullptr) {
    
  } else {
    
  }
  rectparams1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rectparams1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIStereoCameraCalibration.calibrateRequest.rectParams1)
}

// bytes rectParams2 = 8;
inline void calibrateRequest::clear_rectparams2() {
  rectparams2_.ClearToEmpty();
}
inline const std::string& calibrateRequest::rectparams2() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateRequest.rectParams2)
  return _internal_rectparams2();
}
inline void calibrateRequest::set_rectparams2(const std::string& value) {
  _internal_set_rectparams2(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateRequest.rectParams2)
}
inline std::string* calibrateRequest::mutable_rectparams2() {
  // @@protoc_insertion_point(field_mutable:grpcIStereoCameraCalibration.calibrateRequest.rectParams2)
  return _internal_mutable_rectparams2();
}
inline const std::string& calibrateRequest::_internal_rectparams2() const {
  return rectparams2_.Get();
}
inline void calibrateRequest::_internal_set_rectparams2(const std::string& value) {
  
  rectparams2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrateRequest::set_rectparams2(std::string&& value) {
  
  rectparams2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIStereoCameraCalibration.calibrateRequest.rectParams2)
}
inline void calibrateRequest::set_rectparams2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rectparams2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIStereoCameraCalibration.calibrateRequest.rectParams2)
}
inline void calibrateRequest::set_rectparams2(const void* value,
    size_t size) {
  
  rectparams2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIStereoCameraCalibration.calibrateRequest.rectParams2)
}
inline std::string* calibrateRequest::_internal_mutable_rectparams2() {
  
  return rectparams2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrateRequest::release_rectparams2() {
  // @@protoc_insertion_point(field_release:grpcIStereoCameraCalibration.calibrateRequest.rectParams2)
  return rectparams2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrateRequest::set_allocated_rectparams2(std::string* rectparams2) {
  if (rectparams2 != nullptr) {
    
  } else {
    
  }
  rectparams2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rectparams2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIStereoCameraCalibration.calibrateRequest.rectParams2)
}

// -------------------------------------------------------------------

// calibrateResponse

// bytes transformation = 1;
inline void calibrateResponse::clear_transformation() {
  transformation_.ClearToEmpty();
}
inline const std::string& calibrateResponse::transformation() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateResponse.transformation)
  return _internal_transformation();
}
inline void calibrateResponse::set_transformation(const std::string& value) {
  _internal_set_transformation(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateResponse.transformation)
}
inline std::string* calibrateResponse::mutable_transformation() {
  // @@protoc_insertion_point(field_mutable:grpcIStereoCameraCalibration.calibrateResponse.transformation)
  return _internal_mutable_transformation();
}
inline const std::string& calibrateResponse::_internal_transformation() const {
  return transformation_.Get();
}
inline void calibrateResponse::_internal_set_transformation(const std::string& value) {
  
  transformation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrateResponse::set_transformation(std::string&& value) {
  
  transformation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIStereoCameraCalibration.calibrateResponse.transformation)
}
inline void calibrateResponse::set_transformation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transformation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIStereoCameraCalibration.calibrateResponse.transformation)
}
inline void calibrateResponse::set_transformation(const void* value,
    size_t size) {
  
  transformation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIStereoCameraCalibration.calibrateResponse.transformation)
}
inline std::string* calibrateResponse::_internal_mutable_transformation() {
  
  return transformation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrateResponse::release_transformation() {
  // @@protoc_insertion_point(field_release:grpcIStereoCameraCalibration.calibrateResponse.transformation)
  return transformation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrateResponse::set_allocated_transformation(std::string* transformation) {
  if (transformation != nullptr) {
    
  } else {
    
  }
  transformation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transformation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIStereoCameraCalibration.calibrateResponse.transformation)
}

// bytes rectParams1 = 2;
inline void calibrateResponse::clear_rectparams1() {
  rectparams1_.ClearToEmpty();
}
inline const std::string& calibrateResponse::rectparams1() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateResponse.rectParams1)
  return _internal_rectparams1();
}
inline void calibrateResponse::set_rectparams1(const std::string& value) {
  _internal_set_rectparams1(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateResponse.rectParams1)
}
inline std::string* calibrateResponse::mutable_rectparams1() {
  // @@protoc_insertion_point(field_mutable:grpcIStereoCameraCalibration.calibrateResponse.rectParams1)
  return _internal_mutable_rectparams1();
}
inline const std::string& calibrateResponse::_internal_rectparams1() const {
  return rectparams1_.Get();
}
inline void calibrateResponse::_internal_set_rectparams1(const std::string& value) {
  
  rectparams1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrateResponse::set_rectparams1(std::string&& value) {
  
  rectparams1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIStereoCameraCalibration.calibrateResponse.rectParams1)
}
inline void calibrateResponse::set_rectparams1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rectparams1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIStereoCameraCalibration.calibrateResponse.rectParams1)
}
inline void calibrateResponse::set_rectparams1(const void* value,
    size_t size) {
  
  rectparams1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIStereoCameraCalibration.calibrateResponse.rectParams1)
}
inline std::string* calibrateResponse::_internal_mutable_rectparams1() {
  
  return rectparams1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrateResponse::release_rectparams1() {
  // @@protoc_insertion_point(field_release:grpcIStereoCameraCalibration.calibrateResponse.rectParams1)
  return rectparams1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrateResponse::set_allocated_rectparams1(std::string* rectparams1) {
  if (rectparams1 != nullptr) {
    
  } else {
    
  }
  rectparams1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rectparams1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIStereoCameraCalibration.calibrateResponse.rectParams1)
}

// bytes rectParams2 = 3;
inline void calibrateResponse::clear_rectparams2() {
  rectparams2_.ClearToEmpty();
}
inline const std::string& calibrateResponse::rectparams2() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateResponse.rectParams2)
  return _internal_rectparams2();
}
inline void calibrateResponse::set_rectparams2(const std::string& value) {
  _internal_set_rectparams2(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateResponse.rectParams2)
}
inline std::string* calibrateResponse::mutable_rectparams2() {
  // @@protoc_insertion_point(field_mutable:grpcIStereoCameraCalibration.calibrateResponse.rectParams2)
  return _internal_mutable_rectparams2();
}
inline const std::string& calibrateResponse::_internal_rectparams2() const {
  return rectparams2_.Get();
}
inline void calibrateResponse::_internal_set_rectparams2(const std::string& value) {
  
  rectparams2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrateResponse::set_rectparams2(std::string&& value) {
  
  rectparams2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIStereoCameraCalibration.calibrateResponse.rectParams2)
}
inline void calibrateResponse::set_rectparams2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rectparams2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIStereoCameraCalibration.calibrateResponse.rectParams2)
}
inline void calibrateResponse::set_rectparams2(const void* value,
    size_t size) {
  
  rectparams2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIStereoCameraCalibration.calibrateResponse.rectParams2)
}
inline std::string* calibrateResponse::_internal_mutable_rectparams2() {
  
  return rectparams2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrateResponse::release_rectparams2() {
  // @@protoc_insertion_point(field_release:grpcIStereoCameraCalibration.calibrateResponse.rectParams2)
  return rectparams2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrateResponse::set_allocated_rectparams2(std::string* rectparams2) {
  if (rectparams2 != nullptr) {
    
  } else {
    
  }
  rectparams2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rectparams2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIStereoCameraCalibration.calibrateResponse.rectParams2)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void calibrateResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 calibrateResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 calibrateResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIStereoCameraCalibration.calibrateResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void calibrateResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void calibrateResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIStereoCameraCalibration.calibrateResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIStereoCameraCalibration

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIStereoCameraCalibrationService_2eproto
