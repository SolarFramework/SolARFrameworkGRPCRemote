// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMapUpdateService.proto

#include "grpcIMapUpdateService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpcIMapUpdate {
constexpr setCameraParametersRequest::setCameraParametersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : camparams_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct setCameraParametersRequestDefaultTypeInternal {
  constexpr setCameraParametersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~setCameraParametersRequestDefaultTypeInternal() {}
  union {
    setCameraParametersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT setCameraParametersRequestDefaultTypeInternal _setCameraParametersRequest_default_instance_;
constexpr updateRequest::updateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : globalmap_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , newkeyframeids_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , grpcservercompressionformat_(0){}
struct updateRequestDefaultTypeInternal {
  constexpr updateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~updateRequestDefaultTypeInternal() {}
  union {
    updateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT updateRequestDefaultTypeInternal _updateRequest_default_instance_;
constexpr updateResponse::updateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xpcfgrpcreturnvalue_(0){}
struct updateResponseDefaultTypeInternal {
  constexpr updateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~updateResponseDefaultTypeInternal() {}
  union {
    updateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT updateResponseDefaultTypeInternal _updateResponse_default_instance_;
}  // namespace grpcIMapUpdate
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpcIMapUpdateService_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grpcIMapUpdateService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpcIMapUpdateService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grpcIMapUpdateService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIMapUpdate::setCameraParametersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIMapUpdate::setCameraParametersRequest, camparams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIMapUpdate::updateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIMapUpdate::updateRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIMapUpdate::updateRequest, globalmap_),
  PROTOBUF_FIELD_OFFSET(::grpcIMapUpdate::updateRequest, newkeyframeids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIMapUpdate::updateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIMapUpdate::updateResponse, xpcfgrpcreturnvalue_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpcIMapUpdate::setCameraParametersRequest)},
  { 6, -1, sizeof(::grpcIMapUpdate::updateRequest)},
  { 14, -1, sizeof(::grpcIMapUpdate::updateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIMapUpdate::_setCameraParametersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIMapUpdate::_updateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIMapUpdate::_updateResponse_default_instance_),
};

const char descriptor_table_protodef_grpcIMapUpdateService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033grpcIMapUpdateService.proto\022\016grpcIMapU"
  "pdate\032\033google/protobuf/empty.proto\"/\n\032se"
  "tCameraParametersRequest\022\021\n\tcamParams\030\001 "
  "\001(\014\"_\n\rupdateRequest\022#\n\033grpcServerCompre"
  "ssionFormat\030\001 \001(\005\022\021\n\tglobalMap\030\002 \001(\014\022\026\n\016"
  "newKeyframeIds\030\003 \001(\014\"-\n\016updateResponse\022\033"
  "\n\023xpcfGrpcReturnValue\030\001 \001(\0212\277\001\n\025grpcIMap"
  "UpdateService\022[\n\023setCameraParameters\022*.g"
  "rpcIMapUpdate.setCameraParametersRequest"
  "\032\026.google.protobuf.Empty\"\000\022I\n\006update\022\035.g"
  "rpcIMapUpdate.updateRequest\032\036.grpcIMapUp"
  "date.updateResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grpcIMapUpdateService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpcIMapUpdateService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMapUpdateService_2eproto = {
  false, false, 469, descriptor_table_protodef_grpcIMapUpdateService_2eproto, "grpcIMapUpdateService.proto", 
  &descriptor_table_grpcIMapUpdateService_2eproto_once, descriptor_table_grpcIMapUpdateService_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_grpcIMapUpdateService_2eproto::offsets,
  file_level_metadata_grpcIMapUpdateService_2eproto, file_level_enum_descriptors_grpcIMapUpdateService_2eproto, file_level_service_descriptors_grpcIMapUpdateService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_grpcIMapUpdateService_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grpcIMapUpdateService_2eproto);
  return descriptor_table_grpcIMapUpdateService_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_grpcIMapUpdateService_2eproto(&descriptor_table_grpcIMapUpdateService_2eproto);
namespace grpcIMapUpdate {

// ===================================================================

class setCameraParametersRequest::_Internal {
 public:
};

setCameraParametersRequest::setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIMapUpdate.setCameraParametersRequest)
}
setCameraParametersRequest::setCameraParametersRequest(const setCameraParametersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  camparams_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camparams().empty()) {
    camparams_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_camparams(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:grpcIMapUpdate.setCameraParametersRequest)
}

void setCameraParametersRequest::SharedCtor() {
camparams_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

setCameraParametersRequest::~setCameraParametersRequest() {
  // @@protoc_insertion_point(destructor:grpcIMapUpdate.setCameraParametersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void setCameraParametersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  camparams_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void setCameraParametersRequest::ArenaDtor(void* object) {
  setCameraParametersRequest* _this = reinterpret_cast< setCameraParametersRequest* >(object);
  (void)_this;
}
void setCameraParametersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void setCameraParametersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void setCameraParametersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIMapUpdate.setCameraParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camparams_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setCameraParametersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes camParams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_camparams();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* setCameraParametersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIMapUpdate.setCameraParametersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes camParams = 1;
  if (this->camparams().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_camparams(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIMapUpdate.setCameraParametersRequest)
  return target;
}

size_t setCameraParametersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIMapUpdate.setCameraParametersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes camParams = 1;
  if (this->camparams().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_camparams());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void setCameraParametersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIMapUpdate.setCameraParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const setCameraParametersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<setCameraParametersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIMapUpdate.setCameraParametersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIMapUpdate.setCameraParametersRequest)
    MergeFrom(*source);
  }
}

void setCameraParametersRequest::MergeFrom(const setCameraParametersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIMapUpdate.setCameraParametersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camparams().size() > 0) {
    _internal_set_camparams(from._internal_camparams());
  }
}

void setCameraParametersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIMapUpdate.setCameraParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setCameraParametersRequest::CopyFrom(const setCameraParametersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIMapUpdate.setCameraParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setCameraParametersRequest::IsInitialized() const {
  return true;
}

void setCameraParametersRequest::InternalSwap(setCameraParametersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  camparams_.Swap(&other->camparams_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata setCameraParametersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class updateRequest::_Internal {
 public:
};

updateRequest::updateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIMapUpdate.updateRequest)
}
updateRequest::updateRequest(const updateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  globalmap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_globalmap().empty()) {
    globalmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_globalmap(), 
      GetArena());
  }
  newkeyframeids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newkeyframeids().empty()) {
    newkeyframeids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newkeyframeids(), 
      GetArena());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIMapUpdate.updateRequest)
}

void updateRequest::SharedCtor() {
globalmap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
newkeyframeids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
grpcservercompressionformat_ = 0;
}

updateRequest::~updateRequest() {
  // @@protoc_insertion_point(destructor:grpcIMapUpdate.updateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void updateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  globalmap_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newkeyframeids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void updateRequest::ArenaDtor(void* object) {
  updateRequest* _this = reinterpret_cast< updateRequest* >(object);
  (void)_this;
}
void updateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void updateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void updateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIMapUpdate.updateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  globalmap_.ClearToEmpty();
  newkeyframeids_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* updateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes globalMap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_globalmap();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes newKeyframeIds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_newkeyframeids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* updateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIMapUpdate.updateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes globalMap = 2;
  if (this->globalmap().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_globalmap(), target);
  }

  // bytes newKeyframeIds = 3;
  if (this->newkeyframeids().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_newkeyframeids(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIMapUpdate.updateRequest)
  return target;
}

size_t updateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIMapUpdate.updateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes globalMap = 2;
  if (this->globalmap().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_globalmap());
  }

  // bytes newKeyframeIds = 3;
  if (this->newkeyframeids().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_newkeyframeids());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void updateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIMapUpdate.updateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const updateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<updateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIMapUpdate.updateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIMapUpdate.updateRequest)
    MergeFrom(*source);
  }
}

void updateRequest::MergeFrom(const updateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIMapUpdate.updateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.globalmap().size() > 0) {
    _internal_set_globalmap(from._internal_globalmap());
  }
  if (from.newkeyframeids().size() > 0) {
    _internal_set_newkeyframeids(from._internal_newkeyframeids());
  }
  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void updateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIMapUpdate.updateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void updateRequest::CopyFrom(const updateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIMapUpdate.updateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updateRequest::IsInitialized() const {
  return true;
}

void updateRequest::InternalSwap(updateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  globalmap_.Swap(&other->globalmap_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  newkeyframeids_.Swap(&other->newkeyframeids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata updateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class updateResponse::_Internal {
 public:
};

updateResponse::updateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIMapUpdate.updateResponse)
}
updateResponse::updateResponse(const updateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIMapUpdate.updateResponse)
}

void updateResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = 0;
}

updateResponse::~updateResponse() {
  // @@protoc_insertion_point(destructor:grpcIMapUpdate.updateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void updateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void updateResponse::ArenaDtor(void* object) {
  updateResponse* _this = reinterpret_cast< updateResponse* >(object);
  (void)_this;
}
void updateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void updateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void updateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIMapUpdate.updateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* updateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* updateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIMapUpdate.updateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIMapUpdate.updateResponse)
  return target;
}

size_t updateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIMapUpdate.updateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void updateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIMapUpdate.updateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const updateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<updateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIMapUpdate.updateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIMapUpdate.updateResponse)
    MergeFrom(*source);
  }
}

void updateResponse::MergeFrom(const updateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIMapUpdate.updateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void updateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIMapUpdate.updateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void updateResponse::CopyFrom(const updateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIMapUpdate.updateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool updateResponse::IsInitialized() const {
  return true;
}

void updateResponse::InternalSwap(updateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata updateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIMapUpdate
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIMapUpdate::setCameraParametersRequest* Arena::CreateMaybeMessage< ::grpcIMapUpdate::setCameraParametersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIMapUpdate::setCameraParametersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIMapUpdate::updateRequest* Arena::CreateMaybeMessage< ::grpcIMapUpdate::updateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIMapUpdate::updateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIMapUpdate::updateResponse* Arena::CreateMaybeMessage< ::grpcIMapUpdate::updateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIMapUpdate::updateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
