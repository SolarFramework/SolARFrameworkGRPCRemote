// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIDepthCameraService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIDepthCameraService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIDepthCameraService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIDepthCameraService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIDepthCameraService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIDepthCameraService_2eproto;
namespace grpcIDepthCamera {
class getDepthMinDistanceResponse;
struct getDepthMinDistanceResponseDefaultTypeInternal;
extern getDepthMinDistanceResponseDefaultTypeInternal _getDepthMinDistanceResponse_default_instance_;
class getDepthResolutionResponse;
struct getDepthResolutionResponseDefaultTypeInternal;
extern getDepthResolutionResponseDefaultTypeInternal _getDepthResolutionResponse_default_instance_;
class getDistortionDepthParametersResponse;
struct getDistortionDepthParametersResponseDefaultTypeInternal;
extern getDistortionDepthParametersResponseDefaultTypeInternal _getDistortionDepthParametersResponse_default_instance_;
class getIntrinsicsDepthParametersResponse;
struct getIntrinsicsDepthParametersResponseDefaultTypeInternal;
extern getIntrinsicsDepthParametersResponseDefaultTypeInternal _getIntrinsicsDepthParametersResponse_default_instance_;
class getNextDepthFrameRequest;
struct getNextDepthFrameRequestDefaultTypeInternal;
extern getNextDepthFrameRequestDefaultTypeInternal _getNextDepthFrameRequest_default_instance_;
class getNextDepthFrameResponse;
struct getNextDepthFrameResponseDefaultTypeInternal;
extern getNextDepthFrameResponseDefaultTypeInternal _getNextDepthFrameResponse_default_instance_;
class getPointCloudRequest;
struct getPointCloudRequestDefaultTypeInternal;
extern getPointCloudRequestDefaultTypeInternal _getPointCloudRequest_default_instance_;
class getPointCloudResponse;
struct getPointCloudResponseDefaultTypeInternal;
extern getPointCloudResponseDefaultTypeInternal _getPointCloudResponse_default_instance_;
class setDepthResolutionRequest;
struct setDepthResolutionRequestDefaultTypeInternal;
extern setDepthResolutionRequestDefaultTypeInternal _setDepthResolutionRequest_default_instance_;
class setDepthResolutionResponse;
struct setDepthResolutionResponseDefaultTypeInternal;
extern setDepthResolutionResponseDefaultTypeInternal _setDepthResolutionResponse_default_instance_;
class setDistortionDepthParametersRequest;
struct setDistortionDepthParametersRequestDefaultTypeInternal;
extern setDistortionDepthParametersRequestDefaultTypeInternal _setDistortionDepthParametersRequest_default_instance_;
class setDistortionDepthParametersResponse;
struct setDistortionDepthParametersResponseDefaultTypeInternal;
extern setDistortionDepthParametersResponseDefaultTypeInternal _setDistortionDepthParametersResponse_default_instance_;
class setIntrinsicDepthParametersRequest;
struct setIntrinsicDepthParametersRequestDefaultTypeInternal;
extern setIntrinsicDepthParametersRequestDefaultTypeInternal _setIntrinsicDepthParametersRequest_default_instance_;
class setIntrinsicDepthParametersResponse;
struct setIntrinsicDepthParametersResponseDefaultTypeInternal;
extern setIntrinsicDepthParametersResponseDefaultTypeInternal _setIntrinsicDepthParametersResponse_default_instance_;
class startResponse;
struct startResponseDefaultTypeInternal;
extern startResponseDefaultTypeInternal _startResponse_default_instance_;
class stopResponse;
struct stopResponseDefaultTypeInternal;
extern stopResponseDefaultTypeInternal _stopResponse_default_instance_;
}  // namespace grpcIDepthCamera
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIDepthCamera::getDepthMinDistanceResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::getDepthMinDistanceResponse>(Arena*);
template<> ::grpcIDepthCamera::getDepthResolutionResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::getDepthResolutionResponse>(Arena*);
template<> ::grpcIDepthCamera::getDistortionDepthParametersResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::getDistortionDepthParametersResponse>(Arena*);
template<> ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>(Arena*);
template<> ::grpcIDepthCamera::getNextDepthFrameRequest* Arena::CreateMaybeMessage<::grpcIDepthCamera::getNextDepthFrameRequest>(Arena*);
template<> ::grpcIDepthCamera::getNextDepthFrameResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::getNextDepthFrameResponse>(Arena*);
template<> ::grpcIDepthCamera::getPointCloudRequest* Arena::CreateMaybeMessage<::grpcIDepthCamera::getPointCloudRequest>(Arena*);
template<> ::grpcIDepthCamera::getPointCloudResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::getPointCloudResponse>(Arena*);
template<> ::grpcIDepthCamera::setDepthResolutionRequest* Arena::CreateMaybeMessage<::grpcIDepthCamera::setDepthResolutionRequest>(Arena*);
template<> ::grpcIDepthCamera::setDepthResolutionResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::setDepthResolutionResponse>(Arena*);
template<> ::grpcIDepthCamera::setDistortionDepthParametersRequest* Arena::CreateMaybeMessage<::grpcIDepthCamera::setDistortionDepthParametersRequest>(Arena*);
template<> ::grpcIDepthCamera::setDistortionDepthParametersResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::setDistortionDepthParametersResponse>(Arena*);
template<> ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* Arena::CreateMaybeMessage<::grpcIDepthCamera::setIntrinsicDepthParametersRequest>(Arena*);
template<> ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::setIntrinsicDepthParametersResponse>(Arena*);
template<> ::grpcIDepthCamera::startResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::startResponse>(Arena*);
template<> ::grpcIDepthCamera::stopResponse* Arena::CreateMaybeMessage<::grpcIDepthCamera::stopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIDepthCamera {

// ===================================================================

class startResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.startResponse) */ {
 public:
  inline startResponse() : startResponse(nullptr) {}
  ~startResponse() override;
  explicit constexpr startResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startResponse(const startResponse& from);
  startResponse(startResponse&& from) noexcept
    : startResponse() {
    *this = ::std::move(from);
  }

  inline startResponse& operator=(const startResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline startResponse& operator=(startResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const startResponse* internal_default_instance() {
    return reinterpret_cast<const startResponse*>(
               &_startResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(startResponse& a, startResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(startResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline startResponse* New() const final {
    return new startResponse();
  }

  startResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<startResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const startResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.startResponse";
  }
  protected:
  explicit startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.startResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class stopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.stopResponse) */ {
 public:
  inline stopResponse() : stopResponse(nullptr) {}
  ~stopResponse() override;
  explicit constexpr stopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopResponse(const stopResponse& from);
  stopResponse(stopResponse&& from) noexcept
    : stopResponse() {
    *this = ::std::move(from);
  }

  inline stopResponse& operator=(const stopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopResponse& operator=(stopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopResponse* internal_default_instance() {
    return reinterpret_cast<const stopResponse*>(
               &_stopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(stopResponse& a, stopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(stopResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stopResponse* New() const final {
    return new stopResponse();
  }

  stopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const stopResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.stopResponse";
  }
  protected:
  explicit stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.stopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class getNextDepthFrameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.getNextDepthFrameRequest) */ {
 public:
  inline getNextDepthFrameRequest() : getNextDepthFrameRequest(nullptr) {}
  ~getNextDepthFrameRequest() override;
  explicit constexpr getNextDepthFrameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNextDepthFrameRequest(const getNextDepthFrameRequest& from);
  getNextDepthFrameRequest(getNextDepthFrameRequest&& from) noexcept
    : getNextDepthFrameRequest() {
    *this = ::std::move(from);
  }

  inline getNextDepthFrameRequest& operator=(const getNextDepthFrameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNextDepthFrameRequest& operator=(getNextDepthFrameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNextDepthFrameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNextDepthFrameRequest* internal_default_instance() {
    return reinterpret_cast<const getNextDepthFrameRequest*>(
               &_getNextDepthFrameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(getNextDepthFrameRequest& a, getNextDepthFrameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getNextDepthFrameRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNextDepthFrameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNextDepthFrameRequest* New() const final {
    return new getNextDepthFrameRequest();
  }

  getNextDepthFrameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNextDepthFrameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNextDepthFrameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNextDepthFrameRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNextDepthFrameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.getNextDepthFrameRequest";
  }
  protected:
  explicit getNextDepthFrameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 1,
  };
  // bytes img = 1;
  void clear_img();
  const std::string& img() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img();
  PROTOBUF_MUST_USE_RESULT std::string* release_img();
  void set_allocated_img(std::string* img);
  private:
  const std::string& _internal_img() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.getNextDepthFrameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class getNextDepthFrameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.getNextDepthFrameResponse) */ {
 public:
  inline getNextDepthFrameResponse() : getNextDepthFrameResponse(nullptr) {}
  ~getNextDepthFrameResponse() override;
  explicit constexpr getNextDepthFrameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNextDepthFrameResponse(const getNextDepthFrameResponse& from);
  getNextDepthFrameResponse(getNextDepthFrameResponse&& from) noexcept
    : getNextDepthFrameResponse() {
    *this = ::std::move(from);
  }

  inline getNextDepthFrameResponse& operator=(const getNextDepthFrameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNextDepthFrameResponse& operator=(getNextDepthFrameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNextDepthFrameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNextDepthFrameResponse* internal_default_instance() {
    return reinterpret_cast<const getNextDepthFrameResponse*>(
               &_getNextDepthFrameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(getNextDepthFrameResponse& a, getNextDepthFrameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getNextDepthFrameResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNextDepthFrameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNextDepthFrameResponse* New() const final {
    return new getNextDepthFrameResponse();
  }

  getNextDepthFrameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNextDepthFrameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNextDepthFrameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNextDepthFrameResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNextDepthFrameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.getNextDepthFrameResponse";
  }
  protected:
  explicit getNextDepthFrameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes img = 1;
  void clear_img();
  const std::string& img() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img();
  PROTOBUF_MUST_USE_RESULT std::string* release_img();
  void set_allocated_img(std::string* img);
  private:
  const std::string& _internal_img() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.getNextDepthFrameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.getPointCloudRequest) */ {
 public:
  inline getPointCloudRequest() : getPointCloudRequest(nullptr) {}
  ~getPointCloudRequest() override;
  explicit constexpr getPointCloudRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudRequest(const getPointCloudRequest& from);
  getPointCloudRequest(getPointCloudRequest&& from) noexcept
    : getPointCloudRequest() {
    *this = ::std::move(from);
  }

  inline getPointCloudRequest& operator=(const getPointCloudRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudRequest& operator=(getPointCloudRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudRequest* internal_default_instance() {
    return reinterpret_cast<const getPointCloudRequest*>(
               &_getPointCloudRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getPointCloudRequest& a, getPointCloudRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPointCloudRequest* New() const final {
    return new getPointCloudRequest();
  }

  getPointCloudRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPointCloudRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getPointCloudRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.getPointCloudRequest";
  }
  protected:
  explicit getPointCloudRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcFieldNumber = 1,
  };
  // bytes pc = 1;
  void clear_pc();
  const std::string& pc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pc();
  PROTOBUF_MUST_USE_RESULT std::string* release_pc();
  void set_allocated_pc(std::string* pc);
  private:
  const std::string& _internal_pc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pc(const std::string& value);
  std::string* _internal_mutable_pc();
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.getPointCloudRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.getPointCloudResponse) */ {
 public:
  inline getPointCloudResponse() : getPointCloudResponse(nullptr) {}
  ~getPointCloudResponse() override;
  explicit constexpr getPointCloudResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudResponse(const getPointCloudResponse& from);
  getPointCloudResponse(getPointCloudResponse&& from) noexcept
    : getPointCloudResponse() {
    *this = ::std::move(from);
  }

  inline getPointCloudResponse& operator=(const getPointCloudResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudResponse& operator=(getPointCloudResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudResponse* internal_default_instance() {
    return reinterpret_cast<const getPointCloudResponse*>(
               &_getPointCloudResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getPointCloudResponse& a, getPointCloudResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPointCloudResponse* New() const final {
    return new getPointCloudResponse();
  }

  getPointCloudResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPointCloudResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getPointCloudResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.getPointCloudResponse";
  }
  protected:
  explicit getPointCloudResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pc = 1;
  void clear_pc();
  const std::string& pc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pc();
  PROTOBUF_MUST_USE_RESULT std::string* release_pc();
  void set_allocated_pc(std::string* pc);
  private:
  const std::string& _internal_pc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pc(const std::string& value);
  std::string* _internal_mutable_pc();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.getPointCloudResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pc_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class setDepthResolutionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.setDepthResolutionRequest) */ {
 public:
  inline setDepthResolutionRequest() : setDepthResolutionRequest(nullptr) {}
  ~setDepthResolutionRequest() override;
  explicit constexpr setDepthResolutionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDepthResolutionRequest(const setDepthResolutionRequest& from);
  setDepthResolutionRequest(setDepthResolutionRequest&& from) noexcept
    : setDepthResolutionRequest() {
    *this = ::std::move(from);
  }

  inline setDepthResolutionRequest& operator=(const setDepthResolutionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDepthResolutionRequest& operator=(setDepthResolutionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setDepthResolutionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDepthResolutionRequest* internal_default_instance() {
    return reinterpret_cast<const setDepthResolutionRequest*>(
               &_setDepthResolutionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(setDepthResolutionRequest& a, setDepthResolutionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setDepthResolutionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDepthResolutionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDepthResolutionRequest* New() const final {
    return new setDepthResolutionRequest();
  }

  setDepthResolutionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDepthResolutionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setDepthResolutionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setDepthResolutionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDepthResolutionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.setDepthResolutionRequest";
  }
  protected:
  explicit setDepthResolutionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolutionFieldNumber = 1,
  };
  // bytes resolution = 1;
  void clear_resolution();
  const std::string& resolution() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resolution(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resolution();
  PROTOBUF_MUST_USE_RESULT std::string* release_resolution();
  void set_allocated_resolution(std::string* resolution);
  private:
  const std::string& _internal_resolution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution(const std::string& value);
  std::string* _internal_mutable_resolution();
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.setDepthResolutionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class setDepthResolutionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.setDepthResolutionResponse) */ {
 public:
  inline setDepthResolutionResponse() : setDepthResolutionResponse(nullptr) {}
  ~setDepthResolutionResponse() override;
  explicit constexpr setDepthResolutionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDepthResolutionResponse(const setDepthResolutionResponse& from);
  setDepthResolutionResponse(setDepthResolutionResponse&& from) noexcept
    : setDepthResolutionResponse() {
    *this = ::std::move(from);
  }

  inline setDepthResolutionResponse& operator=(const setDepthResolutionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDepthResolutionResponse& operator=(setDepthResolutionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setDepthResolutionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDepthResolutionResponse* internal_default_instance() {
    return reinterpret_cast<const setDepthResolutionResponse*>(
               &_setDepthResolutionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(setDepthResolutionResponse& a, setDepthResolutionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setDepthResolutionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDepthResolutionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDepthResolutionResponse* New() const final {
    return new setDepthResolutionResponse();
  }

  setDepthResolutionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDepthResolutionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setDepthResolutionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setDepthResolutionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDepthResolutionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.setDepthResolutionResponse";
  }
  protected:
  explicit setDepthResolutionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.setDepthResolutionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class setIntrinsicDepthParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.setIntrinsicDepthParametersRequest) */ {
 public:
  inline setIntrinsicDepthParametersRequest() : setIntrinsicDepthParametersRequest(nullptr) {}
  ~setIntrinsicDepthParametersRequest() override;
  explicit constexpr setIntrinsicDepthParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setIntrinsicDepthParametersRequest(const setIntrinsicDepthParametersRequest& from);
  setIntrinsicDepthParametersRequest(setIntrinsicDepthParametersRequest&& from) noexcept
    : setIntrinsicDepthParametersRequest() {
    *this = ::std::move(from);
  }

  inline setIntrinsicDepthParametersRequest& operator=(const setIntrinsicDepthParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setIntrinsicDepthParametersRequest& operator=(setIntrinsicDepthParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setIntrinsicDepthParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setIntrinsicDepthParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setIntrinsicDepthParametersRequest*>(
               &_setIntrinsicDepthParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(setIntrinsicDepthParametersRequest& a, setIntrinsicDepthParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setIntrinsicDepthParametersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setIntrinsicDepthParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setIntrinsicDepthParametersRequest* New() const final {
    return new setIntrinsicDepthParametersRequest();
  }

  setIntrinsicDepthParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setIntrinsicDepthParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setIntrinsicDepthParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setIntrinsicDepthParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setIntrinsicDepthParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.setIntrinsicDepthParametersRequest";
  }
  protected:
  explicit setIntrinsicDepthParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntrinsicParametersFieldNumber = 1,
  };
  // bytes intrinsic_parameters = 1;
  void clear_intrinsic_parameters();
  const std::string& intrinsic_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intrinsic_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intrinsic_parameters();
  PROTOBUF_MUST_USE_RESULT std::string* release_intrinsic_parameters();
  void set_allocated_intrinsic_parameters(std::string* intrinsic_parameters);
  private:
  const std::string& _internal_intrinsic_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intrinsic_parameters(const std::string& value);
  std::string* _internal_mutable_intrinsic_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.setIntrinsicDepthParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intrinsic_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class setIntrinsicDepthParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.setIntrinsicDepthParametersResponse) */ {
 public:
  inline setIntrinsicDepthParametersResponse() : setIntrinsicDepthParametersResponse(nullptr) {}
  ~setIntrinsicDepthParametersResponse() override;
  explicit constexpr setIntrinsicDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setIntrinsicDepthParametersResponse(const setIntrinsicDepthParametersResponse& from);
  setIntrinsicDepthParametersResponse(setIntrinsicDepthParametersResponse&& from) noexcept
    : setIntrinsicDepthParametersResponse() {
    *this = ::std::move(from);
  }

  inline setIntrinsicDepthParametersResponse& operator=(const setIntrinsicDepthParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setIntrinsicDepthParametersResponse& operator=(setIntrinsicDepthParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setIntrinsicDepthParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setIntrinsicDepthParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setIntrinsicDepthParametersResponse*>(
               &_setIntrinsicDepthParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(setIntrinsicDepthParametersResponse& a, setIntrinsicDepthParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setIntrinsicDepthParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setIntrinsicDepthParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setIntrinsicDepthParametersResponse* New() const final {
    return new setIntrinsicDepthParametersResponse();
  }

  setIntrinsicDepthParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setIntrinsicDepthParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setIntrinsicDepthParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setIntrinsicDepthParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setIntrinsicDepthParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.setIntrinsicDepthParametersResponse";
  }
  protected:
  explicit setIntrinsicDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.setIntrinsicDepthParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class setDistortionDepthParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.setDistortionDepthParametersRequest) */ {
 public:
  inline setDistortionDepthParametersRequest() : setDistortionDepthParametersRequest(nullptr) {}
  ~setDistortionDepthParametersRequest() override;
  explicit constexpr setDistortionDepthParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDistortionDepthParametersRequest(const setDistortionDepthParametersRequest& from);
  setDistortionDepthParametersRequest(setDistortionDepthParametersRequest&& from) noexcept
    : setDistortionDepthParametersRequest() {
    *this = ::std::move(from);
  }

  inline setDistortionDepthParametersRequest& operator=(const setDistortionDepthParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDistortionDepthParametersRequest& operator=(setDistortionDepthParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setDistortionDepthParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDistortionDepthParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setDistortionDepthParametersRequest*>(
               &_setDistortionDepthParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(setDistortionDepthParametersRequest& a, setDistortionDepthParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setDistortionDepthParametersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDistortionDepthParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDistortionDepthParametersRequest* New() const final {
    return new setDistortionDepthParametersRequest();
  }

  setDistortionDepthParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDistortionDepthParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setDistortionDepthParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setDistortionDepthParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDistortionDepthParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.setDistortionDepthParametersRequest";
  }
  protected:
  explicit setDistortionDepthParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistortionParametersFieldNumber = 1,
  };
  // bytes distortion_parameters = 1;
  void clear_distortion_parameters();
  const std::string& distortion_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_distortion_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_distortion_parameters();
  PROTOBUF_MUST_USE_RESULT std::string* release_distortion_parameters();
  void set_allocated_distortion_parameters(std::string* distortion_parameters);
  private:
  const std::string& _internal_distortion_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distortion_parameters(const std::string& value);
  std::string* _internal_mutable_distortion_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.setDistortionDepthParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distortion_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class setDistortionDepthParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.setDistortionDepthParametersResponse) */ {
 public:
  inline setDistortionDepthParametersResponse() : setDistortionDepthParametersResponse(nullptr) {}
  ~setDistortionDepthParametersResponse() override;
  explicit constexpr setDistortionDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDistortionDepthParametersResponse(const setDistortionDepthParametersResponse& from);
  setDistortionDepthParametersResponse(setDistortionDepthParametersResponse&& from) noexcept
    : setDistortionDepthParametersResponse() {
    *this = ::std::move(from);
  }

  inline setDistortionDepthParametersResponse& operator=(const setDistortionDepthParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDistortionDepthParametersResponse& operator=(setDistortionDepthParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setDistortionDepthParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDistortionDepthParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setDistortionDepthParametersResponse*>(
               &_setDistortionDepthParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(setDistortionDepthParametersResponse& a, setDistortionDepthParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setDistortionDepthParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDistortionDepthParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDistortionDepthParametersResponse* New() const final {
    return new setDistortionDepthParametersResponse();
  }

  setDistortionDepthParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDistortionDepthParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setDistortionDepthParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setDistortionDepthParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDistortionDepthParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.setDistortionDepthParametersResponse";
  }
  protected:
  explicit setDistortionDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.setDistortionDepthParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class getDepthResolutionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.getDepthResolutionResponse) */ {
 public:
  inline getDepthResolutionResponse() : getDepthResolutionResponse(nullptr) {}
  ~getDepthResolutionResponse() override;
  explicit constexpr getDepthResolutionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDepthResolutionResponse(const getDepthResolutionResponse& from);
  getDepthResolutionResponse(getDepthResolutionResponse&& from) noexcept
    : getDepthResolutionResponse() {
    *this = ::std::move(from);
  }

  inline getDepthResolutionResponse& operator=(const getDepthResolutionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDepthResolutionResponse& operator=(getDepthResolutionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDepthResolutionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDepthResolutionResponse* internal_default_instance() {
    return reinterpret_cast<const getDepthResolutionResponse*>(
               &_getDepthResolutionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(getDepthResolutionResponse& a, getDepthResolutionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDepthResolutionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDepthResolutionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDepthResolutionResponse* New() const final {
    return new getDepthResolutionResponse();
  }

  getDepthResolutionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDepthResolutionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDepthResolutionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getDepthResolutionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDepthResolutionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.getDepthResolutionResponse";
  }
  protected:
  explicit getDepthResolutionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.getDepthResolutionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class getDepthMinDistanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.getDepthMinDistanceResponse) */ {
 public:
  inline getDepthMinDistanceResponse() : getDepthMinDistanceResponse(nullptr) {}
  ~getDepthMinDistanceResponse() override;
  explicit constexpr getDepthMinDistanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDepthMinDistanceResponse(const getDepthMinDistanceResponse& from);
  getDepthMinDistanceResponse(getDepthMinDistanceResponse&& from) noexcept
    : getDepthMinDistanceResponse() {
    *this = ::std::move(from);
  }

  inline getDepthMinDistanceResponse& operator=(const getDepthMinDistanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDepthMinDistanceResponse& operator=(getDepthMinDistanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDepthMinDistanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDepthMinDistanceResponse* internal_default_instance() {
    return reinterpret_cast<const getDepthMinDistanceResponse*>(
               &_getDepthMinDistanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(getDepthMinDistanceResponse& a, getDepthMinDistanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDepthMinDistanceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDepthMinDistanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDepthMinDistanceResponse* New() const final {
    return new getDepthMinDistanceResponse();
  }

  getDepthMinDistanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDepthMinDistanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDepthMinDistanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getDepthMinDistanceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDepthMinDistanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.getDepthMinDistanceResponse";
  }
  protected:
  explicit getDepthMinDistanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // float xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  float xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(float value);
  private:
  float _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.getDepthMinDistanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class getIntrinsicsDepthParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.getIntrinsicsDepthParametersResponse) */ {
 public:
  inline getIntrinsicsDepthParametersResponse() : getIntrinsicsDepthParametersResponse(nullptr) {}
  ~getIntrinsicsDepthParametersResponse() override;
  explicit constexpr getIntrinsicsDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getIntrinsicsDepthParametersResponse(const getIntrinsicsDepthParametersResponse& from);
  getIntrinsicsDepthParametersResponse(getIntrinsicsDepthParametersResponse&& from) noexcept
    : getIntrinsicsDepthParametersResponse() {
    *this = ::std::move(from);
  }

  inline getIntrinsicsDepthParametersResponse& operator=(const getIntrinsicsDepthParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getIntrinsicsDepthParametersResponse& operator=(getIntrinsicsDepthParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getIntrinsicsDepthParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getIntrinsicsDepthParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getIntrinsicsDepthParametersResponse*>(
               &_getIntrinsicsDepthParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(getIntrinsicsDepthParametersResponse& a, getIntrinsicsDepthParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getIntrinsicsDepthParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getIntrinsicsDepthParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getIntrinsicsDepthParametersResponse* New() const final {
    return new getIntrinsicsDepthParametersResponse();
  }

  getIntrinsicsDepthParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getIntrinsicsDepthParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getIntrinsicsDepthParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getIntrinsicsDepthParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getIntrinsicsDepthParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.getIntrinsicsDepthParametersResponse";
  }
  protected:
  explicit getIntrinsicsDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.getIntrinsicsDepthParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// -------------------------------------------------------------------

class getDistortionDepthParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthCamera.getDistortionDepthParametersResponse) */ {
 public:
  inline getDistortionDepthParametersResponse() : getDistortionDepthParametersResponse(nullptr) {}
  ~getDistortionDepthParametersResponse() override;
  explicit constexpr getDistortionDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDistortionDepthParametersResponse(const getDistortionDepthParametersResponse& from);
  getDistortionDepthParametersResponse(getDistortionDepthParametersResponse&& from) noexcept
    : getDistortionDepthParametersResponse() {
    *this = ::std::move(from);
  }

  inline getDistortionDepthParametersResponse& operator=(const getDistortionDepthParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDistortionDepthParametersResponse& operator=(getDistortionDepthParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDistortionDepthParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDistortionDepthParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getDistortionDepthParametersResponse*>(
               &_getDistortionDepthParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(getDistortionDepthParametersResponse& a, getDistortionDepthParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDistortionDepthParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDistortionDepthParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDistortionDepthParametersResponse* New() const final {
    return new getDistortionDepthParametersResponse();
  }

  getDistortionDepthParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDistortionDepthParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDistortionDepthParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getDistortionDepthParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDistortionDepthParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthCamera.getDistortionDepthParametersResponse";
  }
  protected:
  explicit getDistortionDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthCamera.getDistortionDepthParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthCameraService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// startResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void startResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.startResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void startResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void startResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.startResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stopResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void stopResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.stopResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stopResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void stopResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.stopResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getNextDepthFrameRequest

// bytes img = 1;
inline void getNextDepthFrameRequest::clear_img() {
  img_.ClearToEmpty();
}
inline const std::string& getNextDepthFrameRequest::img() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.getNextDepthFrameRequest.img)
  return _internal_img();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNextDepthFrameRequest::set_img(ArgT0&& arg0, ArgT... args) {
 
 img_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.getNextDepthFrameRequest.img)
}
inline std::string* getNextDepthFrameRequest::mutable_img() {
  std::string* _s = _internal_mutable_img();
  // @@protoc_insertion_point(field_mutable:grpcIDepthCamera.getNextDepthFrameRequest.img)
  return _s;
}
inline const std::string& getNextDepthFrameRequest::_internal_img() const {
  return img_.Get();
}
inline void getNextDepthFrameRequest::_internal_set_img(const std::string& value) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNextDepthFrameRequest::_internal_mutable_img() {
  
  return img_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNextDepthFrameRequest::release_img() {
  // @@protoc_insertion_point(field_release:grpcIDepthCamera.getNextDepthFrameRequest.img)
  return img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNextDepthFrameRequest::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    
  } else {
    
  }
  img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthCamera.getNextDepthFrameRequest.img)
}

// -------------------------------------------------------------------

// getNextDepthFrameResponse

// bytes img = 1;
inline void getNextDepthFrameResponse::clear_img() {
  img_.ClearToEmpty();
}
inline const std::string& getNextDepthFrameResponse::img() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.getNextDepthFrameResponse.img)
  return _internal_img();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNextDepthFrameResponse::set_img(ArgT0&& arg0, ArgT... args) {
 
 img_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.getNextDepthFrameResponse.img)
}
inline std::string* getNextDepthFrameResponse::mutable_img() {
  std::string* _s = _internal_mutable_img();
  // @@protoc_insertion_point(field_mutable:grpcIDepthCamera.getNextDepthFrameResponse.img)
  return _s;
}
inline const std::string& getNextDepthFrameResponse::_internal_img() const {
  return img_.Get();
}
inline void getNextDepthFrameResponse::_internal_set_img(const std::string& value) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNextDepthFrameResponse::_internal_mutable_img() {
  
  return img_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNextDepthFrameResponse::release_img() {
  // @@protoc_insertion_point(field_release:grpcIDepthCamera.getNextDepthFrameResponse.img)
  return img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNextDepthFrameResponse::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    
  } else {
    
  }
  img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthCamera.getNextDepthFrameResponse.img)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getNextDepthFrameResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextDepthFrameResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextDepthFrameResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.getNextDepthFrameResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getNextDepthFrameResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getNextDepthFrameResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.getNextDepthFrameResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getPointCloudRequest

// bytes pc = 1;
inline void getPointCloudRequest::clear_pc() {
  pc_.ClearToEmpty();
}
inline const std::string& getPointCloudRequest::pc() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.getPointCloudRequest.pc)
  return _internal_pc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequest::set_pc(ArgT0&& arg0, ArgT... args) {
 
 pc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.getPointCloudRequest.pc)
}
inline std::string* getPointCloudRequest::mutable_pc() {
  std::string* _s = _internal_mutable_pc();
  // @@protoc_insertion_point(field_mutable:grpcIDepthCamera.getPointCloudRequest.pc)
  return _s;
}
inline const std::string& getPointCloudRequest::_internal_pc() const {
  return pc_.Get();
}
inline void getPointCloudRequest::_internal_set_pc(const std::string& value) {
  
  pc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequest::_internal_mutable_pc() {
  
  return pc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getPointCloudRequest::release_pc() {
  // @@protoc_insertion_point(field_release:grpcIDepthCamera.getPointCloudRequest.pc)
  return pc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getPointCloudRequest::set_allocated_pc(std::string* pc) {
  if (pc != nullptr) {
    
  } else {
    
  }
  pc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthCamera.getPointCloudRequest.pc)
}

// -------------------------------------------------------------------

// getPointCloudResponse

// bytes pc = 1;
inline void getPointCloudResponse::clear_pc() {
  pc_.ClearToEmpty();
}
inline const std::string& getPointCloudResponse::pc() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.getPointCloudResponse.pc)
  return _internal_pc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudResponse::set_pc(ArgT0&& arg0, ArgT... args) {
 
 pc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.getPointCloudResponse.pc)
}
inline std::string* getPointCloudResponse::mutable_pc() {
  std::string* _s = _internal_mutable_pc();
  // @@protoc_insertion_point(field_mutable:grpcIDepthCamera.getPointCloudResponse.pc)
  return _s;
}
inline const std::string& getPointCloudResponse::_internal_pc() const {
  return pc_.Get();
}
inline void getPointCloudResponse::_internal_set_pc(const std::string& value) {
  
  pc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getPointCloudResponse::_internal_mutable_pc() {
  
  return pc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getPointCloudResponse::release_pc() {
  // @@protoc_insertion_point(field_release:grpcIDepthCamera.getPointCloudResponse.pc)
  return pc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getPointCloudResponse::set_allocated_pc(std::string* pc) {
  if (pc != nullptr) {
    
  } else {
    
  }
  pc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthCamera.getPointCloudResponse.pc)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getPointCloudResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getPointCloudResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getPointCloudResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.getPointCloudResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getPointCloudResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getPointCloudResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.getPointCloudResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setDepthResolutionRequest

// bytes resolution = 1;
inline void setDepthResolutionRequest::clear_resolution() {
  resolution_.ClearToEmpty();
}
inline const std::string& setDepthResolutionRequest::resolution() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.setDepthResolutionRequest.resolution)
  return _internal_resolution();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setDepthResolutionRequest::set_resolution(ArgT0&& arg0, ArgT... args) {
 
 resolution_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.setDepthResolutionRequest.resolution)
}
inline std::string* setDepthResolutionRequest::mutable_resolution() {
  std::string* _s = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:grpcIDepthCamera.setDepthResolutionRequest.resolution)
  return _s;
}
inline const std::string& setDepthResolutionRequest::_internal_resolution() const {
  return resolution_.Get();
}
inline void setDepthResolutionRequest::_internal_set_resolution(const std::string& value) {
  
  resolution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setDepthResolutionRequest::_internal_mutable_resolution() {
  
  return resolution_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setDepthResolutionRequest::release_resolution() {
  // @@protoc_insertion_point(field_release:grpcIDepthCamera.setDepthResolutionRequest.resolution)
  return resolution_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setDepthResolutionRequest::set_allocated_resolution(std::string* resolution) {
  if (resolution != nullptr) {
    
  } else {
    
  }
  resolution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resolution,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthCamera.setDepthResolutionRequest.resolution)
}

// -------------------------------------------------------------------

// setDepthResolutionResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setDepthResolutionResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDepthResolutionResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDepthResolutionResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.setDepthResolutionResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setDepthResolutionResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setDepthResolutionResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.setDepthResolutionResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setIntrinsicDepthParametersRequest

// bytes intrinsic_parameters = 1;
inline void setIntrinsicDepthParametersRequest::clear_intrinsic_parameters() {
  intrinsic_parameters_.ClearToEmpty();
}
inline const std::string& setIntrinsicDepthParametersRequest::intrinsic_parameters() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.setIntrinsicDepthParametersRequest.intrinsic_parameters)
  return _internal_intrinsic_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setIntrinsicDepthParametersRequest::set_intrinsic_parameters(ArgT0&& arg0, ArgT... args) {
 
 intrinsic_parameters_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.setIntrinsicDepthParametersRequest.intrinsic_parameters)
}
inline std::string* setIntrinsicDepthParametersRequest::mutable_intrinsic_parameters() {
  std::string* _s = _internal_mutable_intrinsic_parameters();
  // @@protoc_insertion_point(field_mutable:grpcIDepthCamera.setIntrinsicDepthParametersRequest.intrinsic_parameters)
  return _s;
}
inline const std::string& setIntrinsicDepthParametersRequest::_internal_intrinsic_parameters() const {
  return intrinsic_parameters_.Get();
}
inline void setIntrinsicDepthParametersRequest::_internal_set_intrinsic_parameters(const std::string& value) {
  
  intrinsic_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setIntrinsicDepthParametersRequest::_internal_mutable_intrinsic_parameters() {
  
  return intrinsic_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setIntrinsicDepthParametersRequest::release_intrinsic_parameters() {
  // @@protoc_insertion_point(field_release:grpcIDepthCamera.setIntrinsicDepthParametersRequest.intrinsic_parameters)
  return intrinsic_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setIntrinsicDepthParametersRequest::set_allocated_intrinsic_parameters(std::string* intrinsic_parameters) {
  if (intrinsic_parameters != nullptr) {
    
  } else {
    
  }
  intrinsic_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intrinsic_parameters,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthCamera.setIntrinsicDepthParametersRequest.intrinsic_parameters)
}

// -------------------------------------------------------------------

// setIntrinsicDepthParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setIntrinsicDepthParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setIntrinsicDepthParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setIntrinsicDepthParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.setIntrinsicDepthParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setIntrinsicDepthParametersResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setIntrinsicDepthParametersResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.setIntrinsicDepthParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setDistortionDepthParametersRequest

// bytes distortion_parameters = 1;
inline void setDistortionDepthParametersRequest::clear_distortion_parameters() {
  distortion_parameters_.ClearToEmpty();
}
inline const std::string& setDistortionDepthParametersRequest::distortion_parameters() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.setDistortionDepthParametersRequest.distortion_parameters)
  return _internal_distortion_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setDistortionDepthParametersRequest::set_distortion_parameters(ArgT0&& arg0, ArgT... args) {
 
 distortion_parameters_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.setDistortionDepthParametersRequest.distortion_parameters)
}
inline std::string* setDistortionDepthParametersRequest::mutable_distortion_parameters() {
  std::string* _s = _internal_mutable_distortion_parameters();
  // @@protoc_insertion_point(field_mutable:grpcIDepthCamera.setDistortionDepthParametersRequest.distortion_parameters)
  return _s;
}
inline const std::string& setDistortionDepthParametersRequest::_internal_distortion_parameters() const {
  return distortion_parameters_.Get();
}
inline void setDistortionDepthParametersRequest::_internal_set_distortion_parameters(const std::string& value) {
  
  distortion_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setDistortionDepthParametersRequest::_internal_mutable_distortion_parameters() {
  
  return distortion_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setDistortionDepthParametersRequest::release_distortion_parameters() {
  // @@protoc_insertion_point(field_release:grpcIDepthCamera.setDistortionDepthParametersRequest.distortion_parameters)
  return distortion_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setDistortionDepthParametersRequest::set_allocated_distortion_parameters(std::string* distortion_parameters) {
  if (distortion_parameters != nullptr) {
    
  } else {
    
  }
  distortion_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distortion_parameters,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthCamera.setDistortionDepthParametersRequest.distortion_parameters)
}

// -------------------------------------------------------------------

// setDistortionDepthParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setDistortionDepthParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDistortionDepthParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDistortionDepthParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.setDistortionDepthParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setDistortionDepthParametersResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setDistortionDepthParametersResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.setDistortionDepthParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDepthResolutionResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getDepthResolutionResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getDepthResolutionResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.getDepthResolutionResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDepthResolutionResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.getDepthResolutionResponse.xpcfGrpcReturnValue)
}
inline std::string* getDepthResolutionResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIDepthCamera.getDepthResolutionResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getDepthResolutionResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getDepthResolutionResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getDepthResolutionResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getDepthResolutionResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIDepthCamera.getDepthResolutionResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getDepthResolutionResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthCamera.getDepthResolutionResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDepthMinDistanceResponse

// float xpcfGrpcReturnValue = 1;
inline void getDepthMinDistanceResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline float getDepthMinDistanceResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline float getDepthMinDistanceResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.getDepthMinDistanceResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getDepthMinDistanceResponse::_internal_set_xpcfgrpcreturnvalue(float value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getDepthMinDistanceResponse::set_xpcfgrpcreturnvalue(float value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.getDepthMinDistanceResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getIntrinsicsDepthParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getIntrinsicsDepthParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getIntrinsicsDepthParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.getIntrinsicsDepthParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getIntrinsicsDepthParametersResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.getIntrinsicsDepthParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getIntrinsicsDepthParametersResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIDepthCamera.getIntrinsicsDepthParametersResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getIntrinsicsDepthParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getIntrinsicsDepthParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getIntrinsicsDepthParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getIntrinsicsDepthParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIDepthCamera.getIntrinsicsDepthParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getIntrinsicsDepthParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthCamera.getIntrinsicsDepthParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDistortionDepthParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getDistortionDepthParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getDistortionDepthParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthCamera.getDistortionDepthParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDistortionDepthParametersResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthCamera.getDistortionDepthParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getDistortionDepthParametersResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIDepthCamera.getDistortionDepthParametersResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getDistortionDepthParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getDistortionDepthParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getDistortionDepthParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getDistortionDepthParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIDepthCamera.getDistortionDepthParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getDistortionDepthParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthCamera.getDistortionDepthParametersResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIDepthCamera

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIDepthCameraService_2eproto
