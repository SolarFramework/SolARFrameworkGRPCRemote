// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIRegressionService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIRegressionService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIRegressionService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIRegressionService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIRegressionService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIRegressionService_2eproto;
namespace grpcIRegression {
class addRequest;
struct addRequestDefaultTypeInternal;
extern addRequestDefaultTypeInternal _addRequest_default_instance_;
class addResponse;
struct addResponseDefaultTypeInternal;
extern addResponseDefaultTypeInternal _addResponse_default_instance_;
class getNumActiveLeavesRequest;
struct getNumActiveLeavesRequestDefaultTypeInternal;
extern getNumActiveLeavesRequestDefaultTypeInternal _getNumActiveLeavesRequest_default_instance_;
class getNumActiveLeavesResponse;
struct getNumActiveLeavesResponseDefaultTypeInternal;
extern getNumActiveLeavesResponseDefaultTypeInternal _getNumActiveLeavesResponse_default_instance_;
class getNumPassiveLeavesRequest;
struct getNumPassiveLeavesRequestDefaultTypeInternal;
extern getNumPassiveLeavesRequestDefaultTypeInternal _getNumPassiveLeavesRequest_default_instance_;
class getNumPassiveLeavesResponse;
struct getNumPassiveLeavesResponseDefaultTypeInternal;
extern getNumPassiveLeavesResponseDefaultTypeInternal _getNumPassiveLeavesResponse_default_instance_;
class getTrainingStatusRequest;
struct getTrainingStatusRequestDefaultTypeInternal;
extern getTrainingStatusRequestDefaultTypeInternal _getTrainingStatusRequest_default_instance_;
class getTrainingStatusResponse;
struct getTrainingStatusResponseDefaultTypeInternal;
extern getTrainingStatusResponseDefaultTypeInternal _getTrainingStatusResponse_default_instance_;
class loadModelRequest;
struct loadModelRequestDefaultTypeInternal;
extern loadModelRequestDefaultTypeInternal _loadModelRequest_default_instance_;
class loadModelResponse;
struct loadModelResponseDefaultTypeInternal;
extern loadModelResponseDefaultTypeInternal _loadModelResponse_default_instance_;
class regressRequest;
struct regressRequestDefaultTypeInternal;
extern regressRequestDefaultTypeInternal _regressRequest_default_instance_;
class regressResponse;
struct regressResponseDefaultTypeInternal;
extern regressResponseDefaultTypeInternal _regressResponse_default_instance_;
class setCameraParametersRequest;
struct setCameraParametersRequestDefaultTypeInternal;
extern setCameraParametersRequestDefaultTypeInternal _setCameraParametersRequest_default_instance_;
class updateRequest;
struct updateRequestDefaultTypeInternal;
extern updateRequestDefaultTypeInternal _updateRequest_default_instance_;
class updateResponse;
struct updateResponseDefaultTypeInternal;
extern updateResponseDefaultTypeInternal _updateResponse_default_instance_;
}  // namespace grpcIRegression
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIRegression::addRequest* Arena::CreateMaybeMessage<::grpcIRegression::addRequest>(Arena*);
template<> ::grpcIRegression::addResponse* Arena::CreateMaybeMessage<::grpcIRegression::addResponse>(Arena*);
template<> ::grpcIRegression::getNumActiveLeavesRequest* Arena::CreateMaybeMessage<::grpcIRegression::getNumActiveLeavesRequest>(Arena*);
template<> ::grpcIRegression::getNumActiveLeavesResponse* Arena::CreateMaybeMessage<::grpcIRegression::getNumActiveLeavesResponse>(Arena*);
template<> ::grpcIRegression::getNumPassiveLeavesRequest* Arena::CreateMaybeMessage<::grpcIRegression::getNumPassiveLeavesRequest>(Arena*);
template<> ::grpcIRegression::getNumPassiveLeavesResponse* Arena::CreateMaybeMessage<::grpcIRegression::getNumPassiveLeavesResponse>(Arena*);
template<> ::grpcIRegression::getTrainingStatusRequest* Arena::CreateMaybeMessage<::grpcIRegression::getTrainingStatusRequest>(Arena*);
template<> ::grpcIRegression::getTrainingStatusResponse* Arena::CreateMaybeMessage<::grpcIRegression::getTrainingStatusResponse>(Arena*);
template<> ::grpcIRegression::loadModelRequest* Arena::CreateMaybeMessage<::grpcIRegression::loadModelRequest>(Arena*);
template<> ::grpcIRegression::loadModelResponse* Arena::CreateMaybeMessage<::grpcIRegression::loadModelResponse>(Arena*);
template<> ::grpcIRegression::regressRequest* Arena::CreateMaybeMessage<::grpcIRegression::regressRequest>(Arena*);
template<> ::grpcIRegression::regressResponse* Arena::CreateMaybeMessage<::grpcIRegression::regressResponse>(Arena*);
template<> ::grpcIRegression::setCameraParametersRequest* Arena::CreateMaybeMessage<::grpcIRegression::setCameraParametersRequest>(Arena*);
template<> ::grpcIRegression::updateRequest* Arena::CreateMaybeMessage<::grpcIRegression::updateRequest>(Arena*);
template<> ::grpcIRegression::updateResponse* Arena::CreateMaybeMessage<::grpcIRegression::updateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIRegression {

// ===================================================================

class setCameraParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.setCameraParametersRequest) */ {
 public:
  inline setCameraParametersRequest() : setCameraParametersRequest(nullptr) {}
  ~setCameraParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParametersRequest(const setCameraParametersRequest& from);
  setCameraParametersRequest(setCameraParametersRequest&& from) noexcept
    : setCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline setCameraParametersRequest& operator=(const setCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParametersRequest& operator=(setCameraParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setCameraParametersRequest*>(
               &_setCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setCameraParametersRequest& a, setCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setCameraParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.setCameraParametersRequest";
  }
  protected:
  explicit setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntrinsicParamsFieldNumber = 1,
    kDistorsionParamsFieldNumber = 2,
  };
  // bytes intrinsicParams = 1;
  void clear_intrinsicparams();
  const std::string& intrinsicparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intrinsicparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intrinsicparams();
  PROTOBUF_NODISCARD std::string* release_intrinsicparams();
  void set_allocated_intrinsicparams(std::string* intrinsicparams);
  private:
  const std::string& _internal_intrinsicparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intrinsicparams(const std::string& value);
  std::string* _internal_mutable_intrinsicparams();
  public:

  // bytes distorsionParams = 2;
  void clear_distorsionparams();
  const std::string& distorsionparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_distorsionparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_distorsionparams();
  PROTOBUF_NODISCARD std::string* release_distorsionparams();
  void set_allocated_distorsionparams(std::string* distorsionparams);
  private:
  const std::string& _internal_distorsionparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distorsionparams(const std::string& value);
  std::string* _internal_mutable_distorsionparams();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.setCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intrinsicparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distorsionparams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class addRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.addRequest) */ {
 public:
  inline addRequest() : addRequest(nullptr) {}
  ~addRequest() override;
  explicit PROTOBUF_CONSTEXPR addRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addRequest(const addRequest& from);
  addRequest(addRequest&& from) noexcept
    : addRequest() {
    *this = ::std::move(from);
  }

  inline addRequest& operator=(const addRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addRequest& operator=(addRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addRequest* internal_default_instance() {
    return reinterpret_cast<const addRequest*>(
               &_addRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(addRequest& a, addRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.addRequest";
  }
  protected:
  explicit addRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorsFieldNumber = 2,
    kPoints3DFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes descriptors = 2;
  void clear_descriptors();
  const std::string& descriptors() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptors(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptors();
  PROTOBUF_NODISCARD std::string* release_descriptors();
  void set_allocated_descriptors(std::string* descriptors);
  private:
  const std::string& _internal_descriptors() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptors(const std::string& value);
  std::string* _internal_mutable_descriptors();
  public:

  // bytes points3D = 3;
  void clear_points3d();
  const std::string& points3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points3d();
  PROTOBUF_NODISCARD std::string* release_points3d();
  void set_allocated_points3d(std::string* points3d);
  private:
  const std::string& _internal_points3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points3d(const std::string& value);
  std::string* _internal_mutable_points3d();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.addRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points3d_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class addResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.addResponse) */ {
 public:
  inline addResponse() : addResponse(nullptr) {}
  ~addResponse() override;
  explicit PROTOBUF_CONSTEXPR addResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addResponse(const addResponse& from);
  addResponse(addResponse&& from) noexcept
    : addResponse() {
    *this = ::std::move(from);
  }

  inline addResponse& operator=(const addResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addResponse& operator=(addResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const addResponse* internal_default_instance() {
    return reinterpret_cast<const addResponse*>(
               &_addResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(addResponse& a, addResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.addResponse";
  }
  protected:
  explicit addResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.addResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class regressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.regressRequest) */ {
 public:
  inline regressRequest() : regressRequest(nullptr) {}
  ~regressRequest() override;
  explicit PROTOBUF_CONSTEXPR regressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  regressRequest(const regressRequest& from);
  regressRequest(regressRequest&& from) noexcept
    : regressRequest() {
    *this = ::std::move(from);
  }

  inline regressRequest& operator=(const regressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline regressRequest& operator=(regressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const regressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const regressRequest* internal_default_instance() {
    return reinterpret_cast<const regressRequest*>(
               &_regressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(regressRequest& a, regressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(regressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(regressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  regressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<regressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const regressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const regressRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(regressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.regressRequest";
  }
  protected:
  explicit regressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kPoints2DFieldNumber = 3,
    kPoints3DFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes frame = 2;
  void clear_frame();
  const std::string& frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame();
  PROTOBUF_NODISCARD std::string* release_frame();
  void set_allocated_frame(std::string* frame);
  private:
  const std::string& _internal_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame(const std::string& value);
  std::string* _internal_mutable_frame();
  public:

  // bytes points2D = 3;
  void clear_points2d();
  const std::string& points2d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points2d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points2d();
  PROTOBUF_NODISCARD std::string* release_points2d();
  void set_allocated_points2d(std::string* points2d);
  private:
  const std::string& _internal_points2d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points2d(const std::string& value);
  std::string* _internal_mutable_points2d();
  public:

  // bytes points3D = 4;
  void clear_points3d();
  const std::string& points3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points3d();
  PROTOBUF_NODISCARD std::string* release_points3d();
  void set_allocated_points3d(std::string* points3d);
  private:
  const std::string& _internal_points3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points3d(const std::string& value);
  std::string* _internal_mutable_points3d();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.regressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points2d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points3d_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class regressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.regressResponse) */ {
 public:
  inline regressResponse() : regressResponse(nullptr) {}
  ~regressResponse() override;
  explicit PROTOBUF_CONSTEXPR regressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  regressResponse(const regressResponse& from);
  regressResponse(regressResponse&& from) noexcept
    : regressResponse() {
    *this = ::std::move(from);
  }

  inline regressResponse& operator=(const regressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline regressResponse& operator=(regressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const regressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const regressResponse* internal_default_instance() {
    return reinterpret_cast<const regressResponse*>(
               &_regressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(regressResponse& a, regressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(regressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(regressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  regressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<regressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const regressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const regressResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(regressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.regressResponse";
  }
  protected:
  explicit regressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoints2DFieldNumber = 1,
    kPoints3DFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes points2D = 1;
  void clear_points2d();
  const std::string& points2d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points2d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points2d();
  PROTOBUF_NODISCARD std::string* release_points2d();
  void set_allocated_points2d(std::string* points2d);
  private:
  const std::string& _internal_points2d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points2d(const std::string& value);
  std::string* _internal_mutable_points2d();
  public:

  // bytes points3D = 2;
  void clear_points3d();
  const std::string& points3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points3d();
  PROTOBUF_NODISCARD std::string* release_points3d();
  void set_allocated_points3d(std::string* points3d);
  private:
  const std::string& _internal_points3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points3d(const std::string& value);
  std::string* _internal_mutable_points3d();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.regressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points2d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points3d_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class updateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.updateRequest) */ {
 public:
  inline updateRequest() : updateRequest(nullptr) {}
  ~updateRequest() override;
  explicit PROTOBUF_CONSTEXPR updateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  updateRequest(const updateRequest& from);
  updateRequest(updateRequest&& from) noexcept
    : updateRequest() {
    *this = ::std::move(from);
  }

  inline updateRequest& operator=(const updateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline updateRequest& operator=(updateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const updateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const updateRequest* internal_default_instance() {
    return reinterpret_cast<const updateRequest*>(
               &_updateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(updateRequest& a, updateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(updateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(updateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  updateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<updateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const updateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const updateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(updateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.updateRequest";
  }
  protected:
  explicit updateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInliersFieldNumber = 2,
    kCameraPoseFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes inliers = 2;
  void clear_inliers();
  const std::string& inliers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inliers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inliers();
  PROTOBUF_NODISCARD std::string* release_inliers();
  void set_allocated_inliers(std::string* inliers);
  private:
  const std::string& _internal_inliers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inliers(const std::string& value);
  std::string* _internal_mutable_inliers();
  public:

  // bytes cameraPose = 3;
  void clear_camerapose();
  const std::string& camerapose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camerapose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camerapose();
  PROTOBUF_NODISCARD std::string* release_camerapose();
  void set_allocated_camerapose(std::string* camerapose);
  private:
  const std::string& _internal_camerapose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camerapose(const std::string& value);
  std::string* _internal_mutable_camerapose();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.updateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inliers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camerapose_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class updateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.updateResponse) */ {
 public:
  inline updateResponse() : updateResponse(nullptr) {}
  ~updateResponse() override;
  explicit PROTOBUF_CONSTEXPR updateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  updateResponse(const updateResponse& from);
  updateResponse(updateResponse&& from) noexcept
    : updateResponse() {
    *this = ::std::move(from);
  }

  inline updateResponse& operator=(const updateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline updateResponse& operator=(updateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const updateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const updateResponse* internal_default_instance() {
    return reinterpret_cast<const updateResponse*>(
               &_updateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(updateResponse& a, updateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(updateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(updateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  updateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<updateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const updateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const updateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(updateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.updateResponse";
  }
  protected:
  explicit updateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInliersFieldNumber = 1,
    kCameraPoseFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes inliers = 1;
  void clear_inliers();
  const std::string& inliers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inliers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inliers();
  PROTOBUF_NODISCARD std::string* release_inliers();
  void set_allocated_inliers(std::string* inliers);
  private:
  const std::string& _internal_inliers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inliers(const std::string& value);
  std::string* _internal_mutable_inliers();
  public:

  // bytes cameraPose = 2;
  void clear_camerapose();
  const std::string& camerapose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camerapose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camerapose();
  PROTOBUF_NODISCARD std::string* release_camerapose();
  void set_allocated_camerapose(std::string* camerapose);
  private:
  const std::string& _internal_camerapose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camerapose(const std::string& value);
  std::string* _internal_mutable_camerapose();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.updateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inliers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camerapose_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class loadModelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.loadModelRequest) */ {
 public:
  inline loadModelRequest() : loadModelRequest(nullptr) {}
  ~loadModelRequest() override;
  explicit PROTOBUF_CONSTEXPR loadModelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadModelRequest(const loadModelRequest& from);
  loadModelRequest(loadModelRequest&& from) noexcept
    : loadModelRequest() {
    *this = ::std::move(from);
  }

  inline loadModelRequest& operator=(const loadModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadModelRequest& operator=(loadModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loadModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadModelRequest* internal_default_instance() {
    return reinterpret_cast<const loadModelRequest*>(
               &_loadModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(loadModelRequest& a, loadModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(loadModelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  loadModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<loadModelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loadModelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const loadModelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadModelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.loadModelRequest";
  }
  protected:
  explicit loadModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.loadModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class loadModelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.loadModelResponse) */ {
 public:
  inline loadModelResponse() : loadModelResponse(nullptr) {}
  ~loadModelResponse() override;
  explicit PROTOBUF_CONSTEXPR loadModelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadModelResponse(const loadModelResponse& from);
  loadModelResponse(loadModelResponse&& from) noexcept
    : loadModelResponse() {
    *this = ::std::move(from);
  }

  inline loadModelResponse& operator=(const loadModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadModelResponse& operator=(loadModelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loadModelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadModelResponse* internal_default_instance() {
    return reinterpret_cast<const loadModelResponse*>(
               &_loadModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(loadModelResponse& a, loadModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(loadModelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  loadModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<loadModelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loadModelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const loadModelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadModelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.loadModelResponse";
  }
  protected:
  explicit loadModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.loadModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class getTrainingStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.getTrainingStatusRequest) */ {
 public:
  inline getTrainingStatusRequest() : getTrainingStatusRequest(nullptr) {}
  ~getTrainingStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR getTrainingStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getTrainingStatusRequest(const getTrainingStatusRequest& from);
  getTrainingStatusRequest(getTrainingStatusRequest&& from) noexcept
    : getTrainingStatusRequest() {
    *this = ::std::move(from);
  }

  inline getTrainingStatusRequest& operator=(const getTrainingStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getTrainingStatusRequest& operator=(getTrainingStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getTrainingStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getTrainingStatusRequest* internal_default_instance() {
    return reinterpret_cast<const getTrainingStatusRequest*>(
               &_getTrainingStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(getTrainingStatusRequest& a, getTrainingStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getTrainingStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getTrainingStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getTrainingStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getTrainingStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getTrainingStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getTrainingStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getTrainingStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.getTrainingStatusRequest";
  }
  protected:
  explicit getTrainingStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.getTrainingStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class getTrainingStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.getTrainingStatusResponse) */ {
 public:
  inline getTrainingStatusResponse() : getTrainingStatusResponse(nullptr) {}
  ~getTrainingStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR getTrainingStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getTrainingStatusResponse(const getTrainingStatusResponse& from);
  getTrainingStatusResponse(getTrainingStatusResponse&& from) noexcept
    : getTrainingStatusResponse() {
    *this = ::std::move(from);
  }

  inline getTrainingStatusResponse& operator=(const getTrainingStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getTrainingStatusResponse& operator=(getTrainingStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getTrainingStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getTrainingStatusResponse* internal_default_instance() {
    return reinterpret_cast<const getTrainingStatusResponse*>(
               &_getTrainingStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(getTrainingStatusResponse& a, getTrainingStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getTrainingStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getTrainingStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getTrainingStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getTrainingStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getTrainingStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getTrainingStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getTrainingStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.getTrainingStatusResponse";
  }
  protected:
  explicit getTrainingStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_NODISCARD std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.getTrainingStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class getNumActiveLeavesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.getNumActiveLeavesRequest) */ {
 public:
  inline getNumActiveLeavesRequest() : getNumActiveLeavesRequest(nullptr) {}
  ~getNumActiveLeavesRequest() override;
  explicit PROTOBUF_CONSTEXPR getNumActiveLeavesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNumActiveLeavesRequest(const getNumActiveLeavesRequest& from);
  getNumActiveLeavesRequest(getNumActiveLeavesRequest&& from) noexcept
    : getNumActiveLeavesRequest() {
    *this = ::std::move(from);
  }

  inline getNumActiveLeavesRequest& operator=(const getNumActiveLeavesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNumActiveLeavesRequest& operator=(getNumActiveLeavesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNumActiveLeavesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNumActiveLeavesRequest* internal_default_instance() {
    return reinterpret_cast<const getNumActiveLeavesRequest*>(
               &_getNumActiveLeavesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(getNumActiveLeavesRequest& a, getNumActiveLeavesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getNumActiveLeavesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNumActiveLeavesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getNumActiveLeavesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getNumActiveLeavesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNumActiveLeavesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNumActiveLeavesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNumActiveLeavesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.getNumActiveLeavesRequest";
  }
  protected:
  explicit getNumActiveLeavesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.getNumActiveLeavesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class getNumActiveLeavesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.getNumActiveLeavesResponse) */ {
 public:
  inline getNumActiveLeavesResponse() : getNumActiveLeavesResponse(nullptr) {}
  ~getNumActiveLeavesResponse() override;
  explicit PROTOBUF_CONSTEXPR getNumActiveLeavesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNumActiveLeavesResponse(const getNumActiveLeavesResponse& from);
  getNumActiveLeavesResponse(getNumActiveLeavesResponse&& from) noexcept
    : getNumActiveLeavesResponse() {
    *this = ::std::move(from);
  }

  inline getNumActiveLeavesResponse& operator=(const getNumActiveLeavesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNumActiveLeavesResponse& operator=(getNumActiveLeavesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNumActiveLeavesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNumActiveLeavesResponse* internal_default_instance() {
    return reinterpret_cast<const getNumActiveLeavesResponse*>(
               &_getNumActiveLeavesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(getNumActiveLeavesResponse& a, getNumActiveLeavesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getNumActiveLeavesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNumActiveLeavesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getNumActiveLeavesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getNumActiveLeavesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNumActiveLeavesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNumActiveLeavesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNumActiveLeavesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.getNumActiveLeavesResponse";
  }
  protected:
  explicit getNumActiveLeavesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.getNumActiveLeavesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class getNumPassiveLeavesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.getNumPassiveLeavesRequest) */ {
 public:
  inline getNumPassiveLeavesRequest() : getNumPassiveLeavesRequest(nullptr) {}
  ~getNumPassiveLeavesRequest() override;
  explicit PROTOBUF_CONSTEXPR getNumPassiveLeavesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNumPassiveLeavesRequest(const getNumPassiveLeavesRequest& from);
  getNumPassiveLeavesRequest(getNumPassiveLeavesRequest&& from) noexcept
    : getNumPassiveLeavesRequest() {
    *this = ::std::move(from);
  }

  inline getNumPassiveLeavesRequest& operator=(const getNumPassiveLeavesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNumPassiveLeavesRequest& operator=(getNumPassiveLeavesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNumPassiveLeavesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNumPassiveLeavesRequest* internal_default_instance() {
    return reinterpret_cast<const getNumPassiveLeavesRequest*>(
               &_getNumPassiveLeavesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(getNumPassiveLeavesRequest& a, getNumPassiveLeavesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getNumPassiveLeavesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNumPassiveLeavesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getNumPassiveLeavesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getNumPassiveLeavesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNumPassiveLeavesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNumPassiveLeavesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNumPassiveLeavesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.getNumPassiveLeavesRequest";
  }
  protected:
  explicit getNumPassiveLeavesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.getNumPassiveLeavesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// -------------------------------------------------------------------

class getNumPassiveLeavesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRegression.getNumPassiveLeavesResponse) */ {
 public:
  inline getNumPassiveLeavesResponse() : getNumPassiveLeavesResponse(nullptr) {}
  ~getNumPassiveLeavesResponse() override;
  explicit PROTOBUF_CONSTEXPR getNumPassiveLeavesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNumPassiveLeavesResponse(const getNumPassiveLeavesResponse& from);
  getNumPassiveLeavesResponse(getNumPassiveLeavesResponse&& from) noexcept
    : getNumPassiveLeavesResponse() {
    *this = ::std::move(from);
  }

  inline getNumPassiveLeavesResponse& operator=(const getNumPassiveLeavesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNumPassiveLeavesResponse& operator=(getNumPassiveLeavesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNumPassiveLeavesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNumPassiveLeavesResponse* internal_default_instance() {
    return reinterpret_cast<const getNumPassiveLeavesResponse*>(
               &_getNumPassiveLeavesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(getNumPassiveLeavesResponse& a, getNumPassiveLeavesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getNumPassiveLeavesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNumPassiveLeavesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getNumPassiveLeavesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getNumPassiveLeavesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNumPassiveLeavesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNumPassiveLeavesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNumPassiveLeavesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRegression.getNumPassiveLeavesResponse";
  }
  protected:
  explicit getNumPassiveLeavesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRegression.getNumPassiveLeavesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRegressionService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setCameraParametersRequest

// bytes intrinsicParams = 1;
inline void setCameraParametersRequest::clear_intrinsicparams() {
  intrinsicparams_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::intrinsicparams() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.setCameraParametersRequest.intrinsicParams)
  return _internal_intrinsicparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParametersRequest::set_intrinsicparams(ArgT0&& arg0, ArgT... args) {
 
 intrinsicparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.setCameraParametersRequest.intrinsicParams)
}
inline std::string* setCameraParametersRequest::mutable_intrinsicparams() {
  std::string* _s = _internal_mutable_intrinsicparams();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.setCameraParametersRequest.intrinsicParams)
  return _s;
}
inline const std::string& setCameraParametersRequest::_internal_intrinsicparams() const {
  return intrinsicparams_.Get();
}
inline void setCameraParametersRequest::_internal_set_intrinsicparams(const std::string& value) {
  
  intrinsicparams_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::_internal_mutable_intrinsicparams() {
  
  return intrinsicparams_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::release_intrinsicparams() {
  // @@protoc_insertion_point(field_release:grpcIRegression.setCameraParametersRequest.intrinsicParams)
  return intrinsicparams_.Release();
}
inline void setCameraParametersRequest::set_allocated_intrinsicparams(std::string* intrinsicparams) {
  if (intrinsicparams != nullptr) {
    
  } else {
    
  }
  intrinsicparams_.SetAllocated(intrinsicparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (intrinsicparams_.IsDefault()) {
    intrinsicparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.setCameraParametersRequest.intrinsicParams)
}

// bytes distorsionParams = 2;
inline void setCameraParametersRequest::clear_distorsionparams() {
  distorsionparams_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::distorsionparams() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.setCameraParametersRequest.distorsionParams)
  return _internal_distorsionparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParametersRequest::set_distorsionparams(ArgT0&& arg0, ArgT... args) {
 
 distorsionparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.setCameraParametersRequest.distorsionParams)
}
inline std::string* setCameraParametersRequest::mutable_distorsionparams() {
  std::string* _s = _internal_mutable_distorsionparams();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.setCameraParametersRequest.distorsionParams)
  return _s;
}
inline const std::string& setCameraParametersRequest::_internal_distorsionparams() const {
  return distorsionparams_.Get();
}
inline void setCameraParametersRequest::_internal_set_distorsionparams(const std::string& value) {
  
  distorsionparams_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::_internal_mutable_distorsionparams() {
  
  return distorsionparams_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::release_distorsionparams() {
  // @@protoc_insertion_point(field_release:grpcIRegression.setCameraParametersRequest.distorsionParams)
  return distorsionparams_.Release();
}
inline void setCameraParametersRequest::set_allocated_distorsionparams(std::string* distorsionparams) {
  if (distorsionparams != nullptr) {
    
  } else {
    
  }
  distorsionparams_.SetAllocated(distorsionparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (distorsionparams_.IsDefault()) {
    distorsionparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.setCameraParametersRequest.distorsionParams)
}

// -------------------------------------------------------------------

// addRequest

// int32 grpcServerCompressionFormat = 1;
inline void addRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t addRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t addRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.addRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void addRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void addRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.addRequest.grpcServerCompressionFormat)
}

// bytes descriptors = 2;
inline void addRequest::clear_descriptors() {
  descriptors_.ClearToEmpty();
}
inline const std::string& addRequest::descriptors() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.addRequest.descriptors)
  return _internal_descriptors();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addRequest::set_descriptors(ArgT0&& arg0, ArgT... args) {
 
 descriptors_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.addRequest.descriptors)
}
inline std::string* addRequest::mutable_descriptors() {
  std::string* _s = _internal_mutable_descriptors();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.addRequest.descriptors)
  return _s;
}
inline const std::string& addRequest::_internal_descriptors() const {
  return descriptors_.Get();
}
inline void addRequest::_internal_set_descriptors(const std::string& value) {
  
  descriptors_.Set(value, GetArenaForAllocation());
}
inline std::string* addRequest::_internal_mutable_descriptors() {
  
  return descriptors_.Mutable(GetArenaForAllocation());
}
inline std::string* addRequest::release_descriptors() {
  // @@protoc_insertion_point(field_release:grpcIRegression.addRequest.descriptors)
  return descriptors_.Release();
}
inline void addRequest::set_allocated_descriptors(std::string* descriptors) {
  if (descriptors != nullptr) {
    
  } else {
    
  }
  descriptors_.SetAllocated(descriptors, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (descriptors_.IsDefault()) {
    descriptors_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.addRequest.descriptors)
}

// bytes points3D = 3;
inline void addRequest::clear_points3d() {
  points3d_.ClearToEmpty();
}
inline const std::string& addRequest::points3d() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.addRequest.points3D)
  return _internal_points3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addRequest::set_points3d(ArgT0&& arg0, ArgT... args) {
 
 points3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.addRequest.points3D)
}
inline std::string* addRequest::mutable_points3d() {
  std::string* _s = _internal_mutable_points3d();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.addRequest.points3D)
  return _s;
}
inline const std::string& addRequest::_internal_points3d() const {
  return points3d_.Get();
}
inline void addRequest::_internal_set_points3d(const std::string& value) {
  
  points3d_.Set(value, GetArenaForAllocation());
}
inline std::string* addRequest::_internal_mutable_points3d() {
  
  return points3d_.Mutable(GetArenaForAllocation());
}
inline std::string* addRequest::release_points3d() {
  // @@protoc_insertion_point(field_release:grpcIRegression.addRequest.points3D)
  return points3d_.Release();
}
inline void addRequest::set_allocated_points3d(std::string* points3d) {
  if (points3d != nullptr) {
    
  } else {
    
  }
  points3d_.SetAllocated(points3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points3d_.IsDefault()) {
    points3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.addRequest.points3D)
}

// -------------------------------------------------------------------

// addResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void addResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t addResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t addResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.addResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.addResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// regressRequest

// int32 grpcServerCompressionFormat = 1;
inline void regressRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t regressRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t regressRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.regressRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void regressRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void regressRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.regressRequest.grpcServerCompressionFormat)
}

// bytes frame = 2;
inline void regressRequest::clear_frame() {
  frame_.ClearToEmpty();
}
inline const std::string& regressRequest::frame() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.regressRequest.frame)
  return _internal_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void regressRequest::set_frame(ArgT0&& arg0, ArgT... args) {
 
 frame_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.regressRequest.frame)
}
inline std::string* regressRequest::mutable_frame() {
  std::string* _s = _internal_mutable_frame();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.regressRequest.frame)
  return _s;
}
inline const std::string& regressRequest::_internal_frame() const {
  return frame_.Get();
}
inline void regressRequest::_internal_set_frame(const std::string& value) {
  
  frame_.Set(value, GetArenaForAllocation());
}
inline std::string* regressRequest::_internal_mutable_frame() {
  
  return frame_.Mutable(GetArenaForAllocation());
}
inline std::string* regressRequest::release_frame() {
  // @@protoc_insertion_point(field_release:grpcIRegression.regressRequest.frame)
  return frame_.Release();
}
inline void regressRequest::set_allocated_frame(std::string* frame) {
  if (frame != nullptr) {
    
  } else {
    
  }
  frame_.SetAllocated(frame, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_.IsDefault()) {
    frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.regressRequest.frame)
}

// bytes points2D = 3;
inline void regressRequest::clear_points2d() {
  points2d_.ClearToEmpty();
}
inline const std::string& regressRequest::points2d() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.regressRequest.points2D)
  return _internal_points2d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void regressRequest::set_points2d(ArgT0&& arg0, ArgT... args) {
 
 points2d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.regressRequest.points2D)
}
inline std::string* regressRequest::mutable_points2d() {
  std::string* _s = _internal_mutable_points2d();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.regressRequest.points2D)
  return _s;
}
inline const std::string& regressRequest::_internal_points2d() const {
  return points2d_.Get();
}
inline void regressRequest::_internal_set_points2d(const std::string& value) {
  
  points2d_.Set(value, GetArenaForAllocation());
}
inline std::string* regressRequest::_internal_mutable_points2d() {
  
  return points2d_.Mutable(GetArenaForAllocation());
}
inline std::string* regressRequest::release_points2d() {
  // @@protoc_insertion_point(field_release:grpcIRegression.regressRequest.points2D)
  return points2d_.Release();
}
inline void regressRequest::set_allocated_points2d(std::string* points2d) {
  if (points2d != nullptr) {
    
  } else {
    
  }
  points2d_.SetAllocated(points2d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points2d_.IsDefault()) {
    points2d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.regressRequest.points2D)
}

// bytes points3D = 4;
inline void regressRequest::clear_points3d() {
  points3d_.ClearToEmpty();
}
inline const std::string& regressRequest::points3d() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.regressRequest.points3D)
  return _internal_points3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void regressRequest::set_points3d(ArgT0&& arg0, ArgT... args) {
 
 points3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.regressRequest.points3D)
}
inline std::string* regressRequest::mutable_points3d() {
  std::string* _s = _internal_mutable_points3d();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.regressRequest.points3D)
  return _s;
}
inline const std::string& regressRequest::_internal_points3d() const {
  return points3d_.Get();
}
inline void regressRequest::_internal_set_points3d(const std::string& value) {
  
  points3d_.Set(value, GetArenaForAllocation());
}
inline std::string* regressRequest::_internal_mutable_points3d() {
  
  return points3d_.Mutable(GetArenaForAllocation());
}
inline std::string* regressRequest::release_points3d() {
  // @@protoc_insertion_point(field_release:grpcIRegression.regressRequest.points3D)
  return points3d_.Release();
}
inline void regressRequest::set_allocated_points3d(std::string* points3d) {
  if (points3d != nullptr) {
    
  } else {
    
  }
  points3d_.SetAllocated(points3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points3d_.IsDefault()) {
    points3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.regressRequest.points3D)
}

// -------------------------------------------------------------------

// regressResponse

// bytes points2D = 1;
inline void regressResponse::clear_points2d() {
  points2d_.ClearToEmpty();
}
inline const std::string& regressResponse::points2d() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.regressResponse.points2D)
  return _internal_points2d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void regressResponse::set_points2d(ArgT0&& arg0, ArgT... args) {
 
 points2d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.regressResponse.points2D)
}
inline std::string* regressResponse::mutable_points2d() {
  std::string* _s = _internal_mutable_points2d();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.regressResponse.points2D)
  return _s;
}
inline const std::string& regressResponse::_internal_points2d() const {
  return points2d_.Get();
}
inline void regressResponse::_internal_set_points2d(const std::string& value) {
  
  points2d_.Set(value, GetArenaForAllocation());
}
inline std::string* regressResponse::_internal_mutable_points2d() {
  
  return points2d_.Mutable(GetArenaForAllocation());
}
inline std::string* regressResponse::release_points2d() {
  // @@protoc_insertion_point(field_release:grpcIRegression.regressResponse.points2D)
  return points2d_.Release();
}
inline void regressResponse::set_allocated_points2d(std::string* points2d) {
  if (points2d != nullptr) {
    
  } else {
    
  }
  points2d_.SetAllocated(points2d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points2d_.IsDefault()) {
    points2d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.regressResponse.points2D)
}

// bytes points3D = 2;
inline void regressResponse::clear_points3d() {
  points3d_.ClearToEmpty();
}
inline const std::string& regressResponse::points3d() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.regressResponse.points3D)
  return _internal_points3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void regressResponse::set_points3d(ArgT0&& arg0, ArgT... args) {
 
 points3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.regressResponse.points3D)
}
inline std::string* regressResponse::mutable_points3d() {
  std::string* _s = _internal_mutable_points3d();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.regressResponse.points3D)
  return _s;
}
inline const std::string& regressResponse::_internal_points3d() const {
  return points3d_.Get();
}
inline void regressResponse::_internal_set_points3d(const std::string& value) {
  
  points3d_.Set(value, GetArenaForAllocation());
}
inline std::string* regressResponse::_internal_mutable_points3d() {
  
  return points3d_.Mutable(GetArenaForAllocation());
}
inline std::string* regressResponse::release_points3d() {
  // @@protoc_insertion_point(field_release:grpcIRegression.regressResponse.points3D)
  return points3d_.Release();
}
inline void regressResponse::set_allocated_points3d(std::string* points3d) {
  if (points3d != nullptr) {
    
  } else {
    
  }
  points3d_.SetAllocated(points3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points3d_.IsDefault()) {
    points3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.regressResponse.points3D)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void regressResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t regressResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t regressResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.regressResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void regressResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void regressResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.regressResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// updateRequest

// int32 grpcServerCompressionFormat = 1;
inline void updateRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t updateRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t updateRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.updateRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void updateRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void updateRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.updateRequest.grpcServerCompressionFormat)
}

// bytes inliers = 2;
inline void updateRequest::clear_inliers() {
  inliers_.ClearToEmpty();
}
inline const std::string& updateRequest::inliers() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.updateRequest.inliers)
  return _internal_inliers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void updateRequest::set_inliers(ArgT0&& arg0, ArgT... args) {
 
 inliers_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.updateRequest.inliers)
}
inline std::string* updateRequest::mutable_inliers() {
  std::string* _s = _internal_mutable_inliers();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.updateRequest.inliers)
  return _s;
}
inline const std::string& updateRequest::_internal_inliers() const {
  return inliers_.Get();
}
inline void updateRequest::_internal_set_inliers(const std::string& value) {
  
  inliers_.Set(value, GetArenaForAllocation());
}
inline std::string* updateRequest::_internal_mutable_inliers() {
  
  return inliers_.Mutable(GetArenaForAllocation());
}
inline std::string* updateRequest::release_inliers() {
  // @@protoc_insertion_point(field_release:grpcIRegression.updateRequest.inliers)
  return inliers_.Release();
}
inline void updateRequest::set_allocated_inliers(std::string* inliers) {
  if (inliers != nullptr) {
    
  } else {
    
  }
  inliers_.SetAllocated(inliers, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inliers_.IsDefault()) {
    inliers_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.updateRequest.inliers)
}

// bytes cameraPose = 3;
inline void updateRequest::clear_camerapose() {
  camerapose_.ClearToEmpty();
}
inline const std::string& updateRequest::camerapose() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.updateRequest.cameraPose)
  return _internal_camerapose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void updateRequest::set_camerapose(ArgT0&& arg0, ArgT... args) {
 
 camerapose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.updateRequest.cameraPose)
}
inline std::string* updateRequest::mutable_camerapose() {
  std::string* _s = _internal_mutable_camerapose();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.updateRequest.cameraPose)
  return _s;
}
inline const std::string& updateRequest::_internal_camerapose() const {
  return camerapose_.Get();
}
inline void updateRequest::_internal_set_camerapose(const std::string& value) {
  
  camerapose_.Set(value, GetArenaForAllocation());
}
inline std::string* updateRequest::_internal_mutable_camerapose() {
  
  return camerapose_.Mutable(GetArenaForAllocation());
}
inline std::string* updateRequest::release_camerapose() {
  // @@protoc_insertion_point(field_release:grpcIRegression.updateRequest.cameraPose)
  return camerapose_.Release();
}
inline void updateRequest::set_allocated_camerapose(std::string* camerapose) {
  if (camerapose != nullptr) {
    
  } else {
    
  }
  camerapose_.SetAllocated(camerapose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camerapose_.IsDefault()) {
    camerapose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.updateRequest.cameraPose)
}

// -------------------------------------------------------------------

// updateResponse

// bytes inliers = 1;
inline void updateResponse::clear_inliers() {
  inliers_.ClearToEmpty();
}
inline const std::string& updateResponse::inliers() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.updateResponse.inliers)
  return _internal_inliers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void updateResponse::set_inliers(ArgT0&& arg0, ArgT... args) {
 
 inliers_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.updateResponse.inliers)
}
inline std::string* updateResponse::mutable_inliers() {
  std::string* _s = _internal_mutable_inliers();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.updateResponse.inliers)
  return _s;
}
inline const std::string& updateResponse::_internal_inliers() const {
  return inliers_.Get();
}
inline void updateResponse::_internal_set_inliers(const std::string& value) {
  
  inliers_.Set(value, GetArenaForAllocation());
}
inline std::string* updateResponse::_internal_mutable_inliers() {
  
  return inliers_.Mutable(GetArenaForAllocation());
}
inline std::string* updateResponse::release_inliers() {
  // @@protoc_insertion_point(field_release:grpcIRegression.updateResponse.inliers)
  return inliers_.Release();
}
inline void updateResponse::set_allocated_inliers(std::string* inliers) {
  if (inliers != nullptr) {
    
  } else {
    
  }
  inliers_.SetAllocated(inliers, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inliers_.IsDefault()) {
    inliers_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.updateResponse.inliers)
}

// bytes cameraPose = 2;
inline void updateResponse::clear_camerapose() {
  camerapose_.ClearToEmpty();
}
inline const std::string& updateResponse::camerapose() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.updateResponse.cameraPose)
  return _internal_camerapose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void updateResponse::set_camerapose(ArgT0&& arg0, ArgT... args) {
 
 camerapose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.updateResponse.cameraPose)
}
inline std::string* updateResponse::mutable_camerapose() {
  std::string* _s = _internal_mutable_camerapose();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.updateResponse.cameraPose)
  return _s;
}
inline const std::string& updateResponse::_internal_camerapose() const {
  return camerapose_.Get();
}
inline void updateResponse::_internal_set_camerapose(const std::string& value) {
  
  camerapose_.Set(value, GetArenaForAllocation());
}
inline std::string* updateResponse::_internal_mutable_camerapose() {
  
  return camerapose_.Mutable(GetArenaForAllocation());
}
inline std::string* updateResponse::release_camerapose() {
  // @@protoc_insertion_point(field_release:grpcIRegression.updateResponse.cameraPose)
  return camerapose_.Release();
}
inline void updateResponse::set_allocated_camerapose(std::string* camerapose) {
  if (camerapose != nullptr) {
    
  } else {
    
  }
  camerapose_.SetAllocated(camerapose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camerapose_.IsDefault()) {
    camerapose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.updateResponse.cameraPose)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void updateResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t updateResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t updateResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.updateResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void updateResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void updateResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.updateResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// loadModelRequest

// int32 grpcServerCompressionFormat = 1;
inline void loadModelRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t loadModelRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t loadModelRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.loadModelRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void loadModelRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void loadModelRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.loadModelRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// loadModelResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void loadModelResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t loadModelResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t loadModelResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.loadModelResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void loadModelResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void loadModelResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.loadModelResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getTrainingStatusRequest

// int32 grpcServerCompressionFormat = 1;
inline void getTrainingStatusRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t getTrainingStatusRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t getTrainingStatusRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.getTrainingStatusRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getTrainingStatusRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void getTrainingStatusRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.getTrainingStatusRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// getTrainingStatusResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getTrainingStatusResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getTrainingStatusResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.getTrainingStatusResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getTrainingStatusResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRegression.getTrainingStatusResponse.xpcfGrpcReturnValue)
}
inline std::string* getTrainingStatusResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRegression.getTrainingStatusResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getTrainingStatusResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getTrainingStatusResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* getTrainingStatusResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(GetArenaForAllocation());
}
inline std::string* getTrainingStatusResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRegression.getTrainingStatusResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release();
}
inline void getTrainingStatusResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(xpcfgrpcreturnvalue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xpcfgrpcreturnvalue_.IsDefault()) {
    xpcfgrpcreturnvalue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRegression.getTrainingStatusResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getNumActiveLeavesRequest

// int32 grpcServerCompressionFormat = 1;
inline void getNumActiveLeavesRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t getNumActiveLeavesRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t getNumActiveLeavesRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.getNumActiveLeavesRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getNumActiveLeavesRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void getNumActiveLeavesRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.getNumActiveLeavesRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// getNumActiveLeavesResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void getNumActiveLeavesResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getNumActiveLeavesResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t getNumActiveLeavesResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.getNumActiveLeavesResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getNumActiveLeavesResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getNumActiveLeavesResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.getNumActiveLeavesResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getNumPassiveLeavesRequest

// int32 grpcServerCompressionFormat = 1;
inline void getNumPassiveLeavesRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t getNumPassiveLeavesRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t getNumPassiveLeavesRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.getNumPassiveLeavesRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getNumPassiveLeavesRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void getNumPassiveLeavesRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.getNumPassiveLeavesRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// getNumPassiveLeavesResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void getNumPassiveLeavesResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getNumPassiveLeavesResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t getNumPassiveLeavesResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRegression.getNumPassiveLeavesResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getNumPassiveLeavesResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getNumPassiveLeavesResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRegression.getNumPassiveLeavesResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIRegression

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIRegressionService_2eproto
