// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcITrackableLoaderService.proto

#include "grpcITrackableLoaderService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpcITrackableLoader {
constexpr loadTrackableRequest::loadTrackableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trackable_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct loadTrackableRequestDefaultTypeInternal {
  constexpr loadTrackableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~loadTrackableRequestDefaultTypeInternal() {}
  union {
    loadTrackableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT loadTrackableRequestDefaultTypeInternal _loadTrackableRequest_default_instance_;
constexpr loadTrackableResponse::loadTrackableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trackable_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xpcfgrpcreturnvalue_(0){}
struct loadTrackableResponseDefaultTypeInternal {
  constexpr loadTrackableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~loadTrackableResponseDefaultTypeInternal() {}
  union {
    loadTrackableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT loadTrackableResponseDefaultTypeInternal _loadTrackableResponse_default_instance_;
}  // namespace grpcITrackableLoader
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpcITrackableLoaderService_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grpcITrackableLoaderService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpcITrackableLoaderService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grpcITrackableLoaderService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITrackableLoader::loadTrackableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcITrackableLoader::loadTrackableRequest, trackable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITrackableLoader::loadTrackableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcITrackableLoader::loadTrackableResponse, trackable_),
  PROTOBUF_FIELD_OFFSET(::grpcITrackableLoader::loadTrackableResponse, xpcfgrpcreturnvalue_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpcITrackableLoader::loadTrackableRequest)},
  { 6, -1, sizeof(::grpcITrackableLoader::loadTrackableResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcITrackableLoader::_loadTrackableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcITrackableLoader::_loadTrackableResponse_default_instance_),
};

const char descriptor_table_protodef_grpcITrackableLoaderService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!grpcITrackableLoaderService.proto\022\024grp"
  "cITrackableLoader\032\033google/protobuf/empty"
  ".proto\")\n\024loadTrackableRequest\022\021\n\ttracka"
  "ble\030\001 \001(\014\"G\n\025loadTrackableResponse\022\021\n\ttr"
  "ackable\030\001 \001(\014\022\033\n\023xpcfGrpcReturnValue\030\002 \001"
  "(\0212\211\001\n\033grpcITrackableLoaderService\022j\n\rlo"
  "adTrackable\022*.grpcITrackableLoader.loadT"
  "rackableRequest\032+.grpcITrackableLoader.l"
  "oadTrackableResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grpcITrackableLoaderService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpcITrackableLoaderService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcITrackableLoaderService_2eproto = {
  false, false, 350, descriptor_table_protodef_grpcITrackableLoaderService_2eproto, "grpcITrackableLoaderService.proto", 
  &descriptor_table_grpcITrackableLoaderService_2eproto_once, descriptor_table_grpcITrackableLoaderService_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_grpcITrackableLoaderService_2eproto::offsets,
  file_level_metadata_grpcITrackableLoaderService_2eproto, file_level_enum_descriptors_grpcITrackableLoaderService_2eproto, file_level_service_descriptors_grpcITrackableLoaderService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_grpcITrackableLoaderService_2eproto_getter() {
  return &descriptor_table_grpcITrackableLoaderService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_grpcITrackableLoaderService_2eproto(&descriptor_table_grpcITrackableLoaderService_2eproto);
namespace grpcITrackableLoader {

// ===================================================================

class loadTrackableRequest::_Internal {
 public:
};

loadTrackableRequest::loadTrackableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpcITrackableLoader.loadTrackableRequest)
}
loadTrackableRequest::loadTrackableRequest(const loadTrackableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trackable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trackable().empty()) {
    trackable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trackable(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:grpcITrackableLoader.loadTrackableRequest)
}

inline void loadTrackableRequest::SharedCtor() {
trackable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

loadTrackableRequest::~loadTrackableRequest() {
  // @@protoc_insertion_point(destructor:grpcITrackableLoader.loadTrackableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void loadTrackableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trackable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void loadTrackableRequest::ArenaDtor(void* object) {
  loadTrackableRequest* _this = reinterpret_cast< loadTrackableRequest* >(object);
  (void)_this;
}
void loadTrackableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void loadTrackableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void loadTrackableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITrackableLoader.loadTrackableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackable_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loadTrackableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes trackable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trackable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* loadTrackableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITrackableLoader.loadTrackableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trackable = 1;
  if (!this->_internal_trackable().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trackable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITrackableLoader.loadTrackableRequest)
  return target;
}

size_t loadTrackableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITrackableLoader.loadTrackableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trackable = 1;
  if (!this->_internal_trackable().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trackable());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData loadTrackableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    loadTrackableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*loadTrackableRequest::GetClassData() const { return &_class_data_; }

void loadTrackableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<loadTrackableRequest *>(to)->MergeFrom(
      static_cast<const loadTrackableRequest &>(from));
}


void loadTrackableRequest::MergeFrom(const loadTrackableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITrackableLoader.loadTrackableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trackable().empty()) {
    _internal_set_trackable(from._internal_trackable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void loadTrackableRequest::CopyFrom(const loadTrackableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITrackableLoader.loadTrackableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loadTrackableRequest::IsInitialized() const {
  return true;
}

void loadTrackableRequest::InternalSwap(loadTrackableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trackable_, GetArenaForAllocation(),
      &other->trackable_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata loadTrackableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpcITrackableLoaderService_2eproto_getter, &descriptor_table_grpcITrackableLoaderService_2eproto_once,
      file_level_metadata_grpcITrackableLoaderService_2eproto[0]);
}

// ===================================================================

class loadTrackableResponse::_Internal {
 public:
};

loadTrackableResponse::loadTrackableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpcITrackableLoader.loadTrackableResponse)
}
loadTrackableResponse::loadTrackableResponse(const loadTrackableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trackable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trackable().empty()) {
    trackable_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trackable(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcITrackableLoader.loadTrackableResponse)
}

inline void loadTrackableResponse::SharedCtor() {
trackable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
xpcfgrpcreturnvalue_ = 0;
}

loadTrackableResponse::~loadTrackableResponse() {
  // @@protoc_insertion_point(destructor:grpcITrackableLoader.loadTrackableResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void loadTrackableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trackable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void loadTrackableResponse::ArenaDtor(void* object) {
  loadTrackableResponse* _this = reinterpret_cast< loadTrackableResponse* >(object);
  (void)_this;
}
void loadTrackableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void loadTrackableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void loadTrackableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITrackableLoader.loadTrackableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackable_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loadTrackableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes trackable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trackable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* loadTrackableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITrackableLoader.loadTrackableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trackable = 1;
  if (!this->_internal_trackable().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trackable(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITrackableLoader.loadTrackableResponse)
  return target;
}

size_t loadTrackableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITrackableLoader.loadTrackableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trackable = 1;
  if (!this->_internal_trackable().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trackable());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData loadTrackableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    loadTrackableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*loadTrackableResponse::GetClassData() const { return &_class_data_; }

void loadTrackableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<loadTrackableResponse *>(to)->MergeFrom(
      static_cast<const loadTrackableResponse &>(from));
}


void loadTrackableResponse::MergeFrom(const loadTrackableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITrackableLoader.loadTrackableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trackable().empty()) {
    _internal_set_trackable(from._internal_trackable());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void loadTrackableResponse::CopyFrom(const loadTrackableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITrackableLoader.loadTrackableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loadTrackableResponse::IsInitialized() const {
  return true;
}

void loadTrackableResponse::InternalSwap(loadTrackableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &trackable_, GetArenaForAllocation(),
      &other->trackable_, other->GetArenaForAllocation()
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata loadTrackableResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpcITrackableLoaderService_2eproto_getter, &descriptor_table_grpcITrackableLoaderService_2eproto_once,
      file_level_metadata_grpcITrackableLoaderService_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcITrackableLoader
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcITrackableLoader::loadTrackableRequest* Arena::CreateMaybeMessage< ::grpcITrackableLoader::loadTrackableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITrackableLoader::loadTrackableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcITrackableLoader::loadTrackableResponse* Arena::CreateMaybeMessage< ::grpcITrackableLoader::loadTrackableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITrackableLoader::loadTrackableResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
