// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIDepthCameraService.proto

#include "grpcIDepthCameraService.pb.h"
#include "grpcIDepthCameraService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIDepthCamera {

static const char* grpcIDepthCameraService_method_names[] = {
  "/grpcIDepthCamera.grpcIDepthCameraService/start",
  "/grpcIDepthCamera.grpcIDepthCameraService/stop",
  "/grpcIDepthCamera.grpcIDepthCameraService/getNextDepthFrame",
  "/grpcIDepthCamera.grpcIDepthCameraService/getPointCloud",
  "/grpcIDepthCamera.grpcIDepthCameraService/setDepthResolution",
  "/grpcIDepthCamera.grpcIDepthCameraService/setIntrinsicDepthParameters",
  "/grpcIDepthCamera.grpcIDepthCameraService/setDistortionDepthParameters",
  "/grpcIDepthCamera.grpcIDepthCameraService/getDepthResolution",
  "/grpcIDepthCamera.grpcIDepthCameraService/getDepthMinDistance",
  "/grpcIDepthCamera.grpcIDepthCameraService/getIntrinsicsDepthParameters",
  "/grpcIDepthCamera.grpcIDepthCameraService/getDistortionDepthParameters",
};

std::unique_ptr< grpcIDepthCameraService::Stub> grpcIDepthCameraService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIDepthCameraService::Stub> stub(new grpcIDepthCameraService::Stub(channel));
  return stub;
}

grpcIDepthCameraService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_start_(grpcIDepthCameraService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcIDepthCameraService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNextDepthFrame_(grpcIDepthCameraService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPointCloud_(grpcIDepthCameraService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDepthResolution_(grpcIDepthCameraService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setIntrinsicDepthParameters_(grpcIDepthCameraService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDistortionDepthParameters_(grpcIDepthCameraService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDepthResolution_(grpcIDepthCameraService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDepthMinDistance_(grpcIDepthCameraService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getIntrinsicsDepthParameters_(grpcIDepthCameraService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDistortionDepthParameters_(grpcIDepthCameraService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIDepthCameraService::Stub::start(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::startResponse>* grpcIDepthCameraService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::startResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::startResponse>* grpcIDepthCameraService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIDepthCameraService::Stub::stop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::stopResponse>* grpcIDepthCameraService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::stopResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::stopResponse>* grpcIDepthCameraService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIDepthCameraService::Stub::getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpcIDepthCamera::getNextDepthFrameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIDepthCamera::getNextDepthFrameRequest, ::grpcIDepthCamera::getNextDepthFrameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNextDepthFrame_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIDepthCamera::getNextDepthFrameRequest, ::grpcIDepthCamera::getNextDepthFrameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNextDepthFrame_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNextDepthFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getNextDepthFrameResponse>* grpcIDepthCameraService::Stub::PrepareAsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::getNextDepthFrameResponse, ::grpcIDepthCamera::getNextDepthFrameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNextDepthFrame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getNextDepthFrameResponse>* grpcIDepthCameraService::Stub::AsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNextDepthFrameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIDepthCameraService::Stub::getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpcIDepthCamera::getPointCloudResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIDepthCamera::getPointCloudRequest, ::grpcIDepthCamera::getPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPointCloud_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIDepthCamera::getPointCloudRequest, ::grpcIDepthCamera::getPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPointCloud_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::getPointCloud(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPointCloud_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getPointCloudResponse>* grpcIDepthCameraService::Stub::PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::getPointCloudResponse, ::grpcIDepthCamera::getPointCloudRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPointCloud_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getPointCloudResponse>* grpcIDepthCameraService::Stub::AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPointCloudRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIDepthCameraService::Stub::setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpcIDepthCamera::setDepthResolutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIDepthCamera::setDepthResolutionRequest, ::grpcIDepthCamera::setDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDepthResolution_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIDepthCamera::setDepthResolutionRequest, ::grpcIDepthCamera::setDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDepthResolution_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::setDepthResolution(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDepthResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDepthResolutionResponse>* grpcIDepthCameraService::Stub::PrepareAsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::setDepthResolutionResponse, ::grpcIDepthCamera::setDepthResolutionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDepthResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDepthResolutionResponse>* grpcIDepthCameraService::Stub::AsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDepthResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIDepthCameraService::Stub::setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIDepthCamera::setIntrinsicDepthParametersRequest, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setIntrinsicDepthParameters_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIDepthCamera::setIntrinsicDepthParametersRequest, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setIntrinsicDepthParameters_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setIntrinsicDepthParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>* grpcIDepthCameraService::Stub::PrepareAsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse, ::grpcIDepthCamera::setIntrinsicDepthParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setIntrinsicDepthParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setIntrinsicDepthParametersResponse>* grpcIDepthCameraService::Stub::AsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetIntrinsicDepthParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIDepthCameraService::Stub::setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIDepthCamera::setDistortionDepthParametersRequest, ::grpcIDepthCamera::setDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDistortionDepthParameters_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIDepthCamera::setDistortionDepthParametersRequest, ::grpcIDepthCamera::setDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDistortionDepthParameters_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDistortionDepthParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDistortionDepthParametersResponse>* grpcIDepthCameraService::Stub::PrepareAsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::setDistortionDepthParametersResponse, ::grpcIDepthCamera::setDistortionDepthParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDistortionDepthParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::setDistortionDepthParametersResponse>* grpcIDepthCameraService::Stub::AsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDistortionDepthParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIDepthCameraService::Stub::getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getDepthResolutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDepthResolution_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDepthResolution_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::getDepthResolution(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDepthResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthResolutionResponse>* grpcIDepthCameraService::Stub::PrepareAsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::getDepthResolutionResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDepthResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthResolutionResponse>* grpcIDepthCameraService::Stub::AsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDepthResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIDepthCameraService::Stub::getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthMinDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDepthMinDistance_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthMinDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDepthMinDistance_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::getDepthMinDistance(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDepthMinDistance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthMinDistanceResponse>* grpcIDepthCameraService::Stub::PrepareAsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::getDepthMinDistanceResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDepthMinDistance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDepthMinDistanceResponse>* grpcIDepthCameraService::Stub::AsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDepthMinDistanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIDepthCameraService::Stub::getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getIntrinsicsDepthParameters_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getIntrinsicsDepthParameters_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getIntrinsicsDepthParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>* grpcIDepthCameraService::Stub::PrepareAsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getIntrinsicsDepthParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse>* grpcIDepthCameraService::Stub::AsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetIntrinsicsDepthParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIDepthCameraService::Stub::getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::getDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDistortionDepthParameters_, context, request, response);
}

void grpcIDepthCameraService::Stub::experimental_async::getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIDepthCamera::getDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDistortionDepthParameters_, context, request, response, std::move(f));
}

void grpcIDepthCameraService::Stub::experimental_async::getDistortionDepthParameters(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDistortionDepthParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDistortionDepthParametersResponse>* grpcIDepthCameraService::Stub::PrepareAsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIDepthCamera::getDistortionDepthParametersResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDistortionDepthParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIDepthCamera::getDistortionDepthParametersResponse>* grpcIDepthCameraService::Stub::AsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDistortionDepthParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIDepthCameraService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::google::protobuf::Empty, ::grpcIDepthCamera::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIDepthCamera::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::google::protobuf::Empty, ::grpcIDepthCamera::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIDepthCamera::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::grpcIDepthCamera::getNextDepthFrameRequest, ::grpcIDepthCamera::getNextDepthFrameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIDepthCamera::getNextDepthFrameRequest* req,
             ::grpcIDepthCamera::getNextDepthFrameResponse* resp) {
               return service->getNextDepthFrame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::grpcIDepthCamera::getPointCloudRequest, ::grpcIDepthCamera::getPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIDepthCamera::getPointCloudRequest* req,
             ::grpcIDepthCamera::getPointCloudResponse* resp) {
               return service->getPointCloud(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::grpcIDepthCamera::setDepthResolutionRequest, ::grpcIDepthCamera::setDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIDepthCamera::setDepthResolutionRequest* req,
             ::grpcIDepthCamera::setDepthResolutionResponse* resp) {
               return service->setDepthResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::grpcIDepthCamera::setIntrinsicDepthParametersRequest, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* req,
             ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* resp) {
               return service->setIntrinsicDepthParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::grpcIDepthCamera::setDistortionDepthParametersRequest, ::grpcIDepthCamera::setDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIDepthCamera::setDistortionDepthParametersRequest* req,
             ::grpcIDepthCamera::setDistortionDepthParametersResponse* resp) {
               return service->setDistortionDepthParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIDepthCamera::getDepthResolutionResponse* resp) {
               return service->getDepthResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::google::protobuf::Empty, ::grpcIDepthCamera::getDepthMinDistanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIDepthCamera::getDepthMinDistanceResponse* resp) {
               return service->getDepthMinDistance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::google::protobuf::Empty, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* resp) {
               return service->getIntrinsicsDepthParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIDepthCameraService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIDepthCameraService::Service, ::google::protobuf::Empty, ::grpcIDepthCamera::getDistortionDepthParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIDepthCameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIDepthCamera::getDistortionDepthParametersResponse* resp) {
               return service->getDistortionDepthParameters(ctx, req, resp);
             }, this)));
}

grpcIDepthCameraService::Service::~Service() {
}

::grpc::Status grpcIDepthCameraService::Service::start(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIDepthCameraService::Service::stop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIDepthCameraService::Service::getNextDepthFrame(::grpc::ServerContext* context, const ::grpcIDepthCamera::getNextDepthFrameRequest* request, ::grpcIDepthCamera::getNextDepthFrameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIDepthCameraService::Service::getPointCloud(::grpc::ServerContext* context, const ::grpcIDepthCamera::getPointCloudRequest* request, ::grpcIDepthCamera::getPointCloudResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIDepthCameraService::Service::setDepthResolution(::grpc::ServerContext* context, const ::grpcIDepthCamera::setDepthResolutionRequest* request, ::grpcIDepthCamera::setDepthResolutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIDepthCameraService::Service::setIntrinsicDepthParameters(::grpc::ServerContext* context, const ::grpcIDepthCamera::setIntrinsicDepthParametersRequest* request, ::grpcIDepthCamera::setIntrinsicDepthParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIDepthCameraService::Service::setDistortionDepthParameters(::grpc::ServerContext* context, const ::grpcIDepthCamera::setDistortionDepthParametersRequest* request, ::grpcIDepthCamera::setDistortionDepthParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIDepthCameraService::Service::getDepthResolution(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthResolutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIDepthCameraService::Service::getDepthMinDistance(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDepthMinDistanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIDepthCameraService::Service::getIntrinsicsDepthParameters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getIntrinsicsDepthParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIDepthCameraService::Service::getDistortionDepthParameters(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIDepthCamera::getDistortionDepthParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIDepthCamera

