// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIContoursFilterService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIContoursFilterService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIContoursFilterService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIContoursFilterService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIContoursFilterService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIContoursFilterService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIContoursFilterService_2eproto_metadata_getter(int index);
namespace grpcIContoursFilter {
class filterRequest;
struct filterRequestDefaultTypeInternal;
extern filterRequestDefaultTypeInternal _filterRequest_default_instance_;
class filterResponse;
struct filterResponseDefaultTypeInternal;
extern filterResponseDefaultTypeInternal _filterResponse_default_instance_;
}  // namespace grpcIContoursFilter
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIContoursFilter::filterRequest* Arena::CreateMaybeMessage<::grpcIContoursFilter::filterRequest>(Arena*);
template<> ::grpcIContoursFilter::filterResponse* Arena::CreateMaybeMessage<::grpcIContoursFilter::filterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIContoursFilter {

// ===================================================================

class filterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIContoursFilter.filterRequest) */ {
 public:
  inline filterRequest() : filterRequest(nullptr) {}
  virtual ~filterRequest();
  explicit constexpr filterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  filterRequest(const filterRequest& from);
  filterRequest(filterRequest&& from) noexcept
    : filterRequest() {
    *this = ::std::move(from);
  }

  inline filterRequest& operator=(const filterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline filterRequest& operator=(filterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const filterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const filterRequest* internal_default_instance() {
    return reinterpret_cast<const filterRequest*>(
               &_filterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(filterRequest& a, filterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(filterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(filterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline filterRequest* New() const final {
    return CreateMaybeMessage<filterRequest>(nullptr);
  }

  filterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<filterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const filterRequest& from);
  void MergeFrom(const filterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(filterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIContoursFilter.filterRequest";
  }
  protected:
  explicit filterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIContoursFilterService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInContoursFieldNumber = 1,
    kOutContoursFieldNumber = 2,
  };
  // bytes inContours = 1;
  void clear_incontours();
  const std::string& incontours() const;
  void set_incontours(const std::string& value);
  void set_incontours(std::string&& value);
  void set_incontours(const char* value);
  void set_incontours(const void* value, size_t size);
  std::string* mutable_incontours();
  std::string* release_incontours();
  void set_allocated_incontours(std::string* incontours);
  private:
  const std::string& _internal_incontours() const;
  void _internal_set_incontours(const std::string& value);
  std::string* _internal_mutable_incontours();
  public:

  // bytes outContours = 2;
  void clear_outcontours();
  const std::string& outcontours() const;
  void set_outcontours(const std::string& value);
  void set_outcontours(std::string&& value);
  void set_outcontours(const char* value);
  void set_outcontours(const void* value, size_t size);
  std::string* mutable_outcontours();
  std::string* release_outcontours();
  void set_allocated_outcontours(std::string* outcontours);
  private:
  const std::string& _internal_outcontours() const;
  void _internal_set_outcontours(const std::string& value);
  std::string* _internal_mutable_outcontours();
  public:

  // @@protoc_insertion_point(class_scope:grpcIContoursFilter.filterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr incontours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outcontours_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIContoursFilterService_2eproto;
};
// -------------------------------------------------------------------

class filterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIContoursFilter.filterResponse) */ {
 public:
  inline filterResponse() : filterResponse(nullptr) {}
  virtual ~filterResponse();
  explicit constexpr filterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  filterResponse(const filterResponse& from);
  filterResponse(filterResponse&& from) noexcept
    : filterResponse() {
    *this = ::std::move(from);
  }

  inline filterResponse& operator=(const filterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline filterResponse& operator=(filterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const filterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const filterResponse* internal_default_instance() {
    return reinterpret_cast<const filterResponse*>(
               &_filterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(filterResponse& a, filterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(filterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(filterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline filterResponse* New() const final {
    return CreateMaybeMessage<filterResponse>(nullptr);
  }

  filterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<filterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const filterResponse& from);
  void MergeFrom(const filterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(filterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIContoursFilter.filterResponse";
  }
  protected:
  explicit filterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIContoursFilterService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutContoursFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes outContours = 1;
  void clear_outcontours();
  const std::string& outcontours() const;
  void set_outcontours(const std::string& value);
  void set_outcontours(std::string&& value);
  void set_outcontours(const char* value);
  void set_outcontours(const void* value, size_t size);
  std::string* mutable_outcontours();
  std::string* release_outcontours();
  void set_allocated_outcontours(std::string* outcontours);
  private:
  const std::string& _internal_outcontours() const;
  void _internal_set_outcontours(const std::string& value);
  std::string* _internal_mutable_outcontours();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIContoursFilter.filterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outcontours_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIContoursFilterService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// filterRequest

// bytes inContours = 1;
inline void filterRequest::clear_incontours() {
  incontours_.ClearToEmpty();
}
inline const std::string& filterRequest::incontours() const {
  // @@protoc_insertion_point(field_get:grpcIContoursFilter.filterRequest.inContours)
  return _internal_incontours();
}
inline void filterRequest::set_incontours(const std::string& value) {
  _internal_set_incontours(value);
  // @@protoc_insertion_point(field_set:grpcIContoursFilter.filterRequest.inContours)
}
inline std::string* filterRequest::mutable_incontours() {
  // @@protoc_insertion_point(field_mutable:grpcIContoursFilter.filterRequest.inContours)
  return _internal_mutable_incontours();
}
inline const std::string& filterRequest::_internal_incontours() const {
  return incontours_.Get();
}
inline void filterRequest::_internal_set_incontours(const std::string& value) {
  
  incontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void filterRequest::set_incontours(std::string&& value) {
  
  incontours_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIContoursFilter.filterRequest.inContours)
}
inline void filterRequest::set_incontours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  incontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIContoursFilter.filterRequest.inContours)
}
inline void filterRequest::set_incontours(const void* value,
    size_t size) {
  
  incontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIContoursFilter.filterRequest.inContours)
}
inline std::string* filterRequest::_internal_mutable_incontours() {
  
  return incontours_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* filterRequest::release_incontours() {
  // @@protoc_insertion_point(field_release:grpcIContoursFilter.filterRequest.inContours)
  return incontours_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void filterRequest::set_allocated_incontours(std::string* incontours) {
  if (incontours != nullptr) {
    
  } else {
    
  }
  incontours_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), incontours,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIContoursFilter.filterRequest.inContours)
}

// bytes outContours = 2;
inline void filterRequest::clear_outcontours() {
  outcontours_.ClearToEmpty();
}
inline const std::string& filterRequest::outcontours() const {
  // @@protoc_insertion_point(field_get:grpcIContoursFilter.filterRequest.outContours)
  return _internal_outcontours();
}
inline void filterRequest::set_outcontours(const std::string& value) {
  _internal_set_outcontours(value);
  // @@protoc_insertion_point(field_set:grpcIContoursFilter.filterRequest.outContours)
}
inline std::string* filterRequest::mutable_outcontours() {
  // @@protoc_insertion_point(field_mutable:grpcIContoursFilter.filterRequest.outContours)
  return _internal_mutable_outcontours();
}
inline const std::string& filterRequest::_internal_outcontours() const {
  return outcontours_.Get();
}
inline void filterRequest::_internal_set_outcontours(const std::string& value) {
  
  outcontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void filterRequest::set_outcontours(std::string&& value) {
  
  outcontours_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIContoursFilter.filterRequest.outContours)
}
inline void filterRequest::set_outcontours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outcontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIContoursFilter.filterRequest.outContours)
}
inline void filterRequest::set_outcontours(const void* value,
    size_t size) {
  
  outcontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIContoursFilter.filterRequest.outContours)
}
inline std::string* filterRequest::_internal_mutable_outcontours() {
  
  return outcontours_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* filterRequest::release_outcontours() {
  // @@protoc_insertion_point(field_release:grpcIContoursFilter.filterRequest.outContours)
  return outcontours_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void filterRequest::set_allocated_outcontours(std::string* outcontours) {
  if (outcontours != nullptr) {
    
  } else {
    
  }
  outcontours_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outcontours,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIContoursFilter.filterRequest.outContours)
}

// -------------------------------------------------------------------

// filterResponse

// bytes outContours = 1;
inline void filterResponse::clear_outcontours() {
  outcontours_.ClearToEmpty();
}
inline const std::string& filterResponse::outcontours() const {
  // @@protoc_insertion_point(field_get:grpcIContoursFilter.filterResponse.outContours)
  return _internal_outcontours();
}
inline void filterResponse::set_outcontours(const std::string& value) {
  _internal_set_outcontours(value);
  // @@protoc_insertion_point(field_set:grpcIContoursFilter.filterResponse.outContours)
}
inline std::string* filterResponse::mutable_outcontours() {
  // @@protoc_insertion_point(field_mutable:grpcIContoursFilter.filterResponse.outContours)
  return _internal_mutable_outcontours();
}
inline const std::string& filterResponse::_internal_outcontours() const {
  return outcontours_.Get();
}
inline void filterResponse::_internal_set_outcontours(const std::string& value) {
  
  outcontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void filterResponse::set_outcontours(std::string&& value) {
  
  outcontours_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIContoursFilter.filterResponse.outContours)
}
inline void filterResponse::set_outcontours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outcontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIContoursFilter.filterResponse.outContours)
}
inline void filterResponse::set_outcontours(const void* value,
    size_t size) {
  
  outcontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIContoursFilter.filterResponse.outContours)
}
inline std::string* filterResponse::_internal_mutable_outcontours() {
  
  return outcontours_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* filterResponse::release_outcontours() {
  // @@protoc_insertion_point(field_release:grpcIContoursFilter.filterResponse.outContours)
  return outcontours_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void filterResponse::set_allocated_outcontours(std::string* outcontours) {
  if (outcontours != nullptr) {
    
  } else {
    
  }
  outcontours_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outcontours,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIContoursFilter.filterResponse.outContours)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void filterResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 filterResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 filterResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIContoursFilter.filterResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void filterResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void filterResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIContoursFilter.filterResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIContoursFilter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIContoursFilterService_2eproto
