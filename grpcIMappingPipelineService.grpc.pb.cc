// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIMappingPipelineService.proto

#include "grpcIMappingPipelineService.pb.h"
#include "grpcIMappingPipelineService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIMappingPipeline {

static const char* grpcIMappingPipelineService_method_names[] = {
  "/grpcIMappingPipeline.grpcIMappingPipelineService/init",
  "/grpcIMappingPipeline.grpcIMappingPipelineService/start",
  "/grpcIMappingPipeline.grpcIMappingPipelineService/stop",
  "/grpcIMappingPipeline.grpcIMappingPipelineService/setCameraParameters",
  "/grpcIMappingPipeline.grpcIMappingPipelineService/mappingProcessRequest_grpc0",
  "/grpcIMappingPipeline.grpcIMappingPipelineService/mappingProcessRequest_grpc1",
  "/grpcIMappingPipeline.grpcIMappingPipelineService/mappingProcessRequest_grpc2",
  "/grpcIMappingPipeline.grpcIMappingPipelineService/getDataForVisualization",
};

std::unique_ptr< grpcIMappingPipelineService::Stub> grpcIMappingPipelineService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIMappingPipelineService::Stub> stub(new grpcIMappingPipelineService::Stub(channel));
  return stub;
}

grpcIMappingPipelineService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_init_(grpcIMappingPipelineService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_(grpcIMappingPipelineService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcIMappingPipelineService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setCameraParameters_(grpcIMappingPipelineService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_mappingProcessRequest_grpc0_(grpcIMappingPipelineService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_mappingProcessRequest_grpc1_(grpcIMappingPipelineService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_mappingProcessRequest_grpc2_(grpcIMappingPipelineService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDataForVisualization_(grpcIMappingPipelineService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIMappingPipelineService::Stub::init(::grpc::ClientContext* context, const ::grpcIMappingPipeline::initRequest& request, ::grpcIMappingPipeline::initResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMappingPipeline::initRequest, ::grpcIMappingPipeline::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_, context, request, response);
}

void grpcIMappingPipelineService::Stub::experimental_async::init(::grpc::ClientContext* context, const ::grpcIMappingPipeline::initRequest* request, ::grpcIMappingPipeline::initResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMappingPipeline::initRequest, ::grpcIMappingPipeline::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, std::move(f));
}

void grpcIMappingPipelineService::Stub::experimental_async::init(::grpc::ClientContext* context, const ::grpcIMappingPipeline::initRequest* request, ::grpcIMappingPipeline::initResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::initResponse>* grpcIMappingPipelineService::Stub::PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMappingPipeline::initResponse, ::grpcIMappingPipeline::initRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::initResponse>* grpcIMappingPipelineService::Stub::AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMappingPipelineService::Stub::start(::grpc::ClientContext* context, const ::grpcIMappingPipeline::startRequest& request, ::grpcIMappingPipeline::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMappingPipeline::startRequest, ::grpcIMappingPipeline::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcIMappingPipelineService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::grpcIMappingPipeline::startRequest* request, ::grpcIMappingPipeline::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMappingPipeline::startRequest, ::grpcIMappingPipeline::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcIMappingPipelineService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::grpcIMappingPipeline::startRequest* request, ::grpcIMappingPipeline::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::startResponse>* grpcIMappingPipelineService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMappingPipeline::startResponse, ::grpcIMappingPipeline::startRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::startResponse>* grpcIMappingPipelineService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMappingPipelineService::Stub::stop(::grpc::ClientContext* context, const ::grpcIMappingPipeline::stopRequest& request, ::grpcIMappingPipeline::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMappingPipeline::stopRequest, ::grpcIMappingPipeline::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcIMappingPipelineService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::grpcIMappingPipeline::stopRequest* request, ::grpcIMappingPipeline::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMappingPipeline::stopRequest, ::grpcIMappingPipeline::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcIMappingPipelineService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::grpcIMappingPipeline::stopRequest* request, ::grpcIMappingPipeline::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::stopResponse>* grpcIMappingPipelineService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMappingPipeline::stopResponse, ::grpcIMappingPipeline::stopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::stopResponse>* grpcIMappingPipelineService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMappingPipelineService::Stub::setCameraParameters(::grpc::ClientContext* context, const ::grpcIMappingPipeline::setCameraParametersRequest& request, ::grpcIMappingPipeline::setCameraParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMappingPipeline::setCameraParametersRequest, ::grpcIMappingPipeline::setCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setCameraParameters_, context, request, response);
}

void grpcIMappingPipelineService::Stub::experimental_async::setCameraParameters(::grpc::ClientContext* context, const ::grpcIMappingPipeline::setCameraParametersRequest* request, ::grpcIMappingPipeline::setCameraParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMappingPipeline::setCameraParametersRequest, ::grpcIMappingPipeline::setCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_, context, request, response, std::move(f));
}

void grpcIMappingPipelineService::Stub::experimental_async::setCameraParameters(::grpc::ClientContext* context, const ::grpcIMappingPipeline::setCameraParametersRequest* request, ::grpcIMappingPipeline::setCameraParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::setCameraParametersResponse>* grpcIMappingPipelineService::Stub::PrepareAsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMappingPipeline::setCameraParametersResponse, ::grpcIMappingPipeline::setCameraParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::setCameraParametersResponse>* grpcIMappingPipelineService::Stub::AsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMappingPipelineService::Stub::mappingProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request& request, ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request, ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_mappingProcessRequest_grpc0_, context, request, response);
}

void grpcIMappingPipelineService::Stub::experimental_async::mappingProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request* request, ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request, ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mappingProcessRequest_grpc0_, context, request, response, std::move(f));
}

void grpcIMappingPipelineService::Stub::experimental_async::mappingProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request* request, ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mappingProcessRequest_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response>* grpcIMappingPipelineService::Stub::PrepareAsyncmappingProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response, ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_mappingProcessRequest_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response>* grpcIMappingPipelineService::Stub::AsyncmappingProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmappingProcessRequest_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMappingPipelineService::Stub::mappingProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request& request, ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request, ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_mappingProcessRequest_grpc1_, context, request, response);
}

void grpcIMappingPipelineService::Stub::experimental_async::mappingProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request* request, ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request, ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mappingProcessRequest_grpc1_, context, request, response, std::move(f));
}

void grpcIMappingPipelineService::Stub::experimental_async::mappingProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request* request, ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mappingProcessRequest_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response>* grpcIMappingPipelineService::Stub::PrepareAsyncmappingProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response, ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_mappingProcessRequest_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response>* grpcIMappingPipelineService::Stub::AsyncmappingProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmappingProcessRequest_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMappingPipelineService::Stub::mappingProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request& request, ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request, ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_mappingProcessRequest_grpc2_, context, request, response);
}

void grpcIMappingPipelineService::Stub::experimental_async::mappingProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request* request, ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request, ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mappingProcessRequest_grpc2_, context, request, response, std::move(f));
}

void grpcIMappingPipelineService::Stub::experimental_async::mappingProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request* request, ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mappingProcessRequest_grpc2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response>* grpcIMappingPipelineService::Stub::PrepareAsyncmappingProcessRequest_grpc2Raw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response, ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_mappingProcessRequest_grpc2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response>* grpcIMappingPipelineService::Stub::AsyncmappingProcessRequest_grpc2Raw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmappingProcessRequest_grpc2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMappingPipelineService::Stub::getDataForVisualization(::grpc::ClientContext* context, const ::grpcIMappingPipeline::getDataForVisualizationRequest& request, ::grpcIMappingPipeline::getDataForVisualizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMappingPipeline::getDataForVisualizationRequest, ::grpcIMappingPipeline::getDataForVisualizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDataForVisualization_, context, request, response);
}

void grpcIMappingPipelineService::Stub::experimental_async::getDataForVisualization(::grpc::ClientContext* context, const ::grpcIMappingPipeline::getDataForVisualizationRequest* request, ::grpcIMappingPipeline::getDataForVisualizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMappingPipeline::getDataForVisualizationRequest, ::grpcIMappingPipeline::getDataForVisualizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDataForVisualization_, context, request, response, std::move(f));
}

void grpcIMappingPipelineService::Stub::experimental_async::getDataForVisualization(::grpc::ClientContext* context, const ::grpcIMappingPipeline::getDataForVisualizationRequest* request, ::grpcIMappingPipeline::getDataForVisualizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDataForVisualization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::getDataForVisualizationResponse>* grpcIMappingPipelineService::Stub::PrepareAsyncgetDataForVisualizationRaw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::getDataForVisualizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMappingPipeline::getDataForVisualizationResponse, ::grpcIMappingPipeline::getDataForVisualizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDataForVisualization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMappingPipeline::getDataForVisualizationResponse>* grpcIMappingPipelineService::Stub::AsyncgetDataForVisualizationRaw(::grpc::ClientContext* context, const ::grpcIMappingPipeline::getDataForVisualizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDataForVisualizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIMappingPipelineService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMappingPipelineService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMappingPipelineService::Service, ::grpcIMappingPipeline::initRequest, ::grpcIMappingPipeline::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMappingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMappingPipeline::initRequest* req,
             ::grpcIMappingPipeline::initResponse* resp) {
               return service->init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMappingPipelineService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMappingPipelineService::Service, ::grpcIMappingPipeline::startRequest, ::grpcIMappingPipeline::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMappingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMappingPipeline::startRequest* req,
             ::grpcIMappingPipeline::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMappingPipelineService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMappingPipelineService::Service, ::grpcIMappingPipeline::stopRequest, ::grpcIMappingPipeline::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMappingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMappingPipeline::stopRequest* req,
             ::grpcIMappingPipeline::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMappingPipelineService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMappingPipelineService::Service, ::grpcIMappingPipeline::setCameraParametersRequest, ::grpcIMappingPipeline::setCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMappingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMappingPipeline::setCameraParametersRequest* req,
             ::grpcIMappingPipeline::setCameraParametersResponse* resp) {
               return service->setCameraParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMappingPipelineService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMappingPipelineService::Service, ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request, ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMappingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request* req,
             ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response* resp) {
               return service->mappingProcessRequest_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMappingPipelineService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMappingPipelineService::Service, ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request, ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMappingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request* req,
             ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response* resp) {
               return service->mappingProcessRequest_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMappingPipelineService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMappingPipelineService::Service, ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request, ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMappingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request* req,
             ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response* resp) {
               return service->mappingProcessRequest_grpc2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMappingPipelineService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMappingPipelineService::Service, ::grpcIMappingPipeline::getDataForVisualizationRequest, ::grpcIMappingPipeline::getDataForVisualizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMappingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMappingPipeline::getDataForVisualizationRequest* req,
             ::grpcIMappingPipeline::getDataForVisualizationResponse* resp) {
               return service->getDataForVisualization(ctx, req, resp);
             }, this)));
}

grpcIMappingPipelineService::Service::~Service() {
}

::grpc::Status grpcIMappingPipelineService::Service::init(::grpc::ServerContext* context, const ::grpcIMappingPipeline::initRequest* request, ::grpcIMappingPipeline::initResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMappingPipelineService::Service::start(::grpc::ServerContext* context, const ::grpcIMappingPipeline::startRequest* request, ::grpcIMappingPipeline::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMappingPipelineService::Service::stop(::grpc::ServerContext* context, const ::grpcIMappingPipeline::stopRequest* request, ::grpcIMappingPipeline::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMappingPipelineService::Service::setCameraParameters(::grpc::ServerContext* context, const ::grpcIMappingPipeline::setCameraParametersRequest* request, ::grpcIMappingPipeline::setCameraParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMappingPipelineService::Service::mappingProcessRequest_grpc0(::grpc::ServerContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request* request, ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMappingPipelineService::Service::mappingProcessRequest_grpc1(::grpc::ServerContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request* request, ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMappingPipelineService::Service::mappingProcessRequest_grpc2(::grpc::ServerContext* context, const ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request* request, ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMappingPipelineService::Service::getDataForVisualization(::grpc::ServerContext* context, const ::grpcIMappingPipeline::getDataForVisualizationRequest* request, ::grpcIMappingPipeline::getDataForVisualizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIMappingPipeline

